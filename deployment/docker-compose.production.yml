version: '3.8'

# Production deployment with separate .env files per agent
# Usage: docker-compose -f docker-compose.production.yml up -d

services:
  # Agent Datum (Primary decision-making)
  agent-datum:
    build:
      context: ..
      dockerfile: docker/agent/Dockerfile
    container_name: ciris-agent-datum
    ports:
      - "8080:8080"
    env_file:
      - /opt/ciris/env/datum.env  # Agent-specific env file
    environment:
      # Override/addition to env file
      - CIRIS_AGENT_NAME=Datum
      - CIRIS_AGENT_ID=agent-datum
      - CIRIS_PORT=8080
      - API_HOST=0.0.0.0
      - API_PORT=8080
    volumes:
      - datum_data:/app/data
      - datum_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/system/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    command: ["python", "main.py", "--adapter", "api", "--adapter", "discord"]

  # Agent Sage (Wisdom and deep analysis)
  agent-sage:
    build:
      context: ..
      dockerfile: docker/agent/Dockerfile
    container_name: ciris-agent-sage
    ports:
      - "8081:8080"
    env_file:
      - /opt/ciris/env/sage.env  # Agent-specific env file
    environment:
      # Override/addition to env file
      - CIRIS_AGENT_NAME=Sage
      - CIRIS_AGENT_ID=agent-sage
      - CIRIS_PORT=8080
      - API_HOST=0.0.0.0
      - API_PORT=8080
    volumes:
      - sage_data:/app/data
      - sage_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/system/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    command: ["python", "main.py", "--adapter", "api", "--adapter", "discord"]

  # Agent Scout (Information gathering and reconnaissance)
  agent-scout:
    build:
      context: ..
      dockerfile: docker/agent/Dockerfile
    container_name: ciris-agent-scout
    ports:
      - "8082:8080"
    env_file:
      - /opt/ciris/env/scout.env  # Agent-specific env file
    environment:
      # Override/addition to env file
      - CIRIS_AGENT_NAME=Scout
      - CIRIS_AGENT_ID=agent-scout
      - CIRIS_PORT=8080
      - API_HOST=0.0.0.0
      - API_PORT=8080
    volumes:
      - scout_data:/app/data
      - scout_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/system/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    command: ["python", "main.py", "--adapter", "api", "--adapter", "discord"]

  # Agent Echo-Core (Core reasoning and consistency)
  agent-echo-core:
    build:
      context: ..
      dockerfile: docker/agent/Dockerfile
    container_name: ciris-agent-echo-core
    ports:
      - "8083:8080"
    env_file:
      - /opt/ciris/env/echo-core.env  # Agent-specific env file
    environment:
      # Override/addition to env file
      - CIRIS_AGENT_NAME=Echo-Core
      - CIRIS_AGENT_ID=agent-echo-core
      - CIRIS_PORT=8080
      - API_HOST=0.0.0.0
      - API_PORT=8080
    volumes:
      - echo_core_data:/app/data
      - echo_core_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/system/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    command: ["python", "main.py", "--adapter", "api", "--adapter", "discord"]

  # Agent Echo-Speculative (Speculative reasoning and possibilities)
  agent-echo-speculative:
    build:
      context: ..
      dockerfile: docker/agent/Dockerfile
    container_name: ciris-agent-echo-speculative
    ports:
      - "8084:8080"
    env_file:
      - /opt/ciris/env/echo-speculative.env  # Agent-specific env file
    environment:
      # Override/addition to env file
      - CIRIS_AGENT_NAME=Echo-Speculative
      - CIRIS_AGENT_ID=agent-echo-speculative
      - CIRIS_PORT=8080
      - API_HOST=0.0.0.0
      - API_PORT=8080
    volumes:
      - echo_speculative_data:/app/data
      - echo_speculative_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/system/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    command: ["python", "main.py", "--adapter", "api", "--adapter", "discord"]

  # GUI Application
  ciris-gui:
    build:
      context: ../CIRISGUI
      dockerfile: ../docker/gui/Dockerfile
    container_name: ciris-gui
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_CIRIS_API_URL=https://agents.ciris.ai
    restart: unless-stopped

volumes:
  datum_data:
  datum_logs:
  sage_data:
  sage_logs:
  scout_data:
  scout_logs:
  echo_core_data:
  echo_core_logs:
  echo_speculative_data:
  echo_speculative_logs: