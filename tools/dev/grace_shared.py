#!/usr/bin/env python3
"""
Shared Grace guidance for all Grace tools.

This module contains the main guidance philosophy and reminders
that should be displayed across all Grace commands.
"""


def get_main_guidance() -> str:
    """Get the main Grace guidance text."""
    return """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üåü GRACE GUIDANCE üåü                      ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë                                                              ‚ïë
‚ïë  Grace Philosophy:                                          ‚ïë
‚ïë  ‚Ä¢ Be strict about safety, gentle about style               ‚ïë
‚ïë  ‚Ä¢ Progress over perfection                                 ‚ïë
‚ïë  ‚Ä¢ Sustainable pace - work with natural rhythms             ‚ïë
‚ïë                                                              ‚ïë
‚ïë  Core Principles:                                           ‚ïë
‚ïë  ‚Ä¢ No Dicts, No Strings, No Kings                          ‚ïë
‚ïë  ‚Ä¢ The schema you need already exists - find it, use it    ‚ïë
‚ïë  ‚Ä¢ Every error is an insight into system behavior          ‚ïë
‚ïë  ‚Ä¢ Test failures are opportunities to strengthen           ‚ïë
‚ïë                                                              ‚ïë
‚ïë  Your Work Sessions:                                        ‚ïë
‚ïë  ‚Ä¢ Morning (7-10): Peak creative, architecture decisions   ‚ïë
‚ïë  ‚Ä¢ Midday (12-14): Reviews, fixes, completing morning work ‚ïë
‚ïë  ‚Ä¢ Evening (17-19): Mechanical tasks, tests, docs          ‚ïë
‚ïë  ‚Ä¢ Night (22-24): Optional deep work - listen to your body ‚ïë
‚ïë                                                              ‚ïë
‚ïë  Natural Transitions:                                       ‚ïë
‚ïë  ‚Ä¢ 10 AM: Break for kids/life                              ‚ïë
‚ïë  ‚Ä¢ 2 PM: Nap to restore                                    ‚ïë
‚ïë  ‚Ä¢ 7 PM: Family dinner/bath/bedtime                        ‚ïë
‚ïë  ‚Ä¢ 10 PM: Choice point - rest or code?                     ‚ïë
‚ïë                                                              ‚ïë
‚ïë  Remember: The code will be here tomorrow.                 ‚ïë
‚ïë  Your family won't always be this young.                    ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""


def get_schema_reminders() -> str:
    """Get reminders about commonly forgotten schemas."""
    return """
üìö SCHEMAS YOU CONSTANTLY FORGET EXIST:

‚Ä¢ AuditEventData     ‚Üí for ALL audit events (ciris_engine/schemas/services/graph/audit.py)
‚Ä¢ ServiceMetrics     ‚Üí for ALL metrics (ciris_engine/schemas/services/telemetry.py)
‚Ä¢ SystemSnapshot     ‚Üí for system state (ciris_engine/schemas/runtime/system_snapshot.py)
‚Ä¢ ProcessingQueueItem ‚Üí for queue items (ciris_engine/schemas/processors/base.py)
‚Ä¢ ChannelContext     ‚Üí for system channels (vs AdapterChannelContext for adapters)
‚Ä¢ ActionResponse     ‚Üí for handler responses (ciris_engine/schemas/processors/actions.py)
‚Ä¢ ThoughtSchema      ‚Üí for thoughts (ciris_engine/schemas/thought.py)
‚Ä¢ ServiceConfig      ‚Üí for service configuration (ciris_engine/schemas/config/service.py)

üîç HOW TO SEARCH FOR EXISTING SCHEMAS:
grep -r 'class.*YourThingHere' --include='*.py'

If it exists (and it does), USE IT. Don't create YourThingV2.
"""


def get_ci_reminders() -> str:
    """Get CI/CD specific reminders for Claude."""
    return """
üö´ CLAUDE'S BAD HABITS TO STOP:

1. Creating new Dict[str, Any] - A schema already exists. Always.
2. Creating NewSchemaV2 - The original schema is fine. Use it.
3. Checking CI every 30 seconds - CI takes 12-15 minutes. Be patient.
4. Making "temporary" helper classes - They're never temporary. Use existing.
5. Creating elaborate abstractions - Simple existing patterns work better.

‚è∞ CI TIMING RULES:
‚Ä¢ CI takes 12-15 minutes minimum
‚Ä¢ Check status every 10 minutes, not every 30 seconds
‚Ä¢ Use: python -m tools.grace_shepherd status
‚Ä¢ NOT: gh run watch (wasteful)

üéØ BEFORE CREATING ANY NEW TYPE:
1. Search first: grep -r 'class.*YourThingHere' --include='*.py'
2. If it exists (it does), USE IT
3. No exceptions, no "but this case is special"
"""


def get_debugging_guidance() -> str:
    """Get debugging best practices."""
    return """
üîç DEBUGGING GOLDEN RULES:

1. ALWAYS check incidents_latest.log FIRST:
   docker exec <container> tail -n 100 /app/logs/incidents_latest.log

2. NEVER restart container until everything is understood
   - Errors are insights, not failures
   - Each message reveals system behavior

3. Root Cause Analysis (RCA) Mode:
   ‚Ä¢ Preserve the crime scene - don't clean up immediately
   ‚Ä¢ Use debug_tools.py to explore
   ‚Ä¢ Trace the full flow before changes
   ‚Ä¢ Test incrementally with small steps
   ‚Ä¢ Question assumptions about the design

4. NEVER pipe output without understanding format:
   ‚ùå curl -s http://api | jq '.result'  # Hides errors!
   ‚úÖ response=$(curl -s http://api)      # See what you got
      echo "$response"                    # Then parse if valid

5. Mock LLM may not respond - this is BY DESIGN:
   ‚Ä¢ DEFER: Task deferred, no message
   ‚Ä¢ REJECT: Request rejected, no message
   ‚Ä¢ TASK_COMPLETE: Task done, no message
   ‚Ä¢ OBSERVE: Observation registered, no immediate message
"""


def format_with_guidance(
    message: str, include_schemas: bool = False, include_ci: bool = False, include_debug: bool = False
) -> str:
    """
    Format a message with appropriate Grace guidance.

    Args:
        message: The main message to display
        include_schemas: Whether to include schema reminders
        include_ci: Whether to include CI/CD reminders
        include_debug: Whether to include debugging guidance
    """
    output = [get_main_guidance(), "", message]

    if include_schemas:
        output.extend(["", get_schema_reminders()])

    if include_ci:
        output.extend(["", get_ci_reminders()])

    if include_debug:
        output.extend(["", get_debugging_guidance()])

    return "\n".join(output)
