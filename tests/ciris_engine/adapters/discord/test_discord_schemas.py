"""
Tests for Discord message schema validation and inheritance.
Extracted from test_discord_comprehensive.py to focus on schema validation logic.
"""

import pytest
from datetime import datetime, timezone

from ciris_engine.schemas.foundational_schemas_v1 import DiscordMessage, IncomingMessage


class TestDiscordMessageSchema:
    """Test Discord message schema validation and inheritance"""
    
    def test_discord_message_creation(self):
        """Test creating DiscordMessage with all fields"""
        message = DiscordMessage(
            message_id="123456789",
            author_id="user123",
            author_name="TestUser",
            content="Hello CIRIS!",
            destination_id="channel456",
            reference_message_id="ref789",
            timestamp=datetime.now(timezone.utc).isoformat(),
            is_bot=False
        )
        
        assert message.message_id == "123456789"
        assert message.author_id == "user123"
        assert message.author_name == "TestUser"
        assert message.content == "Hello CIRIS!"
        assert message.destination_id == "channel456"
        assert message.channel_id == "channel456"  # Backward compatibility
        assert message.reference_message_id == "ref789"
        assert message.is_bot == False
    
    def test_discord_message_inheritance(self):
        """Test DiscordMessage inherits from IncomingMessage"""
        message = DiscordMessage(
            message_id="123",
            author_id="user",
            author_name="Test",
            content="test"
        )
        
        assert isinstance(message, IncomingMessage)
        assert isinstance(message, DiscordMessage)
    
    def test_discord_message_bot_default(self):
        """Test DiscordMessage bot field defaults to False"""
        message = DiscordMessage(
            message_id="123",
            author_id="user",
            author_name="Test",
            content="test"
        )
        
        assert message.is_bot == False
    
    def test_discord_message_channel_id_alias(self):
        """Test channel_id property works as alias for destination_id"""
        message = DiscordMessage(
            message_id="123",
            author_id="user",
            author_name="Test",
            content="test",
            destination_id="channel123"
        )
        
        assert message.channel_id == "channel123"
        assert message.channel_id == message.destination_id
    
    def test_discord_message_with_channel_id_alias(self):
        """Test creating DiscordMessage using channel_id alias"""
        message = DiscordMessage(
            message_id="123",
            author_id="user",
            author_name="Test",
            content="test",
            channel_id="channel456"  # Using alias
        )
        
        assert message.destination_id == "channel456"
        assert message.channel_id == "channel456"
    
    def test_discord_message_minimal_creation(self):
        """Test creating DiscordMessage with minimal required fields"""
        message = DiscordMessage(
            message_id="123",
            author_id="user456",
            author_name="TestUser",
            content="Minimal message"
        )
        
        # Required fields should be set
        assert message.message_id == "123"
        assert message.author_id == "user456"
        assert message.author_name == "TestUser"
        assert message.content == "Minimal message"
        
        # Optional fields should have defaults
        assert message.is_bot == False
        assert message.reference_message_id is None
        assert message.destination_id is None
    
    def test_discord_message_timestamp_handling(self):
        """Test timestamp field handling"""
        # With explicit timestamp
        timestamp_str = "2023-12-01T10:00:00+00:00"
        message = DiscordMessage(
            message_id="123",
            author_id="user",
            author_name="Test",
            content="test",
            timestamp=timestamp_str
        )
        assert message.timestamp == timestamp_str
        
        # Without timestamp (should be None or auto-generated by schema)
        message_no_timestamp = DiscordMessage(
            message_id="124",
            author_id="user",
            author_name="Test",
            content="test"
        )
        # The schema might auto-generate timestamp or leave it None
        # Just verify the message is created successfully
        assert message_no_timestamp.message_id == "124"
    
    def test_discord_message_reference_handling(self):
        """Test reference message handling"""
        # With reference
        message_with_ref = DiscordMessage(
            message_id="123",
            author_id="user",
            author_name="Test",
            content="reply message",
            reference_message_id="original123"
        )
        assert message_with_ref.reference_message_id == "original123"
        
        # Without reference
        message_no_ref = DiscordMessage(
            message_id="124",
            author_id="user",
            author_name="Test",
            content="standalone message"
        )
        assert message_no_ref.reference_message_id is None
    
    def test_discord_message_bot_flag_variants(self):
        """Test bot flag with different values"""
        # Bot message
        bot_message = DiscordMessage(
            message_id="123",
            author_id="bot456",
            author_name="BotUser",
            content="bot message",
            is_bot=True
        )
        assert bot_message.is_bot == True
        
        # Human message (explicit False)
        human_message = DiscordMessage(
            message_id="124",
            author_id="user456",
            author_name="HumanUser",
            content="human message",
            is_bot=False
        )
        assert human_message.is_bot == False
        
        # Default (should be False)
        default_message = DiscordMessage(
            message_id="125",
            author_id="user789",
            author_name="DefaultUser",
            content="default message"
        )
        assert default_message.is_bot == False