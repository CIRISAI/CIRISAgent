version: '3.8'

services:
  # Agent Datum (Primary decision-making)
  agent-datum:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: ciris-agent-datum
    ports:
      - "8080:8080"
    environment:
      - CIRIS_AGENT_ID=datum
      - CIRIS_PORT=8080
      - CIRIS_ADAPTER=api
      - CIRIS_ADAPTER_DISCORD=discord
      - MOCK_LLM=false
      # LLM Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_API_BASE=${OPENAI_API_BASE}
      - OPENAI_MODEL_NAME=${OPENAI_MODEL_NAME}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      # Discord configuration
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}
      - DISCORD_SERVER_ID=${DISCORD_SERVER_ID}
      - DISCORD_CHANNEL_ID=${DISCORD_CHANNEL_ID}
      - DISCORD_DEFERRAL_CHANNEL_ID=${DISCORD_DEFERRAL_CHANNEL_ID}
      - WA_USER_IDS=${WA_USER_IDS}
    volumes:
      - datum_data:/app/data
      - datum_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/system/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    command: ["python", "main.py", "--adapter", "api", "--adapter", "discord"]

  # Agent Sage (Wisdom and deep analysis)
  agent-sage:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: ciris-agent-sage
    ports:
      - "8081:8080"
    environment:
      - CIRIS_AGENT_ID=sage
      - CIRIS_PORT=8080
      - CIRIS_ADAPTER=api
      - CIRIS_ADAPTER_DISCORD=discord
      - MOCK_LLM=false
      # LLM Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_API_BASE=${OPENAI_API_BASE}
      - OPENAI_MODEL_NAME=${OPENAI_MODEL_NAME}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      # Discord configuration
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}
      - DISCORD_SERVER_ID=${DISCORD_SERVER_ID}
      - DISCORD_CHANNEL_ID=${DISCORD_CHANNEL_ID}
      - DISCORD_DEFERRAL_CHANNEL_ID=${DISCORD_DEFERRAL_CHANNEL_ID}
      - WA_USER_IDS=${WA_USER_IDS}
    volumes:
      - sage_data:/app/data
      - sage_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/system/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    command: ["python", "main.py", "--adapter", "api", "--adapter", "discord"]

  # Agent Scout (Information gathering and reconnaissance)
  agent-scout:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: ciris-agent-scout
    ports:
      - "8082:8080"
    environment:
      - CIRIS_AGENT_ID=scout
      - CIRIS_PORT=8080
      - CIRIS_ADAPTER=api
      - CIRIS_ADAPTER_DISCORD=discord
      - MOCK_LLM=false
      # LLM Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_API_BASE=${OPENAI_API_BASE}
      - OPENAI_MODEL_NAME=${OPENAI_MODEL_NAME}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      # Discord configuration
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}
      - DISCORD_SERVER_ID=${DISCORD_SERVER_ID}
      - DISCORD_CHANNEL_ID=${DISCORD_CHANNEL_ID}
      - DISCORD_DEFERRAL_CHANNEL_ID=${DISCORD_DEFERRAL_CHANNEL_ID}
      - WA_USER_IDS=${WA_USER_IDS}
    volumes:
      - scout_data:/app/data
      - scout_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/system/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    command: ["python", "main.py", "--adapter", "api", "--adapter", "discord"]

  # Agent Echo-Core (Core reasoning and consistency)
  agent-echo-core:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: ciris-agent-echo-core
    ports:
      - "8083:8080"
    environment:
      - CIRIS_AGENT_ID=echo-core
      - CIRIS_PORT=8080
      - CIRIS_ADAPTER=api
      - CIRIS_ADAPTER_DISCORD=discord
      - MOCK_LLM=false
      # LLM Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_API_BASE=${OPENAI_API_BASE}
      - OPENAI_MODEL_NAME=${OPENAI_MODEL_NAME}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      # Discord configuration
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}
      - DISCORD_SERVER_ID=${DISCORD_SERVER_ID}
      - DISCORD_CHANNEL_ID=${DISCORD_CHANNEL_ID}
      - DISCORD_DEFERRAL_CHANNEL_ID=${DISCORD_DEFERRAL_CHANNEL_ID}
      - WA_USER_IDS=${WA_USER_IDS}
    volumes:
      - echo_core_data:/app/data
      - echo_core_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/system/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    command: ["python", "main.py", "--adapter", "api", "--adapter", "discord"]

  # Agent Echo-Speculative (Speculative reasoning and possibilities)
  agent-echo-speculative:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: ciris-agent-echo-speculative
    ports:
      - "8084:8080"
    environment:
      - CIRIS_AGENT_ID=echo-speculative
      - CIRIS_PORT=8080
      - CIRIS_ADAPTER=api
      - CIRIS_ADAPTER_DISCORD=discord
      - MOCK_LLM=false
      # LLM Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_API_BASE=${OPENAI_API_BASE}
      - OPENAI_MODEL_NAME=${OPENAI_MODEL_NAME}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      # Discord configuration
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}
      - DISCORD_SERVER_ID=${DISCORD_SERVER_ID}
      - DISCORD_CHANNEL_ID=${DISCORD_CHANNEL_ID}
      - DISCORD_DEFERRAL_CHANNEL_ID=${DISCORD_DEFERRAL_CHANNEL_ID}
      - WA_USER_IDS=${WA_USER_IDS}
    volumes:
      - echo_speculative_data:/app/data
      - echo_speculative_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/system/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    command: ["python", "main.py", "--adapter", "api", "--adapter", "discord"]

  # GUI Application
  ciris-gui:
    build:
      context: ../CIRISGUI
      dockerfile: Dockerfile
    container_name: ciris-gui
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_CIRIS_API_URL=https://agents.ciris.ai
    restart: unless-stopped

volumes:
  datum_data:
  datum_logs:
  sage_data:
  sage_logs:
  scout_data:
  scout_logs:
  echo_core_data:
  echo_core_logs:
  echo_speculative_data:
  echo_speculative_logs:
