name: Build and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  packages: write
  pull-requests: read

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Essential for accurate SonarQube results
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Clean Python Cache and Test Artifacts
        run: |
          find . -type d -name __pycache__ -exec rm -rf {} + || true
          find . -type f -name "*.pyc" -delete || true
          find . -type f -name "*.pyo" -delete || true
          rm -rf .pytest_cache || true
          rm -f test_*.db || true
          rm -f ciris_engine.db || true
          rm -rf data/*.db || true

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install typing_extensions>=4.0.0
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests and coverage
        env:
          CI: true
        run: |
          pytest --cov=./ --cov-report=xml:coverage.xml

      - name: Display and write version
        env:
          CIRIS_BUILD_SIGN_KEY: ${{ secrets.CIRIS_BUILD_SIGN_KEY }}
        run: |
          python version.py
          cat BUILD_INFO.txt || echo "No BUILD_INFO.txt created"

      # SonarQube scan (only on main repo)
      - name: Check SonarQube conditions
        id: check_sonar
        run: |
          echo "Repository: ${{ github.repository }}"
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          if [[ "$REPO_LOWER" == "cirisai/cirisagent" ]] && [[ -n "${{ secrets.SONAR_TOKEN }}" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

      - name: SonarQube Scan
        if: steps.check_sonar.outputs.should_run == 'true'
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    name: Build Docker Images
    needs: test
    runs-on: ubuntu-latest
    if: success()
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/ciris-agent
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Build GUI Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./CIRISGUI
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/ciris-gui:latest
            ghcr.io/${{ github.repository_owner }}/ciris-gui:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deploy:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.repository == 'CIRISai/CIRISAgent'
    environment: production
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 108.61.119.117
          username: root
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            # Initialize server if needed (idempotent)
            if [ ! -f "/home/ciris/.initialized" ]; then
              echo "First time deployment - initializing server..."
              
              # Update system
              apt-get update
              apt-get upgrade -y
              
              # Install required packages
              apt-get install -y curl git ca-certificates gnupg lsb-release ufw
              
              # Install Docker if needed
              if ! command -v docker &> /dev/null; then
                curl -fsSL https://get.docker.com | sh
                systemctl enable docker
                systemctl start docker
              fi
              
              # Install Docker Compose if needed
              if ! command -v docker-compose &> /dev/null; then
                curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                chmod +x /usr/local/bin/docker-compose
              fi
              
              # Create ciris user if needed
              if ! id -u ciris &>/dev/null; then
                useradd -m -s /bin/bash ciris
                usermod -aG docker ciris
              fi
              
              # Setup directory structure
              mkdir -p /home/ciris
              chown ciris:ciris /home/ciris
              
              # Configure firewall
              ufw allow 22/tcp    # SSH
              ufw allow 80/tcp    # HTTP
              ufw allow 443/tcp   # HTTPS
              ufw allow 3000/tcp  # GUI
              ufw allow 8080/tcp  # API
              ufw --force enable
              
              # Mark as initialized
              touch /home/ciris/.initialized
            fi
            
            # Ensure base directories exist
            mkdir -p /home/ciris
            cd /home/ciris
            
            # Clone or update repository
            if [ ! -d "CIRISAgent" ]; then
              git clone https://github.com/CIRISAI/CIRISAgent.git
            fi
            cd CIRISAgent
            git pull origin main
            
            # Create .env.datum file for Phase 1 if it doesn't exist
            if [ ! -f ".env.datum" ]; then
              echo "# Phase 1 Mock LLM Environment" > .env.datum
              echo "CIRIS_MOCK_LLM=true" >> .env.datum
              echo "# Discord credentials should be added manually if needed" >> .env.datum
              echo "# DISCORD_BOT_TOKEN=your_token_here" >> .env.datum
            fi
            
            # Use the production phase1 compose file that expects images
            if [ ! -f "deployment/docker-compose.phase1-prod.yml" ]; then
              cp deployment/docker-compose.phase1.yml deployment/docker-compose.phase1-prod.yml
            fi
            
            # Pull new images from GitHub Container Registry
            docker pull ghcr.io/cirisai/ciris-agent:latest
            docker pull ghcr.io/cirisai/ciris-gui:latest
            
            # Tag images for local use
            docker tag ghcr.io/cirisai/ciris-agent:latest ciris-agent:latest
            docker tag ghcr.io/cirisai/ciris-gui:latest ciris-gui:latest
            
            # Stop existing containers
            docker-compose -f deployment/docker-compose.phase1-prod.yml down || true
            
            # Start Phase 1 deployment with mock LLM
            docker-compose -f deployment/docker-compose.phase1-prod.yml up -d
            
            # Clean up old images
            docker image prune -f
            
            # Create systemd service for auto-start if it doesn't exist
            if [ ! -f "/etc/systemd/system/ciris-phase1.service" ]; then
              cat > /etc/systemd/system/ciris-phase1.service << 'EOF'
[Unit]
Description=CIRIS Phase 1 Deployment
After=docker.service
Requires=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=/home/ciris/CIRISAgent
ExecStart=/usr/local/bin/docker-compose -f deployment/docker-compose.phase1-prod.yml up -d
ExecStop=/usr/local/bin/docker-compose -f deployment/docker-compose.phase1-prod.yml down
User=root
Group=root

[Install]
WantedBy=multi-user.target
EOF
              systemctl daemon-reload
              systemctl enable ciris-phase1
            fi

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 108.61.119.117
          username: root
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            # Wait for containers to be healthy
            echo "Waiting for containers to start..."
            sleep 30
            
            # Check API health
            echo "Checking API health..."
            if ! curl -f http://localhost:8080/v1/system/health; then
              echo "API health check failed!"
              docker logs ciris-agent-datum
              exit 1
            fi
            
            # Verify containers are running
            echo "\nRunning containers:"
            docker ps | grep ciris
            
            echo "\nDeployment successful! Phase 1 with Mock LLM is running."