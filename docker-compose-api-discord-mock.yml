version: '3.8'

services:
  ciris-local:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: ciris-api-discord-mock
    ports:
      - "8080:8080"
    environment:
      # Agent identification
      - CIRIS_AGENT_ID=datum
      # Force mock LLM
      - CIRIS_MOCK_LLM=true
      # API configuration
      - CIRIS_API_HOST=0.0.0.0
      - CIRIS_API_PORT=8080
      - CIRIS_API_INTERACTION_TIMEOUT=3.0
      # Discord configuration - these will be loaded from .env file if present
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}
      - DISCORD_SERVER_ID=${DISCORD_SERVER_ID}
      - DISCORD_CHANNEL_IDS=${DISCORD_CHANNEL_IDS}
      - DISCORD_HOME_CHANNEL_ID=${DISCORD_HOME_CHANNEL_ID}
      - DISCORD_DEFERRAL_CHANNEL_ID=${DISCORD_DEFERRAL_CHANNEL_ID}
      - WA_USER_ID=${WA_USER_ID}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      # Mount the .env file into the container
      - ./.env:/app/.env:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/system/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    # Note: Docker doesn't have a built-in "restart on unhealthy" policy
    # You'll need to use a health check monitoring tool like autoheal or willfarrell/autoheal
    # Or use docker-compose with --exit-code-from and a monitoring script
    command: ["python", "main.py", "--adapter", "api", "--adapter", "discord", "--mock-llm"]
