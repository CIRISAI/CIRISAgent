{
  "ciris_engine": {
    "summary": {
      "total_files": 390,
      "total_classes": 887,
      "total_methods": 1973,
      "total_functions": 148,
      "duplicate_classes": 62,
      "duplicate_methods": 10,
      "duplicate_functions": 1
    },
    "duplicates": {
      "classes": {
        "ServiceProvider": [
          {
            "file": "ciris_engine/logic/registries/base.py",
            "line": 34,
            "bases": []
          },
          {
            "file": "ciris_engine/schemas/adapters/core.py",
            "line": 43,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "ServiceRegistry": [
          {
            "file": "ciris_engine/logic/registries/base.py",
            "line": 51,
            "bases": []
          },
          {
            "file": "ciris_engine/schemas/infrastructure/base.py",
            "line": 179,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "CircuitBreaker": [
          {
            "file": "ciris_engine/logic/registries/circuit_breaker.py",
            "line": 32,
            "bases": []
          },
          {
            "file": "ciris_engine/logic/buses/llm_bus.py",
            "line": 74,
            "bases": []
          }
        ],
        "MessageDict": [
          {
            "file": "ciris_engine/logic/buses/llm_bus.py",
            "line": 60,
            "bases": [
              "TypedDict"
            ]
          },
          {
            "file": "ciris_engine/protocols/services/runtime/llm.py",
            "line": 11,
            "bases": [
              "TypedDict"
            ]
          }
        ],
        "LLMRequest": [
          {
            "file": "ciris_engine/logic/buses/llm_bus.py",
            "line": 65,
            "bases": [
              "BusMessage"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/requests.py",
            "line": 74,
            "bases": [
              "ServiceRequest"
            ]
          }
        ],
        "BusMessage": [
          {
            "file": "ciris_engine/logic/buses/base_bus.py",
            "line": 19,
            "bases": []
          },
          {
            "file": "ciris_engine/schemas/services/core/__init__.py",
            "line": 113,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "MemorizeRequest": [
          {
            "file": "ciris_engine/logic/buses/memory_bus.py",
            "line": 23,
            "bases": [
              "BusMessage"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/requests.py",
            "line": 39,
            "bases": [
              "ServiceRequest"
            ]
          }
        ],
        "RecallRequest": [
          {
            "file": "ciris_engine/logic/buses/memory_bus.py",
            "line": 28,
            "bases": [
              "BusMessage"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/requests.py",
            "line": 48,
            "bases": [
              "ServiceRequest"
            ]
          }
        ],
        "RecallSecretParams": [
          {
            "file": "ciris_engine/logic/services/runtime/secrets_service.py",
            "line": 24,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/secrets/core.py",
            "line": 106,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "UpdateSecretsFilterParams": [
          {
            "file": "ciris_engine/logic/services/runtime/secrets_service.py",
            "line": 30,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/secrets/core.py",
            "line": 160,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "AdaptationState": [
          {
            "file": "ciris_engine/logic/services/adaptation/self_configuration.py",
            "line": 45,
            "bases": [
              "str",
              "Enum"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/special/self_configuration.py",
            "line": 12,
            "bases": [
              "str",
              "Enum"
            ]
          }
        ],
        "DateTimeEncoder": [
          {
            "file": "ciris_engine/logic/services/graph/memory_service.py",
            "line": 33,
            "bases": [
              "JSONEncoder"
            ]
          },
          {
            "file": "ciris_engine/logic/persistence/models/graph.py",
            "line": 12,
            "bases": [
              "JSONEncoder"
            ]
          }
        ],
        "ConsolidationResult": [
          {
            "file": "ciris_engine/schemas/infrastructure/base.py",
            "line": 60,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/graph/telemetry.py",
            "line": 54,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "ServiceRegistration": [
          {
            "file": "ciris_engine/schemas/infrastructure/base.py",
            "line": 167,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/core/__init__.py",
            "line": 124,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "IdentitySnapshot": [
          {
            "file": "ciris_engine/schemas/infrastructure/identity_variance.py",
            "line": 38,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/runtime/core.py",
            "line": 203,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/nodes.py",
            "line": 215,
            "bases": [
              "TypedGraphNode"
            ]
          }
        ],
        "ThoughtContext": [
          {
            "file": "ciris_engine/schemas/runtime/system_context.py",
            "line": 153,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/runtime/models.py",
            "line": 32,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "UserProfile": [
          {
            "file": "ciris_engine/schemas/runtime/system_context.py",
            "line": 180,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/adapters/graphql_core.py",
            "line": 68,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/graph/telemetry.py",
            "line": 40,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "ChannelContext": [
          {
            "file": "ciris_engine/schemas/runtime/system_context.py",
            "line": 203,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/graph/telemetry.py",
            "line": 47,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "ResourceUsage": [
          {
            "file": "ciris_engine/schemas/runtime/system_context.py",
            "line": 225,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/runtime/resources.py",
            "line": 10,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "ConscienceResult": [
          {
            "file": "ciris_engine/schemas/runtime/system_context.py",
            "line": 254,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/processors/core.py",
            "line": 32,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/conscience/results.py",
            "line": 11,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "ThoughtSummary": [
          {
            "file": "ciris_engine/schemas/runtime/system_context.py",
            "line": 270,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/persistence/core.py",
            "line": 75,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "ToolInfo": [
          {
            "file": "ciris_engine/schemas/runtime/tools.py",
            "line": 22,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/tools.py",
            "line": 40,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "ToolExecutionRequest": [
          {
            "file": "ciris_engine/schemas/runtime/tools.py",
            "line": 50,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/requests.py",
            "line": 59,
            "bases": [
              "ServiceRequest"
            ]
          }
        ],
        "ToolExecutionResult": [
          {
            "file": "ciris_engine/schemas/runtime/tools.py",
            "line": 63,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/tools.py",
            "line": 53,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "AgentIdentityRoot": [
          {
            "file": "ciris_engine/schemas/runtime/core.py",
            "line": 110,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/special/self_configuration.py",
            "line": 125,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "ActionContext": [
          {
            "file": "ciris_engine/schemas/runtime/audit.py",
            "line": 11,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/handlers/context.py",
            "line": 69,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "ConscienceCheckResult": [
          {
            "file": "ciris_engine/schemas/runtime/audit.py",
            "line": 21,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/conscience/core.py",
            "line": 65,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "AuditEntry": [
          {
            "file": "ciris_engine/schemas/runtime/audit.py",
            "line": 30,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/audit/hash_chain.py",
            "line": 10,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/nodes.py",
            "line": 24,
            "bases": [
              "TypedGraphNode"
            ]
          }
        ],
        "ServiceStatus": [
          {
            "file": "ciris_engine/schemas/runtime/protocols_core.py",
            "line": 42,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/core/__init__.py",
            "line": 25,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "ConfigValue": [
          {
            "file": "ciris_engine/schemas/runtime/protocols_core.py",
            "line": 62,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/nodes.py",
            "line": 120,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "SecretsServiceStats": [
          {
            "file": "ciris_engine/schemas/runtime/protocols_core.py",
            "line": 86,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/core/secrets.py",
            "line": 49,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "AdapterConfig": [
          {
            "file": "ciris_engine/schemas/runtime/adapter_management.py",
            "line": 10,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/core/runtime_config.py",
            "line": 11,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "AdapterOperationResult": [
          {
            "file": "ciris_engine/schemas/runtime/adapter_management.py",
            "line": 23,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/core/runtime.py",
            "line": 61,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "AdapterStatus": [
          {
            "file": "ciris_engine/schemas/runtime/adapter_management.py",
            "line": 32,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/core/runtime.py",
            "line": 12,
            "bases": [
              "str",
              "Enum"
            ]
          }
        ],
        "ServiceTypeInfo": [
          {
            "file": "ciris_engine/schemas/adapters/core.py",
            "line": 53,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/registries/base.py",
            "line": 27,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "RuntimeStatus": [
          {
            "file": "ciris_engine/schemas/adapters/core.py",
            "line": 68,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/core/__init__.py",
            "line": 104,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "RuntimeMetrics": [
          {
            "file": "ciris_engine/schemas/adapters/core.py",
            "line": 77,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/core/__init__.py",
            "line": 84,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "RuntimeStatusResponse": [
          {
            "file": "ciris_engine/schemas/adapters/core.py",
            "line": 86,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/core/runtime.py",
            "line": 143,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "ToolResult": [
          {
            "file": "ciris_engine/schemas/adapters/cli_tools.py",
            "line": 73,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/tools_core.py",
            "line": 84,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "ProcessorMetrics": [
          {
            "file": "ciris_engine/schemas/processors/base.py",
            "line": 11,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/processors/main.py",
            "line": 64,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/protocols/processors/agent.py",
            "line": 23,
            "bases": [
              "Protocol"
            ]
          }
        ],
        "ProcessingResult": [
          {
            "file": "ciris_engine/schemas/processors/base.py",
            "line": 22,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/protocols/processors/agent.py",
            "line": 45,
            "bases": [
              "Protocol"
            ]
          }
        ],
        "ProcessorServices": [
          {
            "file": "ciris_engine/schemas/processors/base.py",
            "line": 32,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/processors/main.py",
            "line": 13,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "DMAContext": [
          {
            "file": "ciris_engine/schemas/processors/dma.py",
            "line": 15,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/dma/core.py",
            "line": 104,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "ChainVerificationResult": [
          {
            "file": "ciris_engine/schemas/audit/hash_chain.py",
            "line": 22,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/audit/verification.py",
            "line": 11,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "ChainSummary": [
          {
            "file": "ciris_engine/schemas/audit/hash_chain.py",
            "line": 30,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/audit/verification.py",
            "line": 60,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "AuditQuery": [
          {
            "file": "ciris_engine/schemas/audit/core.py",
            "line": 103,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/graph/audit.py",
            "line": 71,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "VerificationReport": [
          {
            "file": "ciris_engine/schemas/audit/verification.py",
            "line": 72,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/graph/audit.py",
            "line": 31,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "SecretAccessLog": [
          {
            "file": "ciris_engine/schemas/secrets/core.py",
            "line": 69,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/core/secrets.py",
            "line": 29,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "SecretsFilterResult": [
          {
            "file": "ciris_engine/schemas/secrets/core.py",
            "line": 97,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/secrets/filter.py",
            "line": 36,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "FilterStats": [
          {
            "file": "ciris_engine/schemas/secrets/service.py",
            "line": 44,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/filters_core.py",
            "line": 178,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "ServiceMetadata": [
          {
            "file": "ciris_engine/schemas/registries/base.py",
            "line": 10,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/metadata.py",
            "line": 13,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "CircuitBreakerStats": [
          {
            "file": "ciris_engine/schemas/registries/base.py",
            "line": 35,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/llm.py",
            "line": 10,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "ToolParameterType": [
          {
            "file": "ciris_engine/schemas/services/tools.py",
            "line": 12,
            "bases": [
              "str",
              "Enum"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/tools_core.py",
            "line": 19,
            "bases": [
              "str",
              "Enum"
            ]
          }
        ],
        "ToolParameter": [
          {
            "file": "ciris_engine/schemas/services/tools.py",
            "line": 21,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/tools_core.py",
            "line": 29,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "InitializationStatus": [
          {
            "file": "ciris_engine/schemas/services/operations.py",
            "line": 25,
            "bases": [
              "str",
              "Enum"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/lifecycle/initialization.py",
            "line": 7,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "LLMResponse": [
          {
            "file": "ciris_engine/schemas/services/llm.py",
            "line": 31,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/requests.py",
            "line": 81,
            "bases": [
              "ServiceResponse"
            ]
          }
        ],
        "DeferralPackage": [
          {
            "file": "ciris_engine/schemas/persistence/core.py",
            "line": 18,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/handlers/core.py",
            "line": 62,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "DeferralResolution": [
          {
            "file": "ciris_engine/schemas/handlers/core.py",
            "line": 142,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/authority/wise_authority.py",
            "line": 77,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "HandlerContext": [
          {
            "file": "ciris_engine/schemas/handlers/context.py",
            "line": 33,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/handlers/schemas.py",
            "line": 63,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "ServiceCapabilities": [
          {
            "file": "ciris_engine/schemas/services/core/__init__.py",
            "line": 17,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/graph/telemetry.py",
            "line": 77,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "GraphQuery": [
          {
            "file": "ciris_engine/schemas/services/graph/memory.py",
            "line": 44,
            "bases": [
              "BaseModel"
            ]
          },
          {
            "file": "ciris_engine/schemas/services/graph/telemetry.py",
            "line": 70,
            "bases": [
              "BaseModel"
            ]
          }
        ],
        "VisibilityServiceProtocol": [
          {
            "file": "ciris_engine/protocols/runtime/base.py",
            "line": 79,
            "bases": [
              "ServiceProtocol",
              "Protocol"
            ]
          },
          {
            "file": "ciris_engine/protocols/services/governance/visibility.py",
            "line": 11,
            "bases": [
              "ServiceProtocol",
              "Protocol"
            ]
          }
        ]
      },
      "methods": {
        "CircuitBreaker.__init__": [
          {
            "file": "ciris_engine/logic/registries/circuit_breaker.py",
            "line": 42,
            "class": "CircuitBreaker",
            "args": [
              "self",
              "name",
              "config"
            ]
          },
          {
            "file": "ciris_engine/logic/buses/llm_bus.py",
            "line": 77,
            "class": "CircuitBreaker",
            "args": [
              "self",
              "failure_threshold",
              "recovery_timeout",
              "half_open_max_calls",
              "time_service"
            ]
          }
        ],
        "CircuitBreaker.record_success": [
          {
            "file": "ciris_engine/logic/registries/circuit_breaker.py",
            "line": 77,
            "class": "CircuitBreaker",
            "args": [
              "self"
            ]
          },
          {
            "file": "ciris_engine/logic/buses/llm_bus.py",
            "line": 94,
            "class": "CircuitBreaker",
            "args": [
              "self"
            ]
          }
        ],
        "CircuitBreaker.record_failure": [
          {
            "file": "ciris_engine/logic/registries/circuit_breaker.py",
            "line": 87,
            "class": "CircuitBreaker",
            "args": [
              "self"
            ]
          },
          {
            "file": "ciris_engine/logic/buses/llm_bus.py",
            "line": 106,
            "class": "CircuitBreaker",
            "args": [
              "self"
            ]
          }
        ],
        "AgentProcessor.action_dispatcher": [
          {
            "file": "ciris_engine/logic/processors/core/main_processor.py",
            "line": 181,
            "class": "AgentProcessor",
            "args": [
              "self"
            ]
          },
          {
            "file": "ciris_engine/logic/processors/core/main_processor.py",
            "line": 185,
            "class": "AgentProcessor",
            "args": [
              "self",
              "new_dispatcher"
            ]
          }
        ],
        "AuthenticationService.sign_task": [
          {
            "file": "ciris_engine/logic/services/infrastructure/authentication.py",
            "line": 603,
            "class": "AuthenticationService",
            "args": [
              "self",
              "task",
              "wa_id"
            ]
          },
          {
            "file": "ciris_engine/logic/services/infrastructure/authentication.py",
            "line": 1110,
            "class": "AuthenticationService",
            "args": [
              "self",
              "task",
              "wa_id"
            ]
          }
        ],
        "AuthenticationService.verify_task_signature": [
          {
            "file": "ciris_engine/logic/services/infrastructure/authentication.py",
            "line": 644,
            "class": "AuthenticationService",
            "args": [
              "self",
              "task"
            ]
          },
          {
            "file": "ciris_engine/logic/services/infrastructure/authentication.py",
            "line": 1149,
            "class": "AuthenticationService",
            "args": [
              "self",
              "task"
            ]
          }
        ],
        "AuthenticationService._generate_wa_id": [
          {
            "file": "ciris_engine/logic/services/infrastructure/authentication.py",
            "line": 682,
            "class": "AuthenticationService",
            "args": [
              "self",
              "timestamp"
            ]
          },
          {
            "file": "ciris_engine/logic/services/infrastructure/authentication.py",
            "line": 724,
            "class": "AuthenticationService",
            "args": [
              "self",
              "timestamp"
            ]
          }
        ],
        "AuthenticationService.start": [
          {
            "file": "ciris_engine/logic/services/infrastructure/authentication.py",
            "line": 1025,
            "class": "AuthenticationService",
            "args": [
              "self"
            ]
          },
          {
            "file": "ciris_engine/logic/services/infrastructure/authentication.py",
            "line": 1328,
            "class": "AuthenticationService",
            "args": [
              "self"
            ]
          }
        ],
        "AuthenticationService.stop": [
          {
            "file": "ciris_engine/logic/services/infrastructure/authentication.py",
            "line": 1030,
            "class": "AuthenticationService",
            "args": [
              "self"
            ]
          },
          {
            "file": "ciris_engine/logic/services/infrastructure/authentication.py",
            "line": 1334,
            "class": "AuthenticationService",
            "args": [
              "self"
            ]
          }
        ],
        "DateTimeEncoder.default": [
          {
            "file": "ciris_engine/logic/services/graph/memory_service.py",
            "line": 36,
            "class": "DateTimeEncoder",
            "args": [
              "self",
              "obj"
            ]
          },
          {
            "file": "ciris_engine/logic/persistence/models/graph.py",
            "line": 15,
            "class": "DateTimeEncoder",
            "args": [
              "self",
              "obj"
            ]
          }
        ]
      },
      "functions": {
        "initialize_database": [
          {
            "file": "ciris_engine/logic/persistence/db/core.py",
            "line": 41,
            "args": [
              "db_path"
            ]
          },
          {
            "file": "ciris_engine/logic/persistence/db/setup.py",
            "line": 9,
            "args": [
              "db_path"
            ]
          }
        ]
      },
      "method_signatures": {}
    },
    "all_files": [
      {
        "file": "ciris_engine/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/protocols/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/protocols/faculties.py",
        "classes": [
          {
            "name": "EpistemicFaculty",
            "line": 6,
            "decorators": [],
            "bases": [
              "Protocol"
            ],
            "methods": [
              {
                "name": "analyze",
                "line": 10,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "content",
                  "context"
                ],
                "is_async": true,
                "class": "EpistemicFaculty"
              },
              {
                "name": "get_name",
                "line": 24,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "EpistemicFaculty"
              },
              {
                "name": "get_capabilities",
                "line": 29,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "EpistemicFaculty"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "analyze",
            "line": 10,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "content",
              "context"
            ],
            "is_async": true,
            "class": "EpistemicFaculty"
          },
          {
            "name": "get_name",
            "line": 24,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "EpistemicFaculty"
          },
          {
            "name": "get_capabilities",
            "line": 29,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "EpistemicFaculty"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/utils/graphql_context_provider.py",
        "classes": [
          {
            "name": "GraphQLClient",
            "line": 15,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 16,
                "decorators": [],
                "args": [
                  "self",
                  "endpoint"
                ],
                "is_async": false,
                "class": "GraphQLClient"
              },
              {
                "name": "query",
                "line": 20,
                "decorators": [],
                "args": [
                  "self",
                  "query_obj"
                ],
                "is_async": true,
                "class": "GraphQLClient"
              }
            ]
          },
          {
            "name": "GraphQLContextProvider",
            "line": 40,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 41,
                "decorators": [],
                "args": [
                  "self",
                  "graphql_client",
                  "memory_service",
                  "enable_remote_graphql"
                ],
                "is_async": false,
                "class": "GraphQLContextProvider"
              },
              {
                "name": "enrich_context",
                "line": 52,
                "decorators": [],
                "args": [
                  "self",
                  "task",
                  "thought"
                ],
                "is_async": true,
                "class": "GraphQLContextProvider"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 16,
            "decorators": [],
            "args": [
              "self",
              "endpoint"
            ],
            "is_async": false,
            "class": "GraphQLClient"
          },
          {
            "name": "query",
            "line": 20,
            "decorators": [],
            "args": [
              "self",
              "query_obj"
            ],
            "is_async": true,
            "class": "GraphQLClient"
          },
          {
            "name": "__init__",
            "line": 41,
            "decorators": [],
            "args": [
              "self",
              "graphql_client",
              "memory_service",
              "enable_remote_graphql"
            ],
            "is_async": false,
            "class": "GraphQLContextProvider"
          },
          {
            "name": "enrich_context",
            "line": 52,
            "decorators": [],
            "args": [
              "self",
              "task",
              "thought"
            ],
            "is_async": true,
            "class": "GraphQLContextProvider"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/utils/runtime_utils.py",
        "classes": [],
        "functions": [
          {
            "name": "load_config",
            "line": 13,
            "decorators": [],
            "args": [
              "config_path",
              "cli_overrides"
            ],
            "is_async": true
          },
          {
            "name": "run_with_shutdown_handler",
            "line": 20,
            "decorators": [],
            "args": [
              "runtime",
              "num_rounds"
            ],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/utils/user_utils.py",
        "classes": [],
        "functions": [
          {
            "name": "extract_user_nick",
            "line": 5,
            "decorators": [],
            "args": [],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/utils/channel_utils.py",
        "classes": [],
        "functions": [
          {
            "name": "create_channel_context",
            "line": 5,
            "decorators": [],
            "args": [
              "channel_id",
              "channel_name",
              "channel_type"
            ],
            "is_async": false
          },
          {
            "name": "extract_channel_id",
            "line": 55,
            "decorators": [],
            "args": [
              "channel_context"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/utils/profile_manager.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/utils/logging_config.py",
        "classes": [],
        "functions": [
          {
            "name": "setup_basic_logging",
            "line": 12,
            "decorators": [],
            "args": [
              "level",
              "log_format",
              "date_format",
              "logger_instance",
              "prefix",
              "log_to_file",
              "log_dir",
              "console_output",
              "enable_incident_capture",
              "time_service"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/utils/shutdown_manager.py",
        "classes": [
          {
            "name": "ShutdownManagerWrapper",
            "line": 63,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 65,
                "decorators": [],
                "args": [
                  "self",
                  "service"
                ],
                "is_async": false,
                "class": "ShutdownManagerWrapper"
              },
              {
                "name": "__getattr__",
                "line": 68,
                "decorators": [],
                "args": [
                  "self",
                  "name"
                ],
                "is_async": false,
                "class": "ShutdownManagerWrapper"
              },
              {
                "name": "execute_async_handlers",
                "line": 71,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ShutdownManagerWrapper"
              }
            ]
          }
        ],
        "functions": [
          {
            "name": "_get_shutdown_service",
            "line": 18,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "is_global_shutdown_requested",
            "line": 25,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "get_global_shutdown_reason",
            "line": 30,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "request_global_shutdown",
            "line": 35,
            "decorators": [],
            "args": [
              "reason"
            ],
            "is_async": false
          },
          {
            "name": "register_global_shutdown_handler",
            "line": 41,
            "decorators": [],
            "args": [
              "handler"
            ],
            "is_async": false
          },
          {
            "name": "wait_for_global_shutdown",
            "line": 46,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "wait_for_global_shutdown_async",
            "line": 51,
            "decorators": [],
            "args": [],
            "is_async": true
          },
          {
            "name": "execute_async_handlers",
            "line": 56,
            "decorators": [],
            "args": [],
            "is_async": true
          },
          {
            "name": "get_shutdown_manager",
            "line": 76,
            "decorators": [],
            "args": [],
            "is_async": false
          }
        ],
        "methods": [
          {
            "name": "__init__",
            "line": 65,
            "decorators": [],
            "args": [
              "self",
              "service"
            ],
            "is_async": false,
            "class": "ShutdownManagerWrapper"
          },
          {
            "name": "__getattr__",
            "line": 68,
            "decorators": [],
            "args": [
              "self",
              "name"
            ],
            "is_async": false,
            "class": "ShutdownManagerWrapper"
          },
          {
            "name": "execute_async_handlers",
            "line": 71,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ShutdownManagerWrapper"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/utils/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/utils/profile_loader.py",
        "classes": [],
        "functions": [
          {
            "name": "load_template",
            "line": 23,
            "decorators": [],
            "args": [
              "template_path"
            ],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/utils/context_utils.py",
        "classes": [],
        "functions": [
          {
            "name": "build_dispatch_context",
            "line": 15,
            "decorators": [],
            "args": [
              "thought",
              "time_service",
              "task",
              "app_config",
              "round_number",
              "extra_context",
              "conscience_result",
              "action_type"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/utils/incident_capture_handler.py",
        "classes": [
          {
            "name": "IncidentCaptureHandler",
            "line": 13,
            "decorators": [],
            "bases": [
              "Handler"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 19,
                "decorators": [],
                "args": [
                  "self",
                  "log_dir",
                  "filename_prefix",
                  "time_service",
                  "graph_audit_service"
                ],
                "is_async": false,
                "class": "IncidentCaptureHandler"
              },
              {
                "name": "_create_symlink",
                "line": 52,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "IncidentCaptureHandler"
              },
              {
                "name": "emit",
                "line": 62,
                "decorators": [],
                "args": [
                  "self",
                  "record"
                ],
                "is_async": false,
                "class": "IncidentCaptureHandler"
              },
              {
                "name": "_save_incident_to_graph",
                "line": 98,
                "decorators": [],
                "args": [
                  "self",
                  "record"
                ],
                "is_async": true,
                "class": "IncidentCaptureHandler"
              },
              {
                "name": "_map_log_level_to_severity",
                "line": 147,
                "decorators": [],
                "args": [
                  "self",
                  "levelno"
                ],
                "is_async": false,
                "class": "IncidentCaptureHandler"
              },
              {
                "name": "_calculate_urgency",
                "line": 158,
                "decorators": [],
                "args": [
                  "self",
                  "severity"
                ],
                "is_async": false,
                "class": "IncidentCaptureHandler"
              }
            ]
          }
        ],
        "functions": [
          {
            "name": "add_incident_capture_handler",
            "line": 168,
            "decorators": [],
            "args": [
              "logger_instance",
              "log_dir",
              "filename_prefix",
              "time_service",
              "graph_audit_service"
            ],
            "is_async": false
          }
        ],
        "methods": [
          {
            "name": "__init__",
            "line": 19,
            "decorators": [],
            "args": [
              "self",
              "log_dir",
              "filename_prefix",
              "time_service",
              "graph_audit_service"
            ],
            "is_async": false,
            "class": "IncidentCaptureHandler"
          },
          {
            "name": "_create_symlink",
            "line": 52,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "IncidentCaptureHandler"
          },
          {
            "name": "emit",
            "line": 62,
            "decorators": [],
            "args": [
              "self",
              "record"
            ],
            "is_async": false,
            "class": "IncidentCaptureHandler"
          },
          {
            "name": "_save_incident_to_graph",
            "line": 98,
            "decorators": [],
            "args": [
              "self",
              "record"
            ],
            "is_async": true,
            "class": "IncidentCaptureHandler"
          },
          {
            "name": "_map_log_level_to_severity",
            "line": 147,
            "decorators": [],
            "args": [
              "self",
              "levelno"
            ],
            "is_async": false,
            "class": "IncidentCaptureHandler"
          },
          {
            "name": "_calculate_urgency",
            "line": 158,
            "decorators": [],
            "args": [
              "self",
              "severity"
            ],
            "is_async": false,
            "class": "IncidentCaptureHandler"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/utils/task_formatters.py",
        "classes": [],
        "functions": [
          {
            "name": "format_task_context",
            "line": 5,
            "decorators": [],
            "args": [
              "current_task",
              "recent_actions",
              "completed_tasks",
              "max_actions"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/utils/initialization_manager.py",
        "classes": [
          {
            "name": "InitializationError",
            "line": 16,
            "decorators": [],
            "bases": [
              "Exception"
            ],
            "methods": []
          }
        ],
        "functions": [
          {
            "name": "get_initialization_manager",
            "line": 26,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "register_initialization_callback",
            "line": 35,
            "decorators": [],
            "args": [
              "callback"
            ],
            "is_async": false
          },
          {
            "name": "initialize_components",
            "line": 40,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "is_initialized",
            "line": 45,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "reset_initialization",
            "line": 50,
            "decorators": [],
            "args": [],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/utils/constants.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/runtime/adapter_manager.py",
        "classes": [
          {
            "name": "AdapterInstance",
            "line": 32,
            "decorators": [
              "dataclass"
            ],
            "bases": [],
            "methods": [
              {
                "name": "__post_init__",
                "line": 42,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AdapterInstance"
              }
            ]
          },
          {
            "name": "AdapterManagerInterface",
            "line": 46,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "load_adapter",
                "line": 49,
                "decorators": [],
                "args": [
                  "self",
                  "adapter_type",
                  "adapter_id",
                  "config_params"
                ],
                "is_async": true,
                "class": "AdapterManagerInterface"
              },
              {
                "name": "unload_adapter",
                "line": 53,
                "decorators": [],
                "args": [
                  "self",
                  "adapter_id"
                ],
                "is_async": true,
                "class": "AdapterManagerInterface"
              },
              {
                "name": "reload_adapter",
                "line": 57,
                "decorators": [],
                "args": [
                  "self",
                  "adapter_id",
                  "config_params"
                ],
                "is_async": true,
                "class": "AdapterManagerInterface"
              },
              {
                "name": "list_adapters",
                "line": 61,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "AdapterManagerInterface"
              },
              {
                "name": "get_adapter_status",
                "line": 65,
                "decorators": [],
                "args": [
                  "self",
                  "adapter_id"
                ],
                "is_async": true,
                "class": "AdapterManagerInterface"
              }
            ]
          },
          {
            "name": "RuntimeAdapterManager",
            "line": 69,
            "decorators": [],
            "bases": [
              "AdapterManagerInterface"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 72,
                "decorators": [],
                "args": [
                  "self",
                  "runtime",
                  "time_service"
                ],
                "is_async": false,
                "class": "RuntimeAdapterManager"
              },
              {
                "name": "load_adapter",
                "line": 78,
                "decorators": [],
                "args": [
                  "self",
                  "adapter_type",
                  "adapter_id",
                  "config_params"
                ],
                "is_async": true,
                "class": "RuntimeAdapterManager"
              },
              {
                "name": "unload_adapter",
                "line": 140,
                "decorators": [],
                "args": [
                  "self",
                  "adapter_id"
                ],
                "is_async": true,
                "class": "RuntimeAdapterManager"
              },
              {
                "name": "reload_adapter",
                "line": 204,
                "decorators": [],
                "args": [
                  "self",
                  "adapter_id",
                  "config_params"
                ],
                "is_async": true,
                "class": "RuntimeAdapterManager"
              },
              {
                "name": "list_adapters",
                "line": 246,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeAdapterManager"
              },
              {
                "name": "get_adapter_status",
                "line": 288,
                "decorators": [],
                "args": [
                  "self",
                  "adapter_id"
                ],
                "is_async": true,
                "class": "RuntimeAdapterManager"
              },
              {
                "name": "load_adapter_from_template",
                "line": 359,
                "decorators": [],
                "args": [
                  "self",
                  "template_name",
                  "adapter_id"
                ],
                "is_async": true,
                "class": "RuntimeAdapterManager"
              },
              {
                "name": "_register_adapter_services",
                "line": 410,
                "decorators": [],
                "args": [
                  "self",
                  "instance"
                ],
                "is_async": true,
                "class": "RuntimeAdapterManager"
              },
              {
                "name": "_unregister_adapter_services",
                "line": 453,
                "decorators": [],
                "args": [
                  "self",
                  "instance"
                ],
                "is_async": true,
                "class": "RuntimeAdapterManager"
              },
              {
                "name": "get_adapter_info",
                "line": 468,
                "decorators": [],
                "args": [
                  "self",
                  "adapter_id"
                ],
                "is_async": true,
                "class": "RuntimeAdapterManager"
              },
              {
                "name": "get_communication_adapter_status",
                "line": 488,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "RuntimeAdapterManager"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__post_init__",
            "line": 42,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AdapterInstance"
          },
          {
            "name": "load_adapter",
            "line": 49,
            "decorators": [],
            "args": [
              "self",
              "adapter_type",
              "adapter_id",
              "config_params"
            ],
            "is_async": true,
            "class": "AdapterManagerInterface"
          },
          {
            "name": "unload_adapter",
            "line": 53,
            "decorators": [],
            "args": [
              "self",
              "adapter_id"
            ],
            "is_async": true,
            "class": "AdapterManagerInterface"
          },
          {
            "name": "reload_adapter",
            "line": 57,
            "decorators": [],
            "args": [
              "self",
              "adapter_id",
              "config_params"
            ],
            "is_async": true,
            "class": "AdapterManagerInterface"
          },
          {
            "name": "list_adapters",
            "line": 61,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "AdapterManagerInterface"
          },
          {
            "name": "get_adapter_status",
            "line": 65,
            "decorators": [],
            "args": [
              "self",
              "adapter_id"
            ],
            "is_async": true,
            "class": "AdapterManagerInterface"
          },
          {
            "name": "__init__",
            "line": 72,
            "decorators": [],
            "args": [
              "self",
              "runtime",
              "time_service"
            ],
            "is_async": false,
            "class": "RuntimeAdapterManager"
          },
          {
            "name": "load_adapter",
            "line": 78,
            "decorators": [],
            "args": [
              "self",
              "adapter_type",
              "adapter_id",
              "config_params"
            ],
            "is_async": true,
            "class": "RuntimeAdapterManager"
          },
          {
            "name": "unload_adapter",
            "line": 140,
            "decorators": [],
            "args": [
              "self",
              "adapter_id"
            ],
            "is_async": true,
            "class": "RuntimeAdapterManager"
          },
          {
            "name": "reload_adapter",
            "line": 204,
            "decorators": [],
            "args": [
              "self",
              "adapter_id",
              "config_params"
            ],
            "is_async": true,
            "class": "RuntimeAdapterManager"
          },
          {
            "name": "list_adapters",
            "line": 246,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeAdapterManager"
          },
          {
            "name": "get_adapter_status",
            "line": 288,
            "decorators": [],
            "args": [
              "self",
              "adapter_id"
            ],
            "is_async": true,
            "class": "RuntimeAdapterManager"
          },
          {
            "name": "load_adapter_from_template",
            "line": 359,
            "decorators": [],
            "args": [
              "self",
              "template_name",
              "adapter_id"
            ],
            "is_async": true,
            "class": "RuntimeAdapterManager"
          },
          {
            "name": "_register_adapter_services",
            "line": 410,
            "decorators": [],
            "args": [
              "self",
              "instance"
            ],
            "is_async": true,
            "class": "RuntimeAdapterManager"
          },
          {
            "name": "_unregister_adapter_services",
            "line": 453,
            "decorators": [],
            "args": [
              "self",
              "instance"
            ],
            "is_async": true,
            "class": "RuntimeAdapterManager"
          },
          {
            "name": "get_adapter_info",
            "line": 468,
            "decorators": [],
            "args": [
              "self",
              "adapter_id"
            ],
            "is_async": true,
            "class": "RuntimeAdapterManager"
          },
          {
            "name": "get_communication_adapter_status",
            "line": 488,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "RuntimeAdapterManager"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/runtime/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/runtime/modular_service_loader.py",
        "classes": [
          {
            "name": "ModularServiceLoader",
            "line": 19,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 22,
                "decorators": [],
                "args": [
                  "self",
                  "services_dir"
                ],
                "is_async": false,
                "class": "ModularServiceLoader"
              },
              {
                "name": "discover_services",
                "line": 26,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ModularServiceLoader"
              },
              {
                "name": "validate_manifest",
                "line": 51,
                "decorators": [],
                "args": [
                  "self",
                  "manifest"
                ],
                "is_async": false,
                "class": "ModularServiceLoader"
              },
              {
                "name": "check_dependencies",
                "line": 68,
                "decorators": [],
                "args": [
                  "self",
                  "manifest"
                ],
                "is_async": false,
                "class": "ModularServiceLoader"
              },
              {
                "name": "load_service",
                "line": 94,
                "decorators": [],
                "args": [
                  "self",
                  "manifest"
                ],
                "is_async": false,
                "class": "ModularServiceLoader"
              },
              {
                "name": "get_service_metadata",
                "line": 139,
                "decorators": [],
                "args": [
                  "self",
                  "service_name"
                ],
                "is_async": false,
                "class": "ModularServiceLoader"
              },
              {
                "name": "initialize_modular_services",
                "line": 145,
                "decorators": [],
                "args": [
                  "self",
                  "service_registry",
                  "config"
                ],
                "is_async": true,
                "class": "ModularServiceLoader"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 22,
            "decorators": [],
            "args": [
              "self",
              "services_dir"
            ],
            "is_async": false,
            "class": "ModularServiceLoader"
          },
          {
            "name": "discover_services",
            "line": 26,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ModularServiceLoader"
          },
          {
            "name": "validate_manifest",
            "line": 51,
            "decorators": [],
            "args": [
              "self",
              "manifest"
            ],
            "is_async": false,
            "class": "ModularServiceLoader"
          },
          {
            "name": "check_dependencies",
            "line": 68,
            "decorators": [],
            "args": [
              "self",
              "manifest"
            ],
            "is_async": false,
            "class": "ModularServiceLoader"
          },
          {
            "name": "load_service",
            "line": 94,
            "decorators": [],
            "args": [
              "self",
              "manifest"
            ],
            "is_async": false,
            "class": "ModularServiceLoader"
          },
          {
            "name": "get_service_metadata",
            "line": 139,
            "decorators": [],
            "args": [
              "self",
              "service_name"
            ],
            "is_async": false,
            "class": "ModularServiceLoader"
          },
          {
            "name": "initialize_modular_services",
            "line": 145,
            "decorators": [],
            "args": [
              "self",
              "service_registry",
              "config"
            ],
            "is_async": true,
            "class": "ModularServiceLoader"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/runtime/module_loader.py",
        "classes": [
          {
            "name": "ModuleLoader",
            "line": 17,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 20,
                "decorators": [],
                "args": [
                  "self",
                  "modules_dir"
                ],
                "is_async": false,
                "class": "ModuleLoader"
              },
              {
                "name": "load_module",
                "line": 26,
                "decorators": [],
                "args": [
                  "self",
                  "module_name",
                  "disable_core"
                ],
                "is_async": false,
                "class": "ModuleLoader"
              },
              {
                "name": "_handle_mock_module",
                "line": 54,
                "decorators": [],
                "args": [
                  "self",
                  "module_name",
                  "manifest",
                  "disable_core"
                ],
                "is_async": false,
                "class": "ModuleLoader"
              },
              {
                "name": "_handle_real_module",
                "line": 78,
                "decorators": [],
                "args": [
                  "self",
                  "module_name",
                  "manifest"
                ],
                "is_async": false,
                "class": "ModuleLoader"
              },
              {
                "name": "is_service_type_mocked",
                "line": 90,
                "decorators": [],
                "args": [
                  "self",
                  "service_type"
                ],
                "is_async": false,
                "class": "ModuleLoader"
              },
              {
                "name": "get_mock_warnings",
                "line": 94,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ModuleLoader"
              },
              {
                "name": "initialize_module_services",
                "line": 107,
                "decorators": [],
                "args": [
                  "self",
                  "module_name",
                  "service_registry"
                ],
                "is_async": true,
                "class": "ModuleLoader"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 20,
            "decorators": [],
            "args": [
              "self",
              "modules_dir"
            ],
            "is_async": false,
            "class": "ModuleLoader"
          },
          {
            "name": "load_module",
            "line": 26,
            "decorators": [],
            "args": [
              "self",
              "module_name",
              "disable_core"
            ],
            "is_async": false,
            "class": "ModuleLoader"
          },
          {
            "name": "_handle_mock_module",
            "line": 54,
            "decorators": [],
            "args": [
              "self",
              "module_name",
              "manifest",
              "disable_core"
            ],
            "is_async": false,
            "class": "ModuleLoader"
          },
          {
            "name": "_handle_real_module",
            "line": 78,
            "decorators": [],
            "args": [
              "self",
              "module_name",
              "manifest"
            ],
            "is_async": false,
            "class": "ModuleLoader"
          },
          {
            "name": "is_service_type_mocked",
            "line": 90,
            "decorators": [],
            "args": [
              "self",
              "service_type"
            ],
            "is_async": false,
            "class": "ModuleLoader"
          },
          {
            "name": "get_mock_warnings",
            "line": 94,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ModuleLoader"
          },
          {
            "name": "initialize_module_services",
            "line": 107,
            "decorators": [],
            "args": [
              "self",
              "module_name",
              "service_registry"
            ],
            "is_async": true,
            "class": "ModuleLoader"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/runtime/ciris_runtime.py",
        "classes": [
          {
            "name": "CIRISRuntime",
            "line": 48,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 55,
                "decorators": [],
                "args": [
                  "self",
                  "adapter_types",
                  "essential_config",
                  "startup_channel_id",
                  "adapter_configs"
                ],
                "is_async": false,
                "class": "CIRISRuntime"
              },
              {
                "name": "service_registry",
                "line": 107,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CIRISRuntime"
              },
              {
                "name": "bus_manager",
                "line": 111,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CIRISRuntime"
              },
              {
                "name": "memory_service",
                "line": 115,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CIRISRuntime"
              },
              {
                "name": "resource_monitor",
                "line": 119,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CIRISRuntime"
              },
              {
                "name": "secrets_service",
                "line": 124,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CIRISRuntime"
              },
              {
                "name": "wa_auth_system",
                "line": 128,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CIRISRuntime"
              },
              {
                "name": "telemetry_service",
                "line": 132,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CIRISRuntime"
              },
              {
                "name": "llm_service",
                "line": 136,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CIRISRuntime"
              },
              {
                "name": "audit_services",
                "line": 140,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CIRISRuntime"
              },
              {
                "name": "audit_service",
                "line": 144,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CIRISRuntime"
              },
              {
                "name": "adaptive_filter_service",
                "line": 148,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CIRISRuntime"
              },
              {
                "name": "agent_config_service",
                "line": 152,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CIRISRuntime"
              },
              {
                "name": "config_manager",
                "line": 156,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CIRISRuntime"
              },
              {
                "name": "transaction_orchestrator",
                "line": 161,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CIRISRuntime"
              },
              {
                "name": "core_tool_service",
                "line": 165,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CIRISRuntime"
              },
              {
                "name": "time_service",
                "line": 169,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CIRISRuntime"
              },
              {
                "name": "profile",
                "line": 173,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CIRISRuntime"
              },
              {
                "name": "maintenance_service",
                "line": 195,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CIRISRuntime"
              },
              {
                "name": "_ensure_shutdown_event",
                "line": 198,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CIRISRuntime"
              },
              {
                "name": "_ensure_config",
                "line": 206,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CIRISRuntime"
              },
              {
                "name": "request_shutdown",
                "line": 212,
                "decorators": [],
                "args": [
                  "self",
                  "reason"
                ],
                "is_async": false,
                "class": "CIRISRuntime"
              },
              {
                "name": "_request_shutdown",
                "line": 230,
                "decorators": [],
                "args": [
                  "self",
                  "reason"
                ],
                "is_async": true,
                "class": "CIRISRuntime"
              },
              {
                "name": "set_preload_tasks",
                "line": 234,
                "decorators": [],
                "args": [
                  "self",
                  "tasks"
                ],
                "is_async": false,
                "class": "CIRISRuntime"
              },
              {
                "name": "get_preload_tasks",
                "line": 239,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CIRISRuntime"
              },
              {
                "name": "initialize",
                "line": 243,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CIRISRuntime"
              },
              {
                "name": "_initialize_identity",
                "line": 273,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CIRISRuntime"
              },
              {
                "name": "_register_initialization_steps",
                "line": 287,
                "decorators": [],
                "args": [
                  "self",
                  "init_manager"
                ],
                "is_async": true,
                "class": "CIRISRuntime"
              },
              {
                "name": "_initialize_infrastructure",
                "line": 381,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CIRISRuntime"
              },
              {
                "name": "_verify_infrastructure",
                "line": 407,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CIRISRuntime"
              },
              {
                "name": "_init_database",
                "line": 421,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CIRISRuntime"
              },
              {
                "name": "_verify_database_integrity",
                "line": 433,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CIRISRuntime"
              },
              {
                "name": "_initialize_memory_service",
                "line": 453,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CIRISRuntime"
              },
              {
                "name": "_verify_memory_service",
                "line": 458,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CIRISRuntime"
              },
              {
                "name": "_verify_identity_integrity",
                "line": 462,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CIRISRuntime"
              },
              {
                "name": "_initialize_security_services",
                "line": 469,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CIRISRuntime"
              },
              {
                "name": "_verify_security_services",
                "line": 474,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CIRISRuntime"
              },
              {
                "name": "_initialize_services",
                "line": 478,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CIRISRuntime"
              },
              {
                "name": "_verify_core_services",
                "line": 491,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CIRISRuntime"
              },
              {
                "name": "_initialize_maintenance_service",
                "line": 495,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CIRISRuntime"
              },
              {
                "name": "_start_adapters",
                "line": 503,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CIRISRuntime"
              },
              {
                "name": "_final_verification",
                "line": 508,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CIRISRuntime"
              },
              {
                "name": "_perform_startup_maintenance",
                "line": 538,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CIRISRuntime"
              },
              {
                "name": "_register_adapter_services",
                "line": 556,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CIRISRuntime"
              },
              {
                "name": "_build_components",
                "line": 618,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CIRISRuntime"
              },
              {
                "name": "_register_core_services",
                "line": 626,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CIRISRuntime"
              },
              {
                "name": "_build_action_dispatcher",
                "line": 630,
                "decorators": [],
                "args": [
                  "self",
                  "dependencies"
                ],
                "is_async": true,
                "class": "CIRISRuntime"
              },
              {
                "name": "run",
                "line": 648,
                "decorators": [],
                "args": [
                  "self",
                  "num_rounds"
                ],
                "is_async": true,
                "class": "CIRISRuntime"
              },
              {
                "name": "shutdown",
                "line": 735,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CIRISRuntime"
              },
              {
                "name": "_preserve_shutdown_consciousness",
                "line": 917,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CIRISRuntime"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 55,
            "decorators": [],
            "args": [
              "self",
              "adapter_types",
              "essential_config",
              "startup_channel_id",
              "adapter_configs"
            ],
            "is_async": false,
            "class": "CIRISRuntime"
          },
          {
            "name": "service_registry",
            "line": 107,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CIRISRuntime"
          },
          {
            "name": "bus_manager",
            "line": 111,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CIRISRuntime"
          },
          {
            "name": "memory_service",
            "line": 115,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CIRISRuntime"
          },
          {
            "name": "resource_monitor",
            "line": 119,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CIRISRuntime"
          },
          {
            "name": "secrets_service",
            "line": 124,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CIRISRuntime"
          },
          {
            "name": "wa_auth_system",
            "line": 128,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CIRISRuntime"
          },
          {
            "name": "telemetry_service",
            "line": 132,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CIRISRuntime"
          },
          {
            "name": "llm_service",
            "line": 136,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CIRISRuntime"
          },
          {
            "name": "audit_services",
            "line": 140,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CIRISRuntime"
          },
          {
            "name": "audit_service",
            "line": 144,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CIRISRuntime"
          },
          {
            "name": "adaptive_filter_service",
            "line": 148,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CIRISRuntime"
          },
          {
            "name": "agent_config_service",
            "line": 152,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CIRISRuntime"
          },
          {
            "name": "config_manager",
            "line": 156,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CIRISRuntime"
          },
          {
            "name": "transaction_orchestrator",
            "line": 161,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CIRISRuntime"
          },
          {
            "name": "core_tool_service",
            "line": 165,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CIRISRuntime"
          },
          {
            "name": "time_service",
            "line": 169,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CIRISRuntime"
          },
          {
            "name": "profile",
            "line": 173,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CIRISRuntime"
          },
          {
            "name": "maintenance_service",
            "line": 195,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CIRISRuntime"
          },
          {
            "name": "_ensure_shutdown_event",
            "line": 198,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CIRISRuntime"
          },
          {
            "name": "_ensure_config",
            "line": 206,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CIRISRuntime"
          },
          {
            "name": "request_shutdown",
            "line": 212,
            "decorators": [],
            "args": [
              "self",
              "reason"
            ],
            "is_async": false,
            "class": "CIRISRuntime"
          },
          {
            "name": "_request_shutdown",
            "line": 230,
            "decorators": [],
            "args": [
              "self",
              "reason"
            ],
            "is_async": true,
            "class": "CIRISRuntime"
          },
          {
            "name": "set_preload_tasks",
            "line": 234,
            "decorators": [],
            "args": [
              "self",
              "tasks"
            ],
            "is_async": false,
            "class": "CIRISRuntime"
          },
          {
            "name": "get_preload_tasks",
            "line": 239,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CIRISRuntime"
          },
          {
            "name": "initialize",
            "line": 243,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CIRISRuntime"
          },
          {
            "name": "_initialize_identity",
            "line": 273,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CIRISRuntime"
          },
          {
            "name": "_register_initialization_steps",
            "line": 287,
            "decorators": [],
            "args": [
              "self",
              "init_manager"
            ],
            "is_async": true,
            "class": "CIRISRuntime"
          },
          {
            "name": "_initialize_infrastructure",
            "line": 381,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CIRISRuntime"
          },
          {
            "name": "_verify_infrastructure",
            "line": 407,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CIRISRuntime"
          },
          {
            "name": "_init_database",
            "line": 421,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CIRISRuntime"
          },
          {
            "name": "_verify_database_integrity",
            "line": 433,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CIRISRuntime"
          },
          {
            "name": "_initialize_memory_service",
            "line": 453,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CIRISRuntime"
          },
          {
            "name": "_verify_memory_service",
            "line": 458,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CIRISRuntime"
          },
          {
            "name": "_verify_identity_integrity",
            "line": 462,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CIRISRuntime"
          },
          {
            "name": "_initialize_security_services",
            "line": 469,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CIRISRuntime"
          },
          {
            "name": "_verify_security_services",
            "line": 474,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CIRISRuntime"
          },
          {
            "name": "_initialize_services",
            "line": 478,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CIRISRuntime"
          },
          {
            "name": "_verify_core_services",
            "line": 491,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CIRISRuntime"
          },
          {
            "name": "_initialize_maintenance_service",
            "line": 495,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CIRISRuntime"
          },
          {
            "name": "_start_adapters",
            "line": 503,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CIRISRuntime"
          },
          {
            "name": "_final_verification",
            "line": 508,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CIRISRuntime"
          },
          {
            "name": "_perform_startup_maintenance",
            "line": 538,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CIRISRuntime"
          },
          {
            "name": "_register_adapter_services",
            "line": 556,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CIRISRuntime"
          },
          {
            "name": "_build_components",
            "line": 618,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CIRISRuntime"
          },
          {
            "name": "_register_core_services",
            "line": 626,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CIRISRuntime"
          },
          {
            "name": "_build_action_dispatcher",
            "line": 630,
            "decorators": [],
            "args": [
              "self",
              "dependencies"
            ],
            "is_async": true,
            "class": "CIRISRuntime"
          },
          {
            "name": "run",
            "line": 648,
            "decorators": [],
            "args": [
              "self",
              "num_rounds"
            ],
            "is_async": true,
            "class": "CIRISRuntime"
          },
          {
            "name": "shutdown",
            "line": 735,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CIRISRuntime"
          },
          {
            "name": "_preserve_shutdown_consciousness",
            "line": 917,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CIRISRuntime"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/runtime/runtime_interface.py",
        "classes": [
          {
            "name": "RuntimeInterface",
            "line": 4,
            "decorators": [
              "runtime_checkable"
            ],
            "bases": [
              "Protocol"
            ],
            "methods": [
              {
                "name": "initialize",
                "line": 12,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeInterface"
              },
              {
                "name": "run",
                "line": 16,
                "decorators": [],
                "args": [
                  "self",
                  "num_rounds"
                ],
                "is_async": true,
                "class": "RuntimeInterface"
              },
              {
                "name": "shutdown",
                "line": 20,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeInterface"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "initialize",
            "line": 12,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeInterface"
          },
          {
            "name": "run",
            "line": 16,
            "decorators": [],
            "args": [
              "self",
              "num_rounds"
            ],
            "is_async": true,
            "class": "RuntimeInterface"
          },
          {
            "name": "shutdown",
            "line": 20,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeInterface"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/runtime/component_builder.py",
        "classes": [
          {
            "name": "ComponentBuilder",
            "line": 33,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 36,
                "decorators": [],
                "args": [
                  "self",
                  "runtime"
                ],
                "is_async": false,
                "class": "ComponentBuilder"
              },
              {
                "name": "build_all_components",
                "line": 46,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ComponentBuilder"
              },
              {
                "name": "_build_action_dispatcher",
                "line": 255,
                "decorators": [],
                "args": [
                  "self",
                  "dependencies"
                ],
                "is_async": true,
                "class": "ComponentBuilder"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 36,
            "decorators": [],
            "args": [
              "self",
              "runtime"
            ],
            "is_async": false,
            "class": "ComponentBuilder"
          },
          {
            "name": "build_all_components",
            "line": 46,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ComponentBuilder"
          },
          {
            "name": "_build_action_dispatcher",
            "line": 255,
            "decorators": [],
            "args": [
              "self",
              "dependencies"
            ],
            "is_async": true,
            "class": "ComponentBuilder"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/runtime/identity_manager.py",
        "classes": [
          {
            "name": "IdentityManager",
            "line": 24,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 27,
                "decorators": [],
                "args": [
                  "self",
                  "config",
                  "time_service"
                ],
                "is_async": false,
                "class": "IdentityManager"
              },
              {
                "name": "initialize_identity",
                "line": 32,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "IdentityManager"
              },
              {
                "name": "_load_template",
                "line": 65,
                "decorators": [],
                "args": [
                  "self",
                  "template_path"
                ],
                "is_async": true,
                "class": "IdentityManager"
              },
              {
                "name": "_get_identity_from_graph",
                "line": 70,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "IdentityManager"
              },
              {
                "name": "_save_identity_to_graph",
                "line": 84,
                "decorators": [],
                "args": [
                  "self",
                  "identity"
                ],
                "is_async": true,
                "class": "IdentityManager"
              },
              {
                "name": "_create_identity_from_template",
                "line": 99,
                "decorators": [],
                "args": [
                  "self",
                  "template"
                ],
                "is_async": true,
                "class": "IdentityManager"
              },
              {
                "name": "verify_identity_integrity",
                "line": 159,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "IdentityManager"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 27,
            "decorators": [],
            "args": [
              "self",
              "config",
              "time_service"
            ],
            "is_async": false,
            "class": "IdentityManager"
          },
          {
            "name": "initialize_identity",
            "line": 32,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "IdentityManager"
          },
          {
            "name": "_load_template",
            "line": 65,
            "decorators": [],
            "args": [
              "self",
              "template_path"
            ],
            "is_async": true,
            "class": "IdentityManager"
          },
          {
            "name": "_get_identity_from_graph",
            "line": 70,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "IdentityManager"
          },
          {
            "name": "_save_identity_to_graph",
            "line": 84,
            "decorators": [],
            "args": [
              "self",
              "identity"
            ],
            "is_async": true,
            "class": "IdentityManager"
          },
          {
            "name": "_create_identity_from_template",
            "line": 99,
            "decorators": [],
            "args": [
              "self",
              "template"
            ],
            "is_async": true,
            "class": "IdentityManager"
          },
          {
            "name": "verify_identity_integrity",
            "line": 159,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "IdentityManager"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/runtime/service_initializer.py",
        "classes": [
          {
            "name": "ServiceInitializer",
            "line": 38,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 41,
                "decorators": [],
                "args": [
                  "self",
                  "essential_config"
                ],
                "is_async": false,
                "class": "ServiceInitializer"
              },
              {
                "name": "initialize_infrastructure_services",
                "line": 79,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ServiceInitializer"
              },
              {
                "name": "initialize_memory_service",
                "line": 114,
                "decorators": [],
                "args": [
                  "self",
                  "config"
                ],
                "is_async": true,
                "class": "ServiceInitializer"
              },
              {
                "name": "verify_memory_service",
                "line": 220,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ServiceInitializer"
              },
              {
                "name": "initialize_security_services",
                "line": 271,
                "decorators": [],
                "args": [
                  "self",
                  "config",
                  "app_config"
                ],
                "is_async": true,
                "class": "ServiceInitializer"
              },
              {
                "name": "verify_security_services",
                "line": 295,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ServiceInitializer"
              },
              {
                "name": "initialize_all_services",
                "line": 315,
                "decorators": [],
                "args": [
                  "self",
                  "config",
                  "app_config",
                  "agent_id",
                  "startup_channel_id",
                  "modules_to_load"
                ],
                "is_async": true,
                "class": "ServiceInitializer"
              },
              {
                "name": "_initialize_llm_services",
                "line": 472,
                "decorators": [],
                "args": [
                  "self",
                  "config"
                ],
                "is_async": true,
                "class": "ServiceInitializer"
              },
              {
                "name": "_initialize_audit_services",
                "line": 575,
                "decorators": [],
                "args": [
                  "self",
                  "config",
                  "agent_id"
                ],
                "is_async": true,
                "class": "ServiceInitializer"
              },
              {
                "name": "verify_core_services",
                "line": 622,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ServiceInitializer"
              },
              {
                "name": "load_modules",
                "line": 655,
                "decorators": [],
                "args": [
                  "self",
                  "modules",
                  "disable_core_on_mock"
                ],
                "is_async": true,
                "class": "ServiceInitializer"
              },
              {
                "name": "register_core_services",
                "line": 696,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ServiceInitializer"
              },
              {
                "name": "_migrate_config_to_graph",
                "line": 749,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ServiceInitializer"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 41,
            "decorators": [],
            "args": [
              "self",
              "essential_config"
            ],
            "is_async": false,
            "class": "ServiceInitializer"
          },
          {
            "name": "initialize_infrastructure_services",
            "line": 79,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ServiceInitializer"
          },
          {
            "name": "initialize_memory_service",
            "line": 114,
            "decorators": [],
            "args": [
              "self",
              "config"
            ],
            "is_async": true,
            "class": "ServiceInitializer"
          },
          {
            "name": "verify_memory_service",
            "line": 220,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ServiceInitializer"
          },
          {
            "name": "initialize_security_services",
            "line": 271,
            "decorators": [],
            "args": [
              "self",
              "config",
              "app_config"
            ],
            "is_async": true,
            "class": "ServiceInitializer"
          },
          {
            "name": "verify_security_services",
            "line": 295,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ServiceInitializer"
          },
          {
            "name": "initialize_all_services",
            "line": 315,
            "decorators": [],
            "args": [
              "self",
              "config",
              "app_config",
              "agent_id",
              "startup_channel_id",
              "modules_to_load"
            ],
            "is_async": true,
            "class": "ServiceInitializer"
          },
          {
            "name": "_initialize_llm_services",
            "line": 472,
            "decorators": [],
            "args": [
              "self",
              "config"
            ],
            "is_async": true,
            "class": "ServiceInitializer"
          },
          {
            "name": "_initialize_audit_services",
            "line": 575,
            "decorators": [],
            "args": [
              "self",
              "config",
              "agent_id"
            ],
            "is_async": true,
            "class": "ServiceInitializer"
          },
          {
            "name": "verify_core_services",
            "line": 622,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ServiceInitializer"
          },
          {
            "name": "load_modules",
            "line": 655,
            "decorators": [],
            "args": [
              "self",
              "modules",
              "disable_core_on_mock"
            ],
            "is_async": true,
            "class": "ServiceInitializer"
          },
          {
            "name": "register_core_services",
            "line": 696,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ServiceInitializer"
          },
          {
            "name": "_migrate_config_to_graph",
            "line": 749,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ServiceInitializer"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/tool_registry.py",
        "classes": [
          {
            "name": "ToolRegistry",
            "line": 4,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 6,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ToolRegistry"
              },
              {
                "name": "register_tool",
                "line": 10,
                "decorators": [],
                "args": [
                  "self",
                  "name",
                  "schema",
                  "handler"
                ],
                "is_async": false,
                "class": "ToolRegistry"
              },
              {
                "name": "register_tool_v2",
                "line": 23,
                "decorators": [],
                "args": [
                  "self",
                  "tool_description",
                  "handler"
                ],
                "is_async": false,
                "class": "ToolRegistry"
              },
              {
                "name": "get_tool_schema",
                "line": 28,
                "decorators": [],
                "args": [
                  "self",
                  "name"
                ],
                "is_async": false,
                "class": "ToolRegistry"
              },
              {
                "name": "get_tool_description",
                "line": 36,
                "decorators": [],
                "args": [
                  "self",
                  "name"
                ],
                "is_async": false,
                "class": "ToolRegistry"
              },
              {
                "name": "list_tools",
                "line": 40,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ToolRegistry"
              },
              {
                "name": "validate_arguments",
                "line": 44,
                "decorators": [],
                "args": [
                  "self",
                  "name",
                  "arguments"
                ],
                "is_async": false,
                "class": "ToolRegistry"
              },
              {
                "name": "get_handler",
                "line": 74,
                "decorators": [],
                "args": [
                  "self",
                  "name"
                ],
                "is_async": false,
                "class": "ToolRegistry"
              },
              {
                "name": "_convert_legacy_schema",
                "line": 77,
                "decorators": [],
                "args": [
                  "self",
                  "name",
                  "schema"
                ],
                "is_async": false,
                "class": "ToolRegistry"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 6,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ToolRegistry"
          },
          {
            "name": "register_tool",
            "line": 10,
            "decorators": [],
            "args": [
              "self",
              "name",
              "schema",
              "handler"
            ],
            "is_async": false,
            "class": "ToolRegistry"
          },
          {
            "name": "register_tool_v2",
            "line": 23,
            "decorators": [],
            "args": [
              "self",
              "tool_description",
              "handler"
            ],
            "is_async": false,
            "class": "ToolRegistry"
          },
          {
            "name": "get_tool_schema",
            "line": 28,
            "decorators": [],
            "args": [
              "self",
              "name"
            ],
            "is_async": false,
            "class": "ToolRegistry"
          },
          {
            "name": "get_tool_description",
            "line": 36,
            "decorators": [],
            "args": [
              "self",
              "name"
            ],
            "is_async": false,
            "class": "ToolRegistry"
          },
          {
            "name": "list_tools",
            "line": 40,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ToolRegistry"
          },
          {
            "name": "validate_arguments",
            "line": 44,
            "decorators": [],
            "args": [
              "self",
              "name",
              "arguments"
            ],
            "is_async": false,
            "class": "ToolRegistry"
          },
          {
            "name": "get_handler",
            "line": 74,
            "decorators": [],
            "args": [
              "self",
              "name"
            ],
            "is_async": false,
            "class": "ToolRegistry"
          },
          {
            "name": "_convert_legacy_schema",
            "line": 77,
            "decorators": [],
            "args": [
              "self",
              "name",
              "schema"
            ],
            "is_async": false,
            "class": "ToolRegistry"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/base.py",
        "classes": [
          {
            "name": "Service",
            "line": 11,
            "decorators": [],
            "bases": [
              "ABC"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 14,
                "decorators": [],
                "args": [
                  "self",
                  "config"
                ],
                "is_async": false,
                "class": "Service"
              },
              {
                "name": "start",
                "line": 26,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "Service"
              },
              {
                "name": "stop",
                "line": 31,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "Service"
              },
              {
                "name": "retry_with_backoff",
                "line": 35,
                "decorators": [],
                "args": [
                  "self",
                  "operation"
                ],
                "is_async": true,
                "class": "Service"
              },
              {
                "name": "get_retry_config",
                "line": 108,
                "decorators": [],
                "args": [
                  "self",
                  "operation_type"
                ],
                "is_async": false,
                "class": "Service"
              },
              {
                "name": "health_check",
                "line": 134,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "Service"
              },
              {
                "name": "__repr__",
                "line": 151,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "Service"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 14,
            "decorators": [],
            "args": [
              "self",
              "config"
            ],
            "is_async": false,
            "class": "Service"
          },
          {
            "name": "start",
            "line": 26,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "Service"
          },
          {
            "name": "stop",
            "line": 31,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "Service"
          },
          {
            "name": "retry_with_backoff",
            "line": 35,
            "decorators": [],
            "args": [
              "self",
              "operation"
            ],
            "is_async": true,
            "class": "Service"
          },
          {
            "name": "get_retry_config",
            "line": 108,
            "decorators": [],
            "args": [
              "self",
              "operation_type"
            ],
            "is_async": false,
            "class": "Service"
          },
          {
            "name": "health_check",
            "line": 134,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "Service"
          },
          {
            "name": "__repr__",
            "line": 151,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "Service"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/base_observer.py",
        "classes": [
          {
            "name": "BaseObserver",
            "line": 24,
            "decorators": [],
            "bases": [
              "<ast.Subscript object at 0x7b74970b25d0>",
              "ABC"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 27,
                "decorators": [],
                "args": [
                  "self",
                  "on_observe",
                  "bus_manager",
                  "memory_service",
                  "agent_id",
                  "filter_service",
                  "secrets_service",
                  "time_service",
                  "auth_service",
                  "observer_wa_id"
                ],
                "is_async": false,
                "class": "BaseObserver"
              },
              {
                "name": "start",
                "line": 54,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "BaseObserver"
              },
              {
                "name": "stop",
                "line": 58,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "BaseObserver"
              },
              {
                "name": "_is_agent_message",
                "line": 61,
                "decorators": [],
                "args": [
                  "self",
                  "msg"
                ],
                "is_async": false,
                "class": "BaseObserver"
              },
              {
                "name": "_apply_message_filtering",
                "line": 66,
                "decorators": [],
                "args": [
                  "self",
                  "msg",
                  "adapter_type"
                ],
                "is_async": true,
                "class": "BaseObserver"
              },
              {
                "name": "_process_message_secrets",
                "line": 97,
                "decorators": [],
                "args": [
                  "self",
                  "msg"
                ],
                "is_async": true,
                "class": "BaseObserver"
              },
              {
                "name": "_get_recall_ids",
                "line": 119,
                "decorators": [],
                "args": [
                  "self",
                  "msg"
                ],
                "is_async": true,
                "class": "BaseObserver"
              },
              {
                "name": "_recall_context",
                "line": 122,
                "decorators": [],
                "args": [
                  "self",
                  "msg"
                ],
                "is_async": true,
                "class": "BaseObserver"
              },
              {
                "name": "_add_to_feedback_queue",
                "line": 148,
                "decorators": [],
                "args": [
                  "self",
                  "msg"
                ],
                "is_async": true,
                "class": "BaseObserver"
              },
              {
                "name": "_sign_and_add_task",
                "line": 175,
                "decorators": [],
                "args": [
                  "self",
                  "task"
                ],
                "is_async": true,
                "class": "BaseObserver"
              },
              {
                "name": "_create_passive_observation_result",
                "line": 193,
                "decorators": [],
                "args": [
                  "self",
                  "msg"
                ],
                "is_async": true,
                "class": "BaseObserver"
              },
              {
                "name": "_create_priority_observation_result",
                "line": 254,
                "decorators": [],
                "args": [
                  "self",
                  "msg",
                  "filter_result"
                ],
                "is_async": true,
                "class": "BaseObserver"
              },
              {
                "name": "get_recent_messages",
                "line": 318,
                "decorators": [],
                "args": [
                  "self",
                  "limit"
                ],
                "is_async": true,
                "class": "BaseObserver"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 27,
            "decorators": [],
            "args": [
              "self",
              "on_observe",
              "bus_manager",
              "memory_service",
              "agent_id",
              "filter_service",
              "secrets_service",
              "time_service",
              "auth_service",
              "observer_wa_id"
            ],
            "is_async": false,
            "class": "BaseObserver"
          },
          {
            "name": "start",
            "line": 54,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "BaseObserver"
          },
          {
            "name": "stop",
            "line": 58,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "BaseObserver"
          },
          {
            "name": "_is_agent_message",
            "line": 61,
            "decorators": [],
            "args": [
              "self",
              "msg"
            ],
            "is_async": false,
            "class": "BaseObserver"
          },
          {
            "name": "_apply_message_filtering",
            "line": 66,
            "decorators": [],
            "args": [
              "self",
              "msg",
              "adapter_type"
            ],
            "is_async": true,
            "class": "BaseObserver"
          },
          {
            "name": "_process_message_secrets",
            "line": 97,
            "decorators": [],
            "args": [
              "self",
              "msg"
            ],
            "is_async": true,
            "class": "BaseObserver"
          },
          {
            "name": "_get_recall_ids",
            "line": 119,
            "decorators": [],
            "args": [
              "self",
              "msg"
            ],
            "is_async": true,
            "class": "BaseObserver"
          },
          {
            "name": "_recall_context",
            "line": 122,
            "decorators": [],
            "args": [
              "self",
              "msg"
            ],
            "is_async": true,
            "class": "BaseObserver"
          },
          {
            "name": "_add_to_feedback_queue",
            "line": 148,
            "decorators": [],
            "args": [
              "self",
              "msg"
            ],
            "is_async": true,
            "class": "BaseObserver"
          },
          {
            "name": "_sign_and_add_task",
            "line": 175,
            "decorators": [],
            "args": [
              "self",
              "task"
            ],
            "is_async": true,
            "class": "BaseObserver"
          },
          {
            "name": "_create_passive_observation_result",
            "line": 193,
            "decorators": [],
            "args": [
              "self",
              "msg"
            ],
            "is_async": true,
            "class": "BaseObserver"
          },
          {
            "name": "_create_priority_observation_result",
            "line": 254,
            "decorators": [],
            "args": [
              "self",
              "msg",
              "filter_result"
            ],
            "is_async": true,
            "class": "BaseObserver"
          },
          {
            "name": "get_recent_messages",
            "line": 318,
            "decorators": [],
            "args": [
              "self",
              "limit"
            ],
            "is_async": true,
            "class": "BaseObserver"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/__init__.py",
        "classes": [],
        "functions": [
          {
            "name": "load_adapter",
            "line": 20,
            "decorators": [],
            "args": [
              "mode"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/adapters/cirisnode_client.py",
        "classes": [
          {
            "name": "CIRISNodeClient",
            "line": 28,
            "decorators": [],
            "bases": [
              "Service"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 31,
                "decorators": [],
                "args": [
                  "self",
                  "service_registry",
                  "base_url"
                ],
                "is_async": false,
                "class": "CIRISNodeClient"
              },
              {
                "name": "_get_audit_service",
                "line": 57,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CIRISNodeClient"
              },
              {
                "name": "start",
                "line": 77,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CIRISNodeClient"
              },
              {
                "name": "stop",
                "line": 81,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CIRISNodeClient"
              },
              {
                "name": "close",
                "line": 87,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CIRISNodeClient"
              },
              {
                "name": "is_closed",
                "line": 91,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CIRISNodeClient"
              },
              {
                "name": "_post",
                "line": 94,
                "decorators": [],
                "args": [
                  "self",
                  "endpoint",
                  "payload"
                ],
                "is_async": true,
                "class": "CIRISNodeClient"
              },
              {
                "name": "_get",
                "line": 109,
                "decorators": [],
                "args": [
                  "self",
                  "endpoint",
                  "params"
                ],
                "is_async": true,
                "class": "CIRISNodeClient"
              },
              {
                "name": "_put",
                "line": 124,
                "decorators": [],
                "args": [
                  "self",
                  "endpoint",
                  "payload"
                ],
                "is_async": true,
                "class": "CIRISNodeClient"
              },
              {
                "name": "run_simplebench",
                "line": 139,
                "decorators": [],
                "args": [
                  "self",
                  "model_id",
                  "agent_id"
                ],
                "is_async": true,
                "class": "CIRISNodeClient"
              },
              {
                "name": "run_he300",
                "line": 158,
                "decorators": [],
                "args": [
                  "self",
                  "model_id",
                  "agent_id"
                ],
                "is_async": true,
                "class": "CIRISNodeClient"
              },
              {
                "name": "run_chaos_tests",
                "line": 177,
                "decorators": [],
                "args": [
                  "self",
                  "agent_id",
                  "scenarios"
                ],
                "is_async": true,
                "class": "CIRISNodeClient"
              },
              {
                "name": "run_wa_service",
                "line": 196,
                "decorators": [],
                "args": [
                  "self",
                  "service",
                  "action",
                  "params"
                ],
                "is_async": true,
                "class": "CIRISNodeClient"
              },
              {
                "name": "log_event",
                "line": 215,
                "decorators": [],
                "args": [
                  "self",
                  "event_type",
                  "event_data",
                  "agent_id"
                ],
                "is_async": true,
                "class": "CIRISNodeClient"
              },
              {
                "name": "fetch_benchmark_prompts",
                "line": 234,
                "decorators": [],
                "args": [
                  "self",
                  "benchmark",
                  "model_id",
                  "agent_id"
                ],
                "is_async": true,
                "class": "CIRISNodeClient"
              },
              {
                "name": "submit_benchmark_answers",
                "line": 259,
                "decorators": [],
                "args": [
                  "self",
                  "benchmark",
                  "model_id",
                  "agent_id",
                  "answers"
                ],
                "is_async": true,
                "class": "CIRISNodeClient"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 31,
            "decorators": [],
            "args": [
              "self",
              "service_registry",
              "base_url"
            ],
            "is_async": false,
            "class": "CIRISNodeClient"
          },
          {
            "name": "_get_audit_service",
            "line": 57,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CIRISNodeClient"
          },
          {
            "name": "start",
            "line": 77,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CIRISNodeClient"
          },
          {
            "name": "stop",
            "line": 81,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CIRISNodeClient"
          },
          {
            "name": "close",
            "line": 87,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CIRISNodeClient"
          },
          {
            "name": "is_closed",
            "line": 91,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CIRISNodeClient"
          },
          {
            "name": "_post",
            "line": 94,
            "decorators": [],
            "args": [
              "self",
              "endpoint",
              "payload"
            ],
            "is_async": true,
            "class": "CIRISNodeClient"
          },
          {
            "name": "_get",
            "line": 109,
            "decorators": [],
            "args": [
              "self",
              "endpoint",
              "params"
            ],
            "is_async": true,
            "class": "CIRISNodeClient"
          },
          {
            "name": "_put",
            "line": 124,
            "decorators": [],
            "args": [
              "self",
              "endpoint",
              "payload"
            ],
            "is_async": true,
            "class": "CIRISNodeClient"
          },
          {
            "name": "run_simplebench",
            "line": 139,
            "decorators": [],
            "args": [
              "self",
              "model_id",
              "agent_id"
            ],
            "is_async": true,
            "class": "CIRISNodeClient"
          },
          {
            "name": "run_he300",
            "line": 158,
            "decorators": [],
            "args": [
              "self",
              "model_id",
              "agent_id"
            ],
            "is_async": true,
            "class": "CIRISNodeClient"
          },
          {
            "name": "run_chaos_tests",
            "line": 177,
            "decorators": [],
            "args": [
              "self",
              "agent_id",
              "scenarios"
            ],
            "is_async": true,
            "class": "CIRISNodeClient"
          },
          {
            "name": "run_wa_service",
            "line": 196,
            "decorators": [],
            "args": [
              "self",
              "service",
              "action",
              "params"
            ],
            "is_async": true,
            "class": "CIRISNodeClient"
          },
          {
            "name": "log_event",
            "line": 215,
            "decorators": [],
            "args": [
              "self",
              "event_type",
              "event_data",
              "agent_id"
            ],
            "is_async": true,
            "class": "CIRISNodeClient"
          },
          {
            "name": "fetch_benchmark_prompts",
            "line": 234,
            "decorators": [],
            "args": [
              "self",
              "benchmark",
              "model_id",
              "agent_id"
            ],
            "is_async": true,
            "class": "CIRISNodeClient"
          },
          {
            "name": "submit_benchmark_answers",
            "line": 259,
            "decorators": [],
            "args": [
              "self",
              "benchmark",
              "model_id",
              "agent_id",
              "answers"
            ],
            "is_async": true,
            "class": "CIRISNodeClient"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/processors/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/context/builder.py",
        "classes": [
          {
            "name": "ContextBuilder",
            "line": 16,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 17,
                "decorators": [],
                "args": [
                  "self",
                  "memory_service",
                  "graphql_provider",
                  "app_config",
                  "telemetry_service",
                  "secrets_service",
                  "runtime",
                  "service_registry",
                  "resource_monitor"
                ],
                "is_async": false,
                "class": "ContextBuilder"
              },
              {
                "name": "build_thought_context",
                "line": 37,
                "decorators": [],
                "args": [
                  "self",
                  "thought",
                  "task"
                ],
                "is_async": true,
                "class": "ContextBuilder"
              },
              {
                "name": "build_system_snapshot",
                "line": 203,
                "decorators": [],
                "args": [
                  "self",
                  "task",
                  "thought"
                ],
                "is_async": true,
                "class": "ContextBuilder"
              },
              {
                "name": "_build_secrets_snapshot",
                "line": 221,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ContextBuilder"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 17,
            "decorators": [],
            "args": [
              "self",
              "memory_service",
              "graphql_provider",
              "app_config",
              "telemetry_service",
              "secrets_service",
              "runtime",
              "service_registry",
              "resource_monitor"
            ],
            "is_async": false,
            "class": "ContextBuilder"
          },
          {
            "name": "build_thought_context",
            "line": 37,
            "decorators": [],
            "args": [
              "self",
              "thought",
              "task"
            ],
            "is_async": true,
            "class": "ContextBuilder"
          },
          {
            "name": "build_system_snapshot",
            "line": 203,
            "decorators": [],
            "args": [
              "self",
              "task",
              "thought"
            ],
            "is_async": true,
            "class": "ContextBuilder"
          },
          {
            "name": "_build_secrets_snapshot",
            "line": 221,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ContextBuilder"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/context/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/context/system_snapshot.py",
        "classes": [],
        "functions": [
          {
            "name": "build_system_snapshot",
            "line": 18,
            "decorators": [],
            "args": [
              "task",
              "thought",
              "resource_monitor",
              "memory_service",
              "graphql_provider",
              "telemetry_service",
              "secrets_service",
              "runtime",
              "service_registry"
            ],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/context/secrets_snapshot.py",
        "classes": [],
        "functions": [
          {
            "name": "build_secrets_snapshot",
            "line": 8,
            "decorators": [],
            "args": [
              "secrets_service"
            ],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/telemetry/resource_monitor.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/telemetry/core.py",
        "classes": [
          {
            "name": "BasicTelemetryCollector",
            "line": 18,
            "decorators": [],
            "bases": [
              "Service"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 21,
                "decorators": [],
                "args": [
                  "self",
                  "buffer_size",
                  "security_filter",
                  "time_service"
                ],
                "is_async": false,
                "class": "BasicTelemetryCollector"
              },
              {
                "name": "start",
                "line": 31,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "BasicTelemetryCollector"
              },
              {
                "name": "stop",
                "line": 35,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "BasicTelemetryCollector"
              },
              {
                "name": "record_metric",
                "line": 39,
                "decorators": [],
                "args": [
                  "self",
                  "metric_name",
                  "value",
                  "tags",
                  "path_type",
                  "source_module"
                ],
                "is_async": true,
                "class": "BasicTelemetryCollector"
              },
              {
                "name": "_store_metric_correlation",
                "line": 112,
                "decorators": [],
                "args": [
                  "self",
                  "correlation"
                ],
                "is_async": true,
                "class": "BasicTelemetryCollector"
              },
              {
                "name": "update_system_snapshot",
                "line": 119,
                "decorators": [],
                "args": [
                  "self",
                  "snapshot"
                ],
                "is_async": true,
                "class": "BasicTelemetryCollector"
              },
              {
                "name": "_get_retention_policy",
                "line": 169,
                "decorators": [],
                "args": [
                  "self",
                  "path_type"
                ],
                "is_async": false,
                "class": "BasicTelemetryCollector"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 21,
            "decorators": [],
            "args": [
              "self",
              "buffer_size",
              "security_filter",
              "time_service"
            ],
            "is_async": false,
            "class": "BasicTelemetryCollector"
          },
          {
            "name": "start",
            "line": 31,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "BasicTelemetryCollector"
          },
          {
            "name": "stop",
            "line": 35,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "BasicTelemetryCollector"
          },
          {
            "name": "record_metric",
            "line": 39,
            "decorators": [],
            "args": [
              "self",
              "metric_name",
              "value",
              "tags",
              "path_type",
              "source_module"
            ],
            "is_async": true,
            "class": "BasicTelemetryCollector"
          },
          {
            "name": "_store_metric_correlation",
            "line": 112,
            "decorators": [],
            "args": [
              "self",
              "correlation"
            ],
            "is_async": true,
            "class": "BasicTelemetryCollector"
          },
          {
            "name": "update_system_snapshot",
            "line": 119,
            "decorators": [],
            "args": [
              "self",
              "snapshot"
            ],
            "is_async": true,
            "class": "BasicTelemetryCollector"
          },
          {
            "name": "_get_retention_policy",
            "line": 169,
            "decorators": [],
            "args": [
              "self",
              "path_type"
            ],
            "is_async": false,
            "class": "BasicTelemetryCollector"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/telemetry/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/telemetry/hot_cold_config.py",
        "classes": [
          {
            "name": "PathConfig",
            "line": 12,
            "decorators": [
              "dataclass"
            ],
            "bases": [],
            "methods": []
          },
          {
            "name": "ModulePathConfig",
            "line": 21,
            "decorators": [
              "dataclass"
            ],
            "bases": [],
            "methods": []
          }
        ],
        "functions": [
          {
            "name": "get_path_config",
            "line": 92,
            "decorators": [],
            "args": [
              "metric_name"
            ],
            "is_async": false
          },
          {
            "name": "is_hot_path",
            "line": 106,
            "decorators": [],
            "args": [
              "module",
              "type_name"
            ],
            "is_async": false
          },
          {
            "name": "is_critical_function",
            "line": 113,
            "decorators": [],
            "args": [
              "module",
              "function_name"
            ],
            "is_async": false
          },
          {
            "name": "get_telemetry_requirements",
            "line": 120,
            "decorators": [],
            "args": [
              "module",
              "operation"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/telemetry/log_collector.py",
        "classes": [
          {
            "name": "TSDBLogHandler",
            "line": 18,
            "decorators": [],
            "bases": [
              "Handler"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 21,
                "decorators": [],
                "args": [
                  "self",
                  "tags",
                  "time_service"
                ],
                "is_async": false,
                "class": "TSDBLogHandler"
              },
              {
                "name": "emit",
                "line": 27,
                "decorators": [],
                "args": [
                  "self",
                  "record"
                ],
                "is_async": false,
                "class": "TSDBLogHandler"
              },
              {
                "name": "_store_log_correlation",
                "line": 68,
                "decorators": [],
                "args": [
                  "self",
                  "correlation"
                ],
                "is_async": true,
                "class": "TSDBLogHandler"
              },
              {
                "name": "set_async_loop",
                "line": 78,
                "decorators": [],
                "args": [
                  "self",
                  "loop"
                ],
                "is_async": false,
                "class": "TSDBLogHandler"
              }
            ]
          },
          {
            "name": "LogCorrelationCollector",
            "line": 82,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 90,
                "decorators": [],
                "args": [
                  "self",
                  "log_levels",
                  "tags",
                  "loggers"
                ],
                "is_async": false,
                "class": "LogCorrelationCollector"
              },
              {
                "name": "start",
                "line": 107,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "LogCorrelationCollector"
              },
              {
                "name": "stop",
                "line": 138,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "LogCorrelationCollector"
              },
              {
                "name": "add_logger",
                "line": 156,
                "decorators": [],
                "args": [
                  "self",
                  "logger_name"
                ],
                "is_async": false,
                "class": "LogCorrelationCollector"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 21,
            "decorators": [],
            "args": [
              "self",
              "tags",
              "time_service"
            ],
            "is_async": false,
            "class": "TSDBLogHandler"
          },
          {
            "name": "emit",
            "line": 27,
            "decorators": [],
            "args": [
              "self",
              "record"
            ],
            "is_async": false,
            "class": "TSDBLogHandler"
          },
          {
            "name": "_store_log_correlation",
            "line": 68,
            "decorators": [],
            "args": [
              "self",
              "correlation"
            ],
            "is_async": true,
            "class": "TSDBLogHandler"
          },
          {
            "name": "set_async_loop",
            "line": 78,
            "decorators": [],
            "args": [
              "self",
              "loop"
            ],
            "is_async": false,
            "class": "TSDBLogHandler"
          },
          {
            "name": "__init__",
            "line": 90,
            "decorators": [],
            "args": [
              "self",
              "log_levels",
              "tags",
              "loggers"
            ],
            "is_async": false,
            "class": "LogCorrelationCollector"
          },
          {
            "name": "start",
            "line": 107,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "LogCorrelationCollector"
          },
          {
            "name": "stop",
            "line": 138,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "LogCorrelationCollector"
          },
          {
            "name": "add_logger",
            "line": 156,
            "decorators": [],
            "args": [
              "self",
              "logger_name"
            ],
            "is_async": false,
            "class": "LogCorrelationCollector"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/telemetry/security.py",
        "classes": [
          {
            "name": "SecurityFilter",
            "line": 17,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 20,
                "decorators": [],
                "args": [
                  "self",
                  "bounds",
                  "rate_limits"
                ],
                "is_async": false,
                "class": "SecurityFilter"
              },
              {
                "name": "sanitize",
                "line": 31,
                "decorators": [],
                "args": [
                  "self",
                  "metric_name",
                  "value"
                ],
                "is_async": false,
                "class": "SecurityFilter"
              },
              {
                "name": "_contains_pii",
                "line": 55,
                "decorators": [],
                "args": [
                  "self",
                  "text"
                ],
                "is_async": false,
                "class": "SecurityFilter"
              },
              {
                "name": "_sanitize_error",
                "line": 59,
                "decorators": [],
                "args": [
                  "self",
                  "message"
                ],
                "is_async": false,
                "class": "SecurityFilter"
              },
              {
                "name": "_validate_bounds",
                "line": 64,
                "decorators": [],
                "args": [
                  "self",
                  "name",
                  "value"
                ],
                "is_async": false,
                "class": "SecurityFilter"
              },
              {
                "name": "_check_rate_limit",
                "line": 71,
                "decorators": [],
                "args": [
                  "self",
                  "name"
                ],
                "is_async": false,
                "class": "SecurityFilter"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 20,
            "decorators": [],
            "args": [
              "self",
              "bounds",
              "rate_limits"
            ],
            "is_async": false,
            "class": "SecurityFilter"
          },
          {
            "name": "sanitize",
            "line": 31,
            "decorators": [],
            "args": [
              "self",
              "metric_name",
              "value"
            ],
            "is_async": false,
            "class": "SecurityFilter"
          },
          {
            "name": "_contains_pii",
            "line": 55,
            "decorators": [],
            "args": [
              "self",
              "text"
            ],
            "is_async": false,
            "class": "SecurityFilter"
          },
          {
            "name": "_sanitize_error",
            "line": 59,
            "decorators": [],
            "args": [
              "self",
              "message"
            ],
            "is_async": false,
            "class": "SecurityFilter"
          },
          {
            "name": "_validate_bounds",
            "line": 64,
            "decorators": [],
            "args": [
              "self",
              "name",
              "value"
            ],
            "is_async": false,
            "class": "SecurityFilter"
          },
          {
            "name": "_check_rate_limit",
            "line": 71,
            "decorators": [],
            "args": [
              "self",
              "name"
            ],
            "is_async": false,
            "class": "SecurityFilter"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/conscience/registry.py",
        "classes": [
          {
            "name": "conscienceEntry",
            "line": 10,
            "decorators": [
              "dataclass"
            ],
            "bases": [],
            "methods": []
          },
          {
            "name": "conscienceRegistry",
            "line": 17,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 20,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "conscienceRegistry"
              },
              {
                "name": "register_conscience",
                "line": 23,
                "decorators": [],
                "args": [
                  "self",
                  "name",
                  "conscience",
                  "priority",
                  "enabled",
                  "circuit_breaker_config"
                ],
                "is_async": false,
                "class": "conscienceRegistry"
              },
              {
                "name": "get_consciences",
                "line": 36,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "conscienceRegistry"
              },
              {
                "name": "set_enabled",
                "line": 43,
                "decorators": [],
                "args": [
                  "self",
                  "name",
                  "enabled"
                ],
                "is_async": false,
                "class": "conscienceRegistry"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 20,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "conscienceRegistry"
          },
          {
            "name": "register_conscience",
            "line": 23,
            "decorators": [],
            "args": [
              "self",
              "name",
              "conscience",
              "priority",
              "enabled",
              "circuit_breaker_config"
            ],
            "is_async": false,
            "class": "conscienceRegistry"
          },
          {
            "name": "get_consciences",
            "line": 36,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "conscienceRegistry"
          },
          {
            "name": "set_enabled",
            "line": 43,
            "decorators": [],
            "args": [
              "self",
              "name",
              "enabled"
            ],
            "is_async": false,
            "class": "conscienceRegistry"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/conscience/interface.py",
        "classes": [
          {
            "name": "ConscienceInterface",
            "line": 9,
            "decorators": [
              "runtime_checkable"
            ],
            "bases": [
              "Protocol"
            ],
            "methods": [
              {
                "name": "check",
                "line": 12,
                "decorators": [],
                "args": [
                  "self",
                  "action",
                  "context"
                ],
                "is_async": true,
                "class": "ConscienceInterface"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "check",
            "line": 12,
            "decorators": [],
            "args": [
              "self",
              "action",
              "context"
            ],
            "is_async": true,
            "class": "ConscienceInterface"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/conscience/core.py",
        "classes": [
          {
            "name": "ConscienceConfig",
            "line": 12,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "EntropyResult",
            "line": 35,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "CoherenceResult",
            "line": 39,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "_BaseConscience",
            "line": 43,
            "decorators": [],
            "bases": [
              "ConscienceInterface"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 44,
                "decorators": [],
                "args": [
                  "self",
                  "service_registry",
                  "config",
                  "model_name",
                  "sink",
                  "time_service"
                ],
                "is_async": false,
                "class": "_BaseConscience"
              },
              {
                "name": "_get_sink",
                "line": 61,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "_BaseConscience"
              },
              {
                "name": "_initialize_time_service",
                "line": 67,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "_BaseConscience"
              },
              {
                "name": "_get_current_time",
                "line": 79,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "_BaseConscience"
              }
            ]
          },
          {
            "name": "Entropyconscience",
            "line": 87,
            "decorators": [],
            "bases": [
              "_BaseConscience"
            ],
            "methods": [
              {
                "name": "check",
                "line": 88,
                "decorators": [],
                "args": [
                  "self",
                  "action",
                  "context"
                ],
                "is_async": true,
                "class": "Entropyconscience"
              },
              {
                "name": "_create_entropy_messages",
                "line": 149,
                "decorators": [],
                "args": [
                  "self",
                  "text"
                ],
                "is_async": false,
                "class": "Entropyconscience"
              }
            ]
          },
          {
            "name": "Coherenceconscience",
            "line": 167,
            "decorators": [],
            "bases": [
              "_BaseConscience"
            ],
            "methods": [
              {
                "name": "check",
                "line": 168,
                "decorators": [],
                "args": [
                  "self",
                  "action",
                  "context"
                ],
                "is_async": true,
                "class": "Coherenceconscience"
              },
              {
                "name": "_create_coherence_messages",
                "line": 215,
                "decorators": [],
                "args": [
                  "self",
                  "text"
                ],
                "is_async": false,
                "class": "Coherenceconscience"
              }
            ]
          },
          {
            "name": "OptimizationVetoconscience",
            "line": 257,
            "decorators": [],
            "bases": [
              "_BaseConscience"
            ],
            "methods": [
              {
                "name": "check",
                "line": 258,
                "decorators": [],
                "args": [
                  "self",
                  "action",
                  "context"
                ],
                "is_async": true,
                "class": "OptimizationVetoconscience"
              },
              {
                "name": "_create_optimization_veto_messages",
                "line": 308,
                "decorators": [],
                "args": [
                  "self",
                  "action_description"
                ],
                "is_async": false,
                "class": "OptimizationVetoconscience"
              }
            ]
          },
          {
            "name": "EpistemicHumilityconscience",
            "line": 333,
            "decorators": [],
            "bases": [
              "_BaseConscience"
            ],
            "methods": [
              {
                "name": "check",
                "line": 334,
                "decorators": [],
                "args": [
                  "self",
                  "action",
                  "context"
                ],
                "is_async": true,
                "class": "EpistemicHumilityconscience"
              },
              {
                "name": "_create_epistemic_humility_messages",
                "line": 387,
                "decorators": [],
                "args": [
                  "self",
                  "action_description"
                ],
                "is_async": false,
                "class": "EpistemicHumilityconscience"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 44,
            "decorators": [],
            "args": [
              "self",
              "service_registry",
              "config",
              "model_name",
              "sink",
              "time_service"
            ],
            "is_async": false,
            "class": "_BaseConscience"
          },
          {
            "name": "_get_sink",
            "line": 61,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "_BaseConscience"
          },
          {
            "name": "_initialize_time_service",
            "line": 67,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "_BaseConscience"
          },
          {
            "name": "_get_current_time",
            "line": 79,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "_BaseConscience"
          },
          {
            "name": "check",
            "line": 88,
            "decorators": [],
            "args": [
              "self",
              "action",
              "context"
            ],
            "is_async": true,
            "class": "Entropyconscience"
          },
          {
            "name": "_create_entropy_messages",
            "line": 149,
            "decorators": [],
            "args": [
              "self",
              "text"
            ],
            "is_async": false,
            "class": "Entropyconscience"
          },
          {
            "name": "check",
            "line": 168,
            "decorators": [],
            "args": [
              "self",
              "action",
              "context"
            ],
            "is_async": true,
            "class": "Coherenceconscience"
          },
          {
            "name": "_create_coherence_messages",
            "line": 215,
            "decorators": [],
            "args": [
              "self",
              "text"
            ],
            "is_async": false,
            "class": "Coherenceconscience"
          },
          {
            "name": "check",
            "line": 258,
            "decorators": [],
            "args": [
              "self",
              "action",
              "context"
            ],
            "is_async": true,
            "class": "OptimizationVetoconscience"
          },
          {
            "name": "_create_optimization_veto_messages",
            "line": 308,
            "decorators": [],
            "args": [
              "self",
              "action_description"
            ],
            "is_async": false,
            "class": "OptimizationVetoconscience"
          },
          {
            "name": "check",
            "line": 334,
            "decorators": [],
            "args": [
              "self",
              "action",
              "context"
            ],
            "is_async": true,
            "class": "EpistemicHumilityconscience"
          },
          {
            "name": "_create_epistemic_humility_messages",
            "line": 387,
            "decorators": [],
            "args": [
              "self",
              "action_description"
            ],
            "is_async": false,
            "class": "EpistemicHumilityconscience"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/conscience/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/conscience/build_deferral_package.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/conscience/thought_depth_guardrail.py",
        "classes": [
          {
            "name": "ThoughtDepthconscience",
            "line": 21,
            "decorators": [],
            "bases": [
              "ConscienceInterface"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 24,
                "decorators": [],
                "args": [
                  "self",
                  "time_service",
                  "max_depth"
                ],
                "is_async": false,
                "class": "ThoughtDepthconscience"
              },
              {
                "name": "check",
                "line": 36,
                "decorators": [],
                "args": [
                  "self",
                  "action",
                  "context"
                ],
                "is_async": true,
                "class": "ThoughtDepthconscience"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 24,
            "decorators": [],
            "args": [
              "self",
              "time_service",
              "max_depth"
            ],
            "is_async": false,
            "class": "ThoughtDepthconscience"
          },
          {
            "name": "check",
            "line": 36,
            "decorators": [],
            "args": [
              "self",
              "action",
              "context"
            ],
            "is_async": true,
            "class": "ThoughtDepthconscience"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/audit/hash_chain.py",
        "classes": [
          {
            "name": "AuditHashChain",
            "line": 19,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 22,
                "decorators": [],
                "args": [
                  "self",
                  "db_path"
                ],
                "is_async": false,
                "class": "AuditHashChain"
              },
              {
                "name": "initialize",
                "line": 28,
                "decorators": [],
                "args": [
                  "self",
                  "force"
                ],
                "is_async": false,
                "class": "AuditHashChain"
              },
              {
                "name": "compute_entry_hash",
                "line": 44,
                "decorators": [],
                "args": [
                  "self",
                  "entry"
                ],
                "is_async": false,
                "class": "AuditHashChain"
              },
              {
                "name": "prepare_entry",
                "line": 63,
                "decorators": [],
                "args": [
                  "self",
                  "entry"
                ],
                "is_async": false,
                "class": "AuditHashChain"
              },
              {
                "name": "get_last_entry",
                "line": 78,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AuditHashChain"
              },
              {
                "name": "verify_chain_integrity",
                "line": 102,
                "decorators": [],
                "args": [
                  "self",
                  "start_seq",
                  "end_seq"
                ],
                "is_async": false,
                "class": "AuditHashChain"
              },
              {
                "name": "find_tampering",
                "line": 186,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AuditHashChain"
              },
              {
                "name": "get_chain_summary",
                "line": 226,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AuditHashChain"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 22,
            "decorators": [],
            "args": [
              "self",
              "db_path"
            ],
            "is_async": false,
            "class": "AuditHashChain"
          },
          {
            "name": "initialize",
            "line": 28,
            "decorators": [],
            "args": [
              "self",
              "force"
            ],
            "is_async": false,
            "class": "AuditHashChain"
          },
          {
            "name": "compute_entry_hash",
            "line": 44,
            "decorators": [],
            "args": [
              "self",
              "entry"
            ],
            "is_async": false,
            "class": "AuditHashChain"
          },
          {
            "name": "prepare_entry",
            "line": 63,
            "decorators": [],
            "args": [
              "self",
              "entry"
            ],
            "is_async": false,
            "class": "AuditHashChain"
          },
          {
            "name": "get_last_entry",
            "line": 78,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AuditHashChain"
          },
          {
            "name": "verify_chain_integrity",
            "line": 102,
            "decorators": [],
            "args": [
              "self",
              "start_seq",
              "end_seq"
            ],
            "is_async": false,
            "class": "AuditHashChain"
          },
          {
            "name": "find_tampering",
            "line": 186,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AuditHashChain"
          },
          {
            "name": "get_chain_summary",
            "line": 226,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AuditHashChain"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/audit/verifier.py",
        "classes": [
          {
            "name": "AuditVerifier",
            "line": 23,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 26,
                "decorators": [],
                "args": [
                  "self",
                  "db_path",
                  "key_path",
                  "time_service"
                ],
                "is_async": false,
                "class": "AuditVerifier"
              },
              {
                "name": "initialize",
                "line": 33,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AuditVerifier"
              },
              {
                "name": "verify_complete_chain",
                "line": 43,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AuditVerifier"
              },
              {
                "name": "verify_entry",
                "line": 105,
                "decorators": [],
                "args": [
                  "self",
                  "entry_id"
                ],
                "is_async": false,
                "class": "AuditVerifier"
              },
              {
                "name": "verify_range",
                "line": 139,
                "decorators": [],
                "args": [
                  "self",
                  "start_seq",
                  "end_seq"
                ],
                "is_async": false,
                "class": "AuditVerifier"
              },
              {
                "name": "find_tampering_fast",
                "line": 161,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AuditVerifier"
              },
              {
                "name": "_verify_single_entry",
                "line": 169,
                "decorators": [],
                "args": [
                  "self",
                  "entry"
                ],
                "is_async": false,
                "class": "AuditVerifier"
              },
              {
                "name": "_verify_all_signatures",
                "line": 193,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AuditVerifier"
              },
              {
                "name": "_verify_signatures_in_range",
                "line": 240,
                "decorators": [],
                "args": [
                  "self",
                  "start_seq",
                  "end_seq"
                ],
                "is_async": false,
                "class": "AuditVerifier"
              },
              {
                "name": "get_verification_report",
                "line": 286,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AuditVerifier"
              },
              {
                "name": "verify_root_anchors",
                "line": 328,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AuditVerifier"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 26,
            "decorators": [],
            "args": [
              "self",
              "db_path",
              "key_path",
              "time_service"
            ],
            "is_async": false,
            "class": "AuditVerifier"
          },
          {
            "name": "initialize",
            "line": 33,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AuditVerifier"
          },
          {
            "name": "verify_complete_chain",
            "line": 43,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AuditVerifier"
          },
          {
            "name": "verify_entry",
            "line": 105,
            "decorators": [],
            "args": [
              "self",
              "entry_id"
            ],
            "is_async": false,
            "class": "AuditVerifier"
          },
          {
            "name": "verify_range",
            "line": 139,
            "decorators": [],
            "args": [
              "self",
              "start_seq",
              "end_seq"
            ],
            "is_async": false,
            "class": "AuditVerifier"
          },
          {
            "name": "find_tampering_fast",
            "line": 161,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AuditVerifier"
          },
          {
            "name": "_verify_single_entry",
            "line": 169,
            "decorators": [],
            "args": [
              "self",
              "entry"
            ],
            "is_async": false,
            "class": "AuditVerifier"
          },
          {
            "name": "_verify_all_signatures",
            "line": 193,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AuditVerifier"
          },
          {
            "name": "_verify_signatures_in_range",
            "line": 240,
            "decorators": [],
            "args": [
              "self",
              "start_seq",
              "end_seq"
            ],
            "is_async": false,
            "class": "AuditVerifier"
          },
          {
            "name": "get_verification_report",
            "line": 286,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AuditVerifier"
          },
          {
            "name": "verify_root_anchors",
            "line": 328,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AuditVerifier"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/audit/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/audit/signature_manager.py",
        "classes": [
          {
            "name": "AuditSignatureManager",
            "line": 25,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 28,
                "decorators": [],
                "args": [
                  "self",
                  "key_path",
                  "db_path",
                  "time_service"
                ],
                "is_async": false,
                "class": "AuditSignatureManager"
              },
              {
                "name": "initialize",
                "line": 39,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AuditSignatureManager"
              },
              {
                "name": "_load_or_generate_keys",
                "line": 51,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AuditSignatureManager"
              },
              {
                "name": "_generate_new_keypair",
                "line": 82,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AuditSignatureManager"
              },
              {
                "name": "_save_keys",
                "line": 93,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AuditSignatureManager"
              },
              {
                "name": "_compute_key_id",
                "line": 125,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AuditSignatureManager"
              },
              {
                "name": "_register_public_key",
                "line": 138,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AuditSignatureManager"
              },
              {
                "name": "sign_entry",
                "line": 184,
                "decorators": [],
                "args": [
                  "self",
                  "entry_hash"
                ],
                "is_async": false,
                "class": "AuditSignatureManager"
              },
              {
                "name": "verify_signature",
                "line": 211,
                "decorators": [],
                "args": [
                  "self",
                  "entry_hash",
                  "signature",
                  "key_id"
                ],
                "is_async": false,
                "class": "AuditSignatureManager"
              },
              {
                "name": "_load_public_key",
                "line": 251,
                "decorators": [],
                "args": [
                  "self",
                  "key_id"
                ],
                "is_async": false,
                "class": "AuditSignatureManager"
              },
              {
                "name": "rotate_keys",
                "line": 275,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AuditSignatureManager"
              },
              {
                "name": "_revoke_key",
                "line": 290,
                "decorators": [],
                "args": [
                  "self",
                  "key_id"
                ],
                "is_async": false,
                "class": "AuditSignatureManager"
              },
              {
                "name": "get_key_info",
                "line": 310,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AuditSignatureManager"
              },
              {
                "name": "key_id",
                "line": 344,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AuditSignatureManager"
              },
              {
                "name": "test_signing",
                "line": 348,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AuditSignatureManager"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 28,
            "decorators": [],
            "args": [
              "self",
              "key_path",
              "db_path",
              "time_service"
            ],
            "is_async": false,
            "class": "AuditSignatureManager"
          },
          {
            "name": "initialize",
            "line": 39,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AuditSignatureManager"
          },
          {
            "name": "_load_or_generate_keys",
            "line": 51,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AuditSignatureManager"
          },
          {
            "name": "_generate_new_keypair",
            "line": 82,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AuditSignatureManager"
          },
          {
            "name": "_save_keys",
            "line": 93,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AuditSignatureManager"
          },
          {
            "name": "_compute_key_id",
            "line": 125,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AuditSignatureManager"
          },
          {
            "name": "_register_public_key",
            "line": 138,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AuditSignatureManager"
          },
          {
            "name": "sign_entry",
            "line": 184,
            "decorators": [],
            "args": [
              "self",
              "entry_hash"
            ],
            "is_async": false,
            "class": "AuditSignatureManager"
          },
          {
            "name": "verify_signature",
            "line": 211,
            "decorators": [],
            "args": [
              "self",
              "entry_hash",
              "signature",
              "key_id"
            ],
            "is_async": false,
            "class": "AuditSignatureManager"
          },
          {
            "name": "_load_public_key",
            "line": 251,
            "decorators": [],
            "args": [
              "self",
              "key_id"
            ],
            "is_async": false,
            "class": "AuditSignatureManager"
          },
          {
            "name": "rotate_keys",
            "line": 275,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AuditSignatureManager"
          },
          {
            "name": "_revoke_key",
            "line": 290,
            "decorators": [],
            "args": [
              "self",
              "key_id"
            ],
            "is_async": false,
            "class": "AuditSignatureManager"
          },
          {
            "name": "get_key_info",
            "line": 310,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AuditSignatureManager"
          },
          {
            "name": "key_id",
            "line": 344,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AuditSignatureManager"
          },
          {
            "name": "test_signing",
            "line": 348,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AuditSignatureManager"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/config/env_utils.py",
        "classes": [],
        "functions": [
          {
            "name": "load_env_file",
            "line": 11,
            "decorators": [],
            "args": [
              "path"
            ],
            "is_async": false
          },
          {
            "name": "get_env_var",
            "line": 26,
            "decorators": [],
            "args": [
              "name",
              "default"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/config/config_accessor.py",
        "classes": [
          {
            "name": "ConfigAccessor",
            "line": 16,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 26,
                "decorators": [],
                "args": [
                  "self",
                  "graph_config",
                  "bootstrap_config"
                ],
                "is_async": false,
                "class": "ConfigAccessor"
              },
              {
                "name": "set_graph_service",
                "line": 42,
                "decorators": [],
                "args": [
                  "self",
                  "graph_config"
                ],
                "is_async": false,
                "class": "ConfigAccessor"
              },
              {
                "name": "get",
                "line": 48,
                "decorators": [],
                "args": [
                  "self",
                  "key",
                  "default"
                ],
                "is_async": true,
                "class": "ConfigAccessor"
              },
              {
                "name": "_get_from_bootstrap",
                "line": 92,
                "decorators": [],
                "args": [
                  "self",
                  "key",
                  "default"
                ],
                "is_async": false,
                "class": "ConfigAccessor"
              },
              {
                "name": "get_int",
                "line": 117,
                "decorators": [],
                "args": [
                  "self",
                  "key",
                  "default"
                ],
                "is_async": true,
                "class": "ConfigAccessor"
              },
              {
                "name": "get_float",
                "line": 126,
                "decorators": [],
                "args": [
                  "self",
                  "key",
                  "default"
                ],
                "is_async": true,
                "class": "ConfigAccessor"
              },
              {
                "name": "get_bool",
                "line": 135,
                "decorators": [],
                "args": [
                  "self",
                  "key",
                  "default"
                ],
                "is_async": true,
                "class": "ConfigAccessor"
              },
              {
                "name": "get_str",
                "line": 144,
                "decorators": [],
                "args": [
                  "self",
                  "key",
                  "default"
                ],
                "is_async": true,
                "class": "ConfigAccessor"
              },
              {
                "name": "get_path",
                "line": 149,
                "decorators": [],
                "args": [
                  "self",
                  "key",
                  "default"
                ],
                "is_async": true,
                "class": "ConfigAccessor"
              },
              {
                "name": "exists",
                "line": 158,
                "decorators": [],
                "args": [
                  "self",
                  "key"
                ],
                "is_async": true,
                "class": "ConfigAccessor"
              },
              {
                "name": "get_section",
                "line": 163,
                "decorators": [],
                "args": [
                  "self",
                  "prefix"
                ],
                "is_async": true,
                "class": "ConfigAccessor"
              },
              {
                "name": "_get_section_from_bootstrap",
                "line": 183,
                "decorators": [],
                "args": [
                  "self",
                  "prefix"
                ],
                "is_async": false,
                "class": "ConfigAccessor"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 26,
            "decorators": [],
            "args": [
              "self",
              "graph_config",
              "bootstrap_config"
            ],
            "is_async": false,
            "class": "ConfigAccessor"
          },
          {
            "name": "set_graph_service",
            "line": 42,
            "decorators": [],
            "args": [
              "self",
              "graph_config"
            ],
            "is_async": false,
            "class": "ConfigAccessor"
          },
          {
            "name": "get",
            "line": 48,
            "decorators": [],
            "args": [
              "self",
              "key",
              "default"
            ],
            "is_async": true,
            "class": "ConfigAccessor"
          },
          {
            "name": "_get_from_bootstrap",
            "line": 92,
            "decorators": [],
            "args": [
              "self",
              "key",
              "default"
            ],
            "is_async": false,
            "class": "ConfigAccessor"
          },
          {
            "name": "get_int",
            "line": 117,
            "decorators": [],
            "args": [
              "self",
              "key",
              "default"
            ],
            "is_async": true,
            "class": "ConfigAccessor"
          },
          {
            "name": "get_float",
            "line": 126,
            "decorators": [],
            "args": [
              "self",
              "key",
              "default"
            ],
            "is_async": true,
            "class": "ConfigAccessor"
          },
          {
            "name": "get_bool",
            "line": 135,
            "decorators": [],
            "args": [
              "self",
              "key",
              "default"
            ],
            "is_async": true,
            "class": "ConfigAccessor"
          },
          {
            "name": "get_str",
            "line": 144,
            "decorators": [],
            "args": [
              "self",
              "key",
              "default"
            ],
            "is_async": true,
            "class": "ConfigAccessor"
          },
          {
            "name": "get_path",
            "line": 149,
            "decorators": [],
            "args": [
              "self",
              "key",
              "default"
            ],
            "is_async": true,
            "class": "ConfigAccessor"
          },
          {
            "name": "exists",
            "line": 158,
            "decorators": [],
            "args": [
              "self",
              "key"
            ],
            "is_async": true,
            "class": "ConfigAccessor"
          },
          {
            "name": "get_section",
            "line": 163,
            "decorators": [],
            "args": [
              "self",
              "prefix"
            ],
            "is_async": true,
            "class": "ConfigAccessor"
          },
          {
            "name": "_get_section_from_bootstrap",
            "line": 183,
            "decorators": [],
            "args": [
              "self",
              "prefix"
            ],
            "is_async": false,
            "class": "ConfigAccessor"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/config/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/config/bootstrap.py",
        "classes": [
          {
            "name": "ConfigBootstrap",
            "line": 17,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "_deep_merge",
                "line": 21,
                "decorators": [
                  "staticmethod"
                ],
                "args": [
                  "base",
                  "update"
                ],
                "is_async": false,
                "class": "ConfigBootstrap"
              },
              {
                "name": "_apply_env_overrides",
                "line": 31,
                "decorators": [
                  "staticmethod"
                ],
                "args": [
                  "config_data"
                ],
                "is_async": false,
                "class": "ConfigBootstrap"
              },
              {
                "name": "load_essential_config",
                "line": 90,
                "decorators": [
                  "staticmethod"
                ],
                "args": [
                  "config_path",
                  "cli_overrides"
                ],
                "is_async": true,
                "class": "ConfigBootstrap"
              },
              {
                "name": "get_config_metadata",
                "line": 141,
                "decorators": [
                  "staticmethod"
                ],
                "args": [
                  "config",
                  "yaml_path"
                ],
                "is_async": false,
                "class": "ConfigBootstrap"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "_deep_merge",
            "line": 21,
            "decorators": [
              "staticmethod"
            ],
            "args": [
              "base",
              "update"
            ],
            "is_async": false,
            "class": "ConfigBootstrap"
          },
          {
            "name": "_apply_env_overrides",
            "line": 31,
            "decorators": [
              "staticmethod"
            ],
            "args": [
              "config_data"
            ],
            "is_async": false,
            "class": "ConfigBootstrap"
          },
          {
            "name": "load_essential_config",
            "line": 90,
            "decorators": [
              "staticmethod"
            ],
            "args": [
              "config_path",
              "cli_overrides"
            ],
            "is_async": true,
            "class": "ConfigBootstrap"
          },
          {
            "name": "get_config_metadata",
            "line": 141,
            "decorators": [
              "staticmethod"
            ],
            "args": [
              "config",
              "yaml_path"
            ],
            "is_async": false,
            "class": "ConfigBootstrap"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/config/db_paths.py",
        "classes": [],
        "functions": [
          {
            "name": "get_sqlite_db_full_path",
            "line": 11,
            "decorators": [],
            "args": [
              "config"
            ],
            "is_async": false
          },
          {
            "name": "get_secrets_db_full_path",
            "line": 28,
            "decorators": [],
            "args": [
              "config"
            ],
            "is_async": false
          },
          {
            "name": "get_audit_db_full_path",
            "line": 45,
            "decorators": [],
            "args": [
              "config"
            ],
            "is_async": false
          },
          {
            "name": "get_graph_memory_full_path",
            "line": 63,
            "decorators": [],
            "args": [],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/dma/prompt_loader.py",
        "classes": [
          {
            "name": "DMAPromptLoader",
            "line": 15,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 18,
                "decorators": [],
                "args": [
                  "self",
                  "prompts_dir"
                ],
                "is_async": false,
                "class": "DMAPromptLoader"
              },
              {
                "name": "load_prompt_template",
                "line": 35,
                "decorators": [],
                "args": [
                  "self",
                  "template_name"
                ],
                "is_async": false,
                "class": "DMAPromptLoader"
              },
              {
                "name": "get_system_message",
                "line": 71,
                "decorators": [],
                "args": [
                  "self",
                  "template_data"
                ],
                "is_async": false,
                "class": "DMAPromptLoader"
              },
              {
                "name": "get_user_message",
                "line": 110,
                "decorators": [],
                "args": [
                  "self",
                  "template_data"
                ],
                "is_async": false,
                "class": "DMAPromptLoader"
              },
              {
                "name": "uses_covenant_header",
                "line": 127,
                "decorators": [],
                "args": [
                  "self",
                  "template_data"
                ],
                "is_async": false,
                "class": "DMAPromptLoader"
              }
            ]
          }
        ],
        "functions": [
          {
            "name": "get_prompt_loader",
            "line": 142,
            "decorators": [],
            "args": [],
            "is_async": false
          }
        ],
        "methods": [
          {
            "name": "__init__",
            "line": 18,
            "decorators": [],
            "args": [
              "self",
              "prompts_dir"
            ],
            "is_async": false,
            "class": "DMAPromptLoader"
          },
          {
            "name": "load_prompt_template",
            "line": 35,
            "decorators": [],
            "args": [
              "self",
              "template_name"
            ],
            "is_async": false,
            "class": "DMAPromptLoader"
          },
          {
            "name": "get_system_message",
            "line": 71,
            "decorators": [],
            "args": [
              "self",
              "template_data"
            ],
            "is_async": false,
            "class": "DMAPromptLoader"
          },
          {
            "name": "get_user_message",
            "line": 110,
            "decorators": [],
            "args": [
              "self",
              "template_data"
            ],
            "is_async": false,
            "class": "DMAPromptLoader"
          },
          {
            "name": "uses_covenant_header",
            "line": 127,
            "decorators": [],
            "args": [
              "self",
              "template_data"
            ],
            "is_async": false,
            "class": "DMAPromptLoader"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/dma/action_selection_pdma.py",
        "classes": [
          {
            "name": "ActionSelectionPDMAEvaluator",
            "line": 33,
            "decorators": [],
            "bases": [
              "BaseDMA",
              "ActionSelectionDMAProtocol"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 49,
                "decorators": [],
                "args": [
                  "self",
                  "service_registry",
                  "model_name",
                  "max_retries",
                  "prompt_overrides",
                  "faculties"
                ],
                "is_async": false,
                "class": "ActionSelectionPDMAEvaluator"
              },
              {
                "name": "evaluate",
                "line": 71,
                "decorators": [],
                "args": [
                  "self",
                  "input_data",
                  "enable_recursive_evaluation"
                ],
                "is_async": true,
                "class": "ActionSelectionPDMAEvaluator"
              },
              {
                "name": "recursive_evaluate_with_faculties",
                "line": 106,
                "decorators": [],
                "args": [
                  "self",
                  "input_data",
                  "conscience_failure_context"
                ],
                "is_async": true,
                "class": "ActionSelectionPDMAEvaluator"
              },
              {
                "name": "_handle_special_cases",
                "line": 129,
                "decorators": [],
                "args": [
                  "self",
                  "input_data"
                ],
                "is_async": true,
                "class": "ActionSelectionPDMAEvaluator"
              },
              {
                "name": "_perform_main_evaluation",
                "line": 144,
                "decorators": [],
                "args": [
                  "self",
                  "input_data",
                  "enable_recursive_evaluation"
                ],
                "is_async": true,
                "class": "ActionSelectionPDMAEvaluator"
              },
              {
                "name": "_build_system_message",
                "line": 195,
                "decorators": [],
                "args": [
                  "self",
                  "input_data"
                ],
                "is_async": false,
                "class": "ActionSelectionPDMAEvaluator"
              },
              {
                "name": "_create_fallback_result",
                "line": 238,
                "decorators": [],
                "args": [
                  "self",
                  "error_message"
                ],
                "is_async": false,
                "class": "ActionSelectionPDMAEvaluator"
              },
              {
                "name": "__repr__",
                "line": 251,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ActionSelectionPDMAEvaluator"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 49,
            "decorators": [],
            "args": [
              "self",
              "service_registry",
              "model_name",
              "max_retries",
              "prompt_overrides",
              "faculties"
            ],
            "is_async": false,
            "class": "ActionSelectionPDMAEvaluator"
          },
          {
            "name": "evaluate",
            "line": 71,
            "decorators": [],
            "args": [
              "self",
              "input_data",
              "enable_recursive_evaluation"
            ],
            "is_async": true,
            "class": "ActionSelectionPDMAEvaluator"
          },
          {
            "name": "recursive_evaluate_with_faculties",
            "line": 106,
            "decorators": [],
            "args": [
              "self",
              "input_data",
              "conscience_failure_context"
            ],
            "is_async": true,
            "class": "ActionSelectionPDMAEvaluator"
          },
          {
            "name": "_handle_special_cases",
            "line": 129,
            "decorators": [],
            "args": [
              "self",
              "input_data"
            ],
            "is_async": true,
            "class": "ActionSelectionPDMAEvaluator"
          },
          {
            "name": "_perform_main_evaluation",
            "line": 144,
            "decorators": [],
            "args": [
              "self",
              "input_data",
              "enable_recursive_evaluation"
            ],
            "is_async": true,
            "class": "ActionSelectionPDMAEvaluator"
          },
          {
            "name": "_build_system_message",
            "line": 195,
            "decorators": [],
            "args": [
              "self",
              "input_data"
            ],
            "is_async": false,
            "class": "ActionSelectionPDMAEvaluator"
          },
          {
            "name": "_create_fallback_result",
            "line": 238,
            "decorators": [],
            "args": [
              "self",
              "error_message"
            ],
            "is_async": false,
            "class": "ActionSelectionPDMAEvaluator"
          },
          {
            "name": "__repr__",
            "line": 251,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ActionSelectionPDMAEvaluator"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/dma/pdma.py",
        "classes": [
          {
            "name": "EthicalPDMAEvaluator",
            "line": 18,
            "decorators": [],
            "bases": [
              "BaseDMA",
              "PDMAProtocol"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 24,
                "decorators": [],
                "args": [
                  "self",
                  "service_registry",
                  "model_name",
                  "max_retries",
                  "prompt_overrides"
                ],
                "is_async": false,
                "class": "EthicalPDMAEvaluator"
              },
              {
                "name": "evaluate",
                "line": 66,
                "decorators": [],
                "args": [
                  "self",
                  "input_data",
                  "context"
                ],
                "is_async": true,
                "class": "EthicalPDMAEvaluator"
              },
              {
                "name": "__repr__",
                "line": 120,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "EthicalPDMAEvaluator"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 24,
            "decorators": [],
            "args": [
              "self",
              "service_registry",
              "model_name",
              "max_retries",
              "prompt_overrides"
            ],
            "is_async": false,
            "class": "EthicalPDMAEvaluator"
          },
          {
            "name": "evaluate",
            "line": 66,
            "decorators": [],
            "args": [
              "self",
              "input_data",
              "context"
            ],
            "is_async": true,
            "class": "EthicalPDMAEvaluator"
          },
          {
            "name": "__repr__",
            "line": 120,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "EthicalPDMAEvaluator"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/dma/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/dma/factory.py",
        "classes": [],
        "functions": [
          {
            "name": "create_dma",
            "line": 44,
            "decorators": [],
            "args": [
              "dma_type",
              "dma_identifier",
              "service_registry"
            ],
            "is_async": true
          },
          {
            "name": "create_dsdma_from_identity",
            "line": 103,
            "decorators": [],
            "args": [
              "identity",
              "service_registry"
            ],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/dma/dsdma_base.py",
        "classes": [
          {
            "name": "BaseDSDMA",
            "line": 22,
            "decorators": [],
            "bases": [
              "BaseDMA",
              "DSDMAProtocol"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 38,
                "decorators": [],
                "args": [
                  "self",
                  "domain_name",
                  "service_registry",
                  "model_name",
                  "domain_specific_knowledge",
                  "prompt_template"
                ],
                "is_async": false,
                "class": "BaseDSDMA"
              },
              {
                "name": "evaluate",
                "line": 81,
                "decorators": [],
                "args": [
                  "self",
                  "input_data",
                  "current_context"
                ],
                "is_async": true,
                "class": "BaseDSDMA"
              },
              {
                "name": "evaluate_thought",
                "line": 99,
                "decorators": [],
                "args": [
                  "self",
                  "thought_item",
                  "current_context"
                ],
                "is_async": true,
                "class": "BaseDSDMA"
              },
              {
                "name": "evaluate_alias",
                "line": 232,
                "decorators": [],
                "args": [
                  "self",
                  "input_data"
                ],
                "is_async": true,
                "class": "BaseDSDMA"
              },
              {
                "name": "__repr__",
                "line": 247,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "BaseDSDMA"
              }
            ]
          },
          {
            "name": "LLMOutputForDSDMA",
            "line": 75,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 38,
            "decorators": [],
            "args": [
              "self",
              "domain_name",
              "service_registry",
              "model_name",
              "domain_specific_knowledge",
              "prompt_template"
            ],
            "is_async": false,
            "class": "BaseDSDMA"
          },
          {
            "name": "evaluate",
            "line": 81,
            "decorators": [],
            "args": [
              "self",
              "input_data",
              "current_context"
            ],
            "is_async": true,
            "class": "BaseDSDMA"
          },
          {
            "name": "evaluate_thought",
            "line": 99,
            "decorators": [],
            "args": [
              "self",
              "thought_item",
              "current_context"
            ],
            "is_async": true,
            "class": "BaseDSDMA"
          },
          {
            "name": "evaluate_alias",
            "line": 232,
            "decorators": [],
            "args": [
              "self",
              "input_data"
            ],
            "is_async": true,
            "class": "BaseDSDMA"
          },
          {
            "name": "__repr__",
            "line": 247,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "BaseDSDMA"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/dma/base_dma.py",
        "classes": [
          {
            "name": "BaseDMA",
            "line": 20,
            "decorators": [],
            "bases": [
              "ABC",
              "<ast.Subscript object at 0x7b7497054e10>"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 27,
                "decorators": [],
                "args": [
                  "self",
                  "service_registry",
                  "model_name",
                  "max_retries",
                  "prompt_overrides",
                  "faculties",
                  "sink"
                ],
                "is_async": false,
                "class": "BaseDMA"
              },
              {
                "name": "_load_prompts",
                "line": 48,
                "decorators": [],
                "args": [
                  "self",
                  "overrides"
                ],
                "is_async": false,
                "class": "BaseDMA"
              },
              {
                "name": "get_llm_service",
                "line": 81,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "BaseDMA"
              },
              {
                "name": "call_llm_structured",
                "line": 89,
                "decorators": [],
                "args": [
                  "self",
                  "messages",
                  "response_model",
                  "max_tokens",
                  "temperature"
                ],
                "is_async": true,
                "class": "BaseDMA"
              },
              {
                "name": "apply_faculties",
                "line": 122,
                "decorators": [],
                "args": [
                  "self",
                  "content",
                  "context"
                ],
                "is_async": true,
                "class": "BaseDMA"
              },
              {
                "name": "get_confidence",
                "line": 150,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "BaseDMA"
              },
              {
                "name": "get_algorithm_type",
                "line": 155,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "BaseDMA"
              },
              {
                "name": "evaluate",
                "line": 161,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "BaseDMA"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 27,
            "decorators": [],
            "args": [
              "self",
              "service_registry",
              "model_name",
              "max_retries",
              "prompt_overrides",
              "faculties",
              "sink"
            ],
            "is_async": false,
            "class": "BaseDMA"
          },
          {
            "name": "_load_prompts",
            "line": 48,
            "decorators": [],
            "args": [
              "self",
              "overrides"
            ],
            "is_async": false,
            "class": "BaseDMA"
          },
          {
            "name": "get_llm_service",
            "line": 81,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "BaseDMA"
          },
          {
            "name": "call_llm_structured",
            "line": 89,
            "decorators": [],
            "args": [
              "self",
              "messages",
              "response_model",
              "max_tokens",
              "temperature"
            ],
            "is_async": true,
            "class": "BaseDMA"
          },
          {
            "name": "apply_faculties",
            "line": 122,
            "decorators": [],
            "args": [
              "self",
              "content",
              "context"
            ],
            "is_async": true,
            "class": "BaseDMA"
          },
          {
            "name": "get_confidence",
            "line": 150,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "BaseDMA"
          },
          {
            "name": "get_algorithm_type",
            "line": 155,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "BaseDMA"
          },
          {
            "name": "evaluate",
            "line": 161,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "BaseDMA"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/dma/csdma.py",
        "classes": [
          {
            "name": "CSDMAEvaluator",
            "line": 27,
            "decorators": [],
            "bases": [
              "BaseDMA",
              "CSDMAProtocol"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 33,
                "decorators": [],
                "args": [
                  "self",
                  "service_registry",
                  "model_name",
                  "max_retries",
                  "environmental_kg",
                  "task_specific_kg",
                  "prompt_overrides"
                ],
                "is_async": false,
                "class": "CSDMAEvaluator"
              },
              {
                "name": "_create_csdma_messages_for_instructor",
                "line": 81,
                "decorators": [],
                "args": [
                  "self",
                  "thought_content",
                  "context_summary",
                  "identity_context_block",
                  "system_snapshot_block",
                  "user_profiles_block"
                ],
                "is_async": false,
                "class": "CSDMAEvaluator"
              },
              {
                "name": "evaluate_thought",
                "line": 128,
                "decorators": [],
                "args": [
                  "self",
                  "thought_item"
                ],
                "is_async": true,
                "class": "CSDMAEvaluator"
              },
              {
                "name": "evaluate",
                "line": 196,
                "decorators": [],
                "args": [
                  "self",
                  "input_data"
                ],
                "is_async": true,
                "class": "CSDMAEvaluator"
              },
              {
                "name": "__repr__",
                "line": 200,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CSDMAEvaluator"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 33,
            "decorators": [],
            "args": [
              "self",
              "service_registry",
              "model_name",
              "max_retries",
              "environmental_kg",
              "task_specific_kg",
              "prompt_overrides"
            ],
            "is_async": false,
            "class": "CSDMAEvaluator"
          },
          {
            "name": "_create_csdma_messages_for_instructor",
            "line": 81,
            "decorators": [],
            "args": [
              "self",
              "thought_content",
              "context_summary",
              "identity_context_block",
              "system_snapshot_block",
              "user_profiles_block"
            ],
            "is_async": false,
            "class": "CSDMAEvaluator"
          },
          {
            "name": "evaluate_thought",
            "line": 128,
            "decorators": [],
            "args": [
              "self",
              "thought_item"
            ],
            "is_async": true,
            "class": "CSDMAEvaluator"
          },
          {
            "name": "evaluate",
            "line": 196,
            "decorators": [],
            "args": [
              "self",
              "input_data"
            ],
            "is_async": true,
            "class": "CSDMAEvaluator"
          },
          {
            "name": "__repr__",
            "line": 200,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CSDMAEvaluator"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/dma/exceptions.py",
        "classes": [
          {
            "name": "DMAFailure",
            "line": 1,
            "decorators": [],
            "bases": [
              "Exception"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/dma/dma_executor.py",
        "classes": [],
        "functions": [
          {
            "name": "run_dma_with_retries",
            "line": 30,
            "decorators": [],
            "args": [
              "run_fn"
            ],
            "is_async": true
          },
          {
            "name": "run_pdma",
            "line": 83,
            "decorators": [],
            "args": [
              "evaluator",
              "thought",
              "context"
            ],
            "is_async": true
          },
          {
            "name": "run_csdma",
            "line": 116,
            "decorators": [],
            "args": [
              "evaluator",
              "thought"
            ],
            "is_async": true
          },
          {
            "name": "run_dsdma",
            "line": 122,
            "decorators": [],
            "args": [
              "dsdma",
              "thought",
              "context"
            ],
            "is_async": true
          },
          {
            "name": "run_action_selection_pdma",
            "line": 131,
            "decorators": [],
            "args": [
              "evaluator",
              "triaged_inputs"
            ],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/secrets/service.py",
        "classes": [
          {
            "name": "SecretsService",
            "line": 28,
            "decorators": [],
            "bases": [
              "Service",
              "SecretsServiceProtocol",
              "ServiceProtocol"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 36,
                "decorators": [],
                "args": [
                  "self",
                  "time_service",
                  "store",
                  "filter_obj",
                  "detection_config",
                  "db_path",
                  "master_key"
                ],
                "is_async": false,
                "class": "SecretsService"
              },
              {
                "name": "process_incoming_text",
                "line": 62,
                "decorators": [],
                "args": [
                  "self",
                  "text",
                  "source_message_id"
                ],
                "is_async": true,
                "class": "SecretsService"
              },
              {
                "name": "recall_secret",
                "line": 128,
                "decorators": [],
                "args": [
                  "self",
                  "secret_uuid",
                  "purpose",
                  "accessor",
                  "decrypt"
                ],
                "is_async": true,
                "class": "SecretsService"
              },
              {
                "name": "decapsulate_secrets_in_parameters",
                "line": 170,
                "decorators": [],
                "args": [
                  "self",
                  "action_type",
                  "action_params",
                  "context"
                ],
                "is_async": true,
                "class": "SecretsService"
              },
              {
                "name": "_deep_decapsulate",
                "line": 201,
                "decorators": [],
                "args": [
                  "self",
                  "obj",
                  "action_type",
                  "context"
                ],
                "is_async": true,
                "class": "SecretsService"
              },
              {
                "name": "_decapsulate_string",
                "line": 223,
                "decorators": [],
                "args": [
                  "self",
                  "text",
                  "action_type",
                  "context"
                ],
                "is_async": true,
                "class": "SecretsService"
              },
              {
                "name": "update_filter_config",
                "line": 266,
                "decorators": [],
                "args": [
                  "self",
                  "updates",
                  "accessor"
                ],
                "is_async": true,
                "class": "SecretsService"
              },
              {
                "name": "list_stored_secrets",
                "line": 323,
                "decorators": [],
                "args": [
                  "self",
                  "limit"
                ],
                "is_async": true,
                "class": "SecretsService"
              },
              {
                "name": "forget_secret",
                "line": 342,
                "decorators": [],
                "args": [
                  "self",
                  "secret_uuid",
                  "accessor"
                ],
                "is_async": true,
                "class": "SecretsService"
              },
              {
                "name": "_auto_forget_task_secrets",
                "line": 360,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "SecretsService"
              },
              {
                "name": "_enable_auto_forget",
                "line": 384,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "SecretsService"
              },
              {
                "name": "_disable_auto_forget",
                "line": 388,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "SecretsService"
              },
              {
                "name": "_get_auto_decapsulate_actions",
                "line": 392,
                "decorators": [],
                "args": [
                  "self",
                  "sensitivity"
                ],
                "is_async": false,
                "class": "SecretsService"
              },
              {
                "name": "encrypt",
                "line": 412,
                "decorators": [],
                "args": [
                  "self",
                  "plaintext"
                ],
                "is_async": true,
                "class": "SecretsService"
              },
              {
                "name": "decrypt",
                "line": 421,
                "decorators": [],
                "args": [
                  "self",
                  "ciphertext"
                ],
                "is_async": true,
                "class": "SecretsService"
              },
              {
                "name": "store_secret",
                "line": 436,
                "decorators": [],
                "args": [
                  "self",
                  "key",
                  "value"
                ],
                "is_async": true,
                "class": "SecretsService"
              },
              {
                "name": "retrieve_secret",
                "line": 450,
                "decorators": [],
                "args": [
                  "self",
                  "key"
                ],
                "is_async": true,
                "class": "SecretsService"
              },
              {
                "name": "get_filter_config",
                "line": 461,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "SecretsService"
              },
              {
                "name": "get_service_stats",
                "line": 468,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "SecretsService"
              },
              {
                "name": "start",
                "line": 510,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "SecretsService"
              },
              {
                "name": "stop",
                "line": 514,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "SecretsService"
              },
              {
                "name": "is_healthy",
                "line": 522,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "SecretsService"
              },
              {
                "name": "reencrypt_all",
                "line": 533,
                "decorators": [],
                "args": [
                  "self",
                  "new_master_key"
                ],
                "is_async": true,
                "class": "SecretsService"
              },
              {
                "name": "get_capabilities",
                "line": 564,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "SecretsService"
              },
              {
                "name": "get_status",
                "line": 580,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "SecretsService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 36,
            "decorators": [],
            "args": [
              "self",
              "time_service",
              "store",
              "filter_obj",
              "detection_config",
              "db_path",
              "master_key"
            ],
            "is_async": false,
            "class": "SecretsService"
          },
          {
            "name": "process_incoming_text",
            "line": 62,
            "decorators": [],
            "args": [
              "self",
              "text",
              "source_message_id"
            ],
            "is_async": true,
            "class": "SecretsService"
          },
          {
            "name": "recall_secret",
            "line": 128,
            "decorators": [],
            "args": [
              "self",
              "secret_uuid",
              "purpose",
              "accessor",
              "decrypt"
            ],
            "is_async": true,
            "class": "SecretsService"
          },
          {
            "name": "decapsulate_secrets_in_parameters",
            "line": 170,
            "decorators": [],
            "args": [
              "self",
              "action_type",
              "action_params",
              "context"
            ],
            "is_async": true,
            "class": "SecretsService"
          },
          {
            "name": "_deep_decapsulate",
            "line": 201,
            "decorators": [],
            "args": [
              "self",
              "obj",
              "action_type",
              "context"
            ],
            "is_async": true,
            "class": "SecretsService"
          },
          {
            "name": "_decapsulate_string",
            "line": 223,
            "decorators": [],
            "args": [
              "self",
              "text",
              "action_type",
              "context"
            ],
            "is_async": true,
            "class": "SecretsService"
          },
          {
            "name": "update_filter_config",
            "line": 266,
            "decorators": [],
            "args": [
              "self",
              "updates",
              "accessor"
            ],
            "is_async": true,
            "class": "SecretsService"
          },
          {
            "name": "list_stored_secrets",
            "line": 323,
            "decorators": [],
            "args": [
              "self",
              "limit"
            ],
            "is_async": true,
            "class": "SecretsService"
          },
          {
            "name": "forget_secret",
            "line": 342,
            "decorators": [],
            "args": [
              "self",
              "secret_uuid",
              "accessor"
            ],
            "is_async": true,
            "class": "SecretsService"
          },
          {
            "name": "_auto_forget_task_secrets",
            "line": 360,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "SecretsService"
          },
          {
            "name": "_enable_auto_forget",
            "line": 384,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "SecretsService"
          },
          {
            "name": "_disable_auto_forget",
            "line": 388,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "SecretsService"
          },
          {
            "name": "_get_auto_decapsulate_actions",
            "line": 392,
            "decorators": [],
            "args": [
              "self",
              "sensitivity"
            ],
            "is_async": false,
            "class": "SecretsService"
          },
          {
            "name": "encrypt",
            "line": 412,
            "decorators": [],
            "args": [
              "self",
              "plaintext"
            ],
            "is_async": true,
            "class": "SecretsService"
          },
          {
            "name": "decrypt",
            "line": 421,
            "decorators": [],
            "args": [
              "self",
              "ciphertext"
            ],
            "is_async": true,
            "class": "SecretsService"
          },
          {
            "name": "store_secret",
            "line": 436,
            "decorators": [],
            "args": [
              "self",
              "key",
              "value"
            ],
            "is_async": true,
            "class": "SecretsService"
          },
          {
            "name": "retrieve_secret",
            "line": 450,
            "decorators": [],
            "args": [
              "self",
              "key"
            ],
            "is_async": true,
            "class": "SecretsService"
          },
          {
            "name": "get_filter_config",
            "line": 461,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "SecretsService"
          },
          {
            "name": "get_service_stats",
            "line": 468,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "SecretsService"
          },
          {
            "name": "start",
            "line": 510,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "SecretsService"
          },
          {
            "name": "stop",
            "line": 514,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "SecretsService"
          },
          {
            "name": "is_healthy",
            "line": 522,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "SecretsService"
          },
          {
            "name": "reencrypt_all",
            "line": 533,
            "decorators": [],
            "args": [
              "self",
              "new_master_key"
            ],
            "is_async": true,
            "class": "SecretsService"
          },
          {
            "name": "get_capabilities",
            "line": 564,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "SecretsService"
          },
          {
            "name": "get_status",
            "line": 580,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "SecretsService"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/secrets/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/secrets/store.py",
        "classes": [
          {
            "name": "SecretsStore",
            "line": 25,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 33,
                "decorators": [],
                "args": [
                  "self",
                  "time_service",
                  "db_path",
                  "master_key",
                  "max_accesses_per_minute",
                  "max_accesses_per_hour"
                ],
                "is_async": false,
                "class": "SecretsStore"
              },
              {
                "name": "_get_auto_decapsulate_actions",
                "line": 61,
                "decorators": [],
                "args": [
                  "self",
                  "sensitivity"
                ],
                "is_async": false,
                "class": "SecretsStore"
              },
              {
                "name": "_init_database",
                "line": 80,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "SecretsStore"
              },
              {
                "name": "store_secret",
                "line": 132,
                "decorators": [],
                "args": [
                  "self",
                  "secret",
                  "source_id"
                ],
                "is_async": true,
                "class": "SecretsStore"
              },
              {
                "name": "retrieve_secret",
                "line": 217,
                "decorators": [],
                "args": [
                  "self",
                  "secret_uuid",
                  "decrypt"
                ],
                "is_async": true,
                "class": "SecretsStore"
              },
              {
                "name": "decrypt_secret_value",
                "line": 294,
                "decorators": [],
                "args": [
                  "self",
                  "secret_record"
                ],
                "is_async": true,
                "class": "SecretsStore"
              },
              {
                "name": "delete_secret",
                "line": 314,
                "decorators": [],
                "args": [
                  "self",
                  "secret_uuid"
                ],
                "is_async": true,
                "class": "SecretsStore"
              },
              {
                "name": "list_secrets",
                "line": 349,
                "decorators": [],
                "args": [
                  "self",
                  "sensitivity_filter",
                  "pattern_filter"
                ],
                "is_async": true,
                "class": "SecretsStore"
              },
              {
                "name": "list_all_secrets",
                "line": 398,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "SecretsStore"
              },
              {
                "name": "_check_rate_limits",
                "line": 407,
                "decorators": [],
                "args": [
                  "self",
                  "accessor"
                ],
                "is_async": true,
                "class": "SecretsStore"
              },
              {
                "name": "_log_access",
                "line": 442,
                "decorators": [],
                "args": [
                  "self",
                  "secret_uuid",
                  "access_type",
                  "accessor",
                  "purpose",
                  "success",
                  "failure_reason"
                ],
                "is_async": true,
                "class": "SecretsStore"
              },
              {
                "name": "encrypt_secret",
                "line": 490,
                "decorators": [],
                "args": [
                  "self",
                  "value"
                ],
                "is_async": false,
                "class": "SecretsStore"
              },
              {
                "name": "decrypt_secret",
                "line": 494,
                "decorators": [],
                "args": [
                  "self",
                  "encrypted_value",
                  "salt",
                  "nonce"
                ],
                "is_async": false,
                "class": "SecretsStore"
              },
              {
                "name": "rotate_master_key",
                "line": 498,
                "decorators": [],
                "args": [
                  "self",
                  "new_master_key"
                ],
                "is_async": false,
                "class": "SecretsStore"
              },
              {
                "name": "test_encryption",
                "line": 502,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "SecretsStore"
              },
              {
                "name": "get_access_logs",
                "line": 512,
                "decorators": [],
                "args": [
                  "self",
                  "secret_uuid",
                  "limit"
                ],
                "is_async": true,
                "class": "SecretsStore"
              },
              {
                "name": "reencrypt_all",
                "line": 545,
                "decorators": [],
                "args": [
                  "self",
                  "new_encryption_key"
                ],
                "is_async": true,
                "class": "SecretsStore"
              },
              {
                "name": "update_access_log",
                "line": 594,
                "decorators": [],
                "args": [
                  "self",
                  "log_entry"
                ],
                "is_async": true,
                "class": "SecretsStore"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 33,
            "decorators": [],
            "args": [
              "self",
              "time_service",
              "db_path",
              "master_key",
              "max_accesses_per_minute",
              "max_accesses_per_hour"
            ],
            "is_async": false,
            "class": "SecretsStore"
          },
          {
            "name": "_get_auto_decapsulate_actions",
            "line": 61,
            "decorators": [],
            "args": [
              "self",
              "sensitivity"
            ],
            "is_async": false,
            "class": "SecretsStore"
          },
          {
            "name": "_init_database",
            "line": 80,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "SecretsStore"
          },
          {
            "name": "store_secret",
            "line": 132,
            "decorators": [],
            "args": [
              "self",
              "secret",
              "source_id"
            ],
            "is_async": true,
            "class": "SecretsStore"
          },
          {
            "name": "retrieve_secret",
            "line": 217,
            "decorators": [],
            "args": [
              "self",
              "secret_uuid",
              "decrypt"
            ],
            "is_async": true,
            "class": "SecretsStore"
          },
          {
            "name": "decrypt_secret_value",
            "line": 294,
            "decorators": [],
            "args": [
              "self",
              "secret_record"
            ],
            "is_async": true,
            "class": "SecretsStore"
          },
          {
            "name": "delete_secret",
            "line": 314,
            "decorators": [],
            "args": [
              "self",
              "secret_uuid"
            ],
            "is_async": true,
            "class": "SecretsStore"
          },
          {
            "name": "list_secrets",
            "line": 349,
            "decorators": [],
            "args": [
              "self",
              "sensitivity_filter",
              "pattern_filter"
            ],
            "is_async": true,
            "class": "SecretsStore"
          },
          {
            "name": "list_all_secrets",
            "line": 398,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "SecretsStore"
          },
          {
            "name": "_check_rate_limits",
            "line": 407,
            "decorators": [],
            "args": [
              "self",
              "accessor"
            ],
            "is_async": true,
            "class": "SecretsStore"
          },
          {
            "name": "_log_access",
            "line": 442,
            "decorators": [],
            "args": [
              "self",
              "secret_uuid",
              "access_type",
              "accessor",
              "purpose",
              "success",
              "failure_reason"
            ],
            "is_async": true,
            "class": "SecretsStore"
          },
          {
            "name": "encrypt_secret",
            "line": 490,
            "decorators": [],
            "args": [
              "self",
              "value"
            ],
            "is_async": false,
            "class": "SecretsStore"
          },
          {
            "name": "decrypt_secret",
            "line": 494,
            "decorators": [],
            "args": [
              "self",
              "encrypted_value",
              "salt",
              "nonce"
            ],
            "is_async": false,
            "class": "SecretsStore"
          },
          {
            "name": "rotate_master_key",
            "line": 498,
            "decorators": [],
            "args": [
              "self",
              "new_master_key"
            ],
            "is_async": false,
            "class": "SecretsStore"
          },
          {
            "name": "test_encryption",
            "line": 502,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "SecretsStore"
          },
          {
            "name": "get_access_logs",
            "line": 512,
            "decorators": [],
            "args": [
              "self",
              "secret_uuid",
              "limit"
            ],
            "is_async": true,
            "class": "SecretsStore"
          },
          {
            "name": "reencrypt_all",
            "line": 545,
            "decorators": [],
            "args": [
              "self",
              "new_encryption_key"
            ],
            "is_async": true,
            "class": "SecretsStore"
          },
          {
            "name": "update_access_log",
            "line": 594,
            "decorators": [],
            "args": [
              "self",
              "log_entry"
            ],
            "is_async": true,
            "class": "SecretsStore"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/secrets/encryption.py",
        "classes": [
          {
            "name": "SecretsEncryption",
            "line": 17,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 20,
                "decorators": [],
                "args": [
                  "self",
                  "master_key"
                ],
                "is_async": false,
                "class": "SecretsEncryption"
              },
              {
                "name": "_generate_master_key",
                "line": 35,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "SecretsEncryption"
              },
              {
                "name": "_derive_key",
                "line": 39,
                "decorators": [],
                "args": [
                  "self",
                  "salt"
                ],
                "is_async": false,
                "class": "SecretsEncryption"
              },
              {
                "name": "encrypt_secret",
                "line": 57,
                "decorators": [],
                "args": [
                  "self",
                  "value"
                ],
                "is_async": false,
                "class": "SecretsEncryption"
              },
              {
                "name": "decrypt_secret",
                "line": 78,
                "decorators": [],
                "args": [
                  "self",
                  "encrypted_value",
                  "salt",
                  "nonce"
                ],
                "is_async": false,
                "class": "SecretsEncryption"
              },
              {
                "name": "rotate_master_key",
                "line": 101,
                "decorators": [],
                "args": [
                  "self",
                  "new_master_key"
                ],
                "is_async": false,
                "class": "SecretsEncryption"
              },
              {
                "name": "get_master_key",
                "line": 123,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "SecretsEncryption"
              },
              {
                "name": "generate_key_from_password",
                "line": 128,
                "decorators": [
                  "staticmethod"
                ],
                "args": [
                  "password",
                  "salt"
                ],
                "is_async": false,
                "class": "SecretsEncryption"
              },
              {
                "name": "test_encryption",
                "line": 152,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "SecretsEncryption"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 20,
            "decorators": [],
            "args": [
              "self",
              "master_key"
            ],
            "is_async": false,
            "class": "SecretsEncryption"
          },
          {
            "name": "_generate_master_key",
            "line": 35,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "SecretsEncryption"
          },
          {
            "name": "_derive_key",
            "line": 39,
            "decorators": [],
            "args": [
              "self",
              "salt"
            ],
            "is_async": false,
            "class": "SecretsEncryption"
          },
          {
            "name": "encrypt_secret",
            "line": 57,
            "decorators": [],
            "args": [
              "self",
              "value"
            ],
            "is_async": false,
            "class": "SecretsEncryption"
          },
          {
            "name": "decrypt_secret",
            "line": 78,
            "decorators": [],
            "args": [
              "self",
              "encrypted_value",
              "salt",
              "nonce"
            ],
            "is_async": false,
            "class": "SecretsEncryption"
          },
          {
            "name": "rotate_master_key",
            "line": 101,
            "decorators": [],
            "args": [
              "self",
              "new_master_key"
            ],
            "is_async": false,
            "class": "SecretsEncryption"
          },
          {
            "name": "get_master_key",
            "line": 123,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "SecretsEncryption"
          },
          {
            "name": "generate_key_from_password",
            "line": 128,
            "decorators": [
              "staticmethod"
            ],
            "args": [
              "password",
              "salt"
            ],
            "is_async": false,
            "class": "SecretsEncryption"
          },
          {
            "name": "test_encryption",
            "line": 152,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "SecretsEncryption"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/secrets/filter.py",
        "classes": [
          {
            "name": "SecretsFilter",
            "line": 22,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 30,
                "decorators": [],
                "args": [
                  "self",
                  "detection_config"
                ],
                "is_async": false,
                "class": "SecretsFilter"
              },
              {
                "name": "_compile_patterns",
                "line": 35,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "SecretsFilter"
              },
              {
                "name": "detect_secrets",
                "line": 47,
                "decorators": [],
                "args": [
                  "self",
                  "text",
                  "context_hint"
                ],
                "is_async": false,
                "class": "SecretsFilter"
              },
              {
                "name": "filter_text",
                "line": 93,
                "decorators": [],
                "args": [
                  "self",
                  "text",
                  "context_hint"
                ],
                "is_async": false,
                "class": "SecretsFilter"
              },
              {
                "name": "_get_pattern_info",
                "line": 120,
                "decorators": [],
                "args": [
                  "self",
                  "pattern_name"
                ],
                "is_async": false,
                "class": "SecretsFilter"
              },
              {
                "name": "add_custom_pattern",
                "line": 128,
                "decorators": [],
                "args": [
                  "self",
                  "pattern"
                ],
                "is_async": false,
                "class": "SecretsFilter"
              },
              {
                "name": "remove_custom_pattern",
                "line": 139,
                "decorators": [],
                "args": [
                  "self",
                  "pattern_name"
                ],
                "is_async": false,
                "class": "SecretsFilter"
              },
              {
                "name": "disable_pattern",
                "line": 152,
                "decorators": [],
                "args": [
                  "self",
                  "pattern_name"
                ],
                "is_async": false,
                "class": "SecretsFilter"
              },
              {
                "name": "enable_pattern",
                "line": 161,
                "decorators": [],
                "args": [
                  "self",
                  "pattern_name"
                ],
                "is_async": false,
                "class": "SecretsFilter"
              },
              {
                "name": "get_pattern_stats",
                "line": 167,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "SecretsFilter"
              },
              {
                "name": "export_config",
                "line": 188,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "SecretsFilter"
              },
              {
                "name": "import_config",
                "line": 213,
                "decorators": [],
                "args": [
                  "self",
                  "config"
                ],
                "is_async": false,
                "class": "SecretsFilter"
              },
              {
                "name": "filter_content",
                "line": 238,
                "decorators": [],
                "args": [
                  "self",
                  "content",
                  "source_id"
                ],
                "is_async": true,
                "class": "SecretsFilter"
              },
              {
                "name": "add_pattern",
                "line": 262,
                "decorators": [],
                "args": [
                  "self",
                  "pattern"
                ],
                "is_async": true,
                "class": "SecretsFilter"
              },
              {
                "name": "remove_pattern",
                "line": 272,
                "decorators": [],
                "args": [
                  "self",
                  "pattern_name"
                ],
                "is_async": true,
                "class": "SecretsFilter"
              },
              {
                "name": "get_filter_config",
                "line": 276,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "SecretsFilter"
              },
              {
                "name": "update_filter_config",
                "line": 299,
                "decorators": [],
                "args": [
                  "self",
                  "updates"
                ],
                "is_async": true,
                "class": "SecretsFilter"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 30,
            "decorators": [],
            "args": [
              "self",
              "detection_config"
            ],
            "is_async": false,
            "class": "SecretsFilter"
          },
          {
            "name": "_compile_patterns",
            "line": 35,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "SecretsFilter"
          },
          {
            "name": "detect_secrets",
            "line": 47,
            "decorators": [],
            "args": [
              "self",
              "text",
              "context_hint"
            ],
            "is_async": false,
            "class": "SecretsFilter"
          },
          {
            "name": "filter_text",
            "line": 93,
            "decorators": [],
            "args": [
              "self",
              "text",
              "context_hint"
            ],
            "is_async": false,
            "class": "SecretsFilter"
          },
          {
            "name": "_get_pattern_info",
            "line": 120,
            "decorators": [],
            "args": [
              "self",
              "pattern_name"
            ],
            "is_async": false,
            "class": "SecretsFilter"
          },
          {
            "name": "add_custom_pattern",
            "line": 128,
            "decorators": [],
            "args": [
              "self",
              "pattern"
            ],
            "is_async": false,
            "class": "SecretsFilter"
          },
          {
            "name": "remove_custom_pattern",
            "line": 139,
            "decorators": [],
            "args": [
              "self",
              "pattern_name"
            ],
            "is_async": false,
            "class": "SecretsFilter"
          },
          {
            "name": "disable_pattern",
            "line": 152,
            "decorators": [],
            "args": [
              "self",
              "pattern_name"
            ],
            "is_async": false,
            "class": "SecretsFilter"
          },
          {
            "name": "enable_pattern",
            "line": 161,
            "decorators": [],
            "args": [
              "self",
              "pattern_name"
            ],
            "is_async": false,
            "class": "SecretsFilter"
          },
          {
            "name": "get_pattern_stats",
            "line": 167,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "SecretsFilter"
          },
          {
            "name": "export_config",
            "line": 188,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "SecretsFilter"
          },
          {
            "name": "import_config",
            "line": 213,
            "decorators": [],
            "args": [
              "self",
              "config"
            ],
            "is_async": false,
            "class": "SecretsFilter"
          },
          {
            "name": "filter_content",
            "line": 238,
            "decorators": [],
            "args": [
              "self",
              "content",
              "source_id"
            ],
            "is_async": true,
            "class": "SecretsFilter"
          },
          {
            "name": "add_pattern",
            "line": 262,
            "decorators": [],
            "args": [
              "self",
              "pattern"
            ],
            "is_async": true,
            "class": "SecretsFilter"
          },
          {
            "name": "remove_pattern",
            "line": 272,
            "decorators": [],
            "args": [
              "self",
              "pattern_name"
            ],
            "is_async": true,
            "class": "SecretsFilter"
          },
          {
            "name": "get_filter_config",
            "line": 276,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "SecretsFilter"
          },
          {
            "name": "update_filter_config",
            "line": 299,
            "decorators": [],
            "args": [
              "self",
              "updates"
            ],
            "is_async": true,
            "class": "SecretsFilter"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/formatters/escalation.py",
        "classes": [],
        "functions": [
          {
            "name": "get_escalation_guidance",
            "line": 3,
            "decorators": [],
            "args": [
              "actions_taken",
              "max_actions"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/formatters/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/formatters/prompt_blocks.py",
        "classes": [],
        "functions": [
          {
            "name": "format_parent_task_chain",
            "line": 5,
            "decorators": [],
            "args": [
              "parent_tasks"
            ],
            "is_async": false
          },
          {
            "name": "format_thoughts_chain",
            "line": 22,
            "decorators": [],
            "args": [
              "thoughts"
            ],
            "is_async": false
          },
          {
            "name": "format_system_prompt_blocks",
            "line": 34,
            "decorators": [],
            "args": [
              "identity_block",
              "task_history_block",
              "system_snapshot_block",
              "user_profiles_block",
              "escalation_guidance_block",
              "system_guidance_block"
            ],
            "is_async": false
          },
          {
            "name": "format_user_prompt_blocks",
            "line": 51,
            "decorators": [],
            "args": [
              "parent_tasks_block",
              "thoughts_chain_block",
              "schema_block"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/formatters/system_snapshot.py",
        "classes": [],
        "functions": [
          {
            "name": "format_system_snapshot",
            "line": 3,
            "decorators": [],
            "args": [
              "system_snapshot"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/formatters/user_profiles.py",
        "classes": [],
        "functions": [
          {
            "name": "format_user_profiles",
            "line": 4,
            "decorators": [],
            "args": [
              "profiles"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/registries/base.py",
        "classes": [
          {
            "name": "Priority",
            "line": 19,
            "decorators": [],
            "bases": [
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "SelectionStrategy",
            "line": 27,
            "decorators": [],
            "bases": [
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "ServiceProvider",
            "line": 34,
            "decorators": [
              "dataclass"
            ],
            "bases": [],
            "methods": []
          },
          {
            "name": "HealthCheckProtocol",
            "line": 45,
            "decorators": [],
            "bases": [
              "Protocol"
            ],
            "methods": [
              {
                "name": "is_healthy",
                "line": 47,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "HealthCheckProtocol"
              }
            ]
          },
          {
            "name": "ServiceRegistry",
            "line": 51,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 59,
                "decorators": [],
                "args": [
                  "self",
                  "required_services"
                ],
                "is_async": false,
                "class": "ServiceRegistry"
              },
              {
                "name": "register",
                "line": 71,
                "decorators": [],
                "args": [
                  "self",
                  "handler",
                  "service_type",
                  "provider",
                  "priority",
                  "capabilities",
                  "circuit_breaker_config",
                  "metadata",
                  "priority_group",
                  "strategy"
                ],
                "is_async": false,
                "class": "ServiceRegistry"
              },
              {
                "name": "register_global",
                "line": 131,
                "decorators": [],
                "args": [
                  "self",
                  "service_type",
                  "provider",
                  "priority",
                  "capabilities",
                  "circuit_breaker_config",
                  "metadata",
                  "priority_group",
                  "strategy"
                ],
                "is_async": false,
                "class": "ServiceRegistry"
              },
              {
                "name": "get_service",
                "line": 186,
                "decorators": [],
                "args": [
                  "self",
                  "handler",
                  "service_type",
                  "required_capabilities",
                  "fallback_to_global"
                ],
                "is_async": true,
                "class": "ServiceRegistry"
              },
              {
                "name": "_get_service_from_providers",
                "line": 244,
                "decorators": [],
                "args": [
                  "self",
                  "providers",
                  "required_capabilities"
                ],
                "is_async": true,
                "class": "ServiceRegistry"
              },
              {
                "name": "_validate_provider",
                "line": 280,
                "decorators": [],
                "args": [
                  "self",
                  "provider",
                  "required_capabilities"
                ],
                "is_async": true,
                "class": "ServiceRegistry"
              },
              {
                "name": "get_provider_info",
                "line": 320,
                "decorators": [],
                "args": [
                  "self",
                  "handler",
                  "service_type"
                ],
                "is_async": false,
                "class": "ServiceRegistry"
              },
              {
                "name": "unregister",
                "line": 382,
                "decorators": [],
                "args": [
                  "self",
                  "provider_name"
                ],
                "is_async": false,
                "class": "ServiceRegistry"
              },
              {
                "name": "get_services_by_type",
                "line": 417,
                "decorators": [],
                "args": [
                  "self",
                  "service_type"
                ],
                "is_async": false,
                "class": "ServiceRegistry"
              },
              {
                "name": "reset_circuit_breakers",
                "line": 460,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ServiceRegistry"
              },
              {
                "name": "clear_all",
                "line": 466,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ServiceRegistry"
              },
              {
                "name": "wait_ready",
                "line": 473,
                "decorators": [],
                "args": [
                  "self",
                  "timeout",
                  "service_types"
                ],
                "is_async": true,
                "class": "ServiceRegistry"
              },
              {
                "name": "_has_service_type",
                "line": 507,
                "decorators": [],
                "args": [
                  "self",
                  "service_type"
                ],
                "is_async": false,
                "class": "ServiceRegistry"
              }
            ]
          }
        ],
        "functions": [
          {
            "name": "get_global_registry",
            "line": 518,
            "decorators": [],
            "args": [],
            "is_async": false
          }
        ],
        "methods": [
          {
            "name": "is_healthy",
            "line": 47,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "HealthCheckProtocol"
          },
          {
            "name": "__init__",
            "line": 59,
            "decorators": [],
            "args": [
              "self",
              "required_services"
            ],
            "is_async": false,
            "class": "ServiceRegistry"
          },
          {
            "name": "register",
            "line": 71,
            "decorators": [],
            "args": [
              "self",
              "handler",
              "service_type",
              "provider",
              "priority",
              "capabilities",
              "circuit_breaker_config",
              "metadata",
              "priority_group",
              "strategy"
            ],
            "is_async": false,
            "class": "ServiceRegistry"
          },
          {
            "name": "register_global",
            "line": 131,
            "decorators": [],
            "args": [
              "self",
              "service_type",
              "provider",
              "priority",
              "capabilities",
              "circuit_breaker_config",
              "metadata",
              "priority_group",
              "strategy"
            ],
            "is_async": false,
            "class": "ServiceRegistry"
          },
          {
            "name": "get_service",
            "line": 186,
            "decorators": [],
            "args": [
              "self",
              "handler",
              "service_type",
              "required_capabilities",
              "fallback_to_global"
            ],
            "is_async": true,
            "class": "ServiceRegistry"
          },
          {
            "name": "_get_service_from_providers",
            "line": 244,
            "decorators": [],
            "args": [
              "self",
              "providers",
              "required_capabilities"
            ],
            "is_async": true,
            "class": "ServiceRegistry"
          },
          {
            "name": "_validate_provider",
            "line": 280,
            "decorators": [],
            "args": [
              "self",
              "provider",
              "required_capabilities"
            ],
            "is_async": true,
            "class": "ServiceRegistry"
          },
          {
            "name": "get_provider_info",
            "line": 320,
            "decorators": [],
            "args": [
              "self",
              "handler",
              "service_type"
            ],
            "is_async": false,
            "class": "ServiceRegistry"
          },
          {
            "name": "unregister",
            "line": 382,
            "decorators": [],
            "args": [
              "self",
              "provider_name"
            ],
            "is_async": false,
            "class": "ServiceRegistry"
          },
          {
            "name": "get_services_by_type",
            "line": 417,
            "decorators": [],
            "args": [
              "self",
              "service_type"
            ],
            "is_async": false,
            "class": "ServiceRegistry"
          },
          {
            "name": "reset_circuit_breakers",
            "line": 460,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ServiceRegistry"
          },
          {
            "name": "clear_all",
            "line": 466,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ServiceRegistry"
          },
          {
            "name": "wait_ready",
            "line": 473,
            "decorators": [],
            "args": [
              "self",
              "timeout",
              "service_types"
            ],
            "is_async": true,
            "class": "ServiceRegistry"
          },
          {
            "name": "_has_service_type",
            "line": 507,
            "decorators": [],
            "args": [
              "self",
              "service_type"
            ],
            "is_async": false,
            "class": "ServiceRegistry"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/registries/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/registries/circuit_breaker.py",
        "classes": [
          {
            "name": "CircuitBreakerError",
            "line": 16,
            "decorators": [],
            "bases": [
              "Exception"
            ],
            "methods": []
          },
          {
            "name": "CircuitState",
            "line": 19,
            "decorators": [],
            "bases": [
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "CircuitBreakerConfig",
            "line": 25,
            "decorators": [
              "dataclass"
            ],
            "bases": [],
            "methods": []
          },
          {
            "name": "CircuitBreaker",
            "line": 32,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 42,
                "decorators": [],
                "args": [
                  "self",
                  "name",
                  "config"
                ],
                "is_async": false,
                "class": "CircuitBreaker"
              },
              {
                "name": "is_available",
                "line": 53,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CircuitBreaker"
              },
              {
                "name": "check_and_raise",
                "line": 70,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CircuitBreaker"
              },
              {
                "name": "record_success",
                "line": 77,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CircuitBreaker"
              },
              {
                "name": "record_failure",
                "line": 87,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CircuitBreaker"
              },
              {
                "name": "_transition_to_open",
                "line": 98,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CircuitBreaker"
              },
              {
                "name": "_transition_to_half_open",
                "line": 104,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CircuitBreaker"
              },
              {
                "name": "_transition_to_closed",
                "line": 110,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CircuitBreaker"
              },
              {
                "name": "get_stats",
                "line": 117,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CircuitBreaker"
              },
              {
                "name": "reset",
                "line": 127,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CircuitBreaker"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 42,
            "decorators": [],
            "args": [
              "self",
              "name",
              "config"
            ],
            "is_async": false,
            "class": "CircuitBreaker"
          },
          {
            "name": "is_available",
            "line": 53,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CircuitBreaker"
          },
          {
            "name": "check_and_raise",
            "line": 70,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CircuitBreaker"
          },
          {
            "name": "record_success",
            "line": 77,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CircuitBreaker"
          },
          {
            "name": "record_failure",
            "line": 87,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CircuitBreaker"
          },
          {
            "name": "_transition_to_open",
            "line": 98,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CircuitBreaker"
          },
          {
            "name": "_transition_to_half_open",
            "line": 104,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CircuitBreaker"
          },
          {
            "name": "_transition_to_closed",
            "line": 110,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CircuitBreaker"
          },
          {
            "name": "get_stats",
            "line": 117,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CircuitBreaker"
          },
          {
            "name": "reset",
            "line": 127,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CircuitBreaker"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/persistence/utils.py",
        "classes": [],
        "functions": [
          {
            "name": "map_row_to_task",
            "line": 11,
            "decorators": [],
            "args": [
              "row"
            ],
            "is_async": false
          },
          {
            "name": "map_row_to_thought",
            "line": 68,
            "decorators": [],
            "args": [
              "row"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/persistence/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/persistence/maintenance.py",
        "classes": [
          {
            "name": "DatabaseMaintenanceService",
            "line": 25,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 29,
                "decorators": [],
                "args": [
                  "self",
                  "time_service",
                  "archive_dir_path",
                  "archive_older_than_hours"
                ],
                "is_async": false,
                "class": "DatabaseMaintenanceService"
              },
              {
                "name": "_ensure_shutdown_event",
                "line": 37,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DatabaseMaintenanceService"
              },
              {
                "name": "start",
                "line": 45,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DatabaseMaintenanceService"
              },
              {
                "name": "stop",
                "line": 50,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DatabaseMaintenanceService"
              },
              {
                "name": "_maintenance_loop",
                "line": 62,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DatabaseMaintenanceService"
              },
              {
                "name": "_perform_periodic_maintenance",
                "line": 76,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DatabaseMaintenanceService"
              },
              {
                "name": "_final_cleanup",
                "line": 80,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DatabaseMaintenanceService"
              },
              {
                "name": "perform_startup_cleanup",
                "line": 84,
                "decorators": [],
                "args": [
                  "self",
                  "time_service"
                ],
                "is_async": true,
                "class": "DatabaseMaintenanceService"
              },
              {
                "name": "_cleanup_invalid_thoughts",
                "line": 231,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DatabaseMaintenanceService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 29,
            "decorators": [],
            "args": [
              "self",
              "time_service",
              "archive_dir_path",
              "archive_older_than_hours"
            ],
            "is_async": false,
            "class": "DatabaseMaintenanceService"
          },
          {
            "name": "_ensure_shutdown_event",
            "line": 37,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DatabaseMaintenanceService"
          },
          {
            "name": "start",
            "line": 45,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DatabaseMaintenanceService"
          },
          {
            "name": "stop",
            "line": 50,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DatabaseMaintenanceService"
          },
          {
            "name": "_maintenance_loop",
            "line": 62,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DatabaseMaintenanceService"
          },
          {
            "name": "_perform_periodic_maintenance",
            "line": 76,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DatabaseMaintenanceService"
          },
          {
            "name": "_final_cleanup",
            "line": 80,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DatabaseMaintenanceService"
          },
          {
            "name": "perform_startup_cleanup",
            "line": 84,
            "decorators": [],
            "args": [
              "self",
              "time_service"
            ],
            "is_async": true,
            "class": "DatabaseMaintenanceService"
          },
          {
            "name": "_cleanup_invalid_thoughts",
            "line": 231,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DatabaseMaintenanceService"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/persistence/analytics.py",
        "classes": [],
        "functions": [
          {
            "name": "get_pending_thoughts_for_active_tasks",
            "line": 9,
            "decorators": [],
            "args": [
              "limit"
            ],
            "is_async": false
          },
          {
            "name": "count_pending_thoughts_for_active_tasks",
            "line": 21,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "count_active_tasks",
            "line": 31,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "get_tasks_needing_seed_thought",
            "line": 35,
            "decorators": [],
            "args": [
              "limit"
            ],
            "is_async": false
          },
          {
            "name": "pending_thoughts",
            "line": 47,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "thought_exists_for",
            "line": 51,
            "decorators": [],
            "args": [
              "task_id"
            ],
            "is_async": false
          },
          {
            "name": "count_thoughts_by_status",
            "line": 56,
            "decorators": [],
            "args": [
              "status"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/buses/bus_manager.py",
        "classes": [
          {
            "name": "BusManager",
            "line": 20,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 33,
                "decorators": [],
                "args": [
                  "self",
                  "service_registry",
                  "time_service",
                  "telemetry_service",
                  "audit_service"
                ],
                "is_async": false,
                "class": "BusManager"
              },
              {
                "name": "start",
                "line": 66,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "BusManager"
              },
              {
                "name": "stop",
                "line": 78,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "BusManager"
              },
              {
                "name": "get_stats",
                "line": 90,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "BusManager"
              },
              {
                "name": "get_total_queue_size",
                "line": 97,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "BusManager"
              },
              {
                "name": "health_check",
                "line": 101,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "BusManager"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 33,
            "decorators": [],
            "args": [
              "self",
              "service_registry",
              "time_service",
              "telemetry_service",
              "audit_service"
            ],
            "is_async": false,
            "class": "BusManager"
          },
          {
            "name": "start",
            "line": 66,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "BusManager"
          },
          {
            "name": "stop",
            "line": 78,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "BusManager"
          },
          {
            "name": "get_stats",
            "line": 90,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "BusManager"
          },
          {
            "name": "get_total_queue_size",
            "line": 97,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "BusManager"
          },
          {
            "name": "health_check",
            "line": 101,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "BusManager"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/buses/wise_bus.py",
        "classes": [
          {
            "name": "WiseBus",
            "line": 18,
            "decorators": [],
            "bases": [
              "<ast.Subscript object at 0x7b749708d7d0>"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 27,
                "decorators": [],
                "args": [
                  "self",
                  "service_registry",
                  "time_service"
                ],
                "is_async": false,
                "class": "WiseBus"
              },
              {
                "name": "send_deferral",
                "line": 34,
                "decorators": [],
                "args": [
                  "self",
                  "context",
                  "handler_name"
                ],
                "is_async": true,
                "class": "WiseBus"
              },
              {
                "name": "fetch_guidance",
                "line": 56,
                "decorators": [],
                "args": [
                  "self",
                  "context",
                  "handler_name"
                ],
                "is_async": true,
                "class": "WiseBus"
              },
              {
                "name": "request_review",
                "line": 78,
                "decorators": [],
                "args": [
                  "self",
                  "review_type",
                  "review_data",
                  "handler_name"
                ],
                "is_async": true,
                "class": "WiseBus"
              },
              {
                "name": "_process_message",
                "line": 97,
                "decorators": [],
                "args": [
                  "self",
                  "message"
                ],
                "is_async": true,
                "class": "WiseBus"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 27,
            "decorators": [],
            "args": [
              "self",
              "service_registry",
              "time_service"
            ],
            "is_async": false,
            "class": "WiseBus"
          },
          {
            "name": "send_deferral",
            "line": 34,
            "decorators": [],
            "args": [
              "self",
              "context",
              "handler_name"
            ],
            "is_async": true,
            "class": "WiseBus"
          },
          {
            "name": "fetch_guidance",
            "line": 56,
            "decorators": [],
            "args": [
              "self",
              "context",
              "handler_name"
            ],
            "is_async": true,
            "class": "WiseBus"
          },
          {
            "name": "request_review",
            "line": 78,
            "decorators": [],
            "args": [
              "self",
              "review_type",
              "review_data",
              "handler_name"
            ],
            "is_async": true,
            "class": "WiseBus"
          },
          {
            "name": "_process_message",
            "line": 97,
            "decorators": [],
            "args": [
              "self",
              "message"
            ],
            "is_async": true,
            "class": "WiseBus"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/buses/communication_bus.py",
        "classes": [
          {
            "name": "SendMessageRequest",
            "line": 22,
            "decorators": [
              "dataclass"
            ],
            "bases": [
              "BusMessage"
            ],
            "methods": []
          },
          {
            "name": "FetchMessagesRequest",
            "line": 28,
            "decorators": [
              "dataclass"
            ],
            "bases": [
              "BusMessage"
            ],
            "methods": []
          },
          {
            "name": "CommunicationBus",
            "line": 33,
            "decorators": [],
            "bases": [
              "<ast.Subscript object at 0x7b7496f02f50>"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 42,
                "decorators": [],
                "args": [
                  "self",
                  "service_registry",
                  "time_service"
                ],
                "is_async": false,
                "class": "CommunicationBus"
              },
              {
                "name": "send_message",
                "line": 49,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id",
                  "content",
                  "handler_name",
                  "metadata"
                ],
                "is_async": true,
                "class": "CommunicationBus"
              },
              {
                "name": "send_message_sync",
                "line": 75,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id",
                  "content",
                  "handler_name",
                  "metadata"
                ],
                "is_async": true,
                "class": "CommunicationBus"
              },
              {
                "name": "fetch_messages",
                "line": 103,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id",
                  "limit",
                  "handler_name"
                ],
                "is_async": true,
                "class": "CommunicationBus"
              },
              {
                "name": "_process_message",
                "line": 130,
                "decorators": [],
                "args": [
                  "self",
                  "message"
                ],
                "is_async": true,
                "class": "CommunicationBus"
              },
              {
                "name": "_process_send_message",
                "line": 140,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "CommunicationBus"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 42,
            "decorators": [],
            "args": [
              "self",
              "service_registry",
              "time_service"
            ],
            "is_async": false,
            "class": "CommunicationBus"
          },
          {
            "name": "send_message",
            "line": 49,
            "decorators": [],
            "args": [
              "self",
              "channel_id",
              "content",
              "handler_name",
              "metadata"
            ],
            "is_async": true,
            "class": "CommunicationBus"
          },
          {
            "name": "send_message_sync",
            "line": 75,
            "decorators": [],
            "args": [
              "self",
              "channel_id",
              "content",
              "handler_name",
              "metadata"
            ],
            "is_async": true,
            "class": "CommunicationBus"
          },
          {
            "name": "fetch_messages",
            "line": 103,
            "decorators": [],
            "args": [
              "self",
              "channel_id",
              "limit",
              "handler_name"
            ],
            "is_async": true,
            "class": "CommunicationBus"
          },
          {
            "name": "_process_message",
            "line": 130,
            "decorators": [],
            "args": [
              "self",
              "message"
            ],
            "is_async": true,
            "class": "CommunicationBus"
          },
          {
            "name": "_process_send_message",
            "line": 140,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "CommunicationBus"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/buses/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/buses/runtime_control_bus.py",
        "classes": [
          {
            "name": "OperationPriority",
            "line": 23,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "RuntimeControlBus",
            "line": 30,
            "decorators": [],
            "bases": [
              "<ast.Subscript object at 0x7b7496ef0190>"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 41,
                "decorators": [],
                "args": [
                  "self",
                  "service_registry",
                  "time_service"
                ],
                "is_async": false,
                "class": "RuntimeControlBus"
              },
              {
                "name": "get_processor_queue_status",
                "line": 52,
                "decorators": [],
                "args": [
                  "self",
                  "handler_name"
                ],
                "is_async": true,
                "class": "RuntimeControlBus"
              },
              {
                "name": "shutdown_runtime",
                "line": 86,
                "decorators": [],
                "args": [
                  "self",
                  "reason",
                  "handler_name"
                ],
                "is_async": true,
                "class": "RuntimeControlBus"
              },
              {
                "name": "get_config",
                "line": 139,
                "decorators": [],
                "args": [
                  "self",
                  "path",
                  "include_sensitive",
                  "handler_name"
                ],
                "is_async": true,
                "class": "RuntimeControlBus"
              },
              {
                "name": "get_runtime_status",
                "line": 161,
                "decorators": [],
                "args": [
                  "self",
                  "handler_name"
                ],
                "is_async": true,
                "class": "RuntimeControlBus"
              },
              {
                "name": "load_adapter",
                "line": 195,
                "decorators": [],
                "args": [
                  "self",
                  "adapter_type",
                  "adapter_id",
                  "config",
                  "auto_start",
                  "handler_name"
                ],
                "is_async": true,
                "class": "RuntimeControlBus"
              },
              {
                "name": "unload_adapter",
                "line": 246,
                "decorators": [],
                "args": [
                  "self",
                  "adapter_id",
                  "force",
                  "handler_name"
                ],
                "is_async": true,
                "class": "RuntimeControlBus"
              },
              {
                "name": "list_adapters",
                "line": 284,
                "decorators": [],
                "args": [
                  "self",
                  "handler_name"
                ],
                "is_async": true,
                "class": "RuntimeControlBus"
              },
              {
                "name": "pause_processing",
                "line": 304,
                "decorators": [],
                "args": [
                  "self",
                  "handler_name"
                ],
                "is_async": true,
                "class": "RuntimeControlBus"
              },
              {
                "name": "resume_processing",
                "line": 339,
                "decorators": [],
                "args": [
                  "self",
                  "handler_name"
                ],
                "is_async": true,
                "class": "RuntimeControlBus"
              },
              {
                "name": "single_step",
                "line": 374,
                "decorators": [],
                "args": [
                  "self",
                  "handler_name"
                ],
                "is_async": true,
                "class": "RuntimeControlBus"
              },
              {
                "name": "get_adapter_info",
                "line": 408,
                "decorators": [],
                "args": [
                  "self",
                  "adapter_id",
                  "handler_name"
                ],
                "is_async": true,
                "class": "RuntimeControlBus"
              },
              {
                "name": "is_healthy",
                "line": 443,
                "decorators": [],
                "args": [
                  "self",
                  "handler_name"
                ],
                "is_async": true,
                "class": "RuntimeControlBus"
              },
              {
                "name": "get_capabilities",
                "line": 454,
                "decorators": [],
                "args": [
                  "self",
                  "handler_name"
                ],
                "is_async": true,
                "class": "RuntimeControlBus"
              },
              {
                "name": "_process_message",
                "line": 465,
                "decorators": [],
                "args": [
                  "self",
                  "message"
                ],
                "is_async": true,
                "class": "RuntimeControlBus"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 41,
            "decorators": [],
            "args": [
              "self",
              "service_registry",
              "time_service"
            ],
            "is_async": false,
            "class": "RuntimeControlBus"
          },
          {
            "name": "get_processor_queue_status",
            "line": 52,
            "decorators": [],
            "args": [
              "self",
              "handler_name"
            ],
            "is_async": true,
            "class": "RuntimeControlBus"
          },
          {
            "name": "shutdown_runtime",
            "line": 86,
            "decorators": [],
            "args": [
              "self",
              "reason",
              "handler_name"
            ],
            "is_async": true,
            "class": "RuntimeControlBus"
          },
          {
            "name": "get_config",
            "line": 139,
            "decorators": [],
            "args": [
              "self",
              "path",
              "include_sensitive",
              "handler_name"
            ],
            "is_async": true,
            "class": "RuntimeControlBus"
          },
          {
            "name": "get_runtime_status",
            "line": 161,
            "decorators": [],
            "args": [
              "self",
              "handler_name"
            ],
            "is_async": true,
            "class": "RuntimeControlBus"
          },
          {
            "name": "load_adapter",
            "line": 195,
            "decorators": [],
            "args": [
              "self",
              "adapter_type",
              "adapter_id",
              "config",
              "auto_start",
              "handler_name"
            ],
            "is_async": true,
            "class": "RuntimeControlBus"
          },
          {
            "name": "unload_adapter",
            "line": 246,
            "decorators": [],
            "args": [
              "self",
              "adapter_id",
              "force",
              "handler_name"
            ],
            "is_async": true,
            "class": "RuntimeControlBus"
          },
          {
            "name": "list_adapters",
            "line": 284,
            "decorators": [],
            "args": [
              "self",
              "handler_name"
            ],
            "is_async": true,
            "class": "RuntimeControlBus"
          },
          {
            "name": "pause_processing",
            "line": 304,
            "decorators": [],
            "args": [
              "self",
              "handler_name"
            ],
            "is_async": true,
            "class": "RuntimeControlBus"
          },
          {
            "name": "resume_processing",
            "line": 339,
            "decorators": [],
            "args": [
              "self",
              "handler_name"
            ],
            "is_async": true,
            "class": "RuntimeControlBus"
          },
          {
            "name": "single_step",
            "line": 374,
            "decorators": [],
            "args": [
              "self",
              "handler_name"
            ],
            "is_async": true,
            "class": "RuntimeControlBus"
          },
          {
            "name": "get_adapter_info",
            "line": 408,
            "decorators": [],
            "args": [
              "self",
              "adapter_id",
              "handler_name"
            ],
            "is_async": true,
            "class": "RuntimeControlBus"
          },
          {
            "name": "is_healthy",
            "line": 443,
            "decorators": [],
            "args": [
              "self",
              "handler_name"
            ],
            "is_async": true,
            "class": "RuntimeControlBus"
          },
          {
            "name": "get_capabilities",
            "line": 454,
            "decorators": [],
            "args": [
              "self",
              "handler_name"
            ],
            "is_async": true,
            "class": "RuntimeControlBus"
          },
          {
            "name": "_process_message",
            "line": 465,
            "decorators": [],
            "args": [
              "self",
              "message"
            ],
            "is_async": true,
            "class": "RuntimeControlBus"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/buses/llm_bus.py",
        "classes": [
          {
            "name": "DistributionStrategy",
            "line": 28,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "ServiceMetrics",
            "line": 36,
            "decorators": [
              "dataclass"
            ],
            "bases": [],
            "methods": [
              {
                "name": "average_latency_ms",
                "line": 46,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ServiceMetrics"
              },
              {
                "name": "failure_rate",
                "line": 53,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ServiceMetrics"
              }
            ]
          },
          {
            "name": "MessageDict",
            "line": 60,
            "decorators": [
              "dataclass"
            ],
            "bases": [
              "TypedDict"
            ],
            "methods": []
          },
          {
            "name": "LLMRequest",
            "line": 65,
            "decorators": [],
            "bases": [
              "BusMessage"
            ],
            "methods": []
          },
          {
            "name": "CircuitBreaker",
            "line": 74,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 77,
                "decorators": [],
                "args": [
                  "self",
                  "failure_threshold",
                  "recovery_timeout",
                  "half_open_max_calls",
                  "time_service"
                ],
                "is_async": false,
                "class": "CircuitBreaker"
              },
              {
                "name": "record_success",
                "line": 94,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CircuitBreaker"
              },
              {
                "name": "record_failure",
                "line": 106,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CircuitBreaker"
              },
              {
                "name": "can_execute",
                "line": 118,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CircuitBreaker"
              }
            ]
          },
          {
            "name": "LLMBus",
            "line": 136,
            "decorators": [],
            "bases": [
              "<ast.Subscript object at 0x7b7496ee8d90>"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 149,
                "decorators": [],
                "args": [
                  "self",
                  "service_registry",
                  "time_service",
                  "telemetry_service",
                  "distribution_strategy",
                  "circuit_breaker_config"
                ],
                "is_async": false,
                "class": "LLMBus"
              },
              {
                "name": "call_llm_structured",
                "line": 178,
                "decorators": [],
                "args": [
                  "self",
                  "messages",
                  "response_model",
                  "max_tokens",
                  "temperature",
                  "handler_name"
                ],
                "is_async": true,
                "class": "LLMBus"
              },
              {
                "name": "_generate_structured_sync",
                "line": 281,
                "decorators": [],
                "args": [
                  "self",
                  "messages",
                  "response_model",
                  "handler_name",
                  "max_tokens",
                  "temperature"
                ],
                "is_async": true,
                "class": "LLMBus"
              },
              {
                "name": "_get_prioritized_services",
                "line": 302,
                "decorators": [],
                "args": [
                  "self",
                  "handler_name"
                ],
                "is_async": true,
                "class": "LLMBus"
              },
              {
                "name": "_group_by_priority",
                "line": 324,
                "decorators": [],
                "args": [
                  "self",
                  "services"
                ],
                "is_async": false,
                "class": "LLMBus"
              },
              {
                "name": "_select_service",
                "line": 334,
                "decorators": [],
                "args": [
                  "self",
                  "services",
                  "priority",
                  "handler_name"
                ],
                "is_async": true,
                "class": "LLMBus"
              },
              {
                "name": "_is_service_healthy",
                "line": 386,
                "decorators": [],
                "args": [
                  "self",
                  "service"
                ],
                "is_async": true,
                "class": "LLMBus"
              },
              {
                "name": "_check_circuit_breaker",
                "line": 394,
                "decorators": [],
                "args": [
                  "self",
                  "service_name"
                ],
                "is_async": false,
                "class": "LLMBus"
              },
              {
                "name": "_record_success",
                "line": 404,
                "decorators": [],
                "args": [
                  "self",
                  "service_name",
                  "latency_ms"
                ],
                "is_async": false,
                "class": "LLMBus"
              },
              {
                "name": "_record_failure",
                "line": 415,
                "decorators": [],
                "args": [
                  "self",
                  "service_name"
                ],
                "is_async": false,
                "class": "LLMBus"
              },
              {
                "name": "_record_resource_telemetry",
                "line": 426,
                "decorators": [],
                "args": [
                  "self",
                  "service_name",
                  "handler_name",
                  "usage",
                  "latency_ms"
                ],
                "is_async": true,
                "class": "LLMBus"
              },
              {
                "name": "get_service_stats",
                "line": 504,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "LLMBus"
              },
              {
                "name": "get_available_models",
                "line": 524,
                "decorators": [],
                "args": [
                  "self",
                  "handler_name"
                ],
                "is_async": true,
                "class": "LLMBus"
              },
              {
                "name": "is_healthy",
                "line": 541,
                "decorators": [],
                "args": [
                  "self",
                  "handler_name"
                ],
                "is_async": true,
                "class": "LLMBus"
              },
              {
                "name": "get_capabilities",
                "line": 552,
                "decorators": [],
                "args": [
                  "self",
                  "handler_name"
                ],
                "is_async": true,
                "class": "LLMBus"
              },
              {
                "name": "_process_message",
                "line": 563,
                "decorators": [],
                "args": [
                  "self",
                  "message"
                ],
                "is_async": true,
                "class": "LLMBus"
              },
              {
                "name": "get_stats",
                "line": 573,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "LLMBus"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "average_latency_ms",
            "line": 46,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ServiceMetrics"
          },
          {
            "name": "failure_rate",
            "line": 53,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ServiceMetrics"
          },
          {
            "name": "__init__",
            "line": 77,
            "decorators": [],
            "args": [
              "self",
              "failure_threshold",
              "recovery_timeout",
              "half_open_max_calls",
              "time_service"
            ],
            "is_async": false,
            "class": "CircuitBreaker"
          },
          {
            "name": "record_success",
            "line": 94,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CircuitBreaker"
          },
          {
            "name": "record_failure",
            "line": 106,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CircuitBreaker"
          },
          {
            "name": "can_execute",
            "line": 118,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CircuitBreaker"
          },
          {
            "name": "__init__",
            "line": 149,
            "decorators": [],
            "args": [
              "self",
              "service_registry",
              "time_service",
              "telemetry_service",
              "distribution_strategy",
              "circuit_breaker_config"
            ],
            "is_async": false,
            "class": "LLMBus"
          },
          {
            "name": "call_llm_structured",
            "line": 178,
            "decorators": [],
            "args": [
              "self",
              "messages",
              "response_model",
              "max_tokens",
              "temperature",
              "handler_name"
            ],
            "is_async": true,
            "class": "LLMBus"
          },
          {
            "name": "_generate_structured_sync",
            "line": 281,
            "decorators": [],
            "args": [
              "self",
              "messages",
              "response_model",
              "handler_name",
              "max_tokens",
              "temperature"
            ],
            "is_async": true,
            "class": "LLMBus"
          },
          {
            "name": "_get_prioritized_services",
            "line": 302,
            "decorators": [],
            "args": [
              "self",
              "handler_name"
            ],
            "is_async": true,
            "class": "LLMBus"
          },
          {
            "name": "_group_by_priority",
            "line": 324,
            "decorators": [],
            "args": [
              "self",
              "services"
            ],
            "is_async": false,
            "class": "LLMBus"
          },
          {
            "name": "_select_service",
            "line": 334,
            "decorators": [],
            "args": [
              "self",
              "services",
              "priority",
              "handler_name"
            ],
            "is_async": true,
            "class": "LLMBus"
          },
          {
            "name": "_is_service_healthy",
            "line": 386,
            "decorators": [],
            "args": [
              "self",
              "service"
            ],
            "is_async": true,
            "class": "LLMBus"
          },
          {
            "name": "_check_circuit_breaker",
            "line": 394,
            "decorators": [],
            "args": [
              "self",
              "service_name"
            ],
            "is_async": false,
            "class": "LLMBus"
          },
          {
            "name": "_record_success",
            "line": 404,
            "decorators": [],
            "args": [
              "self",
              "service_name",
              "latency_ms"
            ],
            "is_async": false,
            "class": "LLMBus"
          },
          {
            "name": "_record_failure",
            "line": 415,
            "decorators": [],
            "args": [
              "self",
              "service_name"
            ],
            "is_async": false,
            "class": "LLMBus"
          },
          {
            "name": "_record_resource_telemetry",
            "line": 426,
            "decorators": [],
            "args": [
              "self",
              "service_name",
              "handler_name",
              "usage",
              "latency_ms"
            ],
            "is_async": true,
            "class": "LLMBus"
          },
          {
            "name": "get_service_stats",
            "line": 504,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "LLMBus"
          },
          {
            "name": "get_available_models",
            "line": 524,
            "decorators": [],
            "args": [
              "self",
              "handler_name"
            ],
            "is_async": true,
            "class": "LLMBus"
          },
          {
            "name": "is_healthy",
            "line": 541,
            "decorators": [],
            "args": [
              "self",
              "handler_name"
            ],
            "is_async": true,
            "class": "LLMBus"
          },
          {
            "name": "get_capabilities",
            "line": 552,
            "decorators": [],
            "args": [
              "self",
              "handler_name"
            ],
            "is_async": true,
            "class": "LLMBus"
          },
          {
            "name": "_process_message",
            "line": 563,
            "decorators": [],
            "args": [
              "self",
              "message"
            ],
            "is_async": true,
            "class": "LLMBus"
          },
          {
            "name": "get_stats",
            "line": 573,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "LLMBus"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/buses/base_bus.py",
        "classes": [
          {
            "name": "BusMessage",
            "line": 19,
            "decorators": [
              "dataclass"
            ],
            "bases": [],
            "methods": []
          },
          {
            "name": "BaseBus",
            "line": 29,
            "decorators": [],
            "bases": [
              "ABC",
              "<ast.Subscript object at 0x7b7497043b90>"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 40,
                "decorators": [],
                "args": [
                  "self",
                  "service_type",
                  "service_registry",
                  "max_queue_size"
                ],
                "is_async": false,
                "class": "BaseBus"
              },
              {
                "name": "start",
                "line": 63,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "BaseBus"
              },
              {
                "name": "stop",
                "line": 73,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "BaseBus"
              },
              {
                "name": "_process_loop",
                "line": 84,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "BaseBus"
              },
              {
                "name": "_process_message",
                "line": 112,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "message"
                ],
                "is_async": true,
                "class": "BaseBus"
              },
              {
                "name": "_handle_failed_message",
                "line": 116,
                "decorators": [],
                "args": [
                  "self",
                  "message",
                  "error"
                ],
                "is_async": true,
                "class": "BaseBus"
              },
              {
                "name": "get_service",
                "line": 122,
                "decorators": [],
                "args": [
                  "self",
                  "handler_name",
                  "required_capabilities"
                ],
                "is_async": true,
                "class": "BaseBus"
              },
              {
                "name": "get_queue_size",
                "line": 137,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "BaseBus"
              },
              {
                "name": "get_stats",
                "line": 141,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "BaseBus"
              },
              {
                "name": "_enqueue",
                "line": 151,
                "decorators": [],
                "args": [
                  "self",
                  "message"
                ],
                "is_async": true,
                "class": "BaseBus"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 40,
            "decorators": [],
            "args": [
              "self",
              "service_type",
              "service_registry",
              "max_queue_size"
            ],
            "is_async": false,
            "class": "BaseBus"
          },
          {
            "name": "start",
            "line": 63,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "BaseBus"
          },
          {
            "name": "stop",
            "line": 73,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "BaseBus"
          },
          {
            "name": "_process_loop",
            "line": 84,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "BaseBus"
          },
          {
            "name": "_process_message",
            "line": 112,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "message"
            ],
            "is_async": true,
            "class": "BaseBus"
          },
          {
            "name": "_handle_failed_message",
            "line": 116,
            "decorators": [],
            "args": [
              "self",
              "message",
              "error"
            ],
            "is_async": true,
            "class": "BaseBus"
          },
          {
            "name": "get_service",
            "line": 122,
            "decorators": [],
            "args": [
              "self",
              "handler_name",
              "required_capabilities"
            ],
            "is_async": true,
            "class": "BaseBus"
          },
          {
            "name": "get_queue_size",
            "line": 137,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "BaseBus"
          },
          {
            "name": "get_stats",
            "line": 141,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "BaseBus"
          },
          {
            "name": "_enqueue",
            "line": 151,
            "decorators": [],
            "args": [
              "self",
              "message"
            ],
            "is_async": true,
            "class": "BaseBus"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/buses/tool_bus.py",
        "classes": [
          {
            "name": "ToolBus",
            "line": 20,
            "decorators": [],
            "bases": [
              "<ast.Subscript object at 0x7b749705bd50>"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 33,
                "decorators": [],
                "args": [
                  "self",
                  "service_registry",
                  "time_service"
                ],
                "is_async": false,
                "class": "ToolBus"
              },
              {
                "name": "execute_tool",
                "line": 40,
                "decorators": [],
                "args": [
                  "self",
                  "tool_name",
                  "parameters",
                  "handler_name"
                ],
                "is_async": true,
                "class": "ToolBus"
              },
              {
                "name": "get_available_tools",
                "line": 80,
                "decorators": [],
                "args": [
                  "self",
                  "handler_name"
                ],
                "is_async": true,
                "class": "ToolBus"
              },
              {
                "name": "get_tool_result",
                "line": 100,
                "decorators": [],
                "args": [
                  "self",
                  "correlation_id",
                  "timeout",
                  "handler_name"
                ],
                "is_async": true,
                "class": "ToolBus"
              },
              {
                "name": "validate_parameters",
                "line": 122,
                "decorators": [],
                "args": [
                  "self",
                  "tool_name",
                  "parameters",
                  "handler_name"
                ],
                "is_async": true,
                "class": "ToolBus"
              },
              {
                "name": "is_healthy",
                "line": 144,
                "decorators": [],
                "args": [
                  "self",
                  "handler_name"
                ],
                "is_async": true,
                "class": "ToolBus"
              },
              {
                "name": "get_tool_info",
                "line": 155,
                "decorators": [],
                "args": [
                  "self",
                  "tool_name",
                  "handler_name"
                ],
                "is_async": true,
                "class": "ToolBus"
              },
              {
                "name": "get_all_tool_info",
                "line": 176,
                "decorators": [],
                "args": [
                  "self",
                  "handler_name"
                ],
                "is_async": true,
                "class": "ToolBus"
              },
              {
                "name": "get_capabilities",
                "line": 196,
                "decorators": [],
                "args": [
                  "self",
                  "handler_name"
                ],
                "is_async": true,
                "class": "ToolBus"
              },
              {
                "name": "_process_message",
                "line": 207,
                "decorators": [],
                "args": [
                  "self",
                  "message"
                ],
                "is_async": true,
                "class": "ToolBus"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 33,
            "decorators": [],
            "args": [
              "self",
              "service_registry",
              "time_service"
            ],
            "is_async": false,
            "class": "ToolBus"
          },
          {
            "name": "execute_tool",
            "line": 40,
            "decorators": [],
            "args": [
              "self",
              "tool_name",
              "parameters",
              "handler_name"
            ],
            "is_async": true,
            "class": "ToolBus"
          },
          {
            "name": "get_available_tools",
            "line": 80,
            "decorators": [],
            "args": [
              "self",
              "handler_name"
            ],
            "is_async": true,
            "class": "ToolBus"
          },
          {
            "name": "get_tool_result",
            "line": 100,
            "decorators": [],
            "args": [
              "self",
              "correlation_id",
              "timeout",
              "handler_name"
            ],
            "is_async": true,
            "class": "ToolBus"
          },
          {
            "name": "validate_parameters",
            "line": 122,
            "decorators": [],
            "args": [
              "self",
              "tool_name",
              "parameters",
              "handler_name"
            ],
            "is_async": true,
            "class": "ToolBus"
          },
          {
            "name": "is_healthy",
            "line": 144,
            "decorators": [],
            "args": [
              "self",
              "handler_name"
            ],
            "is_async": true,
            "class": "ToolBus"
          },
          {
            "name": "get_tool_info",
            "line": 155,
            "decorators": [],
            "args": [
              "self",
              "tool_name",
              "handler_name"
            ],
            "is_async": true,
            "class": "ToolBus"
          },
          {
            "name": "get_all_tool_info",
            "line": 176,
            "decorators": [],
            "args": [
              "self",
              "handler_name"
            ],
            "is_async": true,
            "class": "ToolBus"
          },
          {
            "name": "get_capabilities",
            "line": 196,
            "decorators": [],
            "args": [
              "self",
              "handler_name"
            ],
            "is_async": true,
            "class": "ToolBus"
          },
          {
            "name": "_process_message",
            "line": 207,
            "decorators": [],
            "args": [
              "self",
              "message"
            ],
            "is_async": true,
            "class": "ToolBus"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/buses/memory_bus.py",
        "classes": [
          {
            "name": "MemorizeRequest",
            "line": 23,
            "decorators": [
              "dataclass"
            ],
            "bases": [
              "BusMessage"
            ],
            "methods": []
          },
          {
            "name": "RecallRequest",
            "line": 28,
            "decorators": [
              "dataclass"
            ],
            "bases": [
              "BusMessage"
            ],
            "methods": []
          },
          {
            "name": "ForgetRequest",
            "line": 33,
            "decorators": [
              "dataclass"
            ],
            "bases": [
              "BusMessage"
            ],
            "methods": []
          },
          {
            "name": "MemoryBus",
            "line": 37,
            "decorators": [],
            "bases": [
              "<ast.Subscript object at 0x7b7497095790>"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 47,
                "decorators": [],
                "args": [
                  "self",
                  "service_registry",
                  "time_service",
                  "audit_service"
                ],
                "is_async": false,
                "class": "MemoryBus"
              },
              {
                "name": "memorize",
                "line": 55,
                "decorators": [],
                "args": [
                  "self",
                  "node",
                  "handler_name",
                  "metadata"
                ],
                "is_async": true,
                "class": "MemoryBus"
              },
              {
                "name": "recall",
                "line": 91,
                "decorators": [],
                "args": [
                  "self",
                  "recall_query",
                  "handler_name",
                  "metadata"
                ],
                "is_async": true,
                "class": "MemoryBus"
              },
              {
                "name": "forget",
                "line": 118,
                "decorators": [],
                "args": [
                  "self",
                  "node",
                  "handler_name",
                  "metadata"
                ],
                "is_async": true,
                "class": "MemoryBus"
              },
              {
                "name": "search_memories",
                "line": 154,
                "decorators": [],
                "args": [
                  "self",
                  "query",
                  "scope",
                  "limit",
                  "handler_name"
                ],
                "is_async": true,
                "class": "MemoryBus"
              },
              {
                "name": "recall_timeseries",
                "line": 177,
                "decorators": [],
                "args": [
                  "self",
                  "scope",
                  "hours",
                  "correlation_types",
                  "handler_name"
                ],
                "is_async": true,
                "class": "MemoryBus"
              },
              {
                "name": "memorize_metric",
                "line": 200,
                "decorators": [],
                "args": [
                  "self",
                  "metric_name",
                  "value",
                  "tags",
                  "scope",
                  "handler_name"
                ],
                "is_async": true,
                "class": "MemoryBus"
              },
              {
                "name": "memorize_log",
                "line": 231,
                "decorators": [],
                "args": [
                  "self",
                  "log_message",
                  "log_level",
                  "tags",
                  "scope",
                  "handler_name"
                ],
                "is_async": true,
                "class": "MemoryBus"
              },
              {
                "name": "export_identity_context",
                "line": 262,
                "decorators": [],
                "args": [
                  "self",
                  "handler_name"
                ],
                "is_async": true,
                "class": "MemoryBus"
              },
              {
                "name": "is_healthy",
                "line": 283,
                "decorators": [],
                "args": [
                  "self",
                  "handler_name"
                ],
                "is_async": true,
                "class": "MemoryBus"
              },
              {
                "name": "get_capabilities",
                "line": 294,
                "decorators": [],
                "args": [
                  "self",
                  "handler_name"
                ],
                "is_async": true,
                "class": "MemoryBus"
              },
              {
                "name": "_process_message",
                "line": 305,
                "decorators": [],
                "args": [
                  "self",
                  "message"
                ],
                "is_async": true,
                "class": "MemoryBus"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 47,
            "decorators": [],
            "args": [
              "self",
              "service_registry",
              "time_service",
              "audit_service"
            ],
            "is_async": false,
            "class": "MemoryBus"
          },
          {
            "name": "memorize",
            "line": 55,
            "decorators": [],
            "args": [
              "self",
              "node",
              "handler_name",
              "metadata"
            ],
            "is_async": true,
            "class": "MemoryBus"
          },
          {
            "name": "recall",
            "line": 91,
            "decorators": [],
            "args": [
              "self",
              "recall_query",
              "handler_name",
              "metadata"
            ],
            "is_async": true,
            "class": "MemoryBus"
          },
          {
            "name": "forget",
            "line": 118,
            "decorators": [],
            "args": [
              "self",
              "node",
              "handler_name",
              "metadata"
            ],
            "is_async": true,
            "class": "MemoryBus"
          },
          {
            "name": "search_memories",
            "line": 154,
            "decorators": [],
            "args": [
              "self",
              "query",
              "scope",
              "limit",
              "handler_name"
            ],
            "is_async": true,
            "class": "MemoryBus"
          },
          {
            "name": "recall_timeseries",
            "line": 177,
            "decorators": [],
            "args": [
              "self",
              "scope",
              "hours",
              "correlation_types",
              "handler_name"
            ],
            "is_async": true,
            "class": "MemoryBus"
          },
          {
            "name": "memorize_metric",
            "line": 200,
            "decorators": [],
            "args": [
              "self",
              "metric_name",
              "value",
              "tags",
              "scope",
              "handler_name"
            ],
            "is_async": true,
            "class": "MemoryBus"
          },
          {
            "name": "memorize_log",
            "line": 231,
            "decorators": [],
            "args": [
              "self",
              "log_message",
              "log_level",
              "tags",
              "scope",
              "handler_name"
            ],
            "is_async": true,
            "class": "MemoryBus"
          },
          {
            "name": "export_identity_context",
            "line": 262,
            "decorators": [],
            "args": [
              "self",
              "handler_name"
            ],
            "is_async": true,
            "class": "MemoryBus"
          },
          {
            "name": "is_healthy",
            "line": 283,
            "decorators": [],
            "args": [
              "self",
              "handler_name"
            ],
            "is_async": true,
            "class": "MemoryBus"
          },
          {
            "name": "get_capabilities",
            "line": 294,
            "decorators": [],
            "args": [
              "self",
              "handler_name"
            ],
            "is_async": true,
            "class": "MemoryBus"
          },
          {
            "name": "_process_message",
            "line": 305,
            "decorators": [],
            "args": [
              "self",
              "message"
            ],
            "is_async": true,
            "class": "MemoryBus"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/infrastructure/handlers/handler_registry.py",
        "classes": [],
        "functions": [
          {
            "name": "build_action_dispatcher",
            "line": 20,
            "decorators": [],
            "args": [
              "bus_manager",
              "time_service",
              "max_rounds",
              "shutdown_callback",
              "telemetry_service",
              "secrets_service"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/infrastructure/handlers/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/infrastructure/handlers/action_dispatcher.py",
        "classes": [
          {
            "name": "ActionDispatcher",
            "line": 14,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 15,
                "decorators": [],
                "args": [
                  "self",
                  "handlers",
                  "telemetry_service"
                ],
                "is_async": false,
                "class": "ActionDispatcher"
              },
              {
                "name": "get_handler",
                "line": 34,
                "decorators": [],
                "args": [
                  "self",
                  "action_type"
                ],
                "is_async": false,
                "class": "ActionDispatcher"
              },
              {
                "name": "dispatch",
                "line": 38,
                "decorators": [],
                "args": [
                  "self",
                  "action_selection_result",
                  "thought",
                  "dispatch_context"
                ],
                "is_async": true,
                "class": "ActionDispatcher"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 15,
            "decorators": [],
            "args": [
              "self",
              "handlers",
              "telemetry_service"
            ],
            "is_async": false,
            "class": "ActionDispatcher"
          },
          {
            "name": "get_handler",
            "line": 34,
            "decorators": [],
            "args": [
              "self",
              "action_type"
            ],
            "is_async": false,
            "class": "ActionDispatcher"
          },
          {
            "name": "dispatch",
            "line": 38,
            "decorators": [],
            "args": [
              "self",
              "action_selection_result",
              "thought",
              "dispatch_context"
            ],
            "is_async": true,
            "class": "ActionDispatcher"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/infrastructure/handlers/base_handler.py",
        "classes": [
          {
            "name": "ActionHandlerDependencies",
            "line": 28,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 30,
                "decorators": [],
                "args": [
                  "self",
                  "bus_manager",
                  "time_service",
                  "secrets_service",
                  "shutdown_callback"
                ],
                "is_async": false,
                "class": "ActionHandlerDependencies"
              },
              {
                "name": "request_graceful_shutdown",
                "line": 43,
                "decorators": [],
                "args": [
                  "self",
                  "reason"
                ],
                "is_async": false,
                "class": "ActionHandlerDependencies"
              }
            ]
          },
          {
            "name": "BaseActionHandler",
            "line": 66,
            "decorators": [],
            "bases": [
              "ABC"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 69,
                "decorators": [],
                "args": [
                  "self",
                  "dependencies"
                ],
                "is_async": false,
                "class": "BaseActionHandler"
              },
              {
                "name": "handle",
                "line": 78,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "result",
                  "thought",
                  "dispatch_context"
                ],
                "is_async": true,
                "class": "BaseActionHandler"
              },
              {
                "name": "_audit_log",
                "line": 97,
                "decorators": [],
                "args": [
                  "self",
                  "action_type",
                  "dispatch_context",
                  "outcome"
                ],
                "is_async": true,
                "class": "BaseActionHandler"
              },
              {
                "name": "_handle_error",
                "line": 129,
                "decorators": [],
                "args": [
                  "self",
                  "action_type",
                  "dispatch_context",
                  "thought_id",
                  "error"
                ],
                "is_async": true,
                "class": "BaseActionHandler"
              },
              {
                "name": "_validate_and_convert_params",
                "line": 149,
                "decorators": [],
                "args": [
                  "self",
                  "params",
                  "param_class"
                ],
                "is_async": true,
                "class": "BaseActionHandler"
              },
              {
                "name": "_decapsulate_secrets_in_params",
                "line": 175,
                "decorators": [],
                "args": [
                  "self",
                  "result",
                  "action_name"
                ],
                "is_async": true,
                "class": "BaseActionHandler"
              },
              {
                "name": "_get_channel_id",
                "line": 214,
                "decorators": [],
                "args": [
                  "self",
                  "thought",
                  "dispatch_context"
                ],
                "is_async": true,
                "class": "BaseActionHandler"
              },
              {
                "name": "_send_notification",
                "line": 239,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id",
                  "content"
                ],
                "is_async": true,
                "class": "BaseActionHandler"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 30,
            "decorators": [],
            "args": [
              "self",
              "bus_manager",
              "time_service",
              "secrets_service",
              "shutdown_callback"
            ],
            "is_async": false,
            "class": "ActionHandlerDependencies"
          },
          {
            "name": "request_graceful_shutdown",
            "line": 43,
            "decorators": [],
            "args": [
              "self",
              "reason"
            ],
            "is_async": false,
            "class": "ActionHandlerDependencies"
          },
          {
            "name": "__init__",
            "line": 69,
            "decorators": [],
            "args": [
              "self",
              "dependencies"
            ],
            "is_async": false,
            "class": "BaseActionHandler"
          },
          {
            "name": "handle",
            "line": 78,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "result",
              "thought",
              "dispatch_context"
            ],
            "is_async": true,
            "class": "BaseActionHandler"
          },
          {
            "name": "_audit_log",
            "line": 97,
            "decorators": [],
            "args": [
              "self",
              "action_type",
              "dispatch_context",
              "outcome"
            ],
            "is_async": true,
            "class": "BaseActionHandler"
          },
          {
            "name": "_handle_error",
            "line": 129,
            "decorators": [],
            "args": [
              "self",
              "action_type",
              "dispatch_context",
              "thought_id",
              "error"
            ],
            "is_async": true,
            "class": "BaseActionHandler"
          },
          {
            "name": "_validate_and_convert_params",
            "line": 149,
            "decorators": [],
            "args": [
              "self",
              "params",
              "param_class"
            ],
            "is_async": true,
            "class": "BaseActionHandler"
          },
          {
            "name": "_decapsulate_secrets_in_params",
            "line": 175,
            "decorators": [],
            "args": [
              "self",
              "result",
              "action_name"
            ],
            "is_async": true,
            "class": "BaseActionHandler"
          },
          {
            "name": "_get_channel_id",
            "line": 214,
            "decorators": [],
            "args": [
              "self",
              "thought",
              "dispatch_context"
            ],
            "is_async": true,
            "class": "BaseActionHandler"
          },
          {
            "name": "_send_notification",
            "line": 239,
            "decorators": [],
            "args": [
              "self",
              "channel_id",
              "content"
            ],
            "is_async": true,
            "class": "BaseActionHandler"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/infrastructure/handlers/helpers.py",
        "classes": [],
        "functions": [
          {
            "name": "create_follow_up_thought",
            "line": 10,
            "decorators": [],
            "args": [
              "parent",
              "time_service",
              "content",
              "thought_type"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/infrastructure/handlers/exceptions.py",
        "classes": [
          {
            "name": "FollowUpCreationError",
            "line": 2,
            "decorators": [],
            "bases": [
              "Exception"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/infrastructure/sub_services/configuration_feedback_loop.py",
        "classes": [
          {
            "name": "ConfigurationFeedbackLoop",
            "line": 36,
            "decorators": [],
            "bases": [
              "Service"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 44,
                "decorators": [],
                "args": [
                  "self",
                  "time_service",
                  "memory_bus",
                  "analysis_interval_hours"
                ],
                "is_async": false,
                "class": "ConfigurationFeedbackLoop"
              },
              {
                "name": "set_service_registry",
                "line": 62,
                "decorators": [],
                "args": [
                  "self",
                  "registry"
                ],
                "is_async": false,
                "class": "ConfigurationFeedbackLoop"
              },
              {
                "name": "analyze_and_adapt",
                "line": 72,
                "decorators": [],
                "args": [
                  "self",
                  "force"
                ],
                "is_async": true,
                "class": "ConfigurationFeedbackLoop"
              },
              {
                "name": "_detect_patterns",
                "line": 122,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ConfigurationFeedbackLoop"
              },
              {
                "name": "_detect_temporal_patterns",
                "line": 154,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ConfigurationFeedbackLoop"
              },
              {
                "name": "_detect_frequency_patterns",
                "line": 180,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ConfigurationFeedbackLoop"
              },
              {
                "name": "_detect_performance_patterns",
                "line": 242,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ConfigurationFeedbackLoop"
              },
              {
                "name": "_detect_error_patterns",
                "line": 295,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ConfigurationFeedbackLoop"
              },
              {
                "name": "_store_pattern_insights",
                "line": 365,
                "decorators": [],
                "args": [
                  "self",
                  "patterns"
                ],
                "is_async": true,
                "class": "ConfigurationFeedbackLoop"
              },
              {
                "name": "_update_learning_state",
                "line": 400,
                "decorators": [],
                "args": [
                  "self",
                  "patterns"
                ],
                "is_async": true,
                "class": "ConfigurationFeedbackLoop"
              },
              {
                "name": "_get_actions_by_hour",
                "line": 432,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ConfigurationFeedbackLoop"
              },
              {
                "name": "_analyze_tool_usage_by_time",
                "line": 455,
                "decorators": [],
                "args": [
                  "self",
                  "actions_by_hour"
                ],
                "is_async": false,
                "class": "ConfigurationFeedbackLoop"
              },
              {
                "name": "_analyze_response_time_patterns",
                "line": 509,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ConfigurationFeedbackLoop"
              },
              {
                "name": "_analyze_interaction_patterns",
                "line": 515,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ConfigurationFeedbackLoop"
              },
              {
                "name": "_get_action_frequency",
                "line": 521,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ConfigurationFeedbackLoop"
              },
              {
                "name": "_find_dominant_actions",
                "line": 566,
                "decorators": [],
                "args": [
                  "self",
                  "action_frequency"
                ],
                "is_async": false,
                "class": "ConfigurationFeedbackLoop"
              },
              {
                "name": "_find_underused_capabilities",
                "line": 580,
                "decorators": [],
                "args": [
                  "self",
                  "action_frequency"
                ],
                "is_async": false,
                "class": "ConfigurationFeedbackLoop"
              },
              {
                "name": "_extract_error_type",
                "line": 596,
                "decorators": [],
                "args": [
                  "self",
                  "error_data"
                ],
                "is_async": false,
                "class": "ConfigurationFeedbackLoop"
              },
              {
                "name": "_extract_tool_name",
                "line": 614,
                "decorators": [],
                "args": [
                  "self",
                  "error_type"
                ],
                "is_async": false,
                "class": "ConfigurationFeedbackLoop"
              },
              {
                "name": "_store_pattern",
                "line": 622,
                "decorators": [],
                "args": [
                  "self",
                  "pattern"
                ],
                "is_async": true,
                "class": "ConfigurationFeedbackLoop"
              },
              {
                "name": "start",
                "line": 645,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ConfigurationFeedbackLoop"
              },
              {
                "name": "stop",
                "line": 649,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ConfigurationFeedbackLoop"
              },
              {
                "name": "is_healthy",
                "line": 659,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ConfigurationFeedbackLoop"
              },
              {
                "name": "get_capabilities",
                "line": 663,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ConfigurationFeedbackLoop"
              },
              {
                "name": "get_status",
                "line": 684,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ConfigurationFeedbackLoop"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 44,
            "decorators": [],
            "args": [
              "self",
              "time_service",
              "memory_bus",
              "analysis_interval_hours"
            ],
            "is_async": false,
            "class": "ConfigurationFeedbackLoop"
          },
          {
            "name": "set_service_registry",
            "line": 62,
            "decorators": [],
            "args": [
              "self",
              "registry"
            ],
            "is_async": false,
            "class": "ConfigurationFeedbackLoop"
          },
          {
            "name": "analyze_and_adapt",
            "line": 72,
            "decorators": [],
            "args": [
              "self",
              "force"
            ],
            "is_async": true,
            "class": "ConfigurationFeedbackLoop"
          },
          {
            "name": "_detect_patterns",
            "line": 122,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ConfigurationFeedbackLoop"
          },
          {
            "name": "_detect_temporal_patterns",
            "line": 154,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ConfigurationFeedbackLoop"
          },
          {
            "name": "_detect_frequency_patterns",
            "line": 180,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ConfigurationFeedbackLoop"
          },
          {
            "name": "_detect_performance_patterns",
            "line": 242,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ConfigurationFeedbackLoop"
          },
          {
            "name": "_detect_error_patterns",
            "line": 295,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ConfigurationFeedbackLoop"
          },
          {
            "name": "_store_pattern_insights",
            "line": 365,
            "decorators": [],
            "args": [
              "self",
              "patterns"
            ],
            "is_async": true,
            "class": "ConfigurationFeedbackLoop"
          },
          {
            "name": "_update_learning_state",
            "line": 400,
            "decorators": [],
            "args": [
              "self",
              "patterns"
            ],
            "is_async": true,
            "class": "ConfigurationFeedbackLoop"
          },
          {
            "name": "_get_actions_by_hour",
            "line": 432,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ConfigurationFeedbackLoop"
          },
          {
            "name": "_analyze_tool_usage_by_time",
            "line": 455,
            "decorators": [],
            "args": [
              "self",
              "actions_by_hour"
            ],
            "is_async": false,
            "class": "ConfigurationFeedbackLoop"
          },
          {
            "name": "_analyze_response_time_patterns",
            "line": 509,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ConfigurationFeedbackLoop"
          },
          {
            "name": "_analyze_interaction_patterns",
            "line": 515,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ConfigurationFeedbackLoop"
          },
          {
            "name": "_get_action_frequency",
            "line": 521,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ConfigurationFeedbackLoop"
          },
          {
            "name": "_find_dominant_actions",
            "line": 566,
            "decorators": [],
            "args": [
              "self",
              "action_frequency"
            ],
            "is_async": false,
            "class": "ConfigurationFeedbackLoop"
          },
          {
            "name": "_find_underused_capabilities",
            "line": 580,
            "decorators": [],
            "args": [
              "self",
              "action_frequency"
            ],
            "is_async": false,
            "class": "ConfigurationFeedbackLoop"
          },
          {
            "name": "_extract_error_type",
            "line": 596,
            "decorators": [],
            "args": [
              "self",
              "error_data"
            ],
            "is_async": false,
            "class": "ConfigurationFeedbackLoop"
          },
          {
            "name": "_extract_tool_name",
            "line": 614,
            "decorators": [],
            "args": [
              "self",
              "error_type"
            ],
            "is_async": false,
            "class": "ConfigurationFeedbackLoop"
          },
          {
            "name": "_store_pattern",
            "line": 622,
            "decorators": [],
            "args": [
              "self",
              "pattern"
            ],
            "is_async": true,
            "class": "ConfigurationFeedbackLoop"
          },
          {
            "name": "start",
            "line": 645,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ConfigurationFeedbackLoop"
          },
          {
            "name": "stop",
            "line": 649,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ConfigurationFeedbackLoop"
          },
          {
            "name": "is_healthy",
            "line": 659,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ConfigurationFeedbackLoop"
          },
          {
            "name": "get_capabilities",
            "line": 663,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ConfigurationFeedbackLoop"
          },
          {
            "name": "get_status",
            "line": 684,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ConfigurationFeedbackLoop"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/infrastructure/sub_services/wa_cli_oauth.py",
        "classes": [
          {
            "name": "WACLIOAuthService",
            "line": 36,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 39,
                "decorators": [],
                "args": [
                  "self",
                  "auth_service",
                  "time_service"
                ],
                "is_async": false,
                "class": "WACLIOAuthService"
              },
              {
                "name": "oauth_setup",
                "line": 53,
                "decorators": [],
                "args": [
                  "self",
                  "provider",
                  "client_id",
                  "client_secret",
                  "custom_metadata"
                ],
                "is_async": true,
                "class": "WACLIOAuthService"
              },
              {
                "name": "oauth_login",
                "line": 102,
                "decorators": [],
                "args": [
                  "self",
                  "provider"
                ],
                "is_async": true,
                "class": "WACLIOAuthService"
              },
              {
                "name": "_exchange_oauth_code",
                "line": 169,
                "decorators": [],
                "args": [
                  "self",
                  "provider",
                  "callback_data",
                  "provider_config"
                ],
                "is_async": true,
                "class": "WACLIOAuthService"
              },
              {
                "name": "_exchange_code_for_token",
                "line": 223,
                "decorators": [],
                "args": [
                  "self",
                  "provider",
                  "code",
                  "provider_config"
                ],
                "is_async": true,
                "class": "WACLIOAuthService"
              },
              {
                "name": "_fetch_user_profile",
                "line": 272,
                "decorators": [],
                "args": [
                  "self",
                  "provider",
                  "access_token"
                ],
                "is_async": true,
                "class": "WACLIOAuthService"
              },
              {
                "name": "_create_oauth_wa",
                "line": 341,
                "decorators": [],
                "args": [
                  "self",
                  "provider",
                  "user_profile",
                  "token_data"
                ],
                "is_async": true,
                "class": "WACLIOAuthService"
              },
              {
                "name": "_start_oauth_callback_server",
                "line": 395,
                "decorators": [],
                "args": [
                  "self",
                  "port"
                ],
                "is_async": true,
                "class": "WACLIOAuthService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 39,
            "decorators": [],
            "args": [
              "self",
              "auth_service",
              "time_service"
            ],
            "is_async": false,
            "class": "WACLIOAuthService"
          },
          {
            "name": "oauth_setup",
            "line": 53,
            "decorators": [],
            "args": [
              "self",
              "provider",
              "client_id",
              "client_secret",
              "custom_metadata"
            ],
            "is_async": true,
            "class": "WACLIOAuthService"
          },
          {
            "name": "oauth_login",
            "line": 102,
            "decorators": [],
            "args": [
              "self",
              "provider"
            ],
            "is_async": true,
            "class": "WACLIOAuthService"
          },
          {
            "name": "_exchange_oauth_code",
            "line": 169,
            "decorators": [],
            "args": [
              "self",
              "provider",
              "callback_data",
              "provider_config"
            ],
            "is_async": true,
            "class": "WACLIOAuthService"
          },
          {
            "name": "_exchange_code_for_token",
            "line": 223,
            "decorators": [],
            "args": [
              "self",
              "provider",
              "code",
              "provider_config"
            ],
            "is_async": true,
            "class": "WACLIOAuthService"
          },
          {
            "name": "_fetch_user_profile",
            "line": 272,
            "decorators": [],
            "args": [
              "self",
              "provider",
              "access_token"
            ],
            "is_async": true,
            "class": "WACLIOAuthService"
          },
          {
            "name": "_create_oauth_wa",
            "line": 341,
            "decorators": [],
            "args": [
              "self",
              "provider",
              "user_profile",
              "token_data"
            ],
            "is_async": true,
            "class": "WACLIOAuthService"
          },
          {
            "name": "_start_oauth_callback_server",
            "line": 395,
            "decorators": [],
            "args": [
              "self",
              "port"
            ],
            "is_async": true,
            "class": "WACLIOAuthService"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/infrastructure/sub_services/wa_cli_wizard.py",
        "classes": [
          {
            "name": "WACLIWizardService",
            "line": 18,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 21,
                "decorators": [],
                "args": [
                  "self",
                  "auth_service",
                  "bootstrap_service",
                  "oauth_service",
                  "display_service"
                ],
                "is_async": false,
                "class": "WACLIWizardService"
              },
              {
                "name": "onboard_wizard",
                "line": 35,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "WACLIWizardService"
              },
              {
                "name": "_create_root_wa",
                "line": 84,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "WACLIWizardService"
              },
              {
                "name": "_import_root_cert",
                "line": 123,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "WACLIWizardService"
              },
              {
                "name": "_join_wa_tree",
                "line": 150,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "WACLIWizardService"
              },
              {
                "name": "_configure_oauth",
                "line": 170,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "WACLIWizardService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 21,
            "decorators": [],
            "args": [
              "self",
              "auth_service",
              "bootstrap_service",
              "oauth_service",
              "display_service"
            ],
            "is_async": false,
            "class": "WACLIWizardService"
          },
          {
            "name": "onboard_wizard",
            "line": 35,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "WACLIWizardService"
          },
          {
            "name": "_create_root_wa",
            "line": 84,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "WACLIWizardService"
          },
          {
            "name": "_import_root_cert",
            "line": 123,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "WACLIWizardService"
          },
          {
            "name": "_join_wa_tree",
            "line": 150,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "WACLIWizardService"
          },
          {
            "name": "_configure_oauth",
            "line": 170,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "WACLIWizardService"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/infrastructure/sub_services/wa_cli_display.py",
        "classes": [
          {
            "name": "WACLIDisplayService",
            "line": 13,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 16,
                "decorators": [],
                "args": [
                  "self",
                  "auth_service"
                ],
                "is_async": false,
                "class": "WACLIDisplayService"
              },
              {
                "name": "list_was",
                "line": 21,
                "decorators": [],
                "args": [
                  "self",
                  "tree_view"
                ],
                "is_async": true,
                "class": "WACLIDisplayService"
              },
              {
                "name": "_display_table",
                "line": 39,
                "decorators": [],
                "args": [
                  "self",
                  "was"
                ],
                "is_async": true,
                "class": "WACLIDisplayService"
              },
              {
                "name": "_display_tree",
                "line": 65,
                "decorators": [],
                "args": [
                  "self",
                  "was"
                ],
                "is_async": true,
                "class": "WACLIDisplayService"
              },
              {
                "name": "_add_wa_children",
                "line": 87,
                "decorators": [],
                "args": [
                  "self",
                  "parent_node",
                  "all_was",
                  "parent_id"
                ],
                "is_async": true,
                "class": "WACLIDisplayService"
              },
              {
                "name": "show_wa_details",
                "line": 113,
                "decorators": [],
                "args": [
                  "self",
                  "wa_id"
                ],
                "is_async": true,
                "class": "WACLIDisplayService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 16,
            "decorators": [],
            "args": [
              "self",
              "auth_service"
            ],
            "is_async": false,
            "class": "WACLIDisplayService"
          },
          {
            "name": "list_was",
            "line": 21,
            "decorators": [],
            "args": [
              "self",
              "tree_view"
            ],
            "is_async": true,
            "class": "WACLIDisplayService"
          },
          {
            "name": "_display_table",
            "line": 39,
            "decorators": [],
            "args": [
              "self",
              "was"
            ],
            "is_async": true,
            "class": "WACLIDisplayService"
          },
          {
            "name": "_display_tree",
            "line": 65,
            "decorators": [],
            "args": [
              "self",
              "was"
            ],
            "is_async": true,
            "class": "WACLIDisplayService"
          },
          {
            "name": "_add_wa_children",
            "line": 87,
            "decorators": [],
            "args": [
              "self",
              "parent_node",
              "all_was",
              "parent_id"
            ],
            "is_async": true,
            "class": "WACLIDisplayService"
          },
          {
            "name": "show_wa_details",
            "line": 113,
            "decorators": [],
            "args": [
              "self",
              "wa_id"
            ],
            "is_async": true,
            "class": "WACLIDisplayService"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/infrastructure/sub_services/wa_cli_bootstrap.py",
        "classes": [
          {
            "name": "WACLIBootstrapService",
            "line": 18,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 21,
                "decorators": [],
                "args": [
                  "self",
                  "auth_service",
                  "time_service"
                ],
                "is_async": false,
                "class": "WACLIBootstrapService"
              },
              {
                "name": "bootstrap_new_root",
                "line": 27,
                "decorators": [],
                "args": [
                  "self",
                  "name",
                  "use_password",
                  "shamir_shares"
                ],
                "is_async": true,
                "class": "WACLIBootstrapService"
              },
              {
                "name": "mint_wa",
                "line": 95,
                "decorators": [],
                "args": [
                  "self",
                  "parent_wa_id",
                  "parent_key_file",
                  "name",
                  "role",
                  "scopes",
                  "use_password"
                ],
                "is_async": true,
                "class": "WACLIBootstrapService"
              },
              {
                "name": "generate_mint_request",
                "line": 199,
                "decorators": [],
                "args": [
                  "self",
                  "name",
                  "requested_role",
                  "requested_scopes"
                ],
                "is_async": true,
                "class": "WACLIBootstrapService"
              },
              {
                "name": "approve_mint_request",
                "line": 248,
                "decorators": [],
                "args": [
                  "self",
                  "code",
                  "approver_wa_id",
                  "_approver_key_file"
                ],
                "is_async": true,
                "class": "WACLIBootstrapService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 21,
            "decorators": [],
            "args": [
              "self",
              "auth_service",
              "time_service"
            ],
            "is_async": false,
            "class": "WACLIBootstrapService"
          },
          {
            "name": "bootstrap_new_root",
            "line": 27,
            "decorators": [],
            "args": [
              "self",
              "name",
              "use_password",
              "shamir_shares"
            ],
            "is_async": true,
            "class": "WACLIBootstrapService"
          },
          {
            "name": "mint_wa",
            "line": 95,
            "decorators": [],
            "args": [
              "self",
              "parent_wa_id",
              "parent_key_file",
              "name",
              "role",
              "scopes",
              "use_password"
            ],
            "is_async": true,
            "class": "WACLIBootstrapService"
          },
          {
            "name": "generate_mint_request",
            "line": 199,
            "decorators": [],
            "args": [
              "self",
              "name",
              "requested_role",
              "requested_scopes"
            ],
            "is_async": true,
            "class": "WACLIBootstrapService"
          },
          {
            "name": "approve_mint_request",
            "line": 248,
            "decorators": [],
            "args": [
              "self",
              "code",
              "approver_wa_id",
              "_approver_key_file"
            ],
            "is_async": true,
            "class": "WACLIBootstrapService"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/infrastructure/sub_services/identity_variance_monitor.py",
        "classes": [
          {
            "name": "IdentityVarianceMonitor",
            "line": 34,
            "decorators": [],
            "bases": [
              "Service"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 45,
                "decorators": [],
                "args": [
                  "self",
                  "time_service",
                  "memory_bus",
                  "wa_bus",
                  "variance_threshold",
                  "check_interval_hours"
                ],
                "is_async": false,
                "class": "IdentityVarianceMonitor"
              },
              {
                "name": "set_service_registry",
                "line": 66,
                "decorators": [],
                "args": [
                  "self",
                  "registry"
                ],
                "is_async": false,
                "class": "IdentityVarianceMonitor"
              },
              {
                "name": "initialize_baseline",
                "line": 83,
                "decorators": [],
                "args": [
                  "self",
                  "identity"
                ],
                "is_async": true,
                "class": "IdentityVarianceMonitor"
              },
              {
                "name": "rebaseline_with_approval",
                "line": 151,
                "decorators": [],
                "args": [
                  "self",
                  "wa_approval_token"
                ],
                "is_async": true,
                "class": "IdentityVarianceMonitor"
              },
              {
                "name": "check_variance",
                "line": 220,
                "decorators": [],
                "args": [
                  "self",
                  "force"
                ],
                "is_async": true,
                "class": "IdentityVarianceMonitor"
              },
              {
                "name": "_take_identity_snapshot",
                "line": 277,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "IdentityVarianceMonitor"
              },
              {
                "name": "_calculate_differences",
                "line": 315,
                "decorators": [],
                "args": [
                  "self",
                  "baseline",
                  "current"
                ],
                "is_async": false,
                "class": "IdentityVarianceMonitor"
              },
              {
                "name": "_calculate_variance",
                "line": 389,
                "decorators": [],
                "args": [
                  "self",
                  "baseline_snapshot",
                  "current_snapshot"
                ],
                "is_async": false,
                "class": "IdentityVarianceMonitor"
              },
              {
                "name": "_generate_simple_recommendations",
                "line": 428,
                "decorators": [],
                "args": [
                  "self",
                  "total_variance"
                ],
                "is_async": false,
                "class": "IdentityVarianceMonitor"
              },
              {
                "name": "_trigger_wa_review",
                "line": 453,
                "decorators": [],
                "args": [
                  "self",
                  "report"
                ],
                "is_async": true,
                "class": "IdentityVarianceMonitor"
              },
              {
                "name": "_gather_identity_nodes",
                "line": 488,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "IdentityVarianceMonitor"
              },
              {
                "name": "_gather_config_nodes",
                "line": 511,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "IdentityVarianceMonitor"
              },
              {
                "name": "_analyze_behavioral_patterns",
                "line": 539,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "IdentityVarianceMonitor"
              },
              {
                "name": "_extract_ethical_boundaries",
                "line": 598,
                "decorators": [],
                "args": [
                  "self",
                  "identity"
                ],
                "is_async": false,
                "class": "IdentityVarianceMonitor"
              },
              {
                "name": "_extract_trust_parameters",
                "line": 613,
                "decorators": [],
                "args": [
                  "self",
                  "identity"
                ],
                "is_async": false,
                "class": "IdentityVarianceMonitor"
              },
              {
                "name": "_extract_current_trust_parameters",
                "line": 625,
                "decorators": [],
                "args": [
                  "self",
                  "config_nodes"
                ],
                "is_async": false,
                "class": "IdentityVarianceMonitor"
              },
              {
                "name": "_extract_capability_changes",
                "line": 635,
                "decorators": [],
                "args": [
                  "self",
                  "identity_nodes"
                ],
                "is_async": false,
                "class": "IdentityVarianceMonitor"
              },
              {
                "name": "_compare_patterns",
                "line": 645,
                "decorators": [],
                "args": [
                  "self",
                  "baseline_patterns",
                  "current_patterns"
                ],
                "is_async": false,
                "class": "IdentityVarianceMonitor"
              },
              {
                "name": "_load_baseline",
                "line": 674,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "IdentityVarianceMonitor"
              },
              {
                "name": "_load_snapshot",
                "line": 700,
                "decorators": [],
                "args": [
                  "self",
                  "snapshot_id"
                ],
                "is_async": true,
                "class": "IdentityVarianceMonitor"
              },
              {
                "name": "_store_variance_report",
                "line": 723,
                "decorators": [],
                "args": [
                  "self",
                  "report"
                ],
                "is_async": true,
                "class": "IdentityVarianceMonitor"
              },
              {
                "name": "start",
                "line": 746,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "IdentityVarianceMonitor"
              },
              {
                "name": "stop",
                "line": 750,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "IdentityVarianceMonitor"
              },
              {
                "name": "is_healthy",
                "line": 760,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "IdentityVarianceMonitor"
              },
              {
                "name": "get_capabilities",
                "line": 764,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "IdentityVarianceMonitor"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 45,
            "decorators": [],
            "args": [
              "self",
              "time_service",
              "memory_bus",
              "wa_bus",
              "variance_threshold",
              "check_interval_hours"
            ],
            "is_async": false,
            "class": "IdentityVarianceMonitor"
          },
          {
            "name": "set_service_registry",
            "line": 66,
            "decorators": [],
            "args": [
              "self",
              "registry"
            ],
            "is_async": false,
            "class": "IdentityVarianceMonitor"
          },
          {
            "name": "initialize_baseline",
            "line": 83,
            "decorators": [],
            "args": [
              "self",
              "identity"
            ],
            "is_async": true,
            "class": "IdentityVarianceMonitor"
          },
          {
            "name": "rebaseline_with_approval",
            "line": 151,
            "decorators": [],
            "args": [
              "self",
              "wa_approval_token"
            ],
            "is_async": true,
            "class": "IdentityVarianceMonitor"
          },
          {
            "name": "check_variance",
            "line": 220,
            "decorators": [],
            "args": [
              "self",
              "force"
            ],
            "is_async": true,
            "class": "IdentityVarianceMonitor"
          },
          {
            "name": "_take_identity_snapshot",
            "line": 277,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "IdentityVarianceMonitor"
          },
          {
            "name": "_calculate_differences",
            "line": 315,
            "decorators": [],
            "args": [
              "self",
              "baseline",
              "current"
            ],
            "is_async": false,
            "class": "IdentityVarianceMonitor"
          },
          {
            "name": "_calculate_variance",
            "line": 389,
            "decorators": [],
            "args": [
              "self",
              "baseline_snapshot",
              "current_snapshot"
            ],
            "is_async": false,
            "class": "IdentityVarianceMonitor"
          },
          {
            "name": "_generate_simple_recommendations",
            "line": 428,
            "decorators": [],
            "args": [
              "self",
              "total_variance"
            ],
            "is_async": false,
            "class": "IdentityVarianceMonitor"
          },
          {
            "name": "_trigger_wa_review",
            "line": 453,
            "decorators": [],
            "args": [
              "self",
              "report"
            ],
            "is_async": true,
            "class": "IdentityVarianceMonitor"
          },
          {
            "name": "_gather_identity_nodes",
            "line": 488,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "IdentityVarianceMonitor"
          },
          {
            "name": "_gather_config_nodes",
            "line": 511,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "IdentityVarianceMonitor"
          },
          {
            "name": "_analyze_behavioral_patterns",
            "line": 539,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "IdentityVarianceMonitor"
          },
          {
            "name": "_extract_ethical_boundaries",
            "line": 598,
            "decorators": [],
            "args": [
              "self",
              "identity"
            ],
            "is_async": false,
            "class": "IdentityVarianceMonitor"
          },
          {
            "name": "_extract_trust_parameters",
            "line": 613,
            "decorators": [],
            "args": [
              "self",
              "identity"
            ],
            "is_async": false,
            "class": "IdentityVarianceMonitor"
          },
          {
            "name": "_extract_current_trust_parameters",
            "line": 625,
            "decorators": [],
            "args": [
              "self",
              "config_nodes"
            ],
            "is_async": false,
            "class": "IdentityVarianceMonitor"
          },
          {
            "name": "_extract_capability_changes",
            "line": 635,
            "decorators": [],
            "args": [
              "self",
              "identity_nodes"
            ],
            "is_async": false,
            "class": "IdentityVarianceMonitor"
          },
          {
            "name": "_compare_patterns",
            "line": 645,
            "decorators": [],
            "args": [
              "self",
              "baseline_patterns",
              "current_patterns"
            ],
            "is_async": false,
            "class": "IdentityVarianceMonitor"
          },
          {
            "name": "_load_baseline",
            "line": 674,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "IdentityVarianceMonitor"
          },
          {
            "name": "_load_snapshot",
            "line": 700,
            "decorators": [],
            "args": [
              "self",
              "snapshot_id"
            ],
            "is_async": true,
            "class": "IdentityVarianceMonitor"
          },
          {
            "name": "_store_variance_report",
            "line": 723,
            "decorators": [],
            "args": [
              "self",
              "report"
            ],
            "is_async": true,
            "class": "IdentityVarianceMonitor"
          },
          {
            "name": "start",
            "line": 746,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "IdentityVarianceMonitor"
          },
          {
            "name": "stop",
            "line": 750,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "IdentityVarianceMonitor"
          },
          {
            "name": "is_healthy",
            "line": 760,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "IdentityVarianceMonitor"
          },
          {
            "name": "get_capabilities",
            "line": 764,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "IdentityVarianceMonitor"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/cli/cli_observer.py",
        "classes": [
          {
            "name": "CLIObserver",
            "line": 18,
            "decorators": [],
            "bases": [
              "<ast.Subscript object at 0x7b749709f450>"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 24,
                "decorators": [],
                "args": [
                  "self",
                  "on_observe",
                  "memory_service",
                  "agent_id",
                  "bus_manager",
                  "filter_service",
                  "secrets_service",
                  "time_service"
                ],
                "is_async": false,
                "class": "CLIObserver"
              },
              {
                "name": "_check_for_piped_input",
                "line": 55,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CLIObserver"
              },
              {
                "name": "start",
                "line": 93,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CLIObserver"
              },
              {
                "name": "_process_buffered_input",
                "line": 106,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CLIObserver"
              },
              {
                "name": "stop",
                "line": 140,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CLIObserver"
              },
              {
                "name": "_input_loop",
                "line": 157,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CLIObserver"
              },
              {
                "name": "_get_recall_ids",
                "line": 190,
                "decorators": [],
                "args": [
                  "self",
                  "msg"
                ],
                "is_async": true,
                "class": "CLIObserver"
              },
              {
                "name": "_is_cli_channel",
                "line": 194,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id"
                ],
                "is_async": false,
                "class": "CLIObserver"
              },
              {
                "name": "handle_incoming_message",
                "line": 223,
                "decorators": [],
                "args": [
                  "self",
                  "msg"
                ],
                "is_async": true,
                "class": "CLIObserver"
              },
              {
                "name": "_handle_priority_observation",
                "line": 255,
                "decorators": [],
                "args": [
                  "self",
                  "msg",
                  "filter_result"
                ],
                "is_async": true,
                "class": "CLIObserver"
              },
              {
                "name": "_handle_passive_observation",
                "line": 266,
                "decorators": [],
                "args": [
                  "self",
                  "msg"
                ],
                "is_async": true,
                "class": "CLIObserver"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 24,
            "decorators": [],
            "args": [
              "self",
              "on_observe",
              "memory_service",
              "agent_id",
              "bus_manager",
              "filter_service",
              "secrets_service",
              "time_service"
            ],
            "is_async": false,
            "class": "CLIObserver"
          },
          {
            "name": "_check_for_piped_input",
            "line": 55,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CLIObserver"
          },
          {
            "name": "start",
            "line": 93,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CLIObserver"
          },
          {
            "name": "_process_buffered_input",
            "line": 106,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CLIObserver"
          },
          {
            "name": "stop",
            "line": 140,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CLIObserver"
          },
          {
            "name": "_input_loop",
            "line": 157,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CLIObserver"
          },
          {
            "name": "_get_recall_ids",
            "line": 190,
            "decorators": [],
            "args": [
              "self",
              "msg"
            ],
            "is_async": true,
            "class": "CLIObserver"
          },
          {
            "name": "_is_cli_channel",
            "line": 194,
            "decorators": [],
            "args": [
              "self",
              "channel_id"
            ],
            "is_async": false,
            "class": "CLIObserver"
          },
          {
            "name": "handle_incoming_message",
            "line": 223,
            "decorators": [],
            "args": [
              "self",
              "msg"
            ],
            "is_async": true,
            "class": "CLIObserver"
          },
          {
            "name": "_handle_priority_observation",
            "line": 255,
            "decorators": [],
            "args": [
              "self",
              "msg",
              "filter_result"
            ],
            "is_async": true,
            "class": "CLIObserver"
          },
          {
            "name": "_handle_passive_observation",
            "line": 266,
            "decorators": [],
            "args": [
              "self",
              "msg"
            ],
            "is_async": true,
            "class": "CLIObserver"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/cli/cli_wa_service.py",
        "classes": [
          {
            "name": "CLIWiseAuthorityService",
            "line": 18,
            "decorators": [],
            "bases": [
              "WiseAuthorityService"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 21,
                "decorators": [],
                "args": [
                  "self",
                  "time_service"
                ],
                "is_async": false,
                "class": "CLIWiseAuthorityService"
              },
              {
                "name": "start",
                "line": 26,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CLIWiseAuthorityService"
              },
              {
                "name": "stop",
                "line": 30,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CLIWiseAuthorityService"
              },
              {
                "name": "fetch_guidance",
                "line": 34,
                "decorators": [],
                "args": [
                  "self",
                  "context"
                ],
                "is_async": true,
                "class": "CLIWiseAuthorityService"
              },
              {
                "name": "send_deferral",
                "line": 51,
                "decorators": [],
                "args": [
                  "self",
                  "context"
                ],
                "is_async": true,
                "class": "CLIWiseAuthorityService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 21,
            "decorators": [],
            "args": [
              "self",
              "time_service"
            ],
            "is_async": false,
            "class": "CLIWiseAuthorityService"
          },
          {
            "name": "start",
            "line": 26,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CLIWiseAuthorityService"
          },
          {
            "name": "stop",
            "line": 30,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CLIWiseAuthorityService"
          },
          {
            "name": "fetch_guidance",
            "line": 34,
            "decorators": [],
            "args": [
              "self",
              "context"
            ],
            "is_async": true,
            "class": "CLIWiseAuthorityService"
          },
          {
            "name": "send_deferral",
            "line": 51,
            "decorators": [],
            "args": [
              "self",
              "context"
            ],
            "is_async": true,
            "class": "CLIWiseAuthorityService"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/cli/cli_tools.py",
        "classes": [
          {
            "name": "CLIToolService",
            "line": 24,
            "decorators": [],
            "bases": [
              "ToolService"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 27,
                "decorators": [],
                "args": [
                  "self",
                  "time_service"
                ],
                "is_async": false,
                "class": "CLIToolService"
              },
              {
                "name": "start",
                "line": 39,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CLIToolService"
              },
              {
                "name": "stop",
                "line": 43,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CLIToolService"
              },
              {
                "name": "execute_tool",
                "line": 47,
                "decorators": [],
                "args": [
                  "self",
                  "tool_name",
                  "parameters"
                ],
                "is_async": true,
                "class": "CLIToolService"
              },
              {
                "name": "_list_files",
                "line": 102,
                "decorators": [],
                "args": [
                  "self",
                  "params"
                ],
                "is_async": true,
                "class": "CLIToolService"
              },
              {
                "name": "_read_file",
                "line": 115,
                "decorators": [],
                "args": [
                  "self",
                  "params"
                ],
                "is_async": true,
                "class": "CLIToolService"
              },
              {
                "name": "_write_file",
                "line": 133,
                "decorators": [],
                "args": [
                  "self",
                  "params"
                ],
                "is_async": true,
                "class": "CLIToolService"
              },
              {
                "name": "_write_file_sync",
                "line": 150,
                "decorators": [],
                "args": [
                  "self",
                  "path",
                  "content"
                ],
                "is_async": false,
                "class": "CLIToolService"
              },
              {
                "name": "_shell_command",
                "line": 154,
                "decorators": [],
                "args": [
                  "self",
                  "params"
                ],
                "is_async": true,
                "class": "CLIToolService"
              },
              {
                "name": "_search_text",
                "line": 181,
                "decorators": [],
                "args": [
                  "self",
                  "params"
                ],
                "is_async": true,
                "class": "CLIToolService"
              },
              {
                "name": "_read_lines_sync",
                "line": 203,
                "decorators": [],
                "args": [
                  "self",
                  "path"
                ],
                "is_async": false,
                "class": "CLIToolService"
              },
              {
                "name": "get_available_tools",
                "line": 207,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CLIToolService"
              },
              {
                "name": "get_tool_result",
                "line": 210,
                "decorators": [],
                "args": [
                  "self",
                  "correlation_id",
                  "timeout"
                ],
                "is_async": true,
                "class": "CLIToolService"
              },
              {
                "name": "validate_parameters",
                "line": 217,
                "decorators": [],
                "args": [
                  "self",
                  "tool_name",
                  "parameters"
                ],
                "is_async": true,
                "class": "CLIToolService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 27,
            "decorators": [],
            "args": [
              "self",
              "time_service"
            ],
            "is_async": false,
            "class": "CLIToolService"
          },
          {
            "name": "start",
            "line": 39,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CLIToolService"
          },
          {
            "name": "stop",
            "line": 43,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CLIToolService"
          },
          {
            "name": "execute_tool",
            "line": 47,
            "decorators": [],
            "args": [
              "self",
              "tool_name",
              "parameters"
            ],
            "is_async": true,
            "class": "CLIToolService"
          },
          {
            "name": "_list_files",
            "line": 102,
            "decorators": [],
            "args": [
              "self",
              "params"
            ],
            "is_async": true,
            "class": "CLIToolService"
          },
          {
            "name": "_read_file",
            "line": 115,
            "decorators": [],
            "args": [
              "self",
              "params"
            ],
            "is_async": true,
            "class": "CLIToolService"
          },
          {
            "name": "_write_file",
            "line": 133,
            "decorators": [],
            "args": [
              "self",
              "params"
            ],
            "is_async": true,
            "class": "CLIToolService"
          },
          {
            "name": "_write_file_sync",
            "line": 150,
            "decorators": [],
            "args": [
              "self",
              "path",
              "content"
            ],
            "is_async": false,
            "class": "CLIToolService"
          },
          {
            "name": "_shell_command",
            "line": 154,
            "decorators": [],
            "args": [
              "self",
              "params"
            ],
            "is_async": true,
            "class": "CLIToolService"
          },
          {
            "name": "_search_text",
            "line": 181,
            "decorators": [],
            "args": [
              "self",
              "params"
            ],
            "is_async": true,
            "class": "CLIToolService"
          },
          {
            "name": "_read_lines_sync",
            "line": 203,
            "decorators": [],
            "args": [
              "self",
              "path"
            ],
            "is_async": false,
            "class": "CLIToolService"
          },
          {
            "name": "get_available_tools",
            "line": 207,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CLIToolService"
          },
          {
            "name": "get_tool_result",
            "line": 210,
            "decorators": [],
            "args": [
              "self",
              "correlation_id",
              "timeout"
            ],
            "is_async": true,
            "class": "CLIToolService"
          },
          {
            "name": "validate_parameters",
            "line": 217,
            "decorators": [],
            "args": [
              "self",
              "tool_name",
              "parameters"
            ],
            "is_async": true,
            "class": "CLIToolService"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/cli/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/adapters/cli/adapter.py",
        "classes": [
          {
            "name": "CliPlatform",
            "line": 16,
            "decorators": [],
            "bases": [
              "Service"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 17,
                "decorators": [],
                "args": [
                  "self",
                  "runtime"
                ],
                "is_async": false,
                "class": "CliPlatform"
              },
              {
                "name": "_handle_incoming_message",
                "line": 77,
                "decorators": [],
                "args": [
                  "self",
                  "msg"
                ],
                "is_async": true,
                "class": "CliPlatform"
              },
              {
                "name": "get_services_to_register",
                "line": 95,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CliPlatform"
              },
              {
                "name": "start",
                "line": 123,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CliPlatform"
              },
              {
                "name": "run_lifecycle",
                "line": 131,
                "decorators": [],
                "args": [
                  "self",
                  "agent_run_task"
                ],
                "is_async": true,
                "class": "CliPlatform"
              },
              {
                "name": "stop",
                "line": 172,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CliPlatform"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 17,
            "decorators": [],
            "args": [
              "self",
              "runtime"
            ],
            "is_async": false,
            "class": "CliPlatform"
          },
          {
            "name": "_handle_incoming_message",
            "line": 77,
            "decorators": [],
            "args": [
              "self",
              "msg"
            ],
            "is_async": true,
            "class": "CliPlatform"
          },
          {
            "name": "get_services_to_register",
            "line": 95,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CliPlatform"
          },
          {
            "name": "start",
            "line": 123,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CliPlatform"
          },
          {
            "name": "run_lifecycle",
            "line": 131,
            "decorators": [],
            "args": [
              "self",
              "agent_run_task"
            ],
            "is_async": true,
            "class": "CliPlatform"
          },
          {
            "name": "stop",
            "line": 172,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CliPlatform"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/cli/cli_adapter.py",
        "classes": [
          {
            "name": "CLIAdapter",
            "line": 28,
            "decorators": [],
            "bases": [
              "CommunicationService",
              "ToolService"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 34,
                "decorators": [],
                "args": [
                  "self",
                  "runtime",
                  "interactive",
                  "on_message",
                  "bus_manager",
                  "config"
                ],
                "is_async": false,
                "class": "CLIAdapter"
              },
              {
                "name": "_get_time_service",
                "line": 71,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CLIAdapter"
              },
              {
                "name": "_emit_telemetry",
                "line": 85,
                "decorators": [],
                "args": [
                  "self",
                  "metric_name",
                  "tags"
                ],
                "is_async": true,
                "class": "CLIAdapter"
              },
              {
                "name": "send_message",
                "line": 115,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id",
                  "content"
                ],
                "is_async": true,
                "class": "CLIAdapter"
              },
              {
                "name": "fetch_messages",
                "line": 173,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id",
                  "limit"
                ],
                "is_async": true,
                "class": "CLIAdapter"
              },
              {
                "name": "execute_tool",
                "line": 186,
                "decorators": [],
                "args": [
                  "self",
                  "tool_name",
                  "parameters"
                ],
                "is_async": true,
                "class": "CLIAdapter"
              },
              {
                "name": "get_available_tools",
                "line": 265,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CLIAdapter"
              },
              {
                "name": "get_tool_result",
                "line": 269,
                "decorators": [],
                "args": [
                  "self",
                  "correlation_id",
                  "timeout"
                ],
                "is_async": true,
                "class": "CLIAdapter"
              },
              {
                "name": "validate_parameters",
                "line": 273,
                "decorators": [],
                "args": [
                  "self",
                  "tool_name",
                  "parameters"
                ],
                "is_async": true,
                "class": "CLIAdapter"
              },
              {
                "name": "_get_user_input",
                "line": 296,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CLIAdapter"
              },
              {
                "name": "_handle_interactive_input",
                "line": 310,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CLIAdapter"
              },
              {
                "name": "_show_help",
                "line": 356,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CLIAdapter"
              },
              {
                "name": "_tool_list_files",
                "line": 372,
                "decorators": [],
                "args": [
                  "self",
                  "params"
                ],
                "is_async": true,
                "class": "CLIAdapter"
              },
              {
                "name": "_tool_read_file",
                "line": 388,
                "decorators": [],
                "args": [
                  "self",
                  "params"
                ],
                "is_async": true,
                "class": "CLIAdapter"
              },
              {
                "name": "_tool_system_info",
                "line": 404,
                "decorators": [],
                "args": [
                  "self",
                  "params"
                ],
                "is_async": true,
                "class": "CLIAdapter"
              },
              {
                "name": "start",
                "line": 416,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CLIAdapter"
              },
              {
                "name": "stop",
                "line": 438,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CLIAdapter"
              },
              {
                "name": "is_healthy",
                "line": 472,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CLIAdapter"
              },
              {
                "name": "get_status",
                "line": 476,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CLIAdapter"
              },
              {
                "name": "list_tools",
                "line": 493,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CLIAdapter"
              },
              {
                "name": "get_tool_schema",
                "line": 497,
                "decorators": [],
                "args": [
                  "self",
                  "tool_name"
                ],
                "is_async": true,
                "class": "CLIAdapter"
              },
              {
                "name": "get_tool_info",
                "line": 527,
                "decorators": [],
                "args": [
                  "self",
                  "tool_name"
                ],
                "is_async": true,
                "class": "CLIAdapter"
              },
              {
                "name": "get_all_tool_info",
                "line": 551,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CLIAdapter"
              },
              {
                "name": "get_capabilities",
                "line": 560,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "CLIAdapter"
              },
              {
                "name": "get_home_channel_id",
                "line": 571,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CLIAdapter"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 34,
            "decorators": [],
            "args": [
              "self",
              "runtime",
              "interactive",
              "on_message",
              "bus_manager",
              "config"
            ],
            "is_async": false,
            "class": "CLIAdapter"
          },
          {
            "name": "_get_time_service",
            "line": 71,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CLIAdapter"
          },
          {
            "name": "_emit_telemetry",
            "line": 85,
            "decorators": [],
            "args": [
              "self",
              "metric_name",
              "tags"
            ],
            "is_async": true,
            "class": "CLIAdapter"
          },
          {
            "name": "send_message",
            "line": 115,
            "decorators": [],
            "args": [
              "self",
              "channel_id",
              "content"
            ],
            "is_async": true,
            "class": "CLIAdapter"
          },
          {
            "name": "fetch_messages",
            "line": 173,
            "decorators": [],
            "args": [
              "self",
              "channel_id",
              "limit"
            ],
            "is_async": true,
            "class": "CLIAdapter"
          },
          {
            "name": "execute_tool",
            "line": 186,
            "decorators": [],
            "args": [
              "self",
              "tool_name",
              "parameters"
            ],
            "is_async": true,
            "class": "CLIAdapter"
          },
          {
            "name": "get_available_tools",
            "line": 265,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CLIAdapter"
          },
          {
            "name": "get_tool_result",
            "line": 269,
            "decorators": [],
            "args": [
              "self",
              "correlation_id",
              "timeout"
            ],
            "is_async": true,
            "class": "CLIAdapter"
          },
          {
            "name": "validate_parameters",
            "line": 273,
            "decorators": [],
            "args": [
              "self",
              "tool_name",
              "parameters"
            ],
            "is_async": true,
            "class": "CLIAdapter"
          },
          {
            "name": "_get_user_input",
            "line": 296,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CLIAdapter"
          },
          {
            "name": "_handle_interactive_input",
            "line": 310,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CLIAdapter"
          },
          {
            "name": "_show_help",
            "line": 356,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CLIAdapter"
          },
          {
            "name": "_tool_list_files",
            "line": 372,
            "decorators": [],
            "args": [
              "self",
              "params"
            ],
            "is_async": true,
            "class": "CLIAdapter"
          },
          {
            "name": "_tool_read_file",
            "line": 388,
            "decorators": [],
            "args": [
              "self",
              "params"
            ],
            "is_async": true,
            "class": "CLIAdapter"
          },
          {
            "name": "_tool_system_info",
            "line": 404,
            "decorators": [],
            "args": [
              "self",
              "params"
            ],
            "is_async": true,
            "class": "CLIAdapter"
          },
          {
            "name": "start",
            "line": 416,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CLIAdapter"
          },
          {
            "name": "stop",
            "line": 438,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CLIAdapter"
          },
          {
            "name": "is_healthy",
            "line": 472,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CLIAdapter"
          },
          {
            "name": "get_status",
            "line": 476,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CLIAdapter"
          },
          {
            "name": "list_tools",
            "line": 493,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CLIAdapter"
          },
          {
            "name": "get_tool_schema",
            "line": 497,
            "decorators": [],
            "args": [
              "self",
              "tool_name"
            ],
            "is_async": true,
            "class": "CLIAdapter"
          },
          {
            "name": "get_tool_info",
            "line": 527,
            "decorators": [],
            "args": [
              "self",
              "tool_name"
            ],
            "is_async": true,
            "class": "CLIAdapter"
          },
          {
            "name": "get_all_tool_info",
            "line": 551,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CLIAdapter"
          },
          {
            "name": "get_capabilities",
            "line": 560,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "CLIAdapter"
          },
          {
            "name": "get_home_channel_id",
            "line": 571,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CLIAdapter"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/cli/config.py",
        "classes": [
          {
            "name": "CLIAdapterConfig",
            "line": 9,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": [
              {
                "name": "get_home_channel_id",
                "line": 28,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CLIAdapterConfig"
              },
              {
                "name": "load_env_vars",
                "line": 41,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CLIAdapterConfig"
              },
              {
                "name": "load_env_vars_with_instance",
                "line": 61,
                "decorators": [],
                "args": [
                  "self",
                  "instance_id"
                ],
                "is_async": false,
                "class": "CLIAdapterConfig"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "get_home_channel_id",
            "line": 28,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CLIAdapterConfig"
          },
          {
            "name": "load_env_vars",
            "line": 41,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CLIAdapterConfig"
          },
          {
            "name": "load_env_vars_with_instance",
            "line": 61,
            "decorators": [],
            "args": [
              "self",
              "instance_id"
            ],
            "is_async": false,
            "class": "CLIAdapterConfig"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/api/api_wa.py",
        "classes": [
          {
            "name": "APIWARoutes",
            "line": 8,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 9,
                "decorators": [],
                "args": [
                  "self",
                  "bus_manager"
                ],
                "is_async": false,
                "class": "APIWARoutes"
              },
              {
                "name": "register",
                "line": 12,
                "decorators": [],
                "args": [
                  "self",
                  "app"
                ],
                "is_async": false,
                "class": "APIWARoutes"
              },
              {
                "name": "_handle_guidance",
                "line": 19,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIWARoutes"
              },
              {
                "name": "_handle_defer",
                "line": 31,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIWARoutes"
              },
              {
                "name": "_handle_wa_deferrals",
                "line": 42,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIWARoutes"
              },
              {
                "name": "_handle_wa_deferral_detail",
                "line": 50,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIWARoutes"
              },
              {
                "name": "_handle_wa_feedback",
                "line": 59,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIWARoutes"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 9,
            "decorators": [],
            "args": [
              "self",
              "bus_manager"
            ],
            "is_async": false,
            "class": "APIWARoutes"
          },
          {
            "name": "register",
            "line": 12,
            "decorators": [],
            "args": [
              "self",
              "app"
            ],
            "is_async": false,
            "class": "APIWARoutes"
          },
          {
            "name": "_handle_guidance",
            "line": 19,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIWARoutes"
          },
          {
            "name": "_handle_defer",
            "line": 31,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIWARoutes"
          },
          {
            "name": "_handle_wa_deferrals",
            "line": 42,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIWARoutes"
          },
          {
            "name": "_handle_wa_deferral_detail",
            "line": 50,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIWARoutes"
          },
          {
            "name": "_handle_wa_feedback",
            "line": 59,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIWARoutes"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/api/dependencies.py",
        "classes": [],
        "functions": [
          {
            "name": "set_service_registry",
            "line": 15,
            "decorators": [],
            "args": [
              "registry"
            ],
            "is_async": false
          },
          {
            "name": "get_service_registry",
            "line": 20,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "get_service",
            "line": 29,
            "decorators": [],
            "args": [
              "service_type"
            ],
            "is_async": false
          },
          {
            "name": "get_required_service",
            "line": 53,
            "decorators": [],
            "args": [
              "service_type"
            ],
            "is_async": false
          },
          {
            "name": "get_memory_service",
            "line": 69,
            "decorators": [],
            "args": [],
            "is_async": true
          },
          {
            "name": "get_llm_service",
            "line": 74,
            "decorators": [],
            "args": [],
            "is_async": true
          },
          {
            "name": "get_audit_service",
            "line": 79,
            "decorators": [],
            "args": [],
            "is_async": true
          },
          {
            "name": "get_telemetry_service",
            "line": 84,
            "decorators": [],
            "args": [],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/adapters/api/api_telemetry.py",
        "classes": [
          {
            "name": "APITelemetryRoutes",
            "line": 12,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 15,
                "decorators": [],
                "args": [
                  "self",
                  "service_registry",
                  "bus_manager",
                  "runtime"
                ],
                "is_async": false,
                "class": "APITelemetryRoutes"
              },
              {
                "name": "register",
                "line": 29,
                "decorators": [],
                "args": [
                  "self",
                  "app"
                ],
                "is_async": false,
                "class": "APITelemetryRoutes"
              },
              {
                "name": "_handle_telemetry_overview",
                "line": 49,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APITelemetryRoutes"
              },
              {
                "name": "_handle_metrics",
                "line": 110,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APITelemetryRoutes"
              },
              {
                "name": "_handle_metric_details",
                "line": 161,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APITelemetryRoutes"
              },
              {
                "name": "_handle_record_metric",
                "line": 215,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APITelemetryRoutes"
              },
              {
                "name": "_handle_resource_usage",
                "line": 278,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APITelemetryRoutes"
              },
              {
                "name": "_handle_resource_history",
                "line": 339,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APITelemetryRoutes"
              },
              {
                "name": "_handle_service_health",
                "line": 409,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APITelemetryRoutes"
              },
              {
                "name": "_handle_service_type_health",
                "line": 483,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APITelemetryRoutes"
              },
              {
                "name": "_handle_audit_trail",
                "line": 548,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APITelemetryRoutes"
              },
              {
                "name": "_handle_audit_stats",
                "line": 582,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APITelemetryRoutes"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 15,
            "decorators": [],
            "args": [
              "self",
              "service_registry",
              "bus_manager",
              "runtime"
            ],
            "is_async": false,
            "class": "APITelemetryRoutes"
          },
          {
            "name": "register",
            "line": 29,
            "decorators": [],
            "args": [
              "self",
              "app"
            ],
            "is_async": false,
            "class": "APITelemetryRoutes"
          },
          {
            "name": "_handle_telemetry_overview",
            "line": 49,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APITelemetryRoutes"
          },
          {
            "name": "_handle_metrics",
            "line": 110,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APITelemetryRoutes"
          },
          {
            "name": "_handle_metric_details",
            "line": 161,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APITelemetryRoutes"
          },
          {
            "name": "_handle_record_metric",
            "line": 215,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APITelemetryRoutes"
          },
          {
            "name": "_handle_resource_usage",
            "line": 278,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APITelemetryRoutes"
          },
          {
            "name": "_handle_resource_history",
            "line": 339,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APITelemetryRoutes"
          },
          {
            "name": "_handle_service_health",
            "line": 409,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APITelemetryRoutes"
          },
          {
            "name": "_handle_service_type_health",
            "line": 483,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APITelemetryRoutes"
          },
          {
            "name": "_handle_audit_trail",
            "line": 548,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APITelemetryRoutes"
          },
          {
            "name": "_handle_audit_stats",
            "line": 582,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APITelemetryRoutes"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/api/api_system.py",
        "classes": [
          {
            "name": "APISystemRoutes",
            "line": 8,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 9,
                "decorators": [],
                "args": [
                  "self",
                  "telemetry_collector"
                ],
                "is_async": false,
                "class": "APISystemRoutes"
              },
              {
                "name": "register",
                "line": 12,
                "decorators": [],
                "args": [
                  "self",
                  "app"
                ],
                "is_async": false,
                "class": "APISystemRoutes"
              },
              {
                "name": "_handle_telemetry_snapshot",
                "line": 31,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APISystemRoutes"
              },
              {
                "name": "_handle_adapters",
                "line": 40,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APISystemRoutes"
              },
              {
                "name": "_handle_services",
                "line": 49,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APISystemRoutes"
              },
              {
                "name": "_handle_processor_state",
                "line": 58,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APISystemRoutes"
              },
              {
                "name": "_handle_configuration",
                "line": 67,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APISystemRoutes"
              },
              {
                "name": "_handle_health",
                "line": 76,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APISystemRoutes"
              },
              {
                "name": "_handle_single_step",
                "line": 85,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APISystemRoutes"
              },
              {
                "name": "_handle_pause_processing",
                "line": 94,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APISystemRoutes"
              },
              {
                "name": "_handle_resume_processing",
                "line": 103,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APISystemRoutes"
              },
              {
                "name": "_handle_processing_queue",
                "line": 112,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APISystemRoutes"
              },
              {
                "name": "_handle_record_metric",
                "line": 121,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APISystemRoutes"
              },
              {
                "name": "_handle_metrics_history",
                "line": 138,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APISystemRoutes"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 9,
            "decorators": [],
            "args": [
              "self",
              "telemetry_collector"
            ],
            "is_async": false,
            "class": "APISystemRoutes"
          },
          {
            "name": "register",
            "line": 12,
            "decorators": [],
            "args": [
              "self",
              "app"
            ],
            "is_async": false,
            "class": "APISystemRoutes"
          },
          {
            "name": "_handle_telemetry_snapshot",
            "line": 31,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APISystemRoutes"
          },
          {
            "name": "_handle_adapters",
            "line": 40,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APISystemRoutes"
          },
          {
            "name": "_handle_services",
            "line": 49,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APISystemRoutes"
          },
          {
            "name": "_handle_processor_state",
            "line": 58,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APISystemRoutes"
          },
          {
            "name": "_handle_configuration",
            "line": 67,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APISystemRoutes"
          },
          {
            "name": "_handle_health",
            "line": 76,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APISystemRoutes"
          },
          {
            "name": "_handle_single_step",
            "line": 85,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APISystemRoutes"
          },
          {
            "name": "_handle_pause_processing",
            "line": 94,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APISystemRoutes"
          },
          {
            "name": "_handle_resume_processing",
            "line": 103,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APISystemRoutes"
          },
          {
            "name": "_handle_processing_queue",
            "line": 112,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APISystemRoutes"
          },
          {
            "name": "_handle_record_metric",
            "line": 121,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APISystemRoutes"
          },
          {
            "name": "_handle_metrics_history",
            "line": 138,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APISystemRoutes"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/api/api_runtime_control.py",
        "classes": [
          {
            "name": "APIRuntimeControlRoutes",
            "line": 10,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 13,
                "decorators": [],
                "args": [
                  "self",
                  "runtime_control_service"
                ],
                "is_async": false,
                "class": "APIRuntimeControlRoutes"
              },
              {
                "name": "register",
                "line": 16,
                "decorators": [],
                "args": [
                  "self",
                  "app"
                ],
                "is_async": false,
                "class": "APIRuntimeControlRoutes"
              },
              {
                "name": "_handle_single_step",
                "line": 55,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIRuntimeControlRoutes"
              },
              {
                "name": "_handle_pause_processing",
                "line": 67,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIRuntimeControlRoutes"
              },
              {
                "name": "_handle_resume_processing",
                "line": 79,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIRuntimeControlRoutes"
              },
              {
                "name": "_handle_shutdown_runtime",
                "line": 91,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIRuntimeControlRoutes"
              },
              {
                "name": "_handle_get_queue_status",
                "line": 111,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIRuntimeControlRoutes"
              },
              {
                "name": "_handle_load_adapter",
                "line": 120,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIRuntimeControlRoutes"
              },
              {
                "name": "_handle_unload_adapter",
                "line": 143,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIRuntimeControlRoutes"
              },
              {
                "name": "_handle_list_adapters",
                "line": 158,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIRuntimeControlRoutes"
              },
              {
                "name": "_handle_get_adapter_info",
                "line": 167,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIRuntimeControlRoutes"
              },
              {
                "name": "_handle_get_config",
                "line": 184,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIRuntimeControlRoutes"
              },
              {
                "name": "_handle_update_config",
                "line": 199,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIRuntimeControlRoutes"
              },
              {
                "name": "_handle_validate_config",
                "line": 222,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIRuntimeControlRoutes"
              },
              {
                "name": "_handle_reload_config",
                "line": 242,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIRuntimeControlRoutes"
              },
              {
                "name": "_handle_backup_config",
                "line": 254,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIRuntimeControlRoutes"
              },
              {
                "name": "_handle_restore_config",
                "line": 271,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIRuntimeControlRoutes"
              },
              {
                "name": "_handle_list_config_backups",
                "line": 286,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIRuntimeControlRoutes"
              },
              {
                "name": "_handle_get_runtime_status",
                "line": 296,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIRuntimeControlRoutes"
              },
              {
                "name": "_handle_get_runtime_snapshot",
                "line": 305,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIRuntimeControlRoutes"
              },
              {
                "name": "_handle_list_services",
                "line": 315,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIRuntimeControlRoutes"
              },
              {
                "name": "_handle_get_service_health",
                "line": 327,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIRuntimeControlRoutes"
              },
              {
                "name": "_handle_get_service_selection_explanation",
                "line": 336,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIRuntimeControlRoutes"
              },
              {
                "name": "_handle_reset_circuit_breakers",
                "line": 345,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIRuntimeControlRoutes"
              },
              {
                "name": "_handle_update_service_priority",
                "line": 355,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIRuntimeControlRoutes"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 13,
            "decorators": [],
            "args": [
              "self",
              "runtime_control_service"
            ],
            "is_async": false,
            "class": "APIRuntimeControlRoutes"
          },
          {
            "name": "register",
            "line": 16,
            "decorators": [],
            "args": [
              "self",
              "app"
            ],
            "is_async": false,
            "class": "APIRuntimeControlRoutes"
          },
          {
            "name": "_handle_single_step",
            "line": 55,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIRuntimeControlRoutes"
          },
          {
            "name": "_handle_pause_processing",
            "line": 67,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIRuntimeControlRoutes"
          },
          {
            "name": "_handle_resume_processing",
            "line": 79,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIRuntimeControlRoutes"
          },
          {
            "name": "_handle_shutdown_runtime",
            "line": 91,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIRuntimeControlRoutes"
          },
          {
            "name": "_handle_get_queue_status",
            "line": 111,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIRuntimeControlRoutes"
          },
          {
            "name": "_handle_load_adapter",
            "line": 120,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIRuntimeControlRoutes"
          },
          {
            "name": "_handle_unload_adapter",
            "line": 143,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIRuntimeControlRoutes"
          },
          {
            "name": "_handle_list_adapters",
            "line": 158,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIRuntimeControlRoutes"
          },
          {
            "name": "_handle_get_adapter_info",
            "line": 167,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIRuntimeControlRoutes"
          },
          {
            "name": "_handle_get_config",
            "line": 184,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIRuntimeControlRoutes"
          },
          {
            "name": "_handle_update_config",
            "line": 199,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIRuntimeControlRoutes"
          },
          {
            "name": "_handle_validate_config",
            "line": 222,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIRuntimeControlRoutes"
          },
          {
            "name": "_handle_reload_config",
            "line": 242,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIRuntimeControlRoutes"
          },
          {
            "name": "_handle_backup_config",
            "line": 254,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIRuntimeControlRoutes"
          },
          {
            "name": "_handle_restore_config",
            "line": 271,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIRuntimeControlRoutes"
          },
          {
            "name": "_handle_list_config_backups",
            "line": 286,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIRuntimeControlRoutes"
          },
          {
            "name": "_handle_get_runtime_status",
            "line": 296,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIRuntimeControlRoutes"
          },
          {
            "name": "_handle_get_runtime_snapshot",
            "line": 305,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIRuntimeControlRoutes"
          },
          {
            "name": "_handle_list_services",
            "line": 315,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIRuntimeControlRoutes"
          },
          {
            "name": "_handle_get_service_health",
            "line": 327,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIRuntimeControlRoutes"
          },
          {
            "name": "_handle_get_service_selection_explanation",
            "line": 336,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIRuntimeControlRoutes"
          },
          {
            "name": "_handle_reset_circuit_breakers",
            "line": 345,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIRuntimeControlRoutes"
          },
          {
            "name": "_handle_update_service_priority",
            "line": 355,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIRuntimeControlRoutes"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/api/api_tools.py",
        "classes": [
          {
            "name": "APIToolsRoutes",
            "line": 8,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 9,
                "decorators": [],
                "args": [
                  "self",
                  "bus_manager"
                ],
                "is_async": false,
                "class": "APIToolsRoutes"
              },
              {
                "name": "register",
                "line": 12,
                "decorators": [],
                "args": [
                  "self",
                  "app"
                ],
                "is_async": false,
                "class": "APIToolsRoutes"
              },
              {
                "name": "_handle_list_tools",
                "line": 17,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIToolsRoutes"
              },
              {
                "name": "_handle_tool",
                "line": 29,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIToolsRoutes"
              },
              {
                "name": "_handle_validate_tool",
                "line": 42,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIToolsRoutes"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 9,
            "decorators": [],
            "args": [
              "self",
              "bus_manager"
            ],
            "is_async": false,
            "class": "APIToolsRoutes"
          },
          {
            "name": "register",
            "line": 12,
            "decorators": [],
            "args": [
              "self",
              "app"
            ],
            "is_async": false,
            "class": "APIToolsRoutes"
          },
          {
            "name": "_handle_list_tools",
            "line": 17,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIToolsRoutes"
          },
          {
            "name": "_handle_tool",
            "line": 29,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIToolsRoutes"
          },
          {
            "name": "_handle_validate_tool",
            "line": 42,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIToolsRoutes"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/api/api_logs.py",
        "classes": [
          {
            "name": "APILogsRoutes",
            "line": 10,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 11,
                "decorators": [],
                "args": [
                  "self",
                  "bus_manager"
                ],
                "is_async": false,
                "class": "APILogsRoutes"
              },
              {
                "name": "register",
                "line": 14,
                "decorators": [],
                "args": [
                  "self",
                  "app"
                ],
                "is_async": false,
                "class": "APILogsRoutes"
              },
              {
                "name": "_handle_logs",
                "line": 17,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APILogsRoutes"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 11,
            "decorators": [],
            "args": [
              "self",
              "bus_manager"
            ],
            "is_async": false,
            "class": "APILogsRoutes"
          },
          {
            "name": "register",
            "line": 14,
            "decorators": [],
            "args": [
              "self",
              "app"
            ],
            "is_async": false,
            "class": "APILogsRoutes"
          },
          {
            "name": "_handle_logs",
            "line": 17,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APILogsRoutes"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/api/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/adapters/api/api_visibility.py",
        "classes": [
          {
            "name": "APIVisibilityRoutes",
            "line": 19,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 22,
                "decorators": [],
                "args": [
                  "self",
                  "bus_manager",
                  "telemetry_collector",
                  "runtime"
                ],
                "is_async": false,
                "class": "APIVisibilityRoutes"
              },
              {
                "name": "register",
                "line": 29,
                "decorators": [],
                "args": [
                  "self",
                  "app"
                ],
                "is_async": false,
                "class": "APIVisibilityRoutes"
              },
              {
                "name": "_get_time_service",
                "line": 44,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "APIVisibilityRoutes"
              },
              {
                "name": "_get_current_time_iso",
                "line": 56,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "APIVisibilityRoutes"
              },
              {
                "name": "_handle_current_thoughts",
                "line": 63,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIVisibilityRoutes"
              },
              {
                "name": "_handle_active_tasks",
                "line": 96,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIVisibilityRoutes"
              },
              {
                "name": "_handle_system_snapshot",
                "line": 127,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIVisibilityRoutes"
              },
              {
                "name": "_handle_recent_decisions",
                "line": 144,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIVisibilityRoutes"
              },
              {
                "name": "_handle_correlations",
                "line": 181,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIVisibilityRoutes"
              },
              {
                "name": "_handle_task_details",
                "line": 227,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIVisibilityRoutes"
              },
              {
                "name": "_handle_thought_details",
                "line": 274,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIVisibilityRoutes"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 22,
            "decorators": [],
            "args": [
              "self",
              "bus_manager",
              "telemetry_collector",
              "runtime"
            ],
            "is_async": false,
            "class": "APIVisibilityRoutes"
          },
          {
            "name": "register",
            "line": 29,
            "decorators": [],
            "args": [
              "self",
              "app"
            ],
            "is_async": false,
            "class": "APIVisibilityRoutes"
          },
          {
            "name": "_get_time_service",
            "line": 44,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "APIVisibilityRoutes"
          },
          {
            "name": "_get_current_time_iso",
            "line": 56,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "APIVisibilityRoutes"
          },
          {
            "name": "_handle_current_thoughts",
            "line": 63,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIVisibilityRoutes"
          },
          {
            "name": "_handle_active_tasks",
            "line": 96,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIVisibilityRoutes"
          },
          {
            "name": "_handle_system_snapshot",
            "line": 127,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIVisibilityRoutes"
          },
          {
            "name": "_handle_recent_decisions",
            "line": 144,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIVisibilityRoutes"
          },
          {
            "name": "_handle_correlations",
            "line": 181,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIVisibilityRoutes"
          },
          {
            "name": "_handle_task_details",
            "line": 227,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIVisibilityRoutes"
          },
          {
            "name": "_handle_thought_details",
            "line": 274,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIVisibilityRoutes"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/api/api_adapter.py",
        "classes": [
          {
            "name": "APIAdapter",
            "line": 27,
            "decorators": [],
            "bases": [
              "CommunicationService"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 33,
                "decorators": [],
                "args": [
                  "self",
                  "host",
                  "port",
                  "bus_manager",
                  "service_registry",
                  "runtime_control",
                  "runtime",
                  "on_message"
                ],
                "is_async": false,
                "class": "APIAdapter"
              },
              {
                "name": "_get_time_service",
                "line": 82,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "APIAdapter"
              },
              {
                "name": "_emit_telemetry",
                "line": 91,
                "decorators": [],
                "args": [
                  "self",
                  "metric_name",
                  "tags"
                ],
                "is_async": true,
                "class": "APIAdapter"
              },
              {
                "name": "_setup_routes",
                "line": 121,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "APIAdapter"
              },
              {
                "name": "send_message",
                "line": 172,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id",
                  "content"
                ],
                "is_async": true,
                "class": "APIAdapter"
              },
              {
                "name": "fetch_messages",
                "line": 224,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id",
                  "limit"
                ],
                "is_async": true,
                "class": "APIAdapter"
              },
              {
                "name": "_handle_send_message",
                "line": 251,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIAdapter"
              },
              {
                "name": "_handle_fetch_messages",
                "line": 293,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIAdapter"
              },
              {
                "name": "_handle_health_check",
                "line": 319,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIAdapter"
              },
              {
                "name": "_handle_list_services",
                "line": 360,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIAdapter"
              },
              {
                "name": "_handle_runtime_status",
                "line": 412,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIAdapter"
              },
              {
                "name": "_handle_runtime_control",
                "line": 427,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIAdapter"
              },
              {
                "name": "_handle_metrics",
                "line": 453,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIAdapter"
              },
              {
                "name": "_handle_telemetry_report",
                "line": 460,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIAdapter"
              },
              {
                "name": "start",
                "line": 467,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "APIAdapter"
              },
              {
                "name": "stop",
                "line": 491,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "APIAdapter"
              },
              {
                "name": "is_healthy",
                "line": 517,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "APIAdapter"
              },
              {
                "name": "get_capabilities",
                "line": 521,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "APIAdapter"
              },
              {
                "name": "get_status",
                "line": 530,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "APIAdapter"
              },
              {
                "name": "get_config",
                "line": 546,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "APIAdapter"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 33,
            "decorators": [],
            "args": [
              "self",
              "host",
              "port",
              "bus_manager",
              "service_registry",
              "runtime_control",
              "runtime",
              "on_message"
            ],
            "is_async": false,
            "class": "APIAdapter"
          },
          {
            "name": "_get_time_service",
            "line": 82,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "APIAdapter"
          },
          {
            "name": "_emit_telemetry",
            "line": 91,
            "decorators": [],
            "args": [
              "self",
              "metric_name",
              "tags"
            ],
            "is_async": true,
            "class": "APIAdapter"
          },
          {
            "name": "_setup_routes",
            "line": 121,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "APIAdapter"
          },
          {
            "name": "send_message",
            "line": 172,
            "decorators": [],
            "args": [
              "self",
              "channel_id",
              "content"
            ],
            "is_async": true,
            "class": "APIAdapter"
          },
          {
            "name": "fetch_messages",
            "line": 224,
            "decorators": [],
            "args": [
              "self",
              "channel_id",
              "limit"
            ],
            "is_async": true,
            "class": "APIAdapter"
          },
          {
            "name": "_handle_send_message",
            "line": 251,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIAdapter"
          },
          {
            "name": "_handle_fetch_messages",
            "line": 293,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIAdapter"
          },
          {
            "name": "_handle_health_check",
            "line": 319,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIAdapter"
          },
          {
            "name": "_handle_list_services",
            "line": 360,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIAdapter"
          },
          {
            "name": "_handle_runtime_status",
            "line": 412,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIAdapter"
          },
          {
            "name": "_handle_runtime_control",
            "line": 427,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIAdapter"
          },
          {
            "name": "_handle_metrics",
            "line": 453,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIAdapter"
          },
          {
            "name": "_handle_telemetry_report",
            "line": 460,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIAdapter"
          },
          {
            "name": "start",
            "line": 467,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "APIAdapter"
          },
          {
            "name": "stop",
            "line": 491,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "APIAdapter"
          },
          {
            "name": "is_healthy",
            "line": 517,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "APIAdapter"
          },
          {
            "name": "get_capabilities",
            "line": 521,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "APIAdapter"
          },
          {
            "name": "get_status",
            "line": 530,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "APIAdapter"
          },
          {
            "name": "get_config",
            "line": 546,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "APIAdapter"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/api/api_comms.py",
        "classes": [
          {
            "name": "APICommsRoutes",
            "line": 11,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 12,
                "decorators": [],
                "args": [
                  "self",
                  "api_observer",
                  "api_adapter",
                  "time_service",
                  "service_registry"
                ],
                "is_async": false,
                "class": "APICommsRoutes"
              },
              {
                "name": "_get_time_service",
                "line": 18,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "APICommsRoutes"
              },
              {
                "name": "register",
                "line": 32,
                "decorators": [],
                "args": [
                  "self",
                  "app"
                ],
                "is_async": false,
                "class": "APICommsRoutes"
              },
              {
                "name": "_handle_message",
                "line": 37,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APICommsRoutes"
              },
              {
                "name": "_handle_get_messages",
                "line": 54,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APICommsRoutes"
              },
              {
                "name": "_handle_status",
                "line": 138,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APICommsRoutes"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 12,
            "decorators": [],
            "args": [
              "self",
              "api_observer",
              "api_adapter",
              "time_service",
              "service_registry"
            ],
            "is_async": false,
            "class": "APICommsRoutes"
          },
          {
            "name": "_get_time_service",
            "line": 18,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "APICommsRoutes"
          },
          {
            "name": "register",
            "line": 32,
            "decorators": [],
            "args": [
              "self",
              "app"
            ],
            "is_async": false,
            "class": "APICommsRoutes"
          },
          {
            "name": "_handle_message",
            "line": 37,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APICommsRoutes"
          },
          {
            "name": "_handle_get_messages",
            "line": 54,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APICommsRoutes"
          },
          {
            "name": "_handle_status",
            "line": 138,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APICommsRoutes"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/api/adapter.py",
        "classes": [
          {
            "name": "ApiPlatform",
            "line": 14,
            "decorators": [],
            "bases": [
              "Service"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 15,
                "decorators": [],
                "args": [
                  "self",
                  "runtime"
                ],
                "is_async": false,
                "class": "ApiPlatform"
              },
              {
                "name": "_handle_api_message_event",
                "line": 60,
                "decorators": [],
                "args": [
                  "self",
                  "msg"
                ],
                "is_async": true,
                "class": "ApiPlatform"
              },
              {
                "name": "get_channel_info",
                "line": 71,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ApiPlatform"
              },
              {
                "name": "_ensure_stop_event",
                "line": 78,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ApiPlatform"
              },
              {
                "name": "get_services_to_register",
                "line": 86,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ApiPlatform"
              },
              {
                "name": "start",
                "line": 112,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ApiPlatform"
              },
              {
                "name": "run_lifecycle",
                "line": 170,
                "decorators": [],
                "args": [
                  "self",
                  "agent_run_task"
                ],
                "is_async": true,
                "class": "ApiPlatform"
              },
              {
                "name": "stop",
                "line": 190,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ApiPlatform"
              },
              {
                "name": "send_message",
                "line": 200,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id",
                  "content",
                  "reference_message_id"
                ],
                "is_async": true,
                "class": "ApiPlatform"
              },
              {
                "name": "fetch_messages",
                "line": 207,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id",
                  "limit"
                ],
                "is_async": true,
                "class": "ApiPlatform"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 15,
            "decorators": [],
            "args": [
              "self",
              "runtime"
            ],
            "is_async": false,
            "class": "ApiPlatform"
          },
          {
            "name": "_handle_api_message_event",
            "line": 60,
            "decorators": [],
            "args": [
              "self",
              "msg"
            ],
            "is_async": true,
            "class": "ApiPlatform"
          },
          {
            "name": "get_channel_info",
            "line": 71,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ApiPlatform"
          },
          {
            "name": "_ensure_stop_event",
            "line": 78,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ApiPlatform"
          },
          {
            "name": "get_services_to_register",
            "line": 86,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ApiPlatform"
          },
          {
            "name": "start",
            "line": 112,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ApiPlatform"
          },
          {
            "name": "run_lifecycle",
            "line": 170,
            "decorators": [],
            "args": [
              "self",
              "agent_run_task"
            ],
            "is_async": true,
            "class": "ApiPlatform"
          },
          {
            "name": "stop",
            "line": 190,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ApiPlatform"
          },
          {
            "name": "send_message",
            "line": 200,
            "decorators": [],
            "args": [
              "self",
              "channel_id",
              "content",
              "reference_message_id"
            ],
            "is_async": true,
            "class": "ApiPlatform"
          },
          {
            "name": "fetch_messages",
            "line": 207,
            "decorators": [],
            "args": [
              "self",
              "channel_id",
              "limit"
            ],
            "is_async": true,
            "class": "ApiPlatform"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/api/api_observer.py",
        "classes": [
          {
            "name": "APIObserver",
            "line": 14,
            "decorators": [],
            "bases": [
              "<ast.Subscript object at 0x7b749703b950>"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 15,
                "decorators": [],
                "args": [
                  "self",
                  "on_observe",
                  "memory_service",
                  "agent_id",
                  "bus_manager",
                  "api_adapter",
                  "secrets_service",
                  "time_service"
                ],
                "is_async": false,
                "class": "APIObserver"
              },
              {
                "name": "start",
                "line": 37,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "APIObserver"
              },
              {
                "name": "stop",
                "line": 40,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "APIObserver"
              },
              {
                "name": "handle_incoming_message",
                "line": 43,
                "decorators": [],
                "args": [
                  "self",
                  "msg"
                ],
                "is_async": true,
                "class": "APIObserver"
              },
              {
                "name": "_handle_passive_observation",
                "line": 64,
                "decorators": [],
                "args": [
                  "self",
                  "msg"
                ],
                "is_async": true,
                "class": "APIObserver"
              },
              {
                "name": "_is_agent_message",
                "line": 84,
                "decorators": [],
                "args": [
                  "self",
                  "msg"
                ],
                "is_async": false,
                "class": "APIObserver"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 15,
            "decorators": [],
            "args": [
              "self",
              "on_observe",
              "memory_service",
              "agent_id",
              "bus_manager",
              "api_adapter",
              "secrets_service",
              "time_service"
            ],
            "is_async": false,
            "class": "APIObserver"
          },
          {
            "name": "start",
            "line": 37,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "APIObserver"
          },
          {
            "name": "stop",
            "line": 40,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "APIObserver"
          },
          {
            "name": "handle_incoming_message",
            "line": 43,
            "decorators": [],
            "args": [
              "self",
              "msg"
            ],
            "is_async": true,
            "class": "APIObserver"
          },
          {
            "name": "_handle_passive_observation",
            "line": 64,
            "decorators": [],
            "args": [
              "self",
              "msg"
            ],
            "is_async": true,
            "class": "APIObserver"
          },
          {
            "name": "_is_agent_message",
            "line": 84,
            "decorators": [],
            "args": [
              "self",
              "msg"
            ],
            "is_async": false,
            "class": "APIObserver"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/api/api_agent.py",
        "classes": [
          {
            "name": "APIAgentRoutes",
            "line": 14,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 17,
                "decorators": [],
                "args": [
                  "self",
                  "bus_manager",
                  "on_message_callback",
                  "service_registry"
                ],
                "is_async": false,
                "class": "APIAgentRoutes"
              },
              {
                "name": "_get_time_service",
                "line": 24,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "APIAgentRoutes"
              },
              {
                "name": "register",
                "line": 33,
                "decorators": [],
                "args": [
                  "self",
                  "app"
                ],
                "is_async": false,
                "class": "APIAgentRoutes"
              },
              {
                "name": "_handle_send_message",
                "line": 46,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIAgentRoutes"
              },
              {
                "name": "_handle_get_messages",
                "line": 99,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIAgentRoutes"
              },
              {
                "name": "_handle_list_channels",
                "line": 145,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIAgentRoutes"
              },
              {
                "name": "_handle_channel_info",
                "line": 167,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIAgentRoutes"
              },
              {
                "name": "_handle_agent_status",
                "line": 199,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIAgentRoutes"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 17,
            "decorators": [],
            "args": [
              "self",
              "bus_manager",
              "on_message_callback",
              "service_registry"
            ],
            "is_async": false,
            "class": "APIAgentRoutes"
          },
          {
            "name": "_get_time_service",
            "line": 24,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "APIAgentRoutes"
          },
          {
            "name": "register",
            "line": 33,
            "decorators": [],
            "args": [
              "self",
              "app"
            ],
            "is_async": false,
            "class": "APIAgentRoutes"
          },
          {
            "name": "_handle_send_message",
            "line": 46,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIAgentRoutes"
          },
          {
            "name": "_handle_get_messages",
            "line": 99,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIAgentRoutes"
          },
          {
            "name": "_handle_list_channels",
            "line": 145,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIAgentRoutes"
          },
          {
            "name": "_handle_channel_info",
            "line": 167,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIAgentRoutes"
          },
          {
            "name": "_handle_agent_status",
            "line": 199,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIAgentRoutes"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/api/api_auth.py",
        "classes": [
          {
            "name": "APIAuthRoutes",
            "line": 11,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 14,
                "decorators": [],
                "args": [
                  "self",
                  "runtime"
                ],
                "is_async": false,
                "class": "APIAuthRoutes"
              },
              {
                "name": "_ensure_services",
                "line": 19,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "APIAuthRoutes"
              },
              {
                "name": "register",
                "line": 29,
                "decorators": [],
                "args": [
                  "self",
                  "app"
                ],
                "is_async": false,
                "class": "APIAuthRoutes"
              },
              {
                "name": "_handle_oauth_start",
                "line": 44,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIAuthRoutes"
              },
              {
                "name": "_handle_oauth_callback",
                "line": 111,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIAuthRoutes"
              },
              {
                "name": "_handle_login",
                "line": 181,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIAuthRoutes"
              },
              {
                "name": "_handle_verify_token",
                "line": 229,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIAuthRoutes"
              },
              {
                "name": "_handle_link_discord",
                "line": 271,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIAuthRoutes"
              },
              {
                "name": "_handle_create_agent",
                "line": 333,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIAuthRoutes"
              },
              {
                "name": "_handle_initialize_agent",
                "line": 503,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIAuthRoutes"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 14,
            "decorators": [],
            "args": [
              "self",
              "runtime"
            ],
            "is_async": false,
            "class": "APIAuthRoutes"
          },
          {
            "name": "_ensure_services",
            "line": 19,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "APIAuthRoutes"
          },
          {
            "name": "register",
            "line": 29,
            "decorators": [],
            "args": [
              "self",
              "app"
            ],
            "is_async": false,
            "class": "APIAuthRoutes"
          },
          {
            "name": "_handle_oauth_start",
            "line": 44,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIAuthRoutes"
          },
          {
            "name": "_handle_oauth_callback",
            "line": 111,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIAuthRoutes"
          },
          {
            "name": "_handle_login",
            "line": 181,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIAuthRoutes"
          },
          {
            "name": "_handle_verify_token",
            "line": 229,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIAuthRoutes"
          },
          {
            "name": "_handle_link_discord",
            "line": 271,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIAuthRoutes"
          },
          {
            "name": "_handle_create_agent",
            "line": 333,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIAuthRoutes"
          },
          {
            "name": "_handle_initialize_agent",
            "line": 503,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIAuthRoutes"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/api/config.py",
        "classes": [
          {
            "name": "APIAdapterConfig",
            "line": 9,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": [
              {
                "name": "get_home_channel_id",
                "line": 29,
                "decorators": [],
                "args": [
                  "self",
                  "host",
                  "port"
                ],
                "is_async": false,
                "class": "APIAdapterConfig"
              },
              {
                "name": "load_env_vars",
                "line": 35,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "APIAdapterConfig"
              },
              {
                "name": "load_env_vars_with_instance",
                "line": 51,
                "decorators": [],
                "args": [
                  "self",
                  "instance_id"
                ],
                "is_async": false,
                "class": "APIAdapterConfig"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "get_home_channel_id",
            "line": 29,
            "decorators": [],
            "args": [
              "self",
              "host",
              "port"
            ],
            "is_async": false,
            "class": "APIAdapterConfig"
          },
          {
            "name": "load_env_vars",
            "line": 35,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "APIAdapterConfig"
          },
          {
            "name": "load_env_vars_with_instance",
            "line": 51,
            "decorators": [],
            "args": [
              "self",
              "instance_id"
            ],
            "is_async": false,
            "class": "APIAdapterConfig"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/api/api_memory.py",
        "classes": [
          {
            "name": "APIMemoryRoutes",
            "line": 14,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 15,
                "decorators": [],
                "args": [
                  "self",
                  "bus_manager"
                ],
                "is_async": false,
                "class": "APIMemoryRoutes"
              },
              {
                "name": "register",
                "line": 18,
                "decorators": [],
                "args": [
                  "self",
                  "app"
                ],
                "is_async": false,
                "class": "APIMemoryRoutes"
              },
              {
                "name": "_handle_memory_scopes",
                "line": 36,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIMemoryRoutes"
              },
              {
                "name": "_handle_relationships",
                "line": 50,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIMemoryRoutes"
              },
              {
                "name": "_handle_graph_nodes",
                "line": 85,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIMemoryRoutes"
              },
              {
                "name": "_handle_graph_search",
                "line": 128,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIMemoryRoutes"
              },
              {
                "name": "_handle_scope_nodes",
                "line": 175,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIMemoryRoutes"
              },
              {
                "name": "_handle_node_details",
                "line": 211,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIMemoryRoutes"
              },
              {
                "name": "_handle_memory_timeseries",
                "line": 255,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIMemoryRoutes"
              },
              {
                "name": "_handle_memory_timeline",
                "line": 271,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIMemoryRoutes"
              },
              {
                "name": "_handle_agent_identity",
                "line": 307,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIMemoryRoutes"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 15,
            "decorators": [],
            "args": [
              "self",
              "bus_manager"
            ],
            "is_async": false,
            "class": "APIMemoryRoutes"
          },
          {
            "name": "register",
            "line": 18,
            "decorators": [],
            "args": [
              "self",
              "app"
            ],
            "is_async": false,
            "class": "APIMemoryRoutes"
          },
          {
            "name": "_handle_memory_scopes",
            "line": 36,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIMemoryRoutes"
          },
          {
            "name": "_handle_relationships",
            "line": 50,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIMemoryRoutes"
          },
          {
            "name": "_handle_graph_nodes",
            "line": 85,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIMemoryRoutes"
          },
          {
            "name": "_handle_graph_search",
            "line": 128,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIMemoryRoutes"
          },
          {
            "name": "_handle_scope_nodes",
            "line": 175,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIMemoryRoutes"
          },
          {
            "name": "_handle_node_details",
            "line": 211,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIMemoryRoutes"
          },
          {
            "name": "_handle_memory_timeseries",
            "line": 255,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIMemoryRoutes"
          },
          {
            "name": "_handle_memory_timeline",
            "line": 271,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIMemoryRoutes"
          },
          {
            "name": "_handle_agent_identity",
            "line": 307,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIMemoryRoutes"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/api/api_audit.py",
        "classes": [
          {
            "name": "APIAuditRoutes",
            "line": 9,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 10,
                "decorators": [],
                "args": [
                  "self",
                  "audit_service"
                ],
                "is_async": false,
                "class": "APIAuditRoutes"
              },
              {
                "name": "register",
                "line": 13,
                "decorators": [],
                "args": [
                  "self",
                  "app"
                ],
                "is_async": false,
                "class": "APIAuditRoutes"
              },
              {
                "name": "_handle_audit",
                "line": 18,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIAuditRoutes"
              },
              {
                "name": "_handle_audit_query",
                "line": 32,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIAuditRoutes"
              },
              {
                "name": "_handle_audit_log",
                "line": 83,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIAuditRoutes"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 10,
            "decorators": [],
            "args": [
              "self",
              "audit_service"
            ],
            "is_async": false,
            "class": "APIAuditRoutes"
          },
          {
            "name": "register",
            "line": 13,
            "decorators": [],
            "args": [
              "self",
              "app"
            ],
            "is_async": false,
            "class": "APIAuditRoutes"
          },
          {
            "name": "_handle_audit",
            "line": 18,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIAuditRoutes"
          },
          {
            "name": "_handle_audit_query",
            "line": 32,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIAuditRoutes"
          },
          {
            "name": "_handle_audit_log",
            "line": 83,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIAuditRoutes"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/discord/discord_message_handler.py",
        "classes": [
          {
            "name": "DiscordMessageHandler",
            "line": 12,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 15,
                "decorators": [],
                "args": [
                  "self",
                  "client"
                ],
                "is_async": false,
                "class": "DiscordMessageHandler"
              },
              {
                "name": "set_client",
                "line": 23,
                "decorators": [],
                "args": [
                  "self",
                  "client"
                ],
                "is_async": false,
                "class": "DiscordMessageHandler"
              },
              {
                "name": "send_message_to_channel",
                "line": 31,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id",
                  "content"
                ],
                "is_async": true,
                "class": "DiscordMessageHandler"
              },
              {
                "name": "fetch_messages_from_channel",
                "line": 67,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id",
                  "limit"
                ],
                "is_async": true,
                "class": "DiscordMessageHandler"
              },
              {
                "name": "convert_to_discord_message",
                "line": 102,
                "decorators": [],
                "args": [
                  "self",
                  "message"
                ],
                "is_async": false,
                "class": "DiscordMessageHandler"
              },
              {
                "name": "_split_message",
                "line": 122,
                "decorators": [],
                "args": [
                  "self",
                  "content",
                  "max_length"
                ],
                "is_async": false,
                "class": "DiscordMessageHandler"
              },
              {
                "name": "_resolve_channel",
                "line": 159,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id"
                ],
                "is_async": true,
                "class": "DiscordMessageHandler"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 15,
            "decorators": [],
            "args": [
              "self",
              "client"
            ],
            "is_async": false,
            "class": "DiscordMessageHandler"
          },
          {
            "name": "set_client",
            "line": 23,
            "decorators": [],
            "args": [
              "self",
              "client"
            ],
            "is_async": false,
            "class": "DiscordMessageHandler"
          },
          {
            "name": "send_message_to_channel",
            "line": 31,
            "decorators": [],
            "args": [
              "self",
              "channel_id",
              "content"
            ],
            "is_async": true,
            "class": "DiscordMessageHandler"
          },
          {
            "name": "fetch_messages_from_channel",
            "line": 67,
            "decorators": [],
            "args": [
              "self",
              "channel_id",
              "limit"
            ],
            "is_async": true,
            "class": "DiscordMessageHandler"
          },
          {
            "name": "convert_to_discord_message",
            "line": 102,
            "decorators": [],
            "args": [
              "self",
              "message"
            ],
            "is_async": false,
            "class": "DiscordMessageHandler"
          },
          {
            "name": "_split_message",
            "line": 122,
            "decorators": [],
            "args": [
              "self",
              "content",
              "max_length"
            ],
            "is_async": false,
            "class": "DiscordMessageHandler"
          },
          {
            "name": "_resolve_channel",
            "line": 159,
            "decorators": [],
            "args": [
              "self",
              "channel_id"
            ],
            "is_async": true,
            "class": "DiscordMessageHandler"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/discord/discord_tools.py",
        "classes": [],
        "functions": [
          {
            "name": "discord_delete_message",
            "line": 10,
            "decorators": [],
            "args": [
              "bot",
              "channel_id",
              "message_id"
            ],
            "is_async": true
          },
          {
            "name": "discord_timeout_user",
            "line": 34,
            "decorators": [],
            "args": [
              "bot",
              "guild_id",
              "user_id",
              "duration_seconds",
              "reason"
            ],
            "is_async": true
          },
          {
            "name": "discord_ban_user",
            "line": 57,
            "decorators": [],
            "args": [
              "bot",
              "guild_id",
              "user_id",
              "reason",
              "delete_message_days"
            ],
            "is_async": true
          },
          {
            "name": "discord_kick_user",
            "line": 78,
            "decorators": [],
            "args": [
              "bot",
              "guild_id",
              "user_id",
              "reason"
            ],
            "is_async": true
          },
          {
            "name": "register_discord_tools",
            "line": 99,
            "decorators": [],
            "args": [
              "registry",
              "bot"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/adapters/discord/discord_access_control.py",
        "classes": [
          {
            "name": "AccessLevel",
            "line": 11,
            "decorators": [],
            "bases": [
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "ChannelPermissions",
            "line": 21,
            "decorators": [
              "dataclass"
            ],
            "bases": [],
            "methods": [
              {
                "name": "get_access_level",
                "line": 29,
                "decorators": [],
                "args": [
                  "self",
                  "roles"
                ],
                "is_async": false,
                "class": "ChannelPermissions"
              }
            ]
          },
          {
            "name": "DiscordAccessControl",
            "line": 52,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 64,
                "decorators": [],
                "args": [
                  "self",
                  "client"
                ],
                "is_async": false,
                "class": "DiscordAccessControl"
              },
              {
                "name": "set_client",
                "line": 75,
                "decorators": [],
                "args": [
                  "self",
                  "client"
                ],
                "is_async": false,
                "class": "DiscordAccessControl"
              },
              {
                "name": "configure_channel",
                "line": 83,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id",
                  "read_roles",
                  "write_roles",
                  "execute_roles",
                  "admin_roles"
                ],
                "is_async": false,
                "class": "DiscordAccessControl"
              },
              {
                "name": "set_global_role_access",
                "line": 107,
                "decorators": [],
                "args": [
                  "self",
                  "role",
                  "access_level"
                ],
                "is_async": false,
                "class": "DiscordAccessControl"
              },
              {
                "name": "set_user_override",
                "line": 117,
                "decorators": [],
                "args": [
                  "self",
                  "user_id",
                  "access_level"
                ],
                "is_async": false,
                "class": "DiscordAccessControl"
              },
              {
                "name": "check_channel_access",
                "line": 127,
                "decorators": [],
                "args": [
                  "self",
                  "user_id",
                  "channel_id",
                  "required_level"
                ],
                "is_async": true,
                "class": "DiscordAccessControl"
              },
              {
                "name": "check_operation",
                "line": 159,
                "decorators": [],
                "args": [
                  "self",
                  "user_id",
                  "channel_id",
                  "operation"
                ],
                "is_async": true,
                "class": "DiscordAccessControl"
              },
              {
                "name": "filter_accessible_channels",
                "line": 186,
                "decorators": [],
                "args": [
                  "self",
                  "user_id",
                  "channel_ids",
                  "required_level"
                ],
                "is_async": true,
                "class": "DiscordAccessControl"
              },
              {
                "name": "get_user_permissions",
                "line": 207,
                "decorators": [],
                "args": [
                  "self",
                  "user_id"
                ],
                "is_async": true,
                "class": "DiscordAccessControl"
              },
              {
                "name": "_get_user_roles",
                "line": 238,
                "decorators": [],
                "args": [
                  "self",
                  "user_id"
                ],
                "is_async": true,
                "class": "DiscordAccessControl"
              },
              {
                "name": "_get_global_access_level",
                "line": 269,
                "decorators": [],
                "args": [
                  "self",
                  "roles"
                ],
                "is_async": false,
                "class": "DiscordAccessControl"
              },
              {
                "name": "enforce_channel_permissions",
                "line": 288,
                "decorators": [],
                "args": [
                  "self",
                  "message"
                ],
                "is_async": true,
                "class": "DiscordAccessControl"
              },
              {
                "name": "get_access_info",
                "line": 308,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DiscordAccessControl"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "get_access_level",
            "line": 29,
            "decorators": [],
            "args": [
              "self",
              "roles"
            ],
            "is_async": false,
            "class": "ChannelPermissions"
          },
          {
            "name": "__init__",
            "line": 64,
            "decorators": [],
            "args": [
              "self",
              "client"
            ],
            "is_async": false,
            "class": "DiscordAccessControl"
          },
          {
            "name": "set_client",
            "line": 75,
            "decorators": [],
            "args": [
              "self",
              "client"
            ],
            "is_async": false,
            "class": "DiscordAccessControl"
          },
          {
            "name": "configure_channel",
            "line": 83,
            "decorators": [],
            "args": [
              "self",
              "channel_id",
              "read_roles",
              "write_roles",
              "execute_roles",
              "admin_roles"
            ],
            "is_async": false,
            "class": "DiscordAccessControl"
          },
          {
            "name": "set_global_role_access",
            "line": 107,
            "decorators": [],
            "args": [
              "self",
              "role",
              "access_level"
            ],
            "is_async": false,
            "class": "DiscordAccessControl"
          },
          {
            "name": "set_user_override",
            "line": 117,
            "decorators": [],
            "args": [
              "self",
              "user_id",
              "access_level"
            ],
            "is_async": false,
            "class": "DiscordAccessControl"
          },
          {
            "name": "check_channel_access",
            "line": 127,
            "decorators": [],
            "args": [
              "self",
              "user_id",
              "channel_id",
              "required_level"
            ],
            "is_async": true,
            "class": "DiscordAccessControl"
          },
          {
            "name": "check_operation",
            "line": 159,
            "decorators": [],
            "args": [
              "self",
              "user_id",
              "channel_id",
              "operation"
            ],
            "is_async": true,
            "class": "DiscordAccessControl"
          },
          {
            "name": "filter_accessible_channels",
            "line": 186,
            "decorators": [],
            "args": [
              "self",
              "user_id",
              "channel_ids",
              "required_level"
            ],
            "is_async": true,
            "class": "DiscordAccessControl"
          },
          {
            "name": "get_user_permissions",
            "line": 207,
            "decorators": [],
            "args": [
              "self",
              "user_id"
            ],
            "is_async": true,
            "class": "DiscordAccessControl"
          },
          {
            "name": "_get_user_roles",
            "line": 238,
            "decorators": [],
            "args": [
              "self",
              "user_id"
            ],
            "is_async": true,
            "class": "DiscordAccessControl"
          },
          {
            "name": "_get_global_access_level",
            "line": 269,
            "decorators": [],
            "args": [
              "self",
              "roles"
            ],
            "is_async": false,
            "class": "DiscordAccessControl"
          },
          {
            "name": "enforce_channel_permissions",
            "line": 288,
            "decorators": [],
            "args": [
              "self",
              "message"
            ],
            "is_async": true,
            "class": "DiscordAccessControl"
          },
          {
            "name": "get_access_info",
            "line": 308,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DiscordAccessControl"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/discord/discord_channel_manager.py",
        "classes": [
          {
            "name": "DiscordChannelManager",
            "line": 11,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 14,
                "decorators": [],
                "args": [
                  "self",
                  "token",
                  "client",
                  "on_message_callback"
                ],
                "is_async": false,
                "class": "DiscordChannelManager"
              },
              {
                "name": "set_client",
                "line": 31,
                "decorators": [],
                "args": [
                  "self",
                  "client"
                ],
                "is_async": false,
                "class": "DiscordChannelManager"
              },
              {
                "name": "set_message_callback",
                "line": 39,
                "decorators": [],
                "args": [
                  "self",
                  "callback"
                ],
                "is_async": false,
                "class": "DiscordChannelManager"
              },
              {
                "name": "resolve_channel",
                "line": 47,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id"
                ],
                "is_async": true,
                "class": "DiscordChannelManager"
              },
              {
                "name": "validate_channel_access",
                "line": 81,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id"
                ],
                "is_async": true,
                "class": "DiscordChannelManager"
              },
              {
                "name": "is_client_ready",
                "line": 100,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DiscordChannelManager"
              },
              {
                "name": "wait_for_client_ready",
                "line": 114,
                "decorators": [],
                "args": [
                  "self",
                  "timeout"
                ],
                "is_async": true,
                "class": "DiscordChannelManager"
              },
              {
                "name": "on_message",
                "line": 135,
                "decorators": [],
                "args": [
                  "self",
                  "message"
                ],
                "is_async": true,
                "class": "DiscordChannelManager"
              },
              {
                "name": "attach_to_client",
                "line": 161,
                "decorators": [],
                "args": [
                  "self",
                  "client"
                ],
                "is_async": false,
                "class": "DiscordChannelManager"
              },
              {
                "name": "get_client_info",
                "line": 173,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DiscordChannelManager"
              },
              {
                "name": "get_channel_info",
                "line": 193,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id"
                ],
                "is_async": true,
                "class": "DiscordChannelManager"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 14,
            "decorators": [],
            "args": [
              "self",
              "token",
              "client",
              "on_message_callback"
            ],
            "is_async": false,
            "class": "DiscordChannelManager"
          },
          {
            "name": "set_client",
            "line": 31,
            "decorators": [],
            "args": [
              "self",
              "client"
            ],
            "is_async": false,
            "class": "DiscordChannelManager"
          },
          {
            "name": "set_message_callback",
            "line": 39,
            "decorators": [],
            "args": [
              "self",
              "callback"
            ],
            "is_async": false,
            "class": "DiscordChannelManager"
          },
          {
            "name": "resolve_channel",
            "line": 47,
            "decorators": [],
            "args": [
              "self",
              "channel_id"
            ],
            "is_async": true,
            "class": "DiscordChannelManager"
          },
          {
            "name": "validate_channel_access",
            "line": 81,
            "decorators": [],
            "args": [
              "self",
              "channel_id"
            ],
            "is_async": true,
            "class": "DiscordChannelManager"
          },
          {
            "name": "is_client_ready",
            "line": 100,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DiscordChannelManager"
          },
          {
            "name": "wait_for_client_ready",
            "line": 114,
            "decorators": [],
            "args": [
              "self",
              "timeout"
            ],
            "is_async": true,
            "class": "DiscordChannelManager"
          },
          {
            "name": "on_message",
            "line": 135,
            "decorators": [],
            "args": [
              "self",
              "message"
            ],
            "is_async": true,
            "class": "DiscordChannelManager"
          },
          {
            "name": "attach_to_client",
            "line": 161,
            "decorators": [],
            "args": [
              "self",
              "client"
            ],
            "is_async": false,
            "class": "DiscordChannelManager"
          },
          {
            "name": "get_client_info",
            "line": 173,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DiscordChannelManager"
          },
          {
            "name": "get_channel_info",
            "line": 193,
            "decorators": [],
            "args": [
              "self",
              "channel_id"
            ],
            "is_async": true,
            "class": "DiscordChannelManager"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/discord/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/adapters/discord/discord_reaction_handler.py",
        "classes": [
          {
            "name": "ApprovalStatus",
            "line": 14,
            "decorators": [],
            "bases": [
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "ApprovalRequest",
            "line": 21,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 23,
                "decorators": [],
                "args": [
                  "self",
                  "message_id",
                  "channel_id",
                  "request_type",
                  "context",
                  "timeout_seconds"
                ],
                "is_async": false,
                "class": "ApprovalRequest"
              }
            ]
          },
          {
            "name": "DiscordReactionHandler",
            "line": 36,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 42,
                "decorators": [],
                "args": [
                  "self",
                  "client",
                  "time_service"
                ],
                "is_async": false,
                "class": "DiscordReactionHandler"
              },
              {
                "name": "set_client",
                "line": 60,
                "decorators": [],
                "args": [
                  "self",
                  "client"
                ],
                "is_async": false,
                "class": "DiscordReactionHandler"
              },
              {
                "name": "request_approval",
                "line": 68,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id",
                  "message",
                  "request_type",
                  "context",
                  "timeout_seconds",
                  "callback"
                ],
                "is_async": true,
                "class": "DiscordReactionHandler"
              },
              {
                "name": "handle_reaction",
                "line": 125,
                "decorators": [],
                "args": [
                  "self",
                  "payload"
                ],
                "is_async": true,
                "class": "DiscordReactionHandler"
              },
              {
                "name": "_handle_timeout",
                "line": 176,
                "decorators": [],
                "args": [
                  "self",
                  "approval"
                ],
                "is_async": true,
                "class": "DiscordReactionHandler"
              },
              {
                "name": "_update_approval_message",
                "line": 200,
                "decorators": [],
                "args": [
                  "self",
                  "approval"
                ],
                "is_async": true,
                "class": "DiscordReactionHandler"
              },
              {
                "name": "get_pending_approvals",
                "line": 231,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DiscordReactionHandler"
              },
              {
                "name": "clear_pending_approvals",
                "line": 239,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DiscordReactionHandler"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 23,
            "decorators": [],
            "args": [
              "self",
              "message_id",
              "channel_id",
              "request_type",
              "context",
              "timeout_seconds"
            ],
            "is_async": false,
            "class": "ApprovalRequest"
          },
          {
            "name": "__init__",
            "line": 42,
            "decorators": [],
            "args": [
              "self",
              "client",
              "time_service"
            ],
            "is_async": false,
            "class": "DiscordReactionHandler"
          },
          {
            "name": "set_client",
            "line": 60,
            "decorators": [],
            "args": [
              "self",
              "client"
            ],
            "is_async": false,
            "class": "DiscordReactionHandler"
          },
          {
            "name": "request_approval",
            "line": 68,
            "decorators": [],
            "args": [
              "self",
              "channel_id",
              "message",
              "request_type",
              "context",
              "timeout_seconds",
              "callback"
            ],
            "is_async": true,
            "class": "DiscordReactionHandler"
          },
          {
            "name": "handle_reaction",
            "line": 125,
            "decorators": [],
            "args": [
              "self",
              "payload"
            ],
            "is_async": true,
            "class": "DiscordReactionHandler"
          },
          {
            "name": "_handle_timeout",
            "line": 176,
            "decorators": [],
            "args": [
              "self",
              "approval"
            ],
            "is_async": true,
            "class": "DiscordReactionHandler"
          },
          {
            "name": "_update_approval_message",
            "line": 200,
            "decorators": [],
            "args": [
              "self",
              "approval"
            ],
            "is_async": true,
            "class": "DiscordReactionHandler"
          },
          {
            "name": "get_pending_approvals",
            "line": 231,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DiscordReactionHandler"
          },
          {
            "name": "clear_pending_approvals",
            "line": 239,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DiscordReactionHandler"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/discord/discord_connection_manager.py",
        "classes": [
          {
            "name": "ConnectionState",
            "line": 15,
            "decorators": [],
            "bases": [
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "DiscordConnectionManager",
            "line": 24,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 27,
                "decorators": [],
                "args": [
                  "self",
                  "token",
                  "client",
                  "time_service",
                  "max_reconnect_attempts",
                  "base_reconnect_delay",
                  "max_reconnect_delay"
                ],
                "is_async": false,
                "class": "DiscordConnectionManager"
              },
              {
                "name": "set_client",
                "line": 67,
                "decorators": [],
                "args": [
                  "self",
                  "client"
                ],
                "is_async": false,
                "class": "DiscordConnectionManager"
              },
              {
                "name": "_setup_event_handlers",
                "line": 76,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DiscordConnectionManager"
              },
              {
                "name": "_handle_connected",
                "line": 110,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DiscordConnectionManager"
              },
              {
                "name": "_handle_disconnected",
                "line": 124,
                "decorators": [],
                "args": [
                  "self",
                  "error"
                ],
                "is_async": true,
                "class": "DiscordConnectionManager"
              },
              {
                "name": "_handle_failed",
                "line": 150,
                "decorators": [],
                "args": [
                  "self",
                  "reason"
                ],
                "is_async": true,
                "class": "DiscordConnectionManager"
              },
              {
                "name": "_reconnect",
                "line": 165,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DiscordConnectionManager"
              },
              {
                "name": "connect",
                "line": 202,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DiscordConnectionManager"
              },
              {
                "name": "disconnect",
                "line": 235,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DiscordConnectionManager"
              },
              {
                "name": "is_connected",
                "line": 248,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DiscordConnectionManager"
              },
              {
                "name": "get_connection_info",
                "line": 259,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DiscordConnectionManager"
              },
              {
                "name": "wait_until_ready",
                "line": 282,
                "decorators": [],
                "args": [
                  "self",
                  "timeout"
                ],
                "is_async": true,
                "class": "DiscordConnectionManager"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 27,
            "decorators": [],
            "args": [
              "self",
              "token",
              "client",
              "time_service",
              "max_reconnect_attempts",
              "base_reconnect_delay",
              "max_reconnect_delay"
            ],
            "is_async": false,
            "class": "DiscordConnectionManager"
          },
          {
            "name": "set_client",
            "line": 67,
            "decorators": [],
            "args": [
              "self",
              "client"
            ],
            "is_async": false,
            "class": "DiscordConnectionManager"
          },
          {
            "name": "_setup_event_handlers",
            "line": 76,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DiscordConnectionManager"
          },
          {
            "name": "_handle_connected",
            "line": 110,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DiscordConnectionManager"
          },
          {
            "name": "_handle_disconnected",
            "line": 124,
            "decorators": [],
            "args": [
              "self",
              "error"
            ],
            "is_async": true,
            "class": "DiscordConnectionManager"
          },
          {
            "name": "_handle_failed",
            "line": 150,
            "decorators": [],
            "args": [
              "self",
              "reason"
            ],
            "is_async": true,
            "class": "DiscordConnectionManager"
          },
          {
            "name": "_reconnect",
            "line": 165,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DiscordConnectionManager"
          },
          {
            "name": "connect",
            "line": 202,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DiscordConnectionManager"
          },
          {
            "name": "disconnect",
            "line": 235,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DiscordConnectionManager"
          },
          {
            "name": "is_connected",
            "line": 248,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DiscordConnectionManager"
          },
          {
            "name": "get_connection_info",
            "line": 259,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DiscordConnectionManager"
          },
          {
            "name": "wait_until_ready",
            "line": 282,
            "decorators": [],
            "args": [
              "self",
              "timeout"
            ],
            "is_async": true,
            "class": "DiscordConnectionManager"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/discord/discord_thread_manager.py",
        "classes": [
          {
            "name": "ThreadType",
            "line": 14,
            "decorators": [],
            "bases": [
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "DiscordThreadManager",
            "line": 24,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 27,
                "decorators": [],
                "args": [
                  "self",
                  "client",
                  "time_service",
                  "auto_archive_duration"
                ],
                "is_async": false,
                "class": "DiscordThreadManager"
              },
              {
                "name": "set_client",
                "line": 50,
                "decorators": [],
                "args": [
                  "self",
                  "client"
                ],
                "is_async": false,
                "class": "DiscordThreadManager"
              },
              {
                "name": "create_thread",
                "line": 58,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id",
                  "name",
                  "thread_type",
                  "initial_message",
                  "metadata"
                ],
                "is_async": true,
                "class": "DiscordThreadManager"
              },
              {
                "name": "get_or_create_thread",
                "line": 127,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id",
                  "name",
                  "thread_type",
                  "metadata"
                ],
                "is_async": true,
                "class": "DiscordThreadManager"
              },
              {
                "name": "send_to_thread",
                "line": 169,
                "decorators": [],
                "args": [
                  "self",
                  "thread",
                  "content",
                  "embed"
                ],
                "is_async": true,
                "class": "DiscordThreadManager"
              },
              {
                "name": "create_guidance_thread",
                "line": 187,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id",
                  "context"
                ],
                "is_async": true,
                "class": "DiscordThreadManager"
              },
              {
                "name": "create_task_thread",
                "line": 216,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id",
                  "task"
                ],
                "is_async": true,
                "class": "DiscordThreadManager"
              },
              {
                "name": "archive_old_threads",
                "line": 244,
                "decorators": [],
                "args": [
                  "self",
                  "hours"
                ],
                "is_async": true,
                "class": "DiscordThreadManager"
              },
              {
                "name": "get_thread_info",
                "line": 289,
                "decorators": [],
                "args": [
                  "self",
                  "thread_id"
                ],
                "is_async": false,
                "class": "DiscordThreadManager"
              },
              {
                "name": "get_active_threads",
                "line": 300,
                "decorators": [],
                "args": [
                  "self",
                  "thread_type"
                ],
                "is_async": false,
                "class": "DiscordThreadManager"
              },
              {
                "name": "close_thread",
                "line": 320,
                "decorators": [],
                "args": [
                  "self",
                  "thread",
                  "reason"
                ],
                "is_async": true,
                "class": "DiscordThreadManager"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 27,
            "decorators": [],
            "args": [
              "self",
              "client",
              "time_service",
              "auto_archive_duration"
            ],
            "is_async": false,
            "class": "DiscordThreadManager"
          },
          {
            "name": "set_client",
            "line": 50,
            "decorators": [],
            "args": [
              "self",
              "client"
            ],
            "is_async": false,
            "class": "DiscordThreadManager"
          },
          {
            "name": "create_thread",
            "line": 58,
            "decorators": [],
            "args": [
              "self",
              "channel_id",
              "name",
              "thread_type",
              "initial_message",
              "metadata"
            ],
            "is_async": true,
            "class": "DiscordThreadManager"
          },
          {
            "name": "get_or_create_thread",
            "line": 127,
            "decorators": [],
            "args": [
              "self",
              "channel_id",
              "name",
              "thread_type",
              "metadata"
            ],
            "is_async": true,
            "class": "DiscordThreadManager"
          },
          {
            "name": "send_to_thread",
            "line": 169,
            "decorators": [],
            "args": [
              "self",
              "thread",
              "content",
              "embed"
            ],
            "is_async": true,
            "class": "DiscordThreadManager"
          },
          {
            "name": "create_guidance_thread",
            "line": 187,
            "decorators": [],
            "args": [
              "self",
              "channel_id",
              "context"
            ],
            "is_async": true,
            "class": "DiscordThreadManager"
          },
          {
            "name": "create_task_thread",
            "line": 216,
            "decorators": [],
            "args": [
              "self",
              "channel_id",
              "task"
            ],
            "is_async": true,
            "class": "DiscordThreadManager"
          },
          {
            "name": "archive_old_threads",
            "line": 244,
            "decorators": [],
            "args": [
              "self",
              "hours"
            ],
            "is_async": true,
            "class": "DiscordThreadManager"
          },
          {
            "name": "get_thread_info",
            "line": 289,
            "decorators": [],
            "args": [
              "self",
              "thread_id"
            ],
            "is_async": false,
            "class": "DiscordThreadManager"
          },
          {
            "name": "get_active_threads",
            "line": 300,
            "decorators": [],
            "args": [
              "self",
              "thread_type"
            ],
            "is_async": false,
            "class": "DiscordThreadManager"
          },
          {
            "name": "close_thread",
            "line": 320,
            "decorators": [],
            "args": [
              "self",
              "thread",
              "reason"
            ],
            "is_async": true,
            "class": "DiscordThreadManager"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/discord/discord_rate_limiter.py",
        "classes": [
          {
            "name": "RateLimitBucket",
            "line": 12,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 15,
                "decorators": [],
                "args": [
                  "self",
                  "limit",
                  "window"
                ],
                "is_async": false,
                "class": "RateLimitBucket"
              },
              {
                "name": "acquire",
                "line": 28,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RateLimitBucket"
              },
              {
                "name": "update_from_headers",
                "line": 51,
                "decorators": [],
                "args": [
                  "self",
                  "remaining",
                  "reset_at"
                ],
                "is_async": false,
                "class": "RateLimitBucket"
              }
            ]
          },
          {
            "name": "DiscordRateLimiter",
            "line": 62,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 90,
                "decorators": [],
                "args": [
                  "self",
                  "safety_margin"
                ],
                "is_async": false,
                "class": "DiscordRateLimiter"
              },
              {
                "name": "acquire",
                "line": 109,
                "decorators": [],
                "args": [
                  "self",
                  "endpoint",
                  "method"
                ],
                "is_async": true,
                "class": "DiscordRateLimiter"
              },
              {
                "name": "update_from_response",
                "line": 135,
                "decorators": [],
                "args": [
                  "self",
                  "endpoint",
                  "headers"
                ],
                "is_async": false,
                "class": "DiscordRateLimiter"
              },
              {
                "name": "handle_rate_limit_response",
                "line": 160,
                "decorators": [],
                "args": [
                  "self",
                  "endpoint",
                  "retry_after"
                ],
                "is_async": true,
                "class": "DiscordRateLimiter"
              },
              {
                "name": "_normalize_endpoint",
                "line": 176,
                "decorators": [],
                "args": [
                  "self",
                  "endpoint"
                ],
                "is_async": false,
                "class": "DiscordRateLimiter"
              },
              {
                "name": "_get_or_create_bucket",
                "line": 210,
                "decorators": [],
                "args": [
                  "self",
                  "bucket_key"
                ],
                "is_async": true,
                "class": "DiscordRateLimiter"
              },
              {
                "name": "_wait_and_log",
                "line": 228,
                "decorators": [],
                "args": [
                  "self",
                  "wait_time",
                  "bucket_type",
                  "endpoint"
                ],
                "is_async": true,
                "class": "DiscordRateLimiter"
              },
              {
                "name": "get_stats",
                "line": 242,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DiscordRateLimiter"
              },
              {
                "name": "reset_stats",
                "line": 257,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DiscordRateLimiter"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 15,
            "decorators": [],
            "args": [
              "self",
              "limit",
              "window"
            ],
            "is_async": false,
            "class": "RateLimitBucket"
          },
          {
            "name": "acquire",
            "line": 28,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RateLimitBucket"
          },
          {
            "name": "update_from_headers",
            "line": 51,
            "decorators": [],
            "args": [
              "self",
              "remaining",
              "reset_at"
            ],
            "is_async": false,
            "class": "RateLimitBucket"
          },
          {
            "name": "__init__",
            "line": 90,
            "decorators": [],
            "args": [
              "self",
              "safety_margin"
            ],
            "is_async": false,
            "class": "DiscordRateLimiter"
          },
          {
            "name": "acquire",
            "line": 109,
            "decorators": [],
            "args": [
              "self",
              "endpoint",
              "method"
            ],
            "is_async": true,
            "class": "DiscordRateLimiter"
          },
          {
            "name": "update_from_response",
            "line": 135,
            "decorators": [],
            "args": [
              "self",
              "endpoint",
              "headers"
            ],
            "is_async": false,
            "class": "DiscordRateLimiter"
          },
          {
            "name": "handle_rate_limit_response",
            "line": 160,
            "decorators": [],
            "args": [
              "self",
              "endpoint",
              "retry_after"
            ],
            "is_async": true,
            "class": "DiscordRateLimiter"
          },
          {
            "name": "_normalize_endpoint",
            "line": 176,
            "decorators": [],
            "args": [
              "self",
              "endpoint"
            ],
            "is_async": false,
            "class": "DiscordRateLimiter"
          },
          {
            "name": "_get_or_create_bucket",
            "line": 210,
            "decorators": [],
            "args": [
              "self",
              "bucket_key"
            ],
            "is_async": true,
            "class": "DiscordRateLimiter"
          },
          {
            "name": "_wait_and_log",
            "line": 228,
            "decorators": [],
            "args": [
              "self",
              "wait_time",
              "bucket_type",
              "endpoint"
            ],
            "is_async": true,
            "class": "DiscordRateLimiter"
          },
          {
            "name": "get_stats",
            "line": 242,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DiscordRateLimiter"
          },
          {
            "name": "reset_stats",
            "line": 257,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DiscordRateLimiter"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/discord/discord_observer.py",
        "classes": [
          {
            "name": "DiscordObserver",
            "line": 21,
            "decorators": [],
            "bases": [
              "<ast.Subscript object at 0x7b7496f3e590>"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 28,
                "decorators": [],
                "args": [
                  "self",
                  "monitored_channel_ids",
                  "deferral_channel_id",
                  "wa_user_ids",
                  "memory_service",
                  "agent_id",
                  "bus_manager",
                  "filter_service",
                  "secrets_service",
                  "communication_service",
                  "time_service"
                ],
                "is_async": false,
                "class": "DiscordObserver"
              },
              {
                "name": "_send_deferral_message",
                "line": 65,
                "decorators": [],
                "args": [
                  "self",
                  "content"
                ],
                "is_async": true,
                "class": "DiscordObserver"
              },
              {
                "name": "start",
                "line": 81,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DiscordObserver"
              },
              {
                "name": "stop",
                "line": 85,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DiscordObserver"
              },
              {
                "name": "handle_incoming_message",
                "line": 89,
                "decorators": [],
                "args": [
                  "self",
                  "msg"
                ],
                "is_async": true,
                "class": "DiscordObserver"
              },
              {
                "name": "_handle_priority_observation",
                "line": 177,
                "decorators": [],
                "args": [
                  "self",
                  "msg",
                  "filter_result"
                ],
                "is_async": true,
                "class": "DiscordObserver"
              },
              {
                "name": "_create_task_context_with_extras",
                "line": 193,
                "decorators": [],
                "args": [
                  "self",
                  "msg",
                  "extras"
                ],
                "is_async": false,
                "class": "DiscordObserver"
              },
              {
                "name": "_handle_passive_observation",
                "line": 224,
                "decorators": [],
                "args": [
                  "self",
                  "msg"
                ],
                "is_async": true,
                "class": "DiscordObserver"
              },
              {
                "name": "_add_to_feedback_queue",
                "line": 239,
                "decorators": [],
                "args": [
                  "self",
                  "msg"
                ],
                "is_async": true,
                "class": "DiscordObserver"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 28,
            "decorators": [],
            "args": [
              "self",
              "monitored_channel_ids",
              "deferral_channel_id",
              "wa_user_ids",
              "memory_service",
              "agent_id",
              "bus_manager",
              "filter_service",
              "secrets_service",
              "communication_service",
              "time_service"
            ],
            "is_async": false,
            "class": "DiscordObserver"
          },
          {
            "name": "_send_deferral_message",
            "line": 65,
            "decorators": [],
            "args": [
              "self",
              "content"
            ],
            "is_async": true,
            "class": "DiscordObserver"
          },
          {
            "name": "start",
            "line": 81,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DiscordObserver"
          },
          {
            "name": "stop",
            "line": 85,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DiscordObserver"
          },
          {
            "name": "handle_incoming_message",
            "line": 89,
            "decorators": [],
            "args": [
              "self",
              "msg"
            ],
            "is_async": true,
            "class": "DiscordObserver"
          },
          {
            "name": "_handle_priority_observation",
            "line": 177,
            "decorators": [],
            "args": [
              "self",
              "msg",
              "filter_result"
            ],
            "is_async": true,
            "class": "DiscordObserver"
          },
          {
            "name": "_create_task_context_with_extras",
            "line": 193,
            "decorators": [],
            "args": [
              "self",
              "msg",
              "extras"
            ],
            "is_async": false,
            "class": "DiscordObserver"
          },
          {
            "name": "_handle_passive_observation",
            "line": 224,
            "decorators": [],
            "args": [
              "self",
              "msg"
            ],
            "is_async": true,
            "class": "DiscordObserver"
          },
          {
            "name": "_add_to_feedback_queue",
            "line": 239,
            "decorators": [],
            "args": [
              "self",
              "msg"
            ],
            "is_async": true,
            "class": "DiscordObserver"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/discord/adapter.py",
        "classes": [
          {
            "name": "DiscordPlatform",
            "line": 22,
            "decorators": [],
            "bases": [
              "Service"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 23,
                "decorators": [],
                "args": [
                  "self",
                  "runtime"
                ],
                "is_async": false,
                "class": "DiscordPlatform"
              },
              {
                "name": "get_channel_info",
                "line": 117,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DiscordPlatform"
              },
              {
                "name": "_handle_discord_message_event",
                "line": 128,
                "decorators": [],
                "args": [
                  "self",
                  "msg"
                ],
                "is_async": true,
                "class": "DiscordPlatform"
              },
              {
                "name": "get_services_to_register",
                "line": 138,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DiscordPlatform"
              },
              {
                "name": "start",
                "line": 169,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DiscordPlatform"
              },
              {
                "name": "run_lifecycle",
                "line": 177,
                "decorators": [],
                "args": [
                  "self",
                  "agent_run_task"
                ],
                "is_async": true,
                "class": "DiscordPlatform"
              },
              {
                "name": "stop",
                "line": 243,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DiscordPlatform"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 23,
            "decorators": [],
            "args": [
              "self",
              "runtime"
            ],
            "is_async": false,
            "class": "DiscordPlatform"
          },
          {
            "name": "get_channel_info",
            "line": 117,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DiscordPlatform"
          },
          {
            "name": "_handle_discord_message_event",
            "line": 128,
            "decorators": [],
            "args": [
              "self",
              "msg"
            ],
            "is_async": true,
            "class": "DiscordPlatform"
          },
          {
            "name": "get_services_to_register",
            "line": 138,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DiscordPlatform"
          },
          {
            "name": "start",
            "line": 169,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DiscordPlatform"
          },
          {
            "name": "run_lifecycle",
            "line": 177,
            "decorators": [],
            "args": [
              "self",
              "agent_run_task"
            ],
            "is_async": true,
            "class": "DiscordPlatform"
          },
          {
            "name": "stop",
            "line": 243,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DiscordPlatform"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/discord/discord_adapter.py",
        "classes": [
          {
            "name": "DiscordAdapter",
            "line": 47,
            "decorators": [],
            "bases": [
              "Service",
              "CommunicationService",
              "WiseAuthorityService",
              "ToolService"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 52,
                "decorators": [],
                "args": [
                  "self",
                  "token",
                  "tool_registry",
                  "bot",
                  "on_message",
                  "time_service",
                  "bus_manager",
                  "config"
                ],
                "is_async": false,
                "class": "DiscordAdapter"
              },
              {
                "name": "_retry_discord_operation",
                "line": 98,
                "decorators": [],
                "args": [
                  "self",
                  "operation"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "_emit_telemetry",
                "line": 130,
                "decorators": [],
                "args": [
                  "self",
                  "metric_name",
                  "value",
                  "tags"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "send_message",
                "line": 159,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id",
                  "content"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "fetch_messages",
                "line": 227,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id",
                  "limit"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "fetch_guidance",
                "line": 246,
                "decorators": [],
                "args": [
                  "self",
                  "context"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "check_authorization",
                "line": 310,
                "decorators": [],
                "args": [
                  "self",
                  "wa_id",
                  "action",
                  "resource"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "request_approval",
                "line": 347,
                "decorators": [],
                "args": [
                  "self",
                  "action",
                  "context"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "get_guidance",
                "line": 466,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "get_pending_deferrals",
                "line": 488,
                "decorators": [],
                "args": [
                  "self",
                  "wa_id"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "resolve_deferral",
                "line": 533,
                "decorators": [],
                "args": [
                  "self",
                  "deferral_id",
                  "response"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "grant_permission",
                "line": 555,
                "decorators": [],
                "args": [
                  "self",
                  "wa_id",
                  "permission",
                  "resource"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "revoke_permission",
                "line": 596,
                "decorators": [],
                "args": [
                  "self",
                  "wa_id",
                  "permission",
                  "resource"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "list_permissions",
                "line": 631,
                "decorators": [],
                "args": [
                  "self",
                  "wa_id"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "send_deferral",
                "line": 658,
                "decorators": [],
                "args": [
                  "self",
                  "deferral"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "send_deferral_legacy",
                "line": 747,
                "decorators": [],
                "args": [
                  "self",
                  "context"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "execute_tool",
                "line": 764,
                "decorators": [],
                "args": [
                  "self",
                  "tool_name",
                  "parameters"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "get_tool_info",
                "line": 790,
                "decorators": [],
                "args": [
                  "self",
                  "tool_name"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "get_all_tool_info",
                "line": 794,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "get_tool_result",
                "line": 798,
                "decorators": [],
                "args": [
                  "self",
                  "correlation_id",
                  "timeout"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "get_tool_schema",
                "line": 802,
                "decorators": [],
                "args": [
                  "self",
                  "tool_name"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "list_tools",
                "line": 813,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "get_available_tools",
                "line": 817,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "validate_parameters",
                "line": 821,
                "decorators": [],
                "args": [
                  "self",
                  "tool_name",
                  "parameters"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "get_capabilities",
                "line": 825,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DiscordAdapter"
              },
              {
                "name": "get_status",
                "line": 846,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DiscordAdapter"
              },
              {
                "name": "_send_output",
                "line": 865,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id",
                  "content"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "_on_message",
                "line": 875,
                "decorators": [],
                "args": [
                  "self",
                  "message"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "attach_to_client",
                "line": 894,
                "decorators": [],
                "args": [
                  "self",
                  "client"
                ],
                "is_async": false,
                "class": "DiscordAdapter"
              },
              {
                "name": "on_raw_reaction_add",
                "line": 905,
                "decorators": [],
                "args": [
                  "self",
                  "payload"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "start",
                "line": 917,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "stop",
                "line": 965,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "is_healthy",
                "line": 993,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DiscordAdapter"
              },
              {
                "name": "_setup_connection_callbacks",
                "line": 1000,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DiscordAdapter"
              },
              {
                "name": "_client",
                "line": 1076,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DiscordAdapter"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 52,
            "decorators": [],
            "args": [
              "self",
              "token",
              "tool_registry",
              "bot",
              "on_message",
              "time_service",
              "bus_manager",
              "config"
            ],
            "is_async": false,
            "class": "DiscordAdapter"
          },
          {
            "name": "_retry_discord_operation",
            "line": 98,
            "decorators": [],
            "args": [
              "self",
              "operation"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "_emit_telemetry",
            "line": 130,
            "decorators": [],
            "args": [
              "self",
              "metric_name",
              "value",
              "tags"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "send_message",
            "line": 159,
            "decorators": [],
            "args": [
              "self",
              "channel_id",
              "content"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "fetch_messages",
            "line": 227,
            "decorators": [],
            "args": [
              "self",
              "channel_id",
              "limit"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "fetch_guidance",
            "line": 246,
            "decorators": [],
            "args": [
              "self",
              "context"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "check_authorization",
            "line": 310,
            "decorators": [],
            "args": [
              "self",
              "wa_id",
              "action",
              "resource"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "request_approval",
            "line": 347,
            "decorators": [],
            "args": [
              "self",
              "action",
              "context"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "get_guidance",
            "line": 466,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "get_pending_deferrals",
            "line": 488,
            "decorators": [],
            "args": [
              "self",
              "wa_id"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "resolve_deferral",
            "line": 533,
            "decorators": [],
            "args": [
              "self",
              "deferral_id",
              "response"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "grant_permission",
            "line": 555,
            "decorators": [],
            "args": [
              "self",
              "wa_id",
              "permission",
              "resource"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "revoke_permission",
            "line": 596,
            "decorators": [],
            "args": [
              "self",
              "wa_id",
              "permission",
              "resource"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "list_permissions",
            "line": 631,
            "decorators": [],
            "args": [
              "self",
              "wa_id"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "send_deferral",
            "line": 658,
            "decorators": [],
            "args": [
              "self",
              "deferral"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "send_deferral_legacy",
            "line": 747,
            "decorators": [],
            "args": [
              "self",
              "context"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "execute_tool",
            "line": 764,
            "decorators": [],
            "args": [
              "self",
              "tool_name",
              "parameters"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "get_tool_info",
            "line": 790,
            "decorators": [],
            "args": [
              "self",
              "tool_name"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "get_all_tool_info",
            "line": 794,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "get_tool_result",
            "line": 798,
            "decorators": [],
            "args": [
              "self",
              "correlation_id",
              "timeout"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "get_tool_schema",
            "line": 802,
            "decorators": [],
            "args": [
              "self",
              "tool_name"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "list_tools",
            "line": 813,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "get_available_tools",
            "line": 817,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "validate_parameters",
            "line": 821,
            "decorators": [],
            "args": [
              "self",
              "tool_name",
              "parameters"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "get_capabilities",
            "line": 825,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DiscordAdapter"
          },
          {
            "name": "get_status",
            "line": 846,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DiscordAdapter"
          },
          {
            "name": "_send_output",
            "line": 865,
            "decorators": [],
            "args": [
              "self",
              "channel_id",
              "content"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "_on_message",
            "line": 875,
            "decorators": [],
            "args": [
              "self",
              "message"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "attach_to_client",
            "line": 894,
            "decorators": [],
            "args": [
              "self",
              "client"
            ],
            "is_async": false,
            "class": "DiscordAdapter"
          },
          {
            "name": "on_raw_reaction_add",
            "line": 905,
            "decorators": [],
            "args": [
              "self",
              "payload"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "start",
            "line": 917,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "stop",
            "line": 965,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "is_healthy",
            "line": 993,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DiscordAdapter"
          },
          {
            "name": "_setup_connection_callbacks",
            "line": 1000,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DiscordAdapter"
          },
          {
            "name": "_client",
            "line": 1076,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DiscordAdapter"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/discord/discord_audit.py",
        "classes": [
          {
            "name": "DiscordAuditLogger",
            "line": 16,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 19,
                "decorators": [],
                "args": [
                  "self",
                  "time_service",
                  "audit_service"
                ],
                "is_async": false,
                "class": "DiscordAuditLogger"
              },
              {
                "name": "set_audit_service",
                "line": 35,
                "decorators": [],
                "args": [
                  "self",
                  "audit_service"
                ],
                "is_async": false,
                "class": "DiscordAuditLogger"
              },
              {
                "name": "log_operation",
                "line": 43,
                "decorators": [],
                "args": [
                  "self",
                  "operation",
                  "actor",
                  "context",
                  "success",
                  "error_message"
                ],
                "is_async": true,
                "class": "DiscordAuditLogger"
              },
              {
                "name": "log_message_sent",
                "line": 92,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id",
                  "author_id",
                  "message_content",
                  "correlation_id"
                ],
                "is_async": true,
                "class": "DiscordAuditLogger"
              },
              {
                "name": "log_message_received",
                "line": 116,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id",
                  "author_id",
                  "author_name",
                  "message_id"
                ],
                "is_async": true,
                "class": "DiscordAuditLogger"
              },
              {
                "name": "log_guidance_request",
                "line": 136,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id",
                  "requester_id",
                  "context",
                  "guidance_received"
                ],
                "is_async": true,
                "class": "DiscordAuditLogger"
              },
              {
                "name": "log_approval_request",
                "line": 157,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id",
                  "requester_id",
                  "action",
                  "approval_status",
                  "approver_id"
                ],
                "is_async": true,
                "class": "DiscordAuditLogger"
              },
              {
                "name": "log_permission_change",
                "line": 180,
                "decorators": [],
                "args": [
                  "self",
                  "admin_id",
                  "target_id",
                  "permission",
                  "action",
                  "guild_id"
                ],
                "is_async": true,
                "class": "DiscordAuditLogger"
              },
              {
                "name": "log_tool_execution",
                "line": 201,
                "decorators": [],
                "args": [
                  "self",
                  "user_id",
                  "tool_name",
                  "parameters",
                  "success",
                  "execution_time_ms",
                  "error"
                ],
                "is_async": true,
                "class": "DiscordAuditLogger"
              },
              {
                "name": "log_connection_event",
                "line": 226,
                "decorators": [],
                "args": [
                  "self",
                  "event_type",
                  "guild_count",
                  "user_count",
                  "error"
                ],
                "is_async": true,
                "class": "DiscordAuditLogger"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 19,
            "decorators": [],
            "args": [
              "self",
              "time_service",
              "audit_service"
            ],
            "is_async": false,
            "class": "DiscordAuditLogger"
          },
          {
            "name": "set_audit_service",
            "line": 35,
            "decorators": [],
            "args": [
              "self",
              "audit_service"
            ],
            "is_async": false,
            "class": "DiscordAuditLogger"
          },
          {
            "name": "log_operation",
            "line": 43,
            "decorators": [],
            "args": [
              "self",
              "operation",
              "actor",
              "context",
              "success",
              "error_message"
            ],
            "is_async": true,
            "class": "DiscordAuditLogger"
          },
          {
            "name": "log_message_sent",
            "line": 92,
            "decorators": [],
            "args": [
              "self",
              "channel_id",
              "author_id",
              "message_content",
              "correlation_id"
            ],
            "is_async": true,
            "class": "DiscordAuditLogger"
          },
          {
            "name": "log_message_received",
            "line": 116,
            "decorators": [],
            "args": [
              "self",
              "channel_id",
              "author_id",
              "author_name",
              "message_id"
            ],
            "is_async": true,
            "class": "DiscordAuditLogger"
          },
          {
            "name": "log_guidance_request",
            "line": 136,
            "decorators": [],
            "args": [
              "self",
              "channel_id",
              "requester_id",
              "context",
              "guidance_received"
            ],
            "is_async": true,
            "class": "DiscordAuditLogger"
          },
          {
            "name": "log_approval_request",
            "line": 157,
            "decorators": [],
            "args": [
              "self",
              "channel_id",
              "requester_id",
              "action",
              "approval_status",
              "approver_id"
            ],
            "is_async": true,
            "class": "DiscordAuditLogger"
          },
          {
            "name": "log_permission_change",
            "line": 180,
            "decorators": [],
            "args": [
              "self",
              "admin_id",
              "target_id",
              "permission",
              "action",
              "guild_id"
            ],
            "is_async": true,
            "class": "DiscordAuditLogger"
          },
          {
            "name": "log_tool_execution",
            "line": 201,
            "decorators": [],
            "args": [
              "self",
              "user_id",
              "tool_name",
              "parameters",
              "success",
              "execution_time_ms",
              "error"
            ],
            "is_async": true,
            "class": "DiscordAuditLogger"
          },
          {
            "name": "log_connection_event",
            "line": 226,
            "decorators": [],
            "args": [
              "self",
              "event_type",
              "guild_count",
              "user_count",
              "error"
            ],
            "is_async": true,
            "class": "DiscordAuditLogger"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/discord/discord_guidance_handler.py",
        "classes": [
          {
            "name": "DiscordGuidanceHandler",
            "line": 13,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 16,
                "decorators": [],
                "args": [
                  "self",
                  "client",
                  "time_service",
                  "memory_service"
                ],
                "is_async": false,
                "class": "DiscordGuidanceHandler"
              },
              {
                "name": "set_client",
                "line": 36,
                "decorators": [],
                "args": [
                  "self",
                  "client"
                ],
                "is_async": false,
                "class": "DiscordGuidanceHandler"
              },
              {
                "name": "set_memory_service",
                "line": 44,
                "decorators": [],
                "args": [
                  "self",
                  "memory_service"
                ],
                "is_async": false,
                "class": "DiscordGuidanceHandler"
              },
              {
                "name": "_is_registered_wa",
                "line": 52,
                "decorators": [],
                "args": [
                  "self",
                  "discord_id"
                ],
                "is_async": true,
                "class": "DiscordGuidanceHandler"
              },
              {
                "name": "_check_discord_roles",
                "line": 93,
                "decorators": [],
                "args": [
                  "self",
                  "discord_id"
                ],
                "is_async": true,
                "class": "DiscordGuidanceHandler"
              },
              {
                "name": "fetch_guidance_from_channel",
                "line": 118,
                "decorators": [],
                "args": [
                  "self",
                  "deferral_channel_id",
                  "context"
                ],
                "is_async": true,
                "class": "DiscordGuidanceHandler"
              },
              {
                "name": "send_deferral_to_channel",
                "line": 183,
                "decorators": [],
                "args": [
                  "self",
                  "deferral_channel_id",
                  "thought_id",
                  "reason",
                  "context"
                ],
                "is_async": true,
                "class": "DiscordGuidanceHandler"
              },
              {
                "name": "_build_deferral_report",
                "line": 245,
                "decorators": [],
                "args": [
                  "self",
                  "thought_id",
                  "reason",
                  "context"
                ],
                "is_async": false,
                "class": "DiscordGuidanceHandler"
              },
              {
                "name": "_truncate_text",
                "line": 290,
                "decorators": [],
                "args": [
                  "self",
                  "text",
                  "max_length"
                ],
                "is_async": false,
                "class": "DiscordGuidanceHandler"
              },
              {
                "name": "_split_message",
                "line": 304,
                "decorators": [],
                "args": [
                  "self",
                  "content",
                  "max_length"
                ],
                "is_async": false,
                "class": "DiscordGuidanceHandler"
              },
              {
                "name": "_resolve_channel",
                "line": 341,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id"
                ],
                "is_async": true,
                "class": "DiscordGuidanceHandler"
              }
            ]
          },
          {
            "name": "DeferralHelperView",
            "line": 363,
            "decorators": [],
            "bases": [
              "View"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 366,
                "decorators": [],
                "args": [
                  "self",
                  "thought_id",
                  "context"
                ],
                "is_async": false,
                "class": "DeferralHelperView"
              },
              {
                "name": "approve_button",
                "line": 372,
                "decorators": [
                  "button"
                ],
                "args": [
                  "self",
                  "interaction",
                  "button"
                ],
                "is_async": true,
                "class": "DeferralHelperView"
              },
              {
                "name": "reject_button",
                "line": 380,
                "decorators": [
                  "button"
                ],
                "args": [
                  "self",
                  "interaction",
                  "button"
                ],
                "is_async": true,
                "class": "DeferralHelperView"
              },
              {
                "name": "info_button",
                "line": 388,
                "decorators": [
                  "button"
                ],
                "args": [
                  "self",
                  "interaction",
                  "button"
                ],
                "is_async": true,
                "class": "DeferralHelperView"
              },
              {
                "name": "_truncate_text",
                "line": 441,
                "decorators": [],
                "args": [
                  "self",
                  "text",
                  "max_length"
                ],
                "is_async": false,
                "class": "DeferralHelperView"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 16,
            "decorators": [],
            "args": [
              "self",
              "client",
              "time_service",
              "memory_service"
            ],
            "is_async": false,
            "class": "DiscordGuidanceHandler"
          },
          {
            "name": "set_client",
            "line": 36,
            "decorators": [],
            "args": [
              "self",
              "client"
            ],
            "is_async": false,
            "class": "DiscordGuidanceHandler"
          },
          {
            "name": "set_memory_service",
            "line": 44,
            "decorators": [],
            "args": [
              "self",
              "memory_service"
            ],
            "is_async": false,
            "class": "DiscordGuidanceHandler"
          },
          {
            "name": "_is_registered_wa",
            "line": 52,
            "decorators": [],
            "args": [
              "self",
              "discord_id"
            ],
            "is_async": true,
            "class": "DiscordGuidanceHandler"
          },
          {
            "name": "_check_discord_roles",
            "line": 93,
            "decorators": [],
            "args": [
              "self",
              "discord_id"
            ],
            "is_async": true,
            "class": "DiscordGuidanceHandler"
          },
          {
            "name": "fetch_guidance_from_channel",
            "line": 118,
            "decorators": [],
            "args": [
              "self",
              "deferral_channel_id",
              "context"
            ],
            "is_async": true,
            "class": "DiscordGuidanceHandler"
          },
          {
            "name": "send_deferral_to_channel",
            "line": 183,
            "decorators": [],
            "args": [
              "self",
              "deferral_channel_id",
              "thought_id",
              "reason",
              "context"
            ],
            "is_async": true,
            "class": "DiscordGuidanceHandler"
          },
          {
            "name": "_build_deferral_report",
            "line": 245,
            "decorators": [],
            "args": [
              "self",
              "thought_id",
              "reason",
              "context"
            ],
            "is_async": false,
            "class": "DiscordGuidanceHandler"
          },
          {
            "name": "_truncate_text",
            "line": 290,
            "decorators": [],
            "args": [
              "self",
              "text",
              "max_length"
            ],
            "is_async": false,
            "class": "DiscordGuidanceHandler"
          },
          {
            "name": "_split_message",
            "line": 304,
            "decorators": [],
            "args": [
              "self",
              "content",
              "max_length"
            ],
            "is_async": false,
            "class": "DiscordGuidanceHandler"
          },
          {
            "name": "_resolve_channel",
            "line": 341,
            "decorators": [],
            "args": [
              "self",
              "channel_id"
            ],
            "is_async": true,
            "class": "DiscordGuidanceHandler"
          },
          {
            "name": "__init__",
            "line": 366,
            "decorators": [],
            "args": [
              "self",
              "thought_id",
              "context"
            ],
            "is_async": false,
            "class": "DeferralHelperView"
          },
          {
            "name": "approve_button",
            "line": 372,
            "decorators": [
              "button"
            ],
            "args": [
              "self",
              "interaction",
              "button"
            ],
            "is_async": true,
            "class": "DeferralHelperView"
          },
          {
            "name": "reject_button",
            "line": 380,
            "decorators": [
              "button"
            ],
            "args": [
              "self",
              "interaction",
              "button"
            ],
            "is_async": true,
            "class": "DeferralHelperView"
          },
          {
            "name": "info_button",
            "line": 388,
            "decorators": [
              "button"
            ],
            "args": [
              "self",
              "interaction",
              "button"
            ],
            "is_async": true,
            "class": "DeferralHelperView"
          },
          {
            "name": "_truncate_text",
            "line": 441,
            "decorators": [],
            "args": [
              "self",
              "text",
              "max_length"
            ],
            "is_async": false,
            "class": "DeferralHelperView"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/discord/discord_embed_formatter.py",
        "classes": [
          {
            "name": "EmbedType",
            "line": 7,
            "decorators": [],
            "bases": [
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "DiscordEmbedFormatter",
            "line": 21,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "create_base_embed",
                "line": 25,
                "decorators": [
                  "staticmethod"
                ],
                "args": [
                  "embed_type",
                  "title",
                  "description"
                ],
                "is_async": false,
                "class": "DiscordEmbedFormatter"
              },
              {
                "name": "format_guidance_request",
                "line": 49,
                "decorators": [
                  "classmethod"
                ],
                "args": [
                  "cls",
                  "context"
                ],
                "is_async": false,
                "class": "DiscordEmbedFormatter"
              },
              {
                "name": "format_deferral_request",
                "line": 84,
                "decorators": [
                  "classmethod"
                ],
                "args": [
                  "cls",
                  "deferral"
                ],
                "is_async": false,
                "class": "DiscordEmbedFormatter"
              },
              {
                "name": "format_approval_request",
                "line": 114,
                "decorators": [
                  "classmethod"
                ],
                "args": [
                  "cls",
                  "action",
                  "context"
                ],
                "is_async": false,
                "class": "DiscordEmbedFormatter"
              },
              {
                "name": "format_tool_execution",
                "line": 155,
                "decorators": [
                  "classmethod"
                ],
                "args": [
                  "cls",
                  "tool_name",
                  "parameters",
                  "result"
                ],
                "is_async": false,
                "class": "DiscordEmbedFormatter"
              },
              {
                "name": "format_task_status",
                "line": 205,
                "decorators": [
                  "classmethod"
                ],
                "args": [
                  "cls",
                  "task"
                ],
                "is_async": false,
                "class": "DiscordEmbedFormatter"
              },
              {
                "name": "format_audit_entry",
                "line": 249,
                "decorators": [
                  "classmethod"
                ],
                "args": [
                  "cls",
                  "audit"
                ],
                "is_async": false,
                "class": "DiscordEmbedFormatter"
              },
              {
                "name": "format_error_message",
                "line": 283,
                "decorators": [
                  "classmethod"
                ],
                "args": [
                  "cls",
                  "error_info"
                ],
                "is_async": false,
                "class": "DiscordEmbedFormatter"
              },
              {
                "name": "create_paginated_embed",
                "line": 322,
                "decorators": [
                  "classmethod"
                ],
                "args": [
                  "cls",
                  "title",
                  "items",
                  "page",
                  "per_page",
                  "embed_type"
                ],
                "is_async": false,
                "class": "DiscordEmbedFormatter"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "create_base_embed",
            "line": 25,
            "decorators": [
              "staticmethod"
            ],
            "args": [
              "embed_type",
              "title",
              "description"
            ],
            "is_async": false,
            "class": "DiscordEmbedFormatter"
          },
          {
            "name": "format_guidance_request",
            "line": 49,
            "decorators": [
              "classmethod"
            ],
            "args": [
              "cls",
              "context"
            ],
            "is_async": false,
            "class": "DiscordEmbedFormatter"
          },
          {
            "name": "format_deferral_request",
            "line": 84,
            "decorators": [
              "classmethod"
            ],
            "args": [
              "cls",
              "deferral"
            ],
            "is_async": false,
            "class": "DiscordEmbedFormatter"
          },
          {
            "name": "format_approval_request",
            "line": 114,
            "decorators": [
              "classmethod"
            ],
            "args": [
              "cls",
              "action",
              "context"
            ],
            "is_async": false,
            "class": "DiscordEmbedFormatter"
          },
          {
            "name": "format_tool_execution",
            "line": 155,
            "decorators": [
              "classmethod"
            ],
            "args": [
              "cls",
              "tool_name",
              "parameters",
              "result"
            ],
            "is_async": false,
            "class": "DiscordEmbedFormatter"
          },
          {
            "name": "format_task_status",
            "line": 205,
            "decorators": [
              "classmethod"
            ],
            "args": [
              "cls",
              "task"
            ],
            "is_async": false,
            "class": "DiscordEmbedFormatter"
          },
          {
            "name": "format_audit_entry",
            "line": 249,
            "decorators": [
              "classmethod"
            ],
            "args": [
              "cls",
              "audit"
            ],
            "is_async": false,
            "class": "DiscordEmbedFormatter"
          },
          {
            "name": "format_error_message",
            "line": 283,
            "decorators": [
              "classmethod"
            ],
            "args": [
              "cls",
              "error_info"
            ],
            "is_async": false,
            "class": "DiscordEmbedFormatter"
          },
          {
            "name": "create_paginated_embed",
            "line": 322,
            "decorators": [
              "classmethod"
            ],
            "args": [
              "cls",
              "title",
              "items",
              "page",
              "per_page",
              "embed_type"
            ],
            "is_async": false,
            "class": "DiscordEmbedFormatter"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/discord/discord_slash_commands.py",
        "classes": [
          {
            "name": "DiscordSlashCommands",
            "line": 14,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 17,
                "decorators": [],
                "args": [
                  "self",
                  "client",
                  "tool_handler",
                  "time_service"
                ],
                "is_async": false,
                "class": "DiscordSlashCommands"
              },
              {
                "name": "set_client",
                "line": 38,
                "decorators": [],
                "args": [
                  "self",
                  "client"
                ],
                "is_async": false,
                "class": "DiscordSlashCommands"
              },
              {
                "name": "set_tool_handler",
                "line": 49,
                "decorators": [],
                "args": [
                  "self",
                  "tool_handler"
                ],
                "is_async": false,
                "class": "DiscordSlashCommands"
              },
              {
                "name": "_setup_base_commands",
                "line": 57,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DiscordSlashCommands"
              },
              {
                "name": "register_tool_commands",
                "line": 306,
                "decorators": [],
                "args": [
                  "self",
                  "guild_id"
                ],
                "is_async": true,
                "class": "DiscordSlashCommands"
              },
              {
                "name": "handle_autocomplete",
                "line": 382,
                "decorators": [],
                "args": [
                  "self",
                  "interaction",
                  "current"
                ],
                "is_async": true,
                "class": "DiscordSlashCommands"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 17,
            "decorators": [],
            "args": [
              "self",
              "client",
              "tool_handler",
              "time_service"
            ],
            "is_async": false,
            "class": "DiscordSlashCommands"
          },
          {
            "name": "set_client",
            "line": 38,
            "decorators": [],
            "args": [
              "self",
              "client"
            ],
            "is_async": false,
            "class": "DiscordSlashCommands"
          },
          {
            "name": "set_tool_handler",
            "line": 49,
            "decorators": [],
            "args": [
              "self",
              "tool_handler"
            ],
            "is_async": false,
            "class": "DiscordSlashCommands"
          },
          {
            "name": "_setup_base_commands",
            "line": 57,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DiscordSlashCommands"
          },
          {
            "name": "register_tool_commands",
            "line": 306,
            "decorators": [],
            "args": [
              "self",
              "guild_id"
            ],
            "is_async": true,
            "class": "DiscordSlashCommands"
          },
          {
            "name": "handle_autocomplete",
            "line": 382,
            "decorators": [],
            "args": [
              "self",
              "interaction",
              "current"
            ],
            "is_async": true,
            "class": "DiscordSlashCommands"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/discord/config.py",
        "classes": [
          {
            "name": "DiscordAdapterConfig",
            "line": 10,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": [
              {
                "name": "get_intents",
                "line": 41,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DiscordAdapterConfig"
              },
              {
                "name": "get_activity",
                "line": 50,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DiscordAdapterConfig"
              },
              {
                "name": "get_status",
                "line": 66,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DiscordAdapterConfig"
              },
              {
                "name": "get_home_channel_id",
                "line": 77,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DiscordAdapterConfig"
              },
              {
                "name": "load_env_vars",
                "line": 85,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DiscordAdapterConfig"
              },
              {
                "name": "load_env_vars_with_instance",
                "line": 125,
                "decorators": [],
                "args": [
                  "self",
                  "instance_id"
                ],
                "is_async": false,
                "class": "DiscordAdapterConfig"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "get_intents",
            "line": 41,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DiscordAdapterConfig"
          },
          {
            "name": "get_activity",
            "line": 50,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DiscordAdapterConfig"
          },
          {
            "name": "get_status",
            "line": 66,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DiscordAdapterConfig"
          },
          {
            "name": "get_home_channel_id",
            "line": 77,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DiscordAdapterConfig"
          },
          {
            "name": "load_env_vars",
            "line": 85,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DiscordAdapterConfig"
          },
          {
            "name": "load_env_vars_with_instance",
            "line": 125,
            "decorators": [],
            "args": [
              "self",
              "instance_id"
            ],
            "is_async": false,
            "class": "DiscordAdapterConfig"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/discord/discord_tool_handler.py",
        "classes": [
          {
            "name": "DiscordToolHandler",
            "line": 22,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 25,
                "decorators": [],
                "args": [
                  "self",
                  "tool_registry",
                  "client",
                  "time_service"
                ],
                "is_async": false,
                "class": "DiscordToolHandler"
              },
              {
                "name": "set_client",
                "line": 43,
                "decorators": [],
                "args": [
                  "self",
                  "client"
                ],
                "is_async": false,
                "class": "DiscordToolHandler"
              },
              {
                "name": "set_tool_registry",
                "line": 51,
                "decorators": [],
                "args": [
                  "self",
                  "tool_registry"
                ],
                "is_async": false,
                "class": "DiscordToolHandler"
              },
              {
                "name": "execute_tool",
                "line": 59,
                "decorators": [],
                "args": [
                  "self",
                  "tool_name",
                  "tool_args"
                ],
                "is_async": true,
                "class": "DiscordToolHandler"
              },
              {
                "name": "get_tool_result",
                "line": 169,
                "decorators": [],
                "args": [
                  "self",
                  "correlation_id",
                  "timeout"
                ],
                "is_async": true,
                "class": "DiscordToolHandler"
              },
              {
                "name": "get_available_tools",
                "line": 187,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DiscordToolHandler"
              },
              {
                "name": "get_tool_info",
                "line": 204,
                "decorators": [],
                "args": [
                  "self",
                  "tool_name"
                ],
                "is_async": true,
                "class": "DiscordToolHandler"
              },
              {
                "name": "get_all_tool_info",
                "line": 267,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DiscordToolHandler"
              },
              {
                "name": "validate_tool_parameters",
                "line": 276,
                "decorators": [],
                "args": [
                  "self",
                  "tool_name",
                  "parameters"
                ],
                "is_async": true,
                "class": "DiscordToolHandler"
              },
              {
                "name": "clear_tool_results",
                "line": 300,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DiscordToolHandler"
              },
              {
                "name": "get_cached_result_count",
                "line": 304,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DiscordToolHandler"
              },
              {
                "name": "remove_cached_result",
                "line": 312,
                "decorators": [],
                "args": [
                  "self",
                  "correlation_id"
                ],
                "is_async": false,
                "class": "DiscordToolHandler"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 25,
            "decorators": [],
            "args": [
              "self",
              "tool_registry",
              "client",
              "time_service"
            ],
            "is_async": false,
            "class": "DiscordToolHandler"
          },
          {
            "name": "set_client",
            "line": 43,
            "decorators": [],
            "args": [
              "self",
              "client"
            ],
            "is_async": false,
            "class": "DiscordToolHandler"
          },
          {
            "name": "set_tool_registry",
            "line": 51,
            "decorators": [],
            "args": [
              "self",
              "tool_registry"
            ],
            "is_async": false,
            "class": "DiscordToolHandler"
          },
          {
            "name": "execute_tool",
            "line": 59,
            "decorators": [],
            "args": [
              "self",
              "tool_name",
              "tool_args"
            ],
            "is_async": true,
            "class": "DiscordToolHandler"
          },
          {
            "name": "get_tool_result",
            "line": 169,
            "decorators": [],
            "args": [
              "self",
              "correlation_id",
              "timeout"
            ],
            "is_async": true,
            "class": "DiscordToolHandler"
          },
          {
            "name": "get_available_tools",
            "line": 187,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DiscordToolHandler"
          },
          {
            "name": "get_tool_info",
            "line": 204,
            "decorators": [],
            "args": [
              "self",
              "tool_name"
            ],
            "is_async": true,
            "class": "DiscordToolHandler"
          },
          {
            "name": "get_all_tool_info",
            "line": 267,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DiscordToolHandler"
          },
          {
            "name": "validate_tool_parameters",
            "line": 276,
            "decorators": [],
            "args": [
              "self",
              "tool_name",
              "parameters"
            ],
            "is_async": true,
            "class": "DiscordToolHandler"
          },
          {
            "name": "clear_tool_results",
            "line": 300,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DiscordToolHandler"
          },
          {
            "name": "get_cached_result_count",
            "line": 304,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DiscordToolHandler"
          },
          {
            "name": "remove_cached_result",
            "line": 312,
            "decorators": [],
            "args": [
              "self",
              "correlation_id"
            ],
            "is_async": false,
            "class": "DiscordToolHandler"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/discord/discord_vision_helper.py",
        "classes": [
          {
            "name": "DiscordVisionHelper",
            "line": 12,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 15,
                "decorators": [],
                "args": [
                  "self",
                  "api_key"
                ],
                "is_async": false,
                "class": "DiscordVisionHelper"
              },
              {
                "name": "process_message_images",
                "line": 29,
                "decorators": [],
                "args": [
                  "self",
                  "message"
                ],
                "is_async": true,
                "class": "DiscordVisionHelper"
              },
              {
                "name": "_process_single_image",
                "line": 69,
                "decorators": [],
                "args": [
                  "self",
                  "attachment"
                ],
                "is_async": true,
                "class": "DiscordVisionHelper"
              },
              {
                "name": "process_embeds",
                "line": 143,
                "decorators": [],
                "args": [
                  "self",
                  "embeds"
                ],
                "is_async": true,
                "class": "DiscordVisionHelper"
              },
              {
                "name": "_process_image_url",
                "line": 175,
                "decorators": [],
                "args": [
                  "self",
                  "url",
                  "image_type"
                ],
                "is_async": true,
                "class": "DiscordVisionHelper"
              },
              {
                "name": "is_available",
                "line": 205,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DiscordVisionHelper"
              },
              {
                "name": "get_status",
                "line": 213,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DiscordVisionHelper"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 15,
            "decorators": [],
            "args": [
              "self",
              "api_key"
            ],
            "is_async": false,
            "class": "DiscordVisionHelper"
          },
          {
            "name": "process_message_images",
            "line": 29,
            "decorators": [],
            "args": [
              "self",
              "message"
            ],
            "is_async": true,
            "class": "DiscordVisionHelper"
          },
          {
            "name": "_process_single_image",
            "line": 69,
            "decorators": [],
            "args": [
              "self",
              "attachment"
            ],
            "is_async": true,
            "class": "DiscordVisionHelper"
          },
          {
            "name": "process_embeds",
            "line": 143,
            "decorators": [],
            "args": [
              "self",
              "embeds"
            ],
            "is_async": true,
            "class": "DiscordVisionHelper"
          },
          {
            "name": "_process_image_url",
            "line": 175,
            "decorators": [],
            "args": [
              "self",
              "url",
              "image_type"
            ],
            "is_async": true,
            "class": "DiscordVisionHelper"
          },
          {
            "name": "is_available",
            "line": 205,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DiscordVisionHelper"
          },
          {
            "name": "get_status",
            "line": 213,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DiscordVisionHelper"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/discord/discord_error_handler.py",
        "classes": [
          {
            "name": "ErrorSeverity",
            "line": 15,
            "decorators": [],
            "bases": [
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "DiscordErrorHandler",
            "line": 23,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 26,
                "decorators": [],
                "args": [
                  "self",
                  "on_critical_error"
                ],
                "is_async": false,
                "class": "DiscordErrorHandler"
              },
              {
                "name": "handle_channel_error",
                "line": 38,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id",
                  "error",
                  "operation"
                ],
                "is_async": true,
                "class": "DiscordErrorHandler"
              },
              {
                "name": "handle_message_error",
                "line": 96,
                "decorators": [],
                "args": [
                  "self",
                  "error",
                  "message_content",
                  "channel_id"
                ],
                "is_async": true,
                "class": "DiscordErrorHandler"
              },
              {
                "name": "handle_connection_error",
                "line": 147,
                "decorators": [],
                "args": [
                  "self",
                  "error"
                ],
                "is_async": true,
                "class": "DiscordErrorHandler"
              },
              {
                "name": "handle_api_error",
                "line": 189,
                "decorators": [],
                "args": [
                  "self",
                  "error",
                  "endpoint"
                ],
                "is_async": true,
                "class": "DiscordErrorHandler"
              },
              {
                "name": "_track_error",
                "line": 231,
                "decorators": [],
                "args": [
                  "self",
                  "error_key",
                  "severity"
                ],
                "is_async": true,
                "class": "DiscordErrorHandler"
              },
              {
                "name": "get_error_stats",
                "line": 262,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DiscordErrorHandler"
              },
              {
                "name": "create_error_embed",
                "line": 274,
                "decorators": [],
                "args": [
                  "self",
                  "error_info"
                ],
                "is_async": false,
                "class": "DiscordErrorHandler"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 26,
            "decorators": [],
            "args": [
              "self",
              "on_critical_error"
            ],
            "is_async": false,
            "class": "DiscordErrorHandler"
          },
          {
            "name": "handle_channel_error",
            "line": 38,
            "decorators": [],
            "args": [
              "self",
              "channel_id",
              "error",
              "operation"
            ],
            "is_async": true,
            "class": "DiscordErrorHandler"
          },
          {
            "name": "handle_message_error",
            "line": 96,
            "decorators": [],
            "args": [
              "self",
              "error",
              "message_content",
              "channel_id"
            ],
            "is_async": true,
            "class": "DiscordErrorHandler"
          },
          {
            "name": "handle_connection_error",
            "line": 147,
            "decorators": [],
            "args": [
              "self",
              "error"
            ],
            "is_async": true,
            "class": "DiscordErrorHandler"
          },
          {
            "name": "handle_api_error",
            "line": 189,
            "decorators": [],
            "args": [
              "self",
              "error",
              "endpoint"
            ],
            "is_async": true,
            "class": "DiscordErrorHandler"
          },
          {
            "name": "_track_error",
            "line": 231,
            "decorators": [],
            "args": [
              "self",
              "error_key",
              "severity"
            ],
            "is_async": true,
            "class": "DiscordErrorHandler"
          },
          {
            "name": "get_error_stats",
            "line": 262,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DiscordErrorHandler"
          },
          {
            "name": "create_error_embed",
            "line": 274,
            "decorators": [],
            "args": [
              "self",
              "error_info"
            ],
            "is_async": false,
            "class": "DiscordErrorHandler"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/adapters/api/endpoints/emergency.py",
        "classes": [],
        "functions": [
          {
            "name": "get_runtime_service",
            "line": 18,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "emergency_shutdown",
            "line": 25,
            "decorators": [
              "post"
            ],
            "args": [
              "command",
              "runtime_service"
            ],
            "is_async": true
          },
          {
            "name": "get_kill_switch_status",
            "line": 69,
            "decorators": [
              "get"
            ],
            "args": [
              "runtime_service"
            ],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/processors/core/base_processor.py",
        "classes": [
          {
            "name": "BaseProcessor",
            "line": 24,
            "decorators": [],
            "bases": [
              "ABC"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 27,
                "decorators": [],
                "args": [
                  "self",
                  "config_accessor",
                  "thought_processor",
                  "action_dispatcher",
                  "services"
                ],
                "is_async": false,
                "class": "BaseProcessor"
              },
              {
                "name": "get_supported_states",
                "line": 64,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "BaseProcessor"
              },
              {
                "name": "can_process",
                "line": 68,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "state"
                ],
                "is_async": true,
                "class": "BaseProcessor"
              },
              {
                "name": "process",
                "line": 72,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "round_number"
                ],
                "is_async": true,
                "class": "BaseProcessor"
              },
              {
                "name": "initialize",
                "line": 78,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "BaseProcessor"
              },
              {
                "name": "cleanup",
                "line": 86,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "BaseProcessor"
              },
              {
                "name": "get_metrics",
                "line": 94,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "BaseProcessor"
              },
              {
                "name": "update_metrics",
                "line": 98,
                "decorators": [],
                "args": [
                  "self",
                  "updates"
                ],
                "is_async": false,
                "class": "BaseProcessor"
              },
              {
                "name": "dispatch_action",
                "line": 109,
                "decorators": [],
                "args": [
                  "self",
                  "result",
                  "thought",
                  "context"
                ],
                "is_async": true,
                "class": "BaseProcessor"
              },
              {
                "name": "process_thought_item",
                "line": 135,
                "decorators": [],
                "args": [
                  "self",
                  "item",
                  "context"
                ],
                "is_async": true,
                "class": "BaseProcessor"
              },
              {
                "name": "force_ponder",
                "line": 166,
                "decorators": [],
                "args": [
                  "self",
                  "item",
                  "context"
                ],
                "is_async": true,
                "class": "BaseProcessor"
              },
              {
                "name": "force_defer",
                "line": 171,
                "decorators": [],
                "args": [
                  "self",
                  "item",
                  "context"
                ],
                "is_async": true,
                "class": "BaseProcessor"
              },
              {
                "name": "__repr__",
                "line": 175,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "BaseProcessor"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 27,
            "decorators": [],
            "args": [
              "self",
              "config_accessor",
              "thought_processor",
              "action_dispatcher",
              "services"
            ],
            "is_async": false,
            "class": "BaseProcessor"
          },
          {
            "name": "get_supported_states",
            "line": 64,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "BaseProcessor"
          },
          {
            "name": "can_process",
            "line": 68,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "state"
            ],
            "is_async": true,
            "class": "BaseProcessor"
          },
          {
            "name": "process",
            "line": 72,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "round_number"
            ],
            "is_async": true,
            "class": "BaseProcessor"
          },
          {
            "name": "initialize",
            "line": 78,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "BaseProcessor"
          },
          {
            "name": "cleanup",
            "line": 86,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "BaseProcessor"
          },
          {
            "name": "get_metrics",
            "line": 94,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "BaseProcessor"
          },
          {
            "name": "update_metrics",
            "line": 98,
            "decorators": [],
            "args": [
              "self",
              "updates"
            ],
            "is_async": false,
            "class": "BaseProcessor"
          },
          {
            "name": "dispatch_action",
            "line": 109,
            "decorators": [],
            "args": [
              "self",
              "result",
              "thought",
              "context"
            ],
            "is_async": true,
            "class": "BaseProcessor"
          },
          {
            "name": "process_thought_item",
            "line": 135,
            "decorators": [],
            "args": [
              "self",
              "item",
              "context"
            ],
            "is_async": true,
            "class": "BaseProcessor"
          },
          {
            "name": "force_ponder",
            "line": 166,
            "decorators": [],
            "args": [
              "self",
              "item",
              "context"
            ],
            "is_async": true,
            "class": "BaseProcessor"
          },
          {
            "name": "force_defer",
            "line": 171,
            "decorators": [],
            "args": [
              "self",
              "item",
              "context"
            ],
            "is_async": true,
            "class": "BaseProcessor"
          },
          {
            "name": "__repr__",
            "line": 175,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "BaseProcessor"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/processors/core/main_processor.py",
        "classes": [
          {
            "name": "AgentProcessor",
            "line": 42,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 48,
                "decorators": [],
                "args": [
                  "self",
                  "app_config",
                  "agent_identity",
                  "thought_processor",
                  "action_dispatcher",
                  "services",
                  "startup_channel_id",
                  "time_service",
                  "runtime"
                ],
                "is_async": false,
                "class": "AgentProcessor"
              },
              {
                "name": "_load_preload_tasks",
                "line": 149,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "AgentProcessor"
              },
              {
                "name": "_ensure_stop_event",
                "line": 172,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AgentProcessor"
              },
              {
                "name": "action_dispatcher",
                "line": 181,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AgentProcessor"
              },
              {
                "name": "action_dispatcher",
                "line": 185,
                "decorators": [
                  "setter"
                ],
                "args": [
                  "self",
                  "new_dispatcher"
                ],
                "is_async": false,
                "class": "AgentProcessor"
              },
              {
                "name": "start_processing",
                "line": 204,
                "decorators": [],
                "args": [
                  "self",
                  "num_rounds"
                ],
                "is_async": true,
                "class": "AgentProcessor"
              },
              {
                "name": "_process_pending_thoughts_async",
                "line": 291,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "AgentProcessor"
              },
              {
                "name": "_process_single_thought",
                "line": 378,
                "decorators": [],
                "args": [
                  "self",
                  "thought"
                ],
                "is_async": true,
                "class": "AgentProcessor"
              },
              {
                "name": "stop_processing",
                "line": 471,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "AgentProcessor"
              },
              {
                "name": "_processing_loop",
                "line": 505,
                "decorators": [],
                "args": [
                  "self",
                  "num_rounds"
                ],
                "is_async": true,
                "class": "AgentProcessor"
              },
              {
                "name": "_handle_state_transition",
                "line": 666,
                "decorators": [],
                "args": [
                  "self",
                  "target_state"
                ],
                "is_async": true,
                "class": "AgentProcessor"
              },
              {
                "name": "process",
                "line": 700,
                "decorators": [],
                "args": [
                  "self",
                  "round_number"
                ],
                "is_async": true,
                "class": "AgentProcessor"
              },
              {
                "name": "get_status",
                "line": 713,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AgentProcessor"
              },
              {
                "name": "_schedule_initial_dream",
                "line": 750,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "AgentProcessor"
              },
              {
                "name": "_check_scheduled_dream",
                "line": 792,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "AgentProcessor"
              },
              {
                "name": "_get_detailed_queue_status",
                "line": 853,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AgentProcessor"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 48,
            "decorators": [],
            "args": [
              "self",
              "app_config",
              "agent_identity",
              "thought_processor",
              "action_dispatcher",
              "services",
              "startup_channel_id",
              "time_service",
              "runtime"
            ],
            "is_async": false,
            "class": "AgentProcessor"
          },
          {
            "name": "_load_preload_tasks",
            "line": 149,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "AgentProcessor"
          },
          {
            "name": "_ensure_stop_event",
            "line": 172,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AgentProcessor"
          },
          {
            "name": "action_dispatcher",
            "line": 181,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AgentProcessor"
          },
          {
            "name": "action_dispatcher",
            "line": 185,
            "decorators": [
              "setter"
            ],
            "args": [
              "self",
              "new_dispatcher"
            ],
            "is_async": false,
            "class": "AgentProcessor"
          },
          {
            "name": "start_processing",
            "line": 204,
            "decorators": [],
            "args": [
              "self",
              "num_rounds"
            ],
            "is_async": true,
            "class": "AgentProcessor"
          },
          {
            "name": "_process_pending_thoughts_async",
            "line": 291,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "AgentProcessor"
          },
          {
            "name": "_process_single_thought",
            "line": 378,
            "decorators": [],
            "args": [
              "self",
              "thought"
            ],
            "is_async": true,
            "class": "AgentProcessor"
          },
          {
            "name": "stop_processing",
            "line": 471,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "AgentProcessor"
          },
          {
            "name": "_processing_loop",
            "line": 505,
            "decorators": [],
            "args": [
              "self",
              "num_rounds"
            ],
            "is_async": true,
            "class": "AgentProcessor"
          },
          {
            "name": "_handle_state_transition",
            "line": 666,
            "decorators": [],
            "args": [
              "self",
              "target_state"
            ],
            "is_async": true,
            "class": "AgentProcessor"
          },
          {
            "name": "process",
            "line": 700,
            "decorators": [],
            "args": [
              "self",
              "round_number"
            ],
            "is_async": true,
            "class": "AgentProcessor"
          },
          {
            "name": "get_status",
            "line": 713,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AgentProcessor"
          },
          {
            "name": "_schedule_initial_dream",
            "line": 750,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "AgentProcessor"
          },
          {
            "name": "_check_scheduled_dream",
            "line": 792,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "AgentProcessor"
          },
          {
            "name": "_get_detailed_queue_status",
            "line": 853,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AgentProcessor"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/processors/core/thought_processor.py",
        "classes": [
          {
            "name": "ThoughtProcessor",
            "line": 23,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 24,
                "decorators": [],
                "args": [
                  "self",
                  "dma_orchestrator",
                  "context_builder",
                  "conscience_registry",
                  "app_config",
                  "dependencies",
                  "time_service",
                  "telemetry_service",
                  "auth_service"
                ],
                "is_async": false,
                "class": "ThoughtProcessor"
              },
              {
                "name": "process_thought",
                "line": 45,
                "decorators": [],
                "args": [
                  "self",
                  "thought_item",
                  "context"
                ],
                "is_async": true,
                "class": "ThoughtProcessor"
              },
              {
                "name": "_apply_conscience_simple",
                "line": 329,
                "decorators": [],
                "args": [
                  "self",
                  "action_result",
                  "thought",
                  "dma_results_dict"
                ],
                "is_async": true,
                "class": "ThoughtProcessor"
              },
              {
                "name": "_fetch_thought",
                "line": 425,
                "decorators": [],
                "args": [
                  "self",
                  "thought_id"
                ],
                "is_async": true,
                "class": "ThoughtProcessor"
              },
              {
                "name": "_verify_task_authorization",
                "line": 430,
                "decorators": [],
                "args": [
                  "self",
                  "thought"
                ],
                "is_async": true,
                "class": "ThoughtProcessor"
              },
              {
                "name": "_describe_action",
                "line": 473,
                "decorators": [],
                "args": [
                  "self",
                  "action_result"
                ],
                "is_async": false,
                "class": "ThoughtProcessor"
              },
              {
                "name": "_get_profile_name",
                "line": 493,
                "decorators": [],
                "args": [
                  "self",
                  "thought"
                ],
                "is_async": false,
                "class": "ThoughtProcessor"
              },
              {
                "name": "_get_permitted_actions",
                "line": 510,
                "decorators": [],
                "args": [
                  "self",
                  "thought"
                ],
                "is_async": false,
                "class": "ThoughtProcessor"
              },
              {
                "name": "_has_critical_failure",
                "line": 513,
                "decorators": [],
                "args": [
                  "self",
                  "dma_results"
                ],
                "is_async": false,
                "class": "ThoughtProcessor"
              },
              {
                "name": "_create_deferral_result",
                "line": 516,
                "decorators": [],
                "args": [
                  "self",
                  "dma_results",
                  "thought"
                ],
                "is_async": false,
                "class": "ThoughtProcessor"
              },
              {
                "name": "_handle_special_cases",
                "line": 532,
                "decorators": [],
                "args": [
                  "self",
                  "result",
                  "thought",
                  "context"
                ],
                "is_async": true,
                "class": "ThoughtProcessor"
              },
              {
                "name": "_update_thought_status",
                "line": 606,
                "decorators": [],
                "args": [
                  "self",
                  "thought",
                  "result"
                ],
                "is_async": true,
                "class": "ThoughtProcessor"
              },
              {
                "name": "_handle_action_selection",
                "line": 640,
                "decorators": [],
                "args": [
                  "self",
                  "thought",
                  "action_selection",
                  "context"
                ],
                "is_async": true,
                "class": "ThoughtProcessor"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 24,
            "decorators": [],
            "args": [
              "self",
              "dma_orchestrator",
              "context_builder",
              "conscience_registry",
              "app_config",
              "dependencies",
              "time_service",
              "telemetry_service",
              "auth_service"
            ],
            "is_async": false,
            "class": "ThoughtProcessor"
          },
          {
            "name": "process_thought",
            "line": 45,
            "decorators": [],
            "args": [
              "self",
              "thought_item",
              "context"
            ],
            "is_async": true,
            "class": "ThoughtProcessor"
          },
          {
            "name": "_apply_conscience_simple",
            "line": 329,
            "decorators": [],
            "args": [
              "self",
              "action_result",
              "thought",
              "dma_results_dict"
            ],
            "is_async": true,
            "class": "ThoughtProcessor"
          },
          {
            "name": "_fetch_thought",
            "line": 425,
            "decorators": [],
            "args": [
              "self",
              "thought_id"
            ],
            "is_async": true,
            "class": "ThoughtProcessor"
          },
          {
            "name": "_verify_task_authorization",
            "line": 430,
            "decorators": [],
            "args": [
              "self",
              "thought"
            ],
            "is_async": true,
            "class": "ThoughtProcessor"
          },
          {
            "name": "_describe_action",
            "line": 473,
            "decorators": [],
            "args": [
              "self",
              "action_result"
            ],
            "is_async": false,
            "class": "ThoughtProcessor"
          },
          {
            "name": "_get_profile_name",
            "line": 493,
            "decorators": [],
            "args": [
              "self",
              "thought"
            ],
            "is_async": false,
            "class": "ThoughtProcessor"
          },
          {
            "name": "_get_permitted_actions",
            "line": 510,
            "decorators": [],
            "args": [
              "self",
              "thought"
            ],
            "is_async": false,
            "class": "ThoughtProcessor"
          },
          {
            "name": "_has_critical_failure",
            "line": 513,
            "decorators": [],
            "args": [
              "self",
              "dma_results"
            ],
            "is_async": false,
            "class": "ThoughtProcessor"
          },
          {
            "name": "_create_deferral_result",
            "line": 516,
            "decorators": [],
            "args": [
              "self",
              "dma_results",
              "thought"
            ],
            "is_async": false,
            "class": "ThoughtProcessor"
          },
          {
            "name": "_handle_special_cases",
            "line": 532,
            "decorators": [],
            "args": [
              "self",
              "result",
              "thought",
              "context"
            ],
            "is_async": true,
            "class": "ThoughtProcessor"
          },
          {
            "name": "_update_thought_status",
            "line": 606,
            "decorators": [],
            "args": [
              "self",
              "thought",
              "result"
            ],
            "is_async": true,
            "class": "ThoughtProcessor"
          },
          {
            "name": "_handle_action_selection",
            "line": 640,
            "decorators": [],
            "args": [
              "self",
              "thought",
              "action_selection",
              "context"
            ],
            "is_async": true,
            "class": "ThoughtProcessor"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/processors/support/thought_manager.py",
        "classes": [
          {
            "name": "ThoughtManager",
            "line": 18,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 21,
                "decorators": [],
                "args": [
                  "self",
                  "time_service",
                  "max_active_thoughts",
                  "default_channel_id"
                ],
                "is_async": false,
                "class": "ThoughtManager"
              },
              {
                "name": "generate_seed_thought",
                "line": 27,
                "decorators": [],
                "args": [
                  "self",
                  "task",
                  "round_number"
                ],
                "is_async": false,
                "class": "ThoughtManager"
              },
              {
                "name": "generate_seed_thoughts",
                "line": 102,
                "decorators": [],
                "args": [
                  "self",
                  "tasks",
                  "round_number"
                ],
                "is_async": false,
                "class": "ThoughtManager"
              },
              {
                "name": "populate_queue",
                "line": 115,
                "decorators": [],
                "args": [
                  "self",
                  "round_number"
                ],
                "is_async": false,
                "class": "ThoughtManager"
              },
              {
                "name": "get_queue_batch",
                "line": 151,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ThoughtManager"
              },
              {
                "name": "mark_thoughts_processing",
                "line": 155,
                "decorators": [],
                "args": [
                  "self",
                  "batch",
                  "round_number"
                ],
                "is_async": false,
                "class": "ThoughtManager"
              },
              {
                "name": "create_follow_up_thought",
                "line": 181,
                "decorators": [],
                "args": [
                  "self",
                  "parent_thought",
                  "content",
                  "thought_type",
                  "round_number"
                ],
                "is_async": false,
                "class": "ThoughtManager"
              },
              {
                "name": "handle_idle_state",
                "line": 217,
                "decorators": [],
                "args": [
                  "self",
                  "round_number"
                ],
                "is_async": false,
                "class": "ThoughtManager"
              },
              {
                "name": "get_pending_thought_count",
                "line": 230,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ThoughtManager"
              },
              {
                "name": "get_processing_thought_count",
                "line": 234,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ThoughtManager"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 21,
            "decorators": [],
            "args": [
              "self",
              "time_service",
              "max_active_thoughts",
              "default_channel_id"
            ],
            "is_async": false,
            "class": "ThoughtManager"
          },
          {
            "name": "generate_seed_thought",
            "line": 27,
            "decorators": [],
            "args": [
              "self",
              "task",
              "round_number"
            ],
            "is_async": false,
            "class": "ThoughtManager"
          },
          {
            "name": "generate_seed_thoughts",
            "line": 102,
            "decorators": [],
            "args": [
              "self",
              "tasks",
              "round_number"
            ],
            "is_async": false,
            "class": "ThoughtManager"
          },
          {
            "name": "populate_queue",
            "line": 115,
            "decorators": [],
            "args": [
              "self",
              "round_number"
            ],
            "is_async": false,
            "class": "ThoughtManager"
          },
          {
            "name": "get_queue_batch",
            "line": 151,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ThoughtManager"
          },
          {
            "name": "mark_thoughts_processing",
            "line": 155,
            "decorators": [],
            "args": [
              "self",
              "batch",
              "round_number"
            ],
            "is_async": false,
            "class": "ThoughtManager"
          },
          {
            "name": "create_follow_up_thought",
            "line": 181,
            "decorators": [],
            "args": [
              "self",
              "parent_thought",
              "content",
              "thought_type",
              "round_number"
            ],
            "is_async": false,
            "class": "ThoughtManager"
          },
          {
            "name": "handle_idle_state",
            "line": 217,
            "decorators": [],
            "args": [
              "self",
              "round_number"
            ],
            "is_async": false,
            "class": "ThoughtManager"
          },
          {
            "name": "get_pending_thought_count",
            "line": 230,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ThoughtManager"
          },
          {
            "name": "get_processing_thought_count",
            "line": 234,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ThoughtManager"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/processors/support/processing_queue.py",
        "classes": [
          {
            "name": "ThoughtContent",
            "line": 16,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ProcessingQueueItem",
            "line": 21,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": [
              {
                "name": "content_text",
                "line": 36,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ProcessingQueueItem"
              },
              {
                "name": "from_thought",
                "line": 41,
                "decorators": [
                  "classmethod"
                ],
                "args": [
                  "cls",
                  "thought_instance",
                  "raw_input",
                  "initial_ctx",
                  "queue_item_content"
                ],
                "is_async": false,
                "class": "ProcessingQueueItem"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "content_text",
            "line": 36,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ProcessingQueueItem"
          },
          {
            "name": "from_thought",
            "line": 41,
            "decorators": [
              "classmethod"
            ],
            "args": [
              "cls",
              "thought_instance",
              "raw_input",
              "initial_ctx",
              "queue_item_content"
            ],
            "is_async": false,
            "class": "ProcessingQueueItem"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/processors/support/task_manager.py",
        "classes": [
          {
            "name": "TaskManager",
            "line": 18,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 21,
                "decorators": [],
                "args": [
                  "self",
                  "max_active_tasks",
                  "time_service"
                ],
                "is_async": false,
                "class": "TaskManager"
              },
              {
                "name": "time_service",
                "line": 26,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TaskManager"
              },
              {
                "name": "create_task",
                "line": 32,
                "decorators": [],
                "args": [
                  "self",
                  "description",
                  "channel_id",
                  "priority",
                  "context",
                  "parent_task_id"
                ],
                "is_async": false,
                "class": "TaskManager"
              },
              {
                "name": "activate_pending_tasks",
                "line": 76,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TaskManager"
              },
              {
                "name": "get_tasks_needing_seed",
                "line": 101,
                "decorators": [],
                "args": [
                  "self",
                  "limit"
                ],
                "is_async": false,
                "class": "TaskManager"
              },
              {
                "name": "complete_task",
                "line": 110,
                "decorators": [],
                "args": [
                  "self",
                  "task_id",
                  "outcome"
                ],
                "is_async": false,
                "class": "TaskManager"
              },
              {
                "name": "fail_task",
                "line": 122,
                "decorators": [],
                "args": [
                  "self",
                  "task_id",
                  "reason"
                ],
                "is_async": false,
                "class": "TaskManager"
              },
              {
                "name": "create_wakeup_sequence_tasks",
                "line": 132,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id"
                ],
                "is_async": false,
                "class": "TaskManager"
              },
              {
                "name": "get_active_task_count",
                "line": 204,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TaskManager"
              },
              {
                "name": "get_pending_task_count",
                "line": 208,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TaskManager"
              },
              {
                "name": "cleanup_old_completed_tasks",
                "line": 212,
                "decorators": [],
                "args": [
                  "self",
                  "days_old"
                ],
                "is_async": false,
                "class": "TaskManager"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 21,
            "decorators": [],
            "args": [
              "self",
              "max_active_tasks",
              "time_service"
            ],
            "is_async": false,
            "class": "TaskManager"
          },
          {
            "name": "time_service",
            "line": 26,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TaskManager"
          },
          {
            "name": "create_task",
            "line": 32,
            "decorators": [],
            "args": [
              "self",
              "description",
              "channel_id",
              "priority",
              "context",
              "parent_task_id"
            ],
            "is_async": false,
            "class": "TaskManager"
          },
          {
            "name": "activate_pending_tasks",
            "line": 76,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TaskManager"
          },
          {
            "name": "get_tasks_needing_seed",
            "line": 101,
            "decorators": [],
            "args": [
              "self",
              "limit"
            ],
            "is_async": false,
            "class": "TaskManager"
          },
          {
            "name": "complete_task",
            "line": 110,
            "decorators": [],
            "args": [
              "self",
              "task_id",
              "outcome"
            ],
            "is_async": false,
            "class": "TaskManager"
          },
          {
            "name": "fail_task",
            "line": 122,
            "decorators": [],
            "args": [
              "self",
              "task_id",
              "reason"
            ],
            "is_async": false,
            "class": "TaskManager"
          },
          {
            "name": "create_wakeup_sequence_tasks",
            "line": 132,
            "decorators": [],
            "args": [
              "self",
              "channel_id"
            ],
            "is_async": false,
            "class": "TaskManager"
          },
          {
            "name": "get_active_task_count",
            "line": 204,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TaskManager"
          },
          {
            "name": "get_pending_task_count",
            "line": 208,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TaskManager"
          },
          {
            "name": "cleanup_old_completed_tasks",
            "line": 212,
            "decorators": [],
            "args": [
              "self",
              "days_old"
            ],
            "is_async": false,
            "class": "TaskManager"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/processors/support/thought_escalation.py",
        "classes": [],
        "functions": [
          {
            "name": "_append_escalation",
            "line": 22,
            "decorators": [],
            "args": [
              "thought",
              "event"
            ],
            "is_async": false
          },
          {
            "name": "escalate_due_to_action_limit",
            "line": 27,
            "decorators": [],
            "args": [
              "thought",
              "reason",
              "time_service"
            ],
            "is_async": false
          },
          {
            "name": "escalate_due_to_sla",
            "line": 37,
            "decorators": [],
            "args": [
              "thought",
              "reason",
              "time_service"
            ],
            "is_async": false
          },
          {
            "name": "escalate_due_to_conscience",
            "line": 47,
            "decorators": [],
            "args": [
              "thought",
              "reason",
              "time_service"
            ],
            "is_async": false
          },
          {
            "name": "escalate_due_to_failure",
            "line": 57,
            "decorators": [],
            "args": [
              "thought",
              "reason",
              "time_service"
            ],
            "is_async": false
          },
          {
            "name": "escalate_dma_failure",
            "line": 67,
            "decorators": [],
            "args": [
              "thought",
              "dma_name",
              "error",
              "retry_limit",
              "time_service"
            ],
            "is_async": false
          },
          {
            "name": "escalate_due_to_max_thought_rounds",
            "line": 100,
            "decorators": [],
            "args": [
              "thought",
              "max_rounds",
              "time_service"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/processors/support/dma_orchestrator.py",
        "classes": [
          {
            "name": "DMAOrchestrator",
            "line": 38,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 39,
                "decorators": [],
                "args": [
                  "self",
                  "ethical_pdma_evaluator",
                  "csdma_evaluator",
                  "dsdma",
                  "action_selection_pdma_evaluator",
                  "time_service",
                  "app_config",
                  "llm_service",
                  "memory_service"
                ],
                "is_async": false,
                "class": "DMAOrchestrator"
              },
              {
                "name": "run_initial_dmas",
                "line": 73,
                "decorators": [],
                "args": [
                  "self",
                  "thought_item",
                  "processing_context",
                  "dsdma_context"
                ],
                "is_async": true,
                "class": "DMAOrchestrator"
              },
              {
                "name": "run_dmas",
                "line": 149,
                "decorators": [],
                "args": [
                  "self",
                  "thought_item",
                  "processing_context",
                  "dsdma_context"
                ],
                "is_async": true,
                "class": "DMAOrchestrator"
              },
              {
                "name": "run_action_selection",
                "line": 245,
                "decorators": [],
                "args": [
                  "self",
                  "thought_item",
                  "actual_thought",
                  "processing_context",
                  "dma_results",
                  "profile_name",
                  "triaged_inputs"
                ],
                "is_async": true,
                "class": "DMAOrchestrator"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 39,
            "decorators": [],
            "args": [
              "self",
              "ethical_pdma_evaluator",
              "csdma_evaluator",
              "dsdma",
              "action_selection_pdma_evaluator",
              "time_service",
              "app_config",
              "llm_service",
              "memory_service"
            ],
            "is_async": false,
            "class": "DMAOrchestrator"
          },
          {
            "name": "run_initial_dmas",
            "line": 73,
            "decorators": [],
            "args": [
              "self",
              "thought_item",
              "processing_context",
              "dsdma_context"
            ],
            "is_async": true,
            "class": "DMAOrchestrator"
          },
          {
            "name": "run_dmas",
            "line": 149,
            "decorators": [],
            "args": [
              "self",
              "thought_item",
              "processing_context",
              "dsdma_context"
            ],
            "is_async": true,
            "class": "DMAOrchestrator"
          },
          {
            "name": "run_action_selection",
            "line": 245,
            "decorators": [],
            "args": [
              "self",
              "thought_item",
              "actual_thought",
              "processing_context",
              "dma_results",
              "profile_name",
              "triaged_inputs"
            ],
            "is_async": true,
            "class": "DMAOrchestrator"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/processors/support/state_manager.py",
        "classes": [
          {
            "name": "StateTransition",
            "line": 14,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 17,
                "decorators": [],
                "args": [
                  "self",
                  "from_state",
                  "to_state",
                  "condition_fn",
                  "on_transition_fn"
                ],
                "is_async": false,
                "class": "StateTransition"
              }
            ]
          },
          {
            "name": "StateManager",
            "line": 25,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 50,
                "decorators": [],
                "args": [
                  "self",
                  "time_service",
                  "initial_state"
                ],
                "is_async": false,
                "class": "StateManager"
              },
              {
                "name": "_build_transition_map",
                "line": 65,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "StateManager"
              },
              {
                "name": "_record_state_change",
                "line": 74,
                "decorators": [],
                "args": [
                  "self",
                  "new_state",
                  "old_state"
                ],
                "is_async": false,
                "class": "StateManager"
              },
              {
                "name": "can_transition_to",
                "line": 82,
                "decorators": [],
                "args": [
                  "self",
                  "target_state"
                ],
                "is_async": false,
                "class": "StateManager"
              },
              {
                "name": "transition_to",
                "line": 98,
                "decorators": [],
                "args": [
                  "self",
                  "target_state"
                ],
                "is_async": false,
                "class": "StateManager"
              },
              {
                "name": "get_state",
                "line": 148,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "StateManager"
              },
              {
                "name": "get_state_metadata",
                "line": 152,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "StateManager"
              },
              {
                "name": "update_state_metadata",
                "line": 156,
                "decorators": [],
                "args": [
                  "self",
                  "key",
                  "value"
                ],
                "is_async": false,
                "class": "StateManager"
              },
              {
                "name": "get_state_duration",
                "line": 162,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "StateManager"
              },
              {
                "name": "should_auto_transition",
                "line": 170,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "StateManager"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 17,
            "decorators": [],
            "args": [
              "self",
              "from_state",
              "to_state",
              "condition_fn",
              "on_transition_fn"
            ],
            "is_async": false,
            "class": "StateTransition"
          },
          {
            "name": "__init__",
            "line": 50,
            "decorators": [],
            "args": [
              "self",
              "time_service",
              "initial_state"
            ],
            "is_async": false,
            "class": "StateManager"
          },
          {
            "name": "_build_transition_map",
            "line": 65,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "StateManager"
          },
          {
            "name": "_record_state_change",
            "line": 74,
            "decorators": [],
            "args": [
              "self",
              "new_state",
              "old_state"
            ],
            "is_async": false,
            "class": "StateManager"
          },
          {
            "name": "can_transition_to",
            "line": 82,
            "decorators": [],
            "args": [
              "self",
              "target_state"
            ],
            "is_async": false,
            "class": "StateManager"
          },
          {
            "name": "transition_to",
            "line": 98,
            "decorators": [],
            "args": [
              "self",
              "target_state"
            ],
            "is_async": false,
            "class": "StateManager"
          },
          {
            "name": "get_state",
            "line": 148,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "StateManager"
          },
          {
            "name": "get_state_metadata",
            "line": 152,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "StateManager"
          },
          {
            "name": "update_state_metadata",
            "line": 156,
            "decorators": [],
            "args": [
              "self",
              "key",
              "value"
            ],
            "is_async": false,
            "class": "StateManager"
          },
          {
            "name": "get_state_duration",
            "line": 162,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "StateManager"
          },
          {
            "name": "should_auto_transition",
            "line": 170,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "StateManager"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/processors/states/wakeup_processor.py",
        "classes": [
          {
            "name": "WakeupProcessor",
            "line": 25,
            "decorators": [],
            "bases": [
              "BaseProcessor"
            ],
            "methods": [
              {
                "name": "_get_wakeup_sequence",
                "line": 28,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "WakeupProcessor"
              },
              {
                "name": "__init__",
                "line": 58,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "WakeupProcessor"
              },
              {
                "name": "get_supported_states",
                "line": 69,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "WakeupProcessor"
              },
              {
                "name": "can_process",
                "line": 73,
                "decorators": [],
                "args": [
                  "self",
                  "state"
                ],
                "is_async": true,
                "class": "WakeupProcessor"
              },
              {
                "name": "process",
                "line": 84,
                "decorators": [],
                "args": [
                  "self",
                  "round_number"
                ],
                "is_async": true,
                "class": "WakeupProcessor"
              },
              {
                "name": "_process_wakeup",
                "line": 101,
                "decorators": [],
                "args": [
                  "self",
                  "round_number",
                  "non_blocking"
                ],
                "is_async": true,
                "class": "WakeupProcessor"
              },
              {
                "name": "_process_wakeup_steps_non_blocking",
                "line": 216,
                "decorators": [],
                "args": [
                  "self",
                  "round_number"
                ],
                "is_async": true,
                "class": "WakeupProcessor"
              },
              {
                "name": "_check_all_steps_complete",
                "line": 248,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "WakeupProcessor"
              },
              {
                "name": "_count_completed_steps",
                "line": 262,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "WakeupProcessor"
              },
              {
                "name": "_create_wakeup_tasks",
                "line": 273,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "WakeupProcessor"
              },
              {
                "name": "_process_wakeup_steps",
                "line": 333,
                "decorators": [],
                "args": [
                  "self",
                  "round_number",
                  "non_blocking"
                ],
                "is_async": true,
                "class": "WakeupProcessor"
              },
              {
                "name": "_create_step_thought",
                "line": 386,
                "decorators": [],
                "args": [
                  "self",
                  "step_task",
                  "round_number"
                ],
                "is_async": true,
                "class": "WakeupProcessor"
              },
              {
                "name": "_process_step_thought",
                "line": 446,
                "decorators": [],
                "args": [
                  "self",
                  "thought",
                  "processing_context"
                ],
                "is_async": true,
                "class": "WakeupProcessor"
              },
              {
                "name": "_dispatch_step_action",
                "line": 451,
                "decorators": [],
                "args": [
                  "self",
                  "result",
                  "thought",
                  "step_task"
                ],
                "is_async": true,
                "class": "WakeupProcessor"
              },
              {
                "name": "_wait_for_task_completion",
                "line": 473,
                "decorators": [],
                "args": [
                  "self",
                  "task",
                  "step_type",
                  "max_wait",
                  "poll_interval"
                ],
                "is_async": true,
                "class": "WakeupProcessor"
              },
              {
                "name": "_mark_task_failed",
                "line": 504,
                "decorators": [],
                "args": [
                  "self",
                  "task_id",
                  "reason"
                ],
                "is_async": false,
                "class": "WakeupProcessor"
              },
              {
                "name": "_mark_root_task_complete",
                "line": 509,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "WakeupProcessor"
              },
              {
                "name": "_mark_root_task_failed",
                "line": 513,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "WakeupProcessor"
              },
              {
                "name": "is_wakeup_complete",
                "line": 517,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "WakeupProcessor"
              },
              {
                "name": "start_processing",
                "line": 522,
                "decorators": [],
                "args": [
                  "self",
                  "num_rounds"
                ],
                "is_async": true,
                "class": "WakeupProcessor"
              },
              {
                "name": "stop_processing",
                "line": 533,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "WakeupProcessor"
              },
              {
                "name": "get_status",
                "line": 538,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "WakeupProcessor"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "_get_wakeup_sequence",
            "line": 28,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "WakeupProcessor"
          },
          {
            "name": "__init__",
            "line": 58,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "WakeupProcessor"
          },
          {
            "name": "get_supported_states",
            "line": 69,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "WakeupProcessor"
          },
          {
            "name": "can_process",
            "line": 73,
            "decorators": [],
            "args": [
              "self",
              "state"
            ],
            "is_async": true,
            "class": "WakeupProcessor"
          },
          {
            "name": "process",
            "line": 84,
            "decorators": [],
            "args": [
              "self",
              "round_number"
            ],
            "is_async": true,
            "class": "WakeupProcessor"
          },
          {
            "name": "_process_wakeup",
            "line": 101,
            "decorators": [],
            "args": [
              "self",
              "round_number",
              "non_blocking"
            ],
            "is_async": true,
            "class": "WakeupProcessor"
          },
          {
            "name": "_process_wakeup_steps_non_blocking",
            "line": 216,
            "decorators": [],
            "args": [
              "self",
              "round_number"
            ],
            "is_async": true,
            "class": "WakeupProcessor"
          },
          {
            "name": "_check_all_steps_complete",
            "line": 248,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "WakeupProcessor"
          },
          {
            "name": "_count_completed_steps",
            "line": 262,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "WakeupProcessor"
          },
          {
            "name": "_create_wakeup_tasks",
            "line": 273,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "WakeupProcessor"
          },
          {
            "name": "_process_wakeup_steps",
            "line": 333,
            "decorators": [],
            "args": [
              "self",
              "round_number",
              "non_blocking"
            ],
            "is_async": true,
            "class": "WakeupProcessor"
          },
          {
            "name": "_create_step_thought",
            "line": 386,
            "decorators": [],
            "args": [
              "self",
              "step_task",
              "round_number"
            ],
            "is_async": true,
            "class": "WakeupProcessor"
          },
          {
            "name": "_process_step_thought",
            "line": 446,
            "decorators": [],
            "args": [
              "self",
              "thought",
              "processing_context"
            ],
            "is_async": true,
            "class": "WakeupProcessor"
          },
          {
            "name": "_dispatch_step_action",
            "line": 451,
            "decorators": [],
            "args": [
              "self",
              "result",
              "thought",
              "step_task"
            ],
            "is_async": true,
            "class": "WakeupProcessor"
          },
          {
            "name": "_wait_for_task_completion",
            "line": 473,
            "decorators": [],
            "args": [
              "self",
              "task",
              "step_type",
              "max_wait",
              "poll_interval"
            ],
            "is_async": true,
            "class": "WakeupProcessor"
          },
          {
            "name": "_mark_task_failed",
            "line": 504,
            "decorators": [],
            "args": [
              "self",
              "task_id",
              "reason"
            ],
            "is_async": false,
            "class": "WakeupProcessor"
          },
          {
            "name": "_mark_root_task_complete",
            "line": 509,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "WakeupProcessor"
          },
          {
            "name": "_mark_root_task_failed",
            "line": 513,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "WakeupProcessor"
          },
          {
            "name": "is_wakeup_complete",
            "line": 517,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "WakeupProcessor"
          },
          {
            "name": "start_processing",
            "line": 522,
            "decorators": [],
            "args": [
              "self",
              "num_rounds"
            ],
            "is_async": true,
            "class": "WakeupProcessor"
          },
          {
            "name": "stop_processing",
            "line": 533,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "WakeupProcessor"
          },
          {
            "name": "get_status",
            "line": 538,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "WakeupProcessor"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/processors/states/play_processor.py",
        "classes": [
          {
            "name": "PlayProcessor",
            "line": 15,
            "decorators": [],
            "bases": [
              "WorkProcessor"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 26,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "PlayProcessor"
              },
              {
                "name": "get_supported_states",
                "line": 35,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "PlayProcessor"
              },
              {
                "name": "process",
                "line": 39,
                "decorators": [],
                "args": [
                  "self",
                  "round_number"
                ],
                "is_async": true,
                "class": "PlayProcessor"
              },
              {
                "name": "get_play_stats",
                "line": 64,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "PlayProcessor"
              },
              {
                "name": "_calculate_creativity_level",
                "line": 85,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "PlayProcessor"
              },
              {
                "name": "_prioritize_creative_tasks",
                "line": 106,
                "decorators": [],
                "args": [
                  "self",
                  "tasks"
                ],
                "is_async": true,
                "class": "PlayProcessor"
              },
              {
                "name": "should_experiment",
                "line": 118,
                "decorators": [],
                "args": [
                  "self",
                  "thought_content"
                ],
                "is_async": false,
                "class": "PlayProcessor"
              },
              {
                "name": "get_status",
                "line": 135,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "PlayProcessor"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 26,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "PlayProcessor"
          },
          {
            "name": "get_supported_states",
            "line": 35,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "PlayProcessor"
          },
          {
            "name": "process",
            "line": 39,
            "decorators": [],
            "args": [
              "self",
              "round_number"
            ],
            "is_async": true,
            "class": "PlayProcessor"
          },
          {
            "name": "get_play_stats",
            "line": 64,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "PlayProcessor"
          },
          {
            "name": "_calculate_creativity_level",
            "line": 85,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "PlayProcessor"
          },
          {
            "name": "_prioritize_creative_tasks",
            "line": 106,
            "decorators": [],
            "args": [
              "self",
              "tasks"
            ],
            "is_async": true,
            "class": "PlayProcessor"
          },
          {
            "name": "should_experiment",
            "line": 118,
            "decorators": [],
            "args": [
              "self",
              "thought_content"
            ],
            "is_async": false,
            "class": "PlayProcessor"
          },
          {
            "name": "get_status",
            "line": 135,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "PlayProcessor"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/processors/states/dream_processor.py",
        "classes": [
          {
            "name": "DreamPhase",
            "line": 40,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "DreamSession",
            "line": 51,
            "decorators": [
              "dataclass"
            ],
            "bases": [],
            "methods": []
          },
          {
            "name": "DreamProcessor",
            "line": 74,
            "decorators": [],
            "bases": [
              "BaseProcessor"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 80,
                "decorators": [],
                "args": [
                  "self",
                  "config_accessor",
                  "thought_processor",
                  "action_dispatcher",
                  "services",
                  "service_registry",
                  "identity_manager",
                  "startup_channel_id",
                  "cirisnode_url",
                  "pulse_interval",
                  "min_dream_duration",
                  "max_dream_duration",
                  "max_active_tasks",
                  "max_active_thoughts"
                ],
                "is_async": false,
                "class": "DreamProcessor"
              },
              {
                "name": "_initialize_time_service",
                "line": 148,
                "decorators": [],
                "args": [
                  "self",
                  "service_registry"
                ],
                "is_async": false,
                "class": "DreamProcessor"
              },
              {
                "name": "_get_current_time",
                "line": 161,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DreamProcessor"
              },
              {
                "name": "_check_cirisnode_enabled",
                "line": 169,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DreamProcessor"
              },
              {
                "name": "_ensure_stop_event",
                "line": 179,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DreamProcessor"
              },
              {
                "name": "_create_all_dream_tasks",
                "line": 187,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DreamProcessor"
              },
              {
                "name": "_initialize_services",
                "line": 288,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DreamProcessor"
              },
              {
                "name": "start_dreaming",
                "line": 330,
                "decorators": [],
                "args": [
                  "self",
                  "duration"
                ],
                "is_async": true,
                "class": "DreamProcessor"
              },
              {
                "name": "stop_dreaming",
                "line": 387,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DreamProcessor"
              },
              {
                "name": "_announce_dream_entry",
                "line": 421,
                "decorators": [],
                "args": [
                  "self",
                  "duration"
                ],
                "is_async": true,
                "class": "DreamProcessor"
              },
              {
                "name": "process_round",
                "line": 442,
                "decorators": [],
                "args": [
                  "self",
                  "round_number"
                ],
                "is_async": true,
                "class": "DreamProcessor"
              },
              {
                "name": "_process_dream_thought",
                "line": 510,
                "decorators": [],
                "args": [
                  "self",
                  "item"
                ],
                "is_async": true,
                "class": "DreamProcessor"
              },
              {
                "name": "_dream_loop",
                "line": 525,
                "decorators": [],
                "args": [
                  "self",
                  "duration"
                ],
                "is_async": true,
                "class": "DreamProcessor"
              },
              {
                "name": "_update_current_phase",
                "line": 577,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DreamProcessor"
              },
              {
                "name": "_should_exit",
                "line": 603,
                "decorators": [],
                "args": [
                  "self",
                  "start_time",
                  "end_time"
                ],
                "is_async": false,
                "class": "DreamProcessor"
              },
              {
                "name": "_record_phase_duration",
                "line": 615,
                "decorators": [],
                "args": [
                  "self",
                  "phase",
                  "start_time"
                ],
                "is_async": false,
                "class": "DreamProcessor"
              },
              {
                "name": "_benchmarking_phase",
                "line": 627,
                "decorators": [],
                "args": [
                  "self",
                  "start_time",
                  "end_time"
                ],
                "is_async": true,
                "class": "DreamProcessor"
              },
              {
                "name": "_exit_phase",
                "line": 658,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DreamProcessor"
              },
              {
                "name": "_recall_recent_ponder_questions",
                "line": 672,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DreamProcessor"
              },
              {
                "name": "_analyze_ponder_patterns",
                "line": 706,
                "decorators": [],
                "args": [
                  "self",
                  "questions"
                ],
                "is_async": false,
                "class": "DreamProcessor"
              },
              {
                "name": "_schedule_next_dream",
                "line": 741,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DreamProcessor"
              },
              {
                "name": "_process_incidents",
                "line": 778,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DreamProcessor"
              },
              {
                "name": "_process_behavioral_insights",
                "line": 847,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DreamProcessor"
              },
              {
                "name": "_plan_future_work",
                "line": 929,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DreamProcessor"
              },
              {
                "name": "_create_future_task",
                "line": 962,
                "decorators": [],
                "args": [
                  "self",
                  "description",
                  "hours_ahead"
                ],
                "is_async": true,
                "class": "DreamProcessor"
              },
              {
                "name": "_run_single_benchmark",
                "line": 998,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DreamProcessor"
              },
              {
                "name": "_record_dream_session",
                "line": 1024,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DreamProcessor"
              },
              {
                "name": "_get_vibe_summary",
                "line": 1060,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DreamProcessor"
              },
              {
                "name": "_announce_dream_exit",
                "line": 1114,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DreamProcessor"
              },
              {
                "name": "get_dream_summary",
                "line": 1146,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DreamProcessor"
              },
              {
                "name": "initialize",
                "line": 1168,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DreamProcessor"
              },
              {
                "name": "cleanup",
                "line": 1174,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DreamProcessor"
              },
              {
                "name": "get_supported_states",
                "line": 1180,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DreamProcessor"
              },
              {
                "name": "can_process",
                "line": 1184,
                "decorators": [],
                "args": [
                  "self",
                  "state"
                ],
                "is_async": true,
                "class": "DreamProcessor"
              },
              {
                "name": "process",
                "line": 1188,
                "decorators": [],
                "args": [
                  "self",
                  "round_number"
                ],
                "is_async": true,
                "class": "DreamProcessor"
              },
              {
                "name": "should_enter_dream_state",
                "line": 1221,
                "decorators": [],
                "args": [
                  "self",
                  "idle_seconds",
                  "min_idle_threshold"
                ],
                "is_async": false,
                "class": "DreamProcessor"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 80,
            "decorators": [],
            "args": [
              "self",
              "config_accessor",
              "thought_processor",
              "action_dispatcher",
              "services",
              "service_registry",
              "identity_manager",
              "startup_channel_id",
              "cirisnode_url",
              "pulse_interval",
              "min_dream_duration",
              "max_dream_duration",
              "max_active_tasks",
              "max_active_thoughts"
            ],
            "is_async": false,
            "class": "DreamProcessor"
          },
          {
            "name": "_initialize_time_service",
            "line": 148,
            "decorators": [],
            "args": [
              "self",
              "service_registry"
            ],
            "is_async": false,
            "class": "DreamProcessor"
          },
          {
            "name": "_get_current_time",
            "line": 161,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DreamProcessor"
          },
          {
            "name": "_check_cirisnode_enabled",
            "line": 169,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DreamProcessor"
          },
          {
            "name": "_ensure_stop_event",
            "line": 179,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DreamProcessor"
          },
          {
            "name": "_create_all_dream_tasks",
            "line": 187,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DreamProcessor"
          },
          {
            "name": "_initialize_services",
            "line": 288,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DreamProcessor"
          },
          {
            "name": "start_dreaming",
            "line": 330,
            "decorators": [],
            "args": [
              "self",
              "duration"
            ],
            "is_async": true,
            "class": "DreamProcessor"
          },
          {
            "name": "stop_dreaming",
            "line": 387,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DreamProcessor"
          },
          {
            "name": "_announce_dream_entry",
            "line": 421,
            "decorators": [],
            "args": [
              "self",
              "duration"
            ],
            "is_async": true,
            "class": "DreamProcessor"
          },
          {
            "name": "process_round",
            "line": 442,
            "decorators": [],
            "args": [
              "self",
              "round_number"
            ],
            "is_async": true,
            "class": "DreamProcessor"
          },
          {
            "name": "_process_dream_thought",
            "line": 510,
            "decorators": [],
            "args": [
              "self",
              "item"
            ],
            "is_async": true,
            "class": "DreamProcessor"
          },
          {
            "name": "_dream_loop",
            "line": 525,
            "decorators": [],
            "args": [
              "self",
              "duration"
            ],
            "is_async": true,
            "class": "DreamProcessor"
          },
          {
            "name": "_update_current_phase",
            "line": 577,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DreamProcessor"
          },
          {
            "name": "_should_exit",
            "line": 603,
            "decorators": [],
            "args": [
              "self",
              "start_time",
              "end_time"
            ],
            "is_async": false,
            "class": "DreamProcessor"
          },
          {
            "name": "_record_phase_duration",
            "line": 615,
            "decorators": [],
            "args": [
              "self",
              "phase",
              "start_time"
            ],
            "is_async": false,
            "class": "DreamProcessor"
          },
          {
            "name": "_benchmarking_phase",
            "line": 627,
            "decorators": [],
            "args": [
              "self",
              "start_time",
              "end_time"
            ],
            "is_async": true,
            "class": "DreamProcessor"
          },
          {
            "name": "_exit_phase",
            "line": 658,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DreamProcessor"
          },
          {
            "name": "_recall_recent_ponder_questions",
            "line": 672,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DreamProcessor"
          },
          {
            "name": "_analyze_ponder_patterns",
            "line": 706,
            "decorators": [],
            "args": [
              "self",
              "questions"
            ],
            "is_async": false,
            "class": "DreamProcessor"
          },
          {
            "name": "_schedule_next_dream",
            "line": 741,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DreamProcessor"
          },
          {
            "name": "_process_incidents",
            "line": 778,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DreamProcessor"
          },
          {
            "name": "_process_behavioral_insights",
            "line": 847,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DreamProcessor"
          },
          {
            "name": "_plan_future_work",
            "line": 929,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DreamProcessor"
          },
          {
            "name": "_create_future_task",
            "line": 962,
            "decorators": [],
            "args": [
              "self",
              "description",
              "hours_ahead"
            ],
            "is_async": true,
            "class": "DreamProcessor"
          },
          {
            "name": "_run_single_benchmark",
            "line": 998,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DreamProcessor"
          },
          {
            "name": "_record_dream_session",
            "line": 1024,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DreamProcessor"
          },
          {
            "name": "_get_vibe_summary",
            "line": 1060,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DreamProcessor"
          },
          {
            "name": "_announce_dream_exit",
            "line": 1114,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DreamProcessor"
          },
          {
            "name": "get_dream_summary",
            "line": 1146,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DreamProcessor"
          },
          {
            "name": "initialize",
            "line": 1168,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DreamProcessor"
          },
          {
            "name": "cleanup",
            "line": 1174,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DreamProcessor"
          },
          {
            "name": "get_supported_states",
            "line": 1180,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DreamProcessor"
          },
          {
            "name": "can_process",
            "line": 1184,
            "decorators": [],
            "args": [
              "self",
              "state"
            ],
            "is_async": true,
            "class": "DreamProcessor"
          },
          {
            "name": "process",
            "line": 1188,
            "decorators": [],
            "args": [
              "self",
              "round_number"
            ],
            "is_async": true,
            "class": "DreamProcessor"
          },
          {
            "name": "should_enter_dream_state",
            "line": 1221,
            "decorators": [],
            "args": [
              "self",
              "idle_seconds",
              "min_idle_threshold"
            ],
            "is_async": false,
            "class": "DreamProcessor"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/processors/states/work_processor.py",
        "classes": [
          {
            "name": "WorkProcessor",
            "line": 26,
            "decorators": [],
            "bases": [
              "BaseProcessor"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 29,
                "decorators": [],
                "args": [
                  "self",
                  "config_accessor",
                  "thought_processor",
                  "action_dispatcher",
                  "services",
                  "startup_channel_id"
                ],
                "is_async": false,
                "class": "WorkProcessor"
              },
              {
                "name": "get_supported_states",
                "line": 62,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "WorkProcessor"
              },
              {
                "name": "can_process",
                "line": 66,
                "decorators": [],
                "args": [
                  "self",
                  "state"
                ],
                "is_async": true,
                "class": "WorkProcessor"
              },
              {
                "name": "process",
                "line": 70,
                "decorators": [],
                "args": [
                  "self",
                  "round_number"
                ],
                "is_async": true,
                "class": "WorkProcessor"
              },
              {
                "name": "_process_batch",
                "line": 143,
                "decorators": [],
                "args": [
                  "self",
                  "batch",
                  "round_number"
                ],
                "is_async": true,
                "class": "WorkProcessor"
              },
              {
                "name": "_process_single_thought",
                "line": 173,
                "decorators": [],
                "args": [
                  "self",
                  "item"
                ],
                "is_async": true,
                "class": "WorkProcessor"
              },
              {
                "name": "_dispatch_thought_result",
                "line": 177,
                "decorators": [],
                "args": [
                  "self",
                  "item",
                  "result"
                ],
                "is_async": true,
                "class": "WorkProcessor"
              },
              {
                "name": "_handle_idle_state",
                "line": 211,
                "decorators": [],
                "args": [
                  "self",
                  "round_number"
                ],
                "is_async": true,
                "class": "WorkProcessor"
              },
              {
                "name": "_mark_thought_failed",
                "line": 223,
                "decorators": [],
                "args": [
                  "self",
                  "thought_id",
                  "error"
                ],
                "is_async": false,
                "class": "WorkProcessor"
              },
              {
                "name": "get_idle_duration",
                "line": 231,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "WorkProcessor"
              },
              {
                "name": "should_transition_to_dream",
                "line": 236,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "WorkProcessor"
              },
              {
                "name": "start_processing",
                "line": 249,
                "decorators": [],
                "args": [
                  "self",
                  "num_rounds"
                ],
                "is_async": true,
                "class": "WorkProcessor"
              },
              {
                "name": "stop_processing",
                "line": 265,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "WorkProcessor"
              },
              {
                "name": "get_status",
                "line": 270,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "WorkProcessor"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 29,
            "decorators": [],
            "args": [
              "self",
              "config_accessor",
              "thought_processor",
              "action_dispatcher",
              "services",
              "startup_channel_id"
            ],
            "is_async": false,
            "class": "WorkProcessor"
          },
          {
            "name": "get_supported_states",
            "line": 62,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "WorkProcessor"
          },
          {
            "name": "can_process",
            "line": 66,
            "decorators": [],
            "args": [
              "self",
              "state"
            ],
            "is_async": true,
            "class": "WorkProcessor"
          },
          {
            "name": "process",
            "line": 70,
            "decorators": [],
            "args": [
              "self",
              "round_number"
            ],
            "is_async": true,
            "class": "WorkProcessor"
          },
          {
            "name": "_process_batch",
            "line": 143,
            "decorators": [],
            "args": [
              "self",
              "batch",
              "round_number"
            ],
            "is_async": true,
            "class": "WorkProcessor"
          },
          {
            "name": "_process_single_thought",
            "line": 173,
            "decorators": [],
            "args": [
              "self",
              "item"
            ],
            "is_async": true,
            "class": "WorkProcessor"
          },
          {
            "name": "_dispatch_thought_result",
            "line": 177,
            "decorators": [],
            "args": [
              "self",
              "item",
              "result"
            ],
            "is_async": true,
            "class": "WorkProcessor"
          },
          {
            "name": "_handle_idle_state",
            "line": 211,
            "decorators": [],
            "args": [
              "self",
              "round_number"
            ],
            "is_async": true,
            "class": "WorkProcessor"
          },
          {
            "name": "_mark_thought_failed",
            "line": 223,
            "decorators": [],
            "args": [
              "self",
              "thought_id",
              "error"
            ],
            "is_async": false,
            "class": "WorkProcessor"
          },
          {
            "name": "get_idle_duration",
            "line": 231,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "WorkProcessor"
          },
          {
            "name": "should_transition_to_dream",
            "line": 236,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "WorkProcessor"
          },
          {
            "name": "start_processing",
            "line": 249,
            "decorators": [],
            "args": [
              "self",
              "num_rounds"
            ],
            "is_async": true,
            "class": "WorkProcessor"
          },
          {
            "name": "stop_processing",
            "line": 265,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "WorkProcessor"
          },
          {
            "name": "get_status",
            "line": 270,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "WorkProcessor"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/processors/states/shutdown_processor.py",
        "classes": [
          {
            "name": "ShutdownProcessor",
            "line": 33,
            "decorators": [],
            "bases": [
              "BaseProcessor"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 39,
                "decorators": [],
                "args": [
                  "self",
                  "config_accessor",
                  "thought_processor",
                  "action_dispatcher",
                  "services",
                  "time_service",
                  "runtime",
                  "auth_service"
                ],
                "is_async": false,
                "class": "ShutdownProcessor"
              },
              {
                "name": "get_supported_states",
                "line": 65,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ShutdownProcessor"
              },
              {
                "name": "can_process",
                "line": 69,
                "decorators": [],
                "args": [
                  "self",
                  "state"
                ],
                "is_async": true,
                "class": "ShutdownProcessor"
              },
              {
                "name": "process",
                "line": 73,
                "decorators": [],
                "args": [
                  "self",
                  "round_number"
                ],
                "is_async": true,
                "class": "ShutdownProcessor"
              },
              {
                "name": "_process_shutdown",
                "line": 95,
                "decorators": [],
                "args": [
                  "self",
                  "round_number"
                ],
                "is_async": true,
                "class": "ShutdownProcessor"
              },
              {
                "name": "_create_shutdown_task",
                "line": 173,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ShutdownProcessor"
              },
              {
                "name": "_check_failure_reason",
                "line": 250,
                "decorators": [],
                "args": [
                  "self",
                  "task"
                ],
                "is_async": true,
                "class": "ShutdownProcessor"
              },
              {
                "name": "_process_shutdown_thoughts",
                "line": 277,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ShutdownProcessor"
              },
              {
                "name": "cleanup",
                "line": 341,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ShutdownProcessor"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 39,
            "decorators": [],
            "args": [
              "self",
              "config_accessor",
              "thought_processor",
              "action_dispatcher",
              "services",
              "time_service",
              "runtime",
              "auth_service"
            ],
            "is_async": false,
            "class": "ShutdownProcessor"
          },
          {
            "name": "get_supported_states",
            "line": 65,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ShutdownProcessor"
          },
          {
            "name": "can_process",
            "line": 69,
            "decorators": [],
            "args": [
              "self",
              "state"
            ],
            "is_async": true,
            "class": "ShutdownProcessor"
          },
          {
            "name": "process",
            "line": 73,
            "decorators": [],
            "args": [
              "self",
              "round_number"
            ],
            "is_async": true,
            "class": "ShutdownProcessor"
          },
          {
            "name": "_process_shutdown",
            "line": 95,
            "decorators": [],
            "args": [
              "self",
              "round_number"
            ],
            "is_async": true,
            "class": "ShutdownProcessor"
          },
          {
            "name": "_create_shutdown_task",
            "line": 173,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ShutdownProcessor"
          },
          {
            "name": "_check_failure_reason",
            "line": 250,
            "decorators": [],
            "args": [
              "self",
              "task"
            ],
            "is_async": true,
            "class": "ShutdownProcessor"
          },
          {
            "name": "_process_shutdown_thoughts",
            "line": 277,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ShutdownProcessor"
          },
          {
            "name": "cleanup",
            "line": 341,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ShutdownProcessor"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/processors/states/solitude_processor.py",
        "classes": [
          {
            "name": "SolitudeProcessor",
            "line": 24,
            "decorators": [],
            "bases": [
              "BaseProcessor"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 34,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "SolitudeProcessor"
              },
              {
                "name": "get_supported_states",
                "line": 52,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "SolitudeProcessor"
              },
              {
                "name": "can_process",
                "line": 56,
                "decorators": [],
                "args": [
                  "self",
                  "state"
                ],
                "is_async": true,
                "class": "SolitudeProcessor"
              },
              {
                "name": "process",
                "line": 60,
                "decorators": [],
                "args": [
                  "self",
                  "round_number"
                ],
                "is_async": true,
                "class": "SolitudeProcessor"
              },
              {
                "name": "_check_critical_tasks",
                "line": 116,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "SolitudeProcessor"
              },
              {
                "name": "_perform_maintenance",
                "line": 132,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "SolitudeProcessor"
              },
              {
                "name": "_reflect_and_learn",
                "line": 165,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "SolitudeProcessor"
              },
              {
                "name": "_check_exit_conditions",
                "line": 203,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "SolitudeProcessor"
              },
              {
                "name": "start_processing",
                "line": 232,
                "decorators": [],
                "args": [
                  "self",
                  "num_rounds"
                ],
                "is_async": true,
                "class": "SolitudeProcessor"
              },
              {
                "name": "stop_processing",
                "line": 249,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "SolitudeProcessor"
              },
              {
                "name": "get_status",
                "line": 254,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "SolitudeProcessor"
              },
              {
                "name": "_ready_to_exit_solitude",
                "line": 271,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "SolitudeProcessor"
              },
              {
                "name": "_get_solitude_duration_minutes",
                "line": 288,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "SolitudeProcessor"
              },
              {
                "name": "set_solitude_reason",
                "line": 294,
                "decorators": [],
                "args": [
                  "self",
                  "reason"
                ],
                "is_async": false,
                "class": "SolitudeProcessor"
              },
              {
                "name": "_initialize_time_service",
                "line": 300,
                "decorators": [],
                "args": [
                  "self",
                  "service_registry"
                ],
                "is_async": false,
                "class": "SolitudeProcessor"
              },
              {
                "name": "_get_current_time",
                "line": 313,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "SolitudeProcessor"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 34,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "SolitudeProcessor"
          },
          {
            "name": "get_supported_states",
            "line": 52,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "SolitudeProcessor"
          },
          {
            "name": "can_process",
            "line": 56,
            "decorators": [],
            "args": [
              "self",
              "state"
            ],
            "is_async": true,
            "class": "SolitudeProcessor"
          },
          {
            "name": "process",
            "line": 60,
            "decorators": [],
            "args": [
              "self",
              "round_number"
            ],
            "is_async": true,
            "class": "SolitudeProcessor"
          },
          {
            "name": "_check_critical_tasks",
            "line": 116,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "SolitudeProcessor"
          },
          {
            "name": "_perform_maintenance",
            "line": 132,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "SolitudeProcessor"
          },
          {
            "name": "_reflect_and_learn",
            "line": 165,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "SolitudeProcessor"
          },
          {
            "name": "_check_exit_conditions",
            "line": 203,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "SolitudeProcessor"
          },
          {
            "name": "start_processing",
            "line": 232,
            "decorators": [],
            "args": [
              "self",
              "num_rounds"
            ],
            "is_async": true,
            "class": "SolitudeProcessor"
          },
          {
            "name": "stop_processing",
            "line": 249,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "SolitudeProcessor"
          },
          {
            "name": "get_status",
            "line": 254,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "SolitudeProcessor"
          },
          {
            "name": "_ready_to_exit_solitude",
            "line": 271,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "SolitudeProcessor"
          },
          {
            "name": "_get_solitude_duration_minutes",
            "line": 288,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "SolitudeProcessor"
          },
          {
            "name": "set_solitude_reason",
            "line": 294,
            "decorators": [],
            "args": [
              "self",
              "reason"
            ],
            "is_async": false,
            "class": "SolitudeProcessor"
          },
          {
            "name": "_initialize_time_service",
            "line": 300,
            "decorators": [],
            "args": [
              "self",
              "service_registry"
            ],
            "is_async": false,
            "class": "SolitudeProcessor"
          },
          {
            "name": "_get_current_time",
            "line": 313,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "SolitudeProcessor"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/dma/action_selection/faculty_integration.py",
        "classes": [
          {
            "name": "FacultyIntegration",
            "line": 11,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 14,
                "decorators": [],
                "args": [
                  "self",
                  "faculties"
                ],
                "is_async": false,
                "class": "FacultyIntegration"
              },
              {
                "name": "apply_faculties_to_content",
                "line": 17,
                "decorators": [],
                "args": [
                  "self",
                  "content",
                  "context"
                ],
                "is_async": true,
                "class": "FacultyIntegration"
              },
              {
                "name": "build_faculty_insights_string",
                "line": 63,
                "decorators": [],
                "args": [
                  "self",
                  "faculty_results"
                ],
                "is_async": false,
                "class": "FacultyIntegration"
              },
              {
                "name": "enhance_evaluation_with_faculties",
                "line": 75,
                "decorators": [],
                "args": [
                  "self",
                  "original_thought",
                  "triaged_inputs",
                  "conscience_failure_context"
                ],
                "is_async": true,
                "class": "FacultyIntegration"
              },
              {
                "name": "add_faculty_metadata_to_result",
                "line": 146,
                "decorators": [],
                "args": [
                  "self",
                  "result",
                  "faculty_enhanced",
                  "recursive_evaluation"
                ],
                "is_async": false,
                "class": "FacultyIntegration"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 14,
            "decorators": [],
            "args": [
              "self",
              "faculties"
            ],
            "is_async": false,
            "class": "FacultyIntegration"
          },
          {
            "name": "apply_faculties_to_content",
            "line": 17,
            "decorators": [],
            "args": [
              "self",
              "content",
              "context"
            ],
            "is_async": true,
            "class": "FacultyIntegration"
          },
          {
            "name": "build_faculty_insights_string",
            "line": 63,
            "decorators": [],
            "args": [
              "self",
              "faculty_results"
            ],
            "is_async": false,
            "class": "FacultyIntegration"
          },
          {
            "name": "enhance_evaluation_with_faculties",
            "line": 75,
            "decorators": [],
            "args": [
              "self",
              "original_thought",
              "triaged_inputs",
              "conscience_failure_context"
            ],
            "is_async": true,
            "class": "FacultyIntegration"
          },
          {
            "name": "add_faculty_metadata_to_result",
            "line": 146,
            "decorators": [],
            "args": [
              "self",
              "result",
              "faculty_enhanced",
              "recursive_evaluation"
            ],
            "is_async": false,
            "class": "FacultyIntegration"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/dma/action_selection/context_builder.py",
        "classes": [
          {
            "name": "ActionSelectionContextBuilder",
            "line": 13,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 16,
                "decorators": [],
                "args": [
                  "self",
                  "prompts",
                  "service_registry",
                  "bus_manager"
                ],
                "is_async": false,
                "class": "ActionSelectionContextBuilder"
              },
              {
                "name": "build_main_user_content",
                "line": 22,
                "decorators": [],
                "args": [
                  "self",
                  "triaged_inputs",
                  "agent_name"
                ],
                "is_async": false,
                "class": "ActionSelectionContextBuilder"
              },
              {
                "name": "_get_permitted_actions",
                "line": 119,
                "decorators": [],
                "args": [
                  "self",
                  "triaged_inputs"
                ],
                "is_async": false,
                "class": "ActionSelectionContextBuilder"
              },
              {
                "name": "_get_available_tools_str",
                "line": 151,
                "decorators": [],
                "args": [
                  "self",
                  "permitted_actions"
                ],
                "is_async": false,
                "class": "ActionSelectionContextBuilder"
              },
              {
                "name": "_build_ethical_summary",
                "line": 173,
                "decorators": [],
                "args": [
                  "self",
                  "ethical_pdma_result"
                ],
                "is_async": false,
                "class": "ActionSelectionContextBuilder"
              },
              {
                "name": "_build_csdma_summary",
                "line": 187,
                "decorators": [],
                "args": [
                  "self",
                  "csdma_result"
                ],
                "is_async": false,
                "class": "ActionSelectionContextBuilder"
              },
              {
                "name": "_build_dsdma_summary",
                "line": 191,
                "decorators": [],
                "args": [
                  "self",
                  "dsdma_result"
                ],
                "is_async": false,
                "class": "ActionSelectionContextBuilder"
              },
              {
                "name": "_build_ponder_context",
                "line": 202,
                "decorators": [],
                "args": [
                  "self",
                  "original_thought",
                  "current_thought_depth"
                ],
                "is_async": false,
                "class": "ActionSelectionContextBuilder"
              },
              {
                "name": "_build_final_attempt_advisory",
                "line": 231,
                "decorators": [],
                "args": [
                  "self",
                  "current_thought_depth",
                  "max_rounds",
                  "agent_name"
                ],
                "is_async": false,
                "class": "ActionSelectionContextBuilder"
              },
              {
                "name": "_build_guidance_sections",
                "line": 257,
                "decorators": [],
                "args": [
                  "self",
                  "agent_name",
                  "permitted_actions"
                ],
                "is_async": false,
                "class": "ActionSelectionContextBuilder"
              },
              {
                "name": "_build_system_context",
                "line": 281,
                "decorators": [],
                "args": [
                  "self",
                  "processing_context_data"
                ],
                "is_async": false,
                "class": "ActionSelectionContextBuilder"
              },
              {
                "name": "_build_startup_guidance",
                "line": 301,
                "decorators": [],
                "args": [
                  "self",
                  "original_thought"
                ],
                "is_async": false,
                "class": "ActionSelectionContextBuilder"
              },
              {
                "name": "_get_reject_thought_guidance",
                "line": 311,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ActionSelectionContextBuilder"
              },
              {
                "name": "_get_agent_specific_prompt",
                "line": 315,
                "decorators": [],
                "args": [
                  "self",
                  "base_key",
                  "agent_name"
                ],
                "is_async": false,
                "class": "ActionSelectionContextBuilder"
              },
              {
                "name": "_get_dynamic_action_schemas",
                "line": 332,
                "decorators": [],
                "args": [
                  "self",
                  "permitted_actions"
                ],
                "is_async": false,
                "class": "ActionSelectionContextBuilder"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 16,
            "decorators": [],
            "args": [
              "self",
              "prompts",
              "service_registry",
              "bus_manager"
            ],
            "is_async": false,
            "class": "ActionSelectionContextBuilder"
          },
          {
            "name": "build_main_user_content",
            "line": 22,
            "decorators": [],
            "args": [
              "self",
              "triaged_inputs",
              "agent_name"
            ],
            "is_async": false,
            "class": "ActionSelectionContextBuilder"
          },
          {
            "name": "_get_permitted_actions",
            "line": 119,
            "decorators": [],
            "args": [
              "self",
              "triaged_inputs"
            ],
            "is_async": false,
            "class": "ActionSelectionContextBuilder"
          },
          {
            "name": "_get_available_tools_str",
            "line": 151,
            "decorators": [],
            "args": [
              "self",
              "permitted_actions"
            ],
            "is_async": false,
            "class": "ActionSelectionContextBuilder"
          },
          {
            "name": "_build_ethical_summary",
            "line": 173,
            "decorators": [],
            "args": [
              "self",
              "ethical_pdma_result"
            ],
            "is_async": false,
            "class": "ActionSelectionContextBuilder"
          },
          {
            "name": "_build_csdma_summary",
            "line": 187,
            "decorators": [],
            "args": [
              "self",
              "csdma_result"
            ],
            "is_async": false,
            "class": "ActionSelectionContextBuilder"
          },
          {
            "name": "_build_dsdma_summary",
            "line": 191,
            "decorators": [],
            "args": [
              "self",
              "dsdma_result"
            ],
            "is_async": false,
            "class": "ActionSelectionContextBuilder"
          },
          {
            "name": "_build_ponder_context",
            "line": 202,
            "decorators": [],
            "args": [
              "self",
              "original_thought",
              "current_thought_depth"
            ],
            "is_async": false,
            "class": "ActionSelectionContextBuilder"
          },
          {
            "name": "_build_final_attempt_advisory",
            "line": 231,
            "decorators": [],
            "args": [
              "self",
              "current_thought_depth",
              "max_rounds",
              "agent_name"
            ],
            "is_async": false,
            "class": "ActionSelectionContextBuilder"
          },
          {
            "name": "_build_guidance_sections",
            "line": 257,
            "decorators": [],
            "args": [
              "self",
              "agent_name",
              "permitted_actions"
            ],
            "is_async": false,
            "class": "ActionSelectionContextBuilder"
          },
          {
            "name": "_build_system_context",
            "line": 281,
            "decorators": [],
            "args": [
              "self",
              "processing_context_data"
            ],
            "is_async": false,
            "class": "ActionSelectionContextBuilder"
          },
          {
            "name": "_build_startup_guidance",
            "line": 301,
            "decorators": [],
            "args": [
              "self",
              "original_thought"
            ],
            "is_async": false,
            "class": "ActionSelectionContextBuilder"
          },
          {
            "name": "_get_reject_thought_guidance",
            "line": 311,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ActionSelectionContextBuilder"
          },
          {
            "name": "_get_agent_specific_prompt",
            "line": 315,
            "decorators": [],
            "args": [
              "self",
              "base_key",
              "agent_name"
            ],
            "is_async": false,
            "class": "ActionSelectionContextBuilder"
          },
          {
            "name": "_get_dynamic_action_schemas",
            "line": 332,
            "decorators": [],
            "args": [
              "self",
              "permitted_actions"
            ],
            "is_async": false,
            "class": "ActionSelectionContextBuilder"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/dma/action_selection/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/dma/action_selection/special_cases.py",
        "classes": [
          {
            "name": "ActionSelectionSpecialCases",
            "line": 11,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "handle_ponder_force",
                "line": 15,
                "decorators": [
                  "staticmethod"
                ],
                "args": [
                  "triaged_inputs"
                ],
                "is_async": true,
                "class": "ActionSelectionSpecialCases"
              },
              {
                "name": "handle_wakeup_task_speak_requirement",
                "line": 54,
                "decorators": [
                  "staticmethod"
                ],
                "args": [
                  "triaged_inputs"
                ],
                "is_async": true,
                "class": "ActionSelectionSpecialCases"
              },
              {
                "name": "_is_wakeup_task",
                "line": 90,
                "decorators": [
                  "staticmethod"
                ],
                "args": [
                  "task_id"
                ],
                "is_async": false,
                "class": "ActionSelectionSpecialCases"
              },
              {
                "name": "_task_has_successful_speak",
                "line": 112,
                "decorators": [
                  "staticmethod"
                ],
                "args": [
                  "task_id"
                ],
                "is_async": false,
                "class": "ActionSelectionSpecialCases"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "handle_ponder_force",
            "line": 15,
            "decorators": [
              "staticmethod"
            ],
            "args": [
              "triaged_inputs"
            ],
            "is_async": true,
            "class": "ActionSelectionSpecialCases"
          },
          {
            "name": "handle_wakeup_task_speak_requirement",
            "line": 54,
            "decorators": [
              "staticmethod"
            ],
            "args": [
              "triaged_inputs"
            ],
            "is_async": true,
            "class": "ActionSelectionSpecialCases"
          },
          {
            "name": "_is_wakeup_task",
            "line": 90,
            "decorators": [
              "staticmethod"
            ],
            "args": [
              "task_id"
            ],
            "is_async": false,
            "class": "ActionSelectionSpecialCases"
          },
          {
            "name": "_task_has_successful_speak",
            "line": 112,
            "decorators": [
              "staticmethod"
            ],
            "args": [
              "task_id"
            ],
            "is_async": false,
            "class": "ActionSelectionSpecialCases"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/dma/action_selection/action_instruction_generator.py",
        "classes": [
          {
            "name": "ActionInstructionGenerator",
            "line": 21,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 38,
                "decorators": [],
                "args": [
                  "self",
                  "service_registry",
                  "bus_manager"
                ],
                "is_async": false,
                "class": "ActionInstructionGenerator"
              },
              {
                "name": "generate_action_instructions",
                "line": 44,
                "decorators": [],
                "args": [
                  "self",
                  "available_actions"
                ],
                "is_async": false,
                "class": "ActionInstructionGenerator"
              },
              {
                "name": "_generate_schema_for_action",
                "line": 61,
                "decorators": [],
                "args": [
                  "self",
                  "action_type"
                ],
                "is_async": false,
                "class": "ActionInstructionGenerator"
              },
              {
                "name": "_format_memory_action_schema",
                "line": 118,
                "decorators": [],
                "args": [
                  "self",
                  "action_name"
                ],
                "is_async": false,
                "class": "ActionInstructionGenerator"
              },
              {
                "name": "_generate_tool_schema",
                "line": 139,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ActionInstructionGenerator"
              },
              {
                "name": "_get_default_tool_instructions",
                "line": 241,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ActionInstructionGenerator"
              },
              {
                "name": "_simplify_schema",
                "line": 252,
                "decorators": [],
                "args": [
                  "self",
                  "schema"
                ],
                "is_async": false,
                "class": "ActionInstructionGenerator"
              },
              {
                "name": "get_action_guidance",
                "line": 271,
                "decorators": [],
                "args": [
                  "self",
                  "action_type"
                ],
                "is_async": false,
                "class": "ActionInstructionGenerator"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 38,
            "decorators": [],
            "args": [
              "self",
              "service_registry",
              "bus_manager"
            ],
            "is_async": false,
            "class": "ActionInstructionGenerator"
          },
          {
            "name": "generate_action_instructions",
            "line": 44,
            "decorators": [],
            "args": [
              "self",
              "available_actions"
            ],
            "is_async": false,
            "class": "ActionInstructionGenerator"
          },
          {
            "name": "_generate_schema_for_action",
            "line": 61,
            "decorators": [],
            "args": [
              "self",
              "action_type"
            ],
            "is_async": false,
            "class": "ActionInstructionGenerator"
          },
          {
            "name": "_format_memory_action_schema",
            "line": 118,
            "decorators": [],
            "args": [
              "self",
              "action_name"
            ],
            "is_async": false,
            "class": "ActionInstructionGenerator"
          },
          {
            "name": "_generate_tool_schema",
            "line": 139,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ActionInstructionGenerator"
          },
          {
            "name": "_get_default_tool_instructions",
            "line": 241,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ActionInstructionGenerator"
          },
          {
            "name": "_simplify_schema",
            "line": 252,
            "decorators": [],
            "args": [
              "self",
              "schema"
            ],
            "is_async": false,
            "class": "ActionInstructionGenerator"
          },
          {
            "name": "get_action_guidance",
            "line": 271,
            "decorators": [],
            "args": [
              "self",
              "action_type"
            ],
            "is_async": false,
            "class": "ActionInstructionGenerator"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/services/infrastructure/resource_monitor.py",
        "classes": [
          {
            "name": "ResourceSignalBus",
            "line": 25,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 28,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ResourceSignalBus"
              },
              {
                "name": "register",
                "line": 36,
                "decorators": [],
                "args": [
                  "self",
                  "signal",
                  "handler"
                ],
                "is_async": false,
                "class": "ResourceSignalBus"
              },
              {
                "name": "emit",
                "line": 39,
                "decorators": [],
                "args": [
                  "self",
                  "signal",
                  "resource"
                ],
                "is_async": true,
                "class": "ResourceSignalBus"
              }
            ]
          },
          {
            "name": "ResourceMonitorService",
            "line": 46,
            "decorators": [],
            "bases": [
              "ResourceMonitorServiceProtocol",
              "ServiceProtocol"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 49,
                "decorators": [],
                "args": [
                  "self",
                  "budget",
                  "db_path",
                  "time_service",
                  "signal_bus"
                ],
                "is_async": false,
                "class": "ResourceMonitorService"
              },
              {
                "name": "start",
                "line": 62,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ResourceMonitorService"
              },
              {
                "name": "stop",
                "line": 67,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ResourceMonitorService"
              },
              {
                "name": "_monitor_loop",
                "line": 71,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ResourceMonitorService"
              },
              {
                "name": "_update_snapshot",
                "line": 81,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ResourceMonitorService"
              },
              {
                "name": "_check_limits",
                "line": 114,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ResourceMonitorService"
              },
              {
                "name": "_check_resource",
                "line": 126,
                "decorators": [],
                "args": [
                  "self",
                  "name",
                  "current_value"
                ],
                "is_async": true,
                "class": "ResourceMonitorService"
              },
              {
                "name": "_take_action",
                "line": 135,
                "decorators": [],
                "args": [
                  "self",
                  "resource",
                  "config",
                  "level"
                ],
                "is_async": true,
                "class": "ResourceMonitorService"
              },
              {
                "name": "record_tokens",
                "line": 152,
                "decorators": [],
                "args": [
                  "self",
                  "tokens"
                ],
                "is_async": true,
                "class": "ResourceMonitorService"
              },
              {
                "name": "check_available",
                "line": 156,
                "decorators": [],
                "args": [
                  "self",
                  "resource",
                  "amount"
                ],
                "is_async": true,
                "class": "ResourceMonitorService"
              },
              {
                "name": "_count_active_thoughts",
                "line": 165,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ResourceMonitorService"
              },
              {
                "name": "get_status",
                "line": 177,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ResourceMonitorService"
              },
              {
                "name": "is_healthy",
                "line": 196,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ResourceMonitorService"
              },
              {
                "name": "get_capabilities",
                "line": 200,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ResourceMonitorService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 28,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ResourceSignalBus"
          },
          {
            "name": "register",
            "line": 36,
            "decorators": [],
            "args": [
              "self",
              "signal",
              "handler"
            ],
            "is_async": false,
            "class": "ResourceSignalBus"
          },
          {
            "name": "emit",
            "line": 39,
            "decorators": [],
            "args": [
              "self",
              "signal",
              "resource"
            ],
            "is_async": true,
            "class": "ResourceSignalBus"
          },
          {
            "name": "__init__",
            "line": 49,
            "decorators": [],
            "args": [
              "self",
              "budget",
              "db_path",
              "time_service",
              "signal_bus"
            ],
            "is_async": false,
            "class": "ResourceMonitorService"
          },
          {
            "name": "start",
            "line": 62,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ResourceMonitorService"
          },
          {
            "name": "stop",
            "line": 67,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ResourceMonitorService"
          },
          {
            "name": "_monitor_loop",
            "line": 71,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ResourceMonitorService"
          },
          {
            "name": "_update_snapshot",
            "line": 81,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ResourceMonitorService"
          },
          {
            "name": "_check_limits",
            "line": 114,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ResourceMonitorService"
          },
          {
            "name": "_check_resource",
            "line": 126,
            "decorators": [],
            "args": [
              "self",
              "name",
              "current_value"
            ],
            "is_async": true,
            "class": "ResourceMonitorService"
          },
          {
            "name": "_take_action",
            "line": 135,
            "decorators": [],
            "args": [
              "self",
              "resource",
              "config",
              "level"
            ],
            "is_async": true,
            "class": "ResourceMonitorService"
          },
          {
            "name": "record_tokens",
            "line": 152,
            "decorators": [],
            "args": [
              "self",
              "tokens"
            ],
            "is_async": true,
            "class": "ResourceMonitorService"
          },
          {
            "name": "check_available",
            "line": 156,
            "decorators": [],
            "args": [
              "self",
              "resource",
              "amount"
            ],
            "is_async": true,
            "class": "ResourceMonitorService"
          },
          {
            "name": "_count_active_thoughts",
            "line": 165,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ResourceMonitorService"
          },
          {
            "name": "get_status",
            "line": 177,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ResourceMonitorService"
          },
          {
            "name": "is_healthy",
            "line": 196,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ResourceMonitorService"
          },
          {
            "name": "get_capabilities",
            "line": 200,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ResourceMonitorService"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/services/infrastructure/authentication.py",
        "classes": [
          {
            "name": "AuthenticationService",
            "line": 43,
            "decorators": [],
            "bases": [
              "BaseService",
              "AuthenticationServiceProtocol",
              "ServiceProtocol"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 46,
                "decorators": [],
                "args": [
                  "self",
                  "db_path",
                  "time_service",
                  "key_dir"
                ],
                "is_async": false,
                "class": "AuthenticationService"
              },
              {
                "name": "_encode_public_key",
                "line": 76,
                "decorators": [
                  "staticmethod"
                ],
                "args": [
                  "pubkey_bytes"
                ],
                "is_async": false,
                "class": "AuthenticationService"
              },
              {
                "name": "_decode_public_key",
                "line": 81,
                "decorators": [
                  "staticmethod"
                ],
                "args": [
                  "pubkey_str"
                ],
                "is_async": false,
                "class": "AuthenticationService"
              },
              {
                "name": "_get_or_create_gateway_secret",
                "line": 89,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AuthenticationService"
              },
              {
                "name": "_init_database",
                "line": 102,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AuthenticationService"
              },
              {
                "name": "get_wa",
                "line": 114,
                "decorators": [],
                "args": [
                  "self",
                  "wa_id"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "_get_wa_by_kid",
                "line": 151,
                "decorators": [],
                "args": [
                  "self",
                  "jwt_kid"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "get_wa_by_oauth",
                "line": 188,
                "decorators": [],
                "args": [
                  "self",
                  "provider",
                  "external_id"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "_get_wa_by_adapter",
                "line": 225,
                "decorators": [],
                "args": [
                  "self",
                  "adapter_id"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "_store_wa_certificate",
                "line": 262,
                "decorators": [],
                "args": [
                  "self",
                  "wa"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "_create_adapter_observer",
                "line": 300,
                "decorators": [],
                "args": [
                  "self",
                  "adapter_id",
                  "name"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "update_wa",
                "line": 329,
                "decorators": [],
                "args": [
                  "self",
                  "wa_id",
                  "updates"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "revoke_wa",
                "line": 366,
                "decorators": [],
                "args": [
                  "self",
                  "wa_id",
                  "reason"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "_list_all_was",
                "line": 379,
                "decorators": [],
                "args": [
                  "self",
                  "active_only"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "update_last_login",
                "line": 421,
                "decorators": [],
                "args": [
                  "self",
                  "wa_id"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "create_channel_token",
                "line": 427,
                "decorators": [],
                "args": [
                  "self",
                  "wa_id",
                  "channel_id",
                  "ttl"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "create_gateway_token",
                "line": 461,
                "decorators": [],
                "args": [
                  "self",
                  "wa",
                  "expires_hours"
                ],
                "is_async": false,
                "class": "AuthenticationService"
              },
              {
                "name": "_create_authority_token",
                "line": 484,
                "decorators": [],
                "args": [
                  "self",
                  "wa",
                  "private_key"
                ],
                "is_async": false,
                "class": "AuthenticationService"
              },
              {
                "name": "_verify_jwt_and_get_context",
                "line": 507,
                "decorators": [],
                "args": [
                  "self",
                  "token"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "generate_keypair",
                "line": 567,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AuthenticationService"
              },
              {
                "name": "sign_data",
                "line": 585,
                "decorators": [],
                "args": [
                  "self",
                  "data",
                  "private_key"
                ],
                "is_async": false,
                "class": "AuthenticationService"
              },
              {
                "name": "_verify_signature",
                "line": 591,
                "decorators": [],
                "args": [
                  "self",
                  "data",
                  "signature",
                  "public_key"
                ],
                "is_async": false,
                "class": "AuthenticationService"
              },
              {
                "name": "sign_task",
                "line": 603,
                "decorators": [],
                "args": [
                  "self",
                  "task",
                  "wa_id"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "verify_task_signature",
                "line": 644,
                "decorators": [],
                "args": [
                  "self",
                  "task"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "_generate_wa_id",
                "line": 682,
                "decorators": [],
                "args": [
                  "self",
                  "timestamp"
                ],
                "is_async": false,
                "class": "AuthenticationService"
              },
              {
                "name": "hash_password",
                "line": 688,
                "decorators": [],
                "args": [
                  "self",
                  "password"
                ],
                "is_async": false,
                "class": "AuthenticationService"
              },
              {
                "name": "_verify_password",
                "line": 700,
                "decorators": [],
                "args": [
                  "self",
                  "password",
                  "hash"
                ],
                "is_async": false,
                "class": "AuthenticationService"
              },
              {
                "name": "_generate_api_key",
                "line": 718,
                "decorators": [],
                "args": [
                  "self",
                  "wa_id"
                ],
                "is_async": false,
                "class": "AuthenticationService"
              },
              {
                "name": "_generate_wa_id",
                "line": 724,
                "decorators": [],
                "args": [
                  "self",
                  "timestamp"
                ],
                "is_async": false,
                "class": "AuthenticationService"
              },
              {
                "name": "authenticate",
                "line": 732,
                "decorators": [],
                "args": [
                  "self",
                  "token"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "create_token",
                "line": 764,
                "decorators": [],
                "args": [
                  "self",
                  "wa_id",
                  "token_type",
                  "ttl"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "verify_token",
                "line": 778,
                "decorators": [],
                "args": [
                  "self",
                  "token"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "create_wa",
                "line": 805,
                "decorators": [],
                "args": [
                  "self",
                  "name",
                  "email",
                  "scopes",
                  "role"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "list_was",
                "line": 836,
                "decorators": [],
                "args": [
                  "self",
                  "active_only"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "rotate_keys",
                "line": 840,
                "decorators": [],
                "args": [
                  "self",
                  "wa_id"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "_verify_token_internal",
                "line": 859,
                "decorators": [],
                "args": [
                  "self",
                  "token"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "_require_scope",
                "line": 877,
                "decorators": [],
                "args": [
                  "self",
                  "scope"
                ],
                "is_async": false,
                "class": "AuthenticationService"
              },
              {
                "name": "_require_wa_auth",
                "line": 934,
                "decorators": [],
                "args": [
                  "self",
                  "scope"
                ],
                "is_async": false,
                "class": "AuthenticationService"
              },
              {
                "name": "_get_adapter_token",
                "line": 1019,
                "decorators": [],
                "args": [
                  "self",
                  "adapter_id"
                ],
                "is_async": false,
                "class": "AuthenticationService"
              },
              {
                "name": "start",
                "line": 1025,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "stop",
                "line": 1030,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "_get_system_wa",
                "line": 1036,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "get_system_wa_id",
                "line": 1044,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "_create_system_wa_certificate",
                "line": 1049,
                "decorators": [],
                "args": [
                  "self",
                  "parent_wa_id"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "sign_task",
                "line": 1110,
                "decorators": [],
                "args": [
                  "self",
                  "task",
                  "wa_id"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "verify_task_signature",
                "line": 1149,
                "decorators": [],
                "args": [
                  "self",
                  "task"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "bootstrap_if_needed",
                "line": 1183,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "_create_channel_token_for_adapter",
                "line": 1217,
                "decorators": [],
                "args": [
                  "self",
                  "adapter_type",
                  "adapter_info"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "verify_token_sync",
                "line": 1251,
                "decorators": [],
                "args": [
                  "self",
                  "token"
                ],
                "is_async": false,
                "class": "AuthenticationService"
              },
              {
                "name": "get_capabilities",
                "line": 1280,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AuthenticationService"
              },
              {
                "name": "get_status",
                "line": 1301,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AuthenticationService"
              },
              {
                "name": "start",
                "line": 1328,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "stop",
                "line": 1334,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              },
              {
                "name": "is_healthy",
                "line": 1343,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "AuthenticationService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 46,
            "decorators": [],
            "args": [
              "self",
              "db_path",
              "time_service",
              "key_dir"
            ],
            "is_async": false,
            "class": "AuthenticationService"
          },
          {
            "name": "_encode_public_key",
            "line": 76,
            "decorators": [
              "staticmethod"
            ],
            "args": [
              "pubkey_bytes"
            ],
            "is_async": false,
            "class": "AuthenticationService"
          },
          {
            "name": "_decode_public_key",
            "line": 81,
            "decorators": [
              "staticmethod"
            ],
            "args": [
              "pubkey_str"
            ],
            "is_async": false,
            "class": "AuthenticationService"
          },
          {
            "name": "_get_or_create_gateway_secret",
            "line": 89,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AuthenticationService"
          },
          {
            "name": "_init_database",
            "line": 102,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AuthenticationService"
          },
          {
            "name": "get_wa",
            "line": 114,
            "decorators": [],
            "args": [
              "self",
              "wa_id"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "_get_wa_by_kid",
            "line": 151,
            "decorators": [],
            "args": [
              "self",
              "jwt_kid"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "get_wa_by_oauth",
            "line": 188,
            "decorators": [],
            "args": [
              "self",
              "provider",
              "external_id"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "_get_wa_by_adapter",
            "line": 225,
            "decorators": [],
            "args": [
              "self",
              "adapter_id"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "_store_wa_certificate",
            "line": 262,
            "decorators": [],
            "args": [
              "self",
              "wa"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "_create_adapter_observer",
            "line": 300,
            "decorators": [],
            "args": [
              "self",
              "adapter_id",
              "name"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "update_wa",
            "line": 329,
            "decorators": [],
            "args": [
              "self",
              "wa_id",
              "updates"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "revoke_wa",
            "line": 366,
            "decorators": [],
            "args": [
              "self",
              "wa_id",
              "reason"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "_list_all_was",
            "line": 379,
            "decorators": [],
            "args": [
              "self",
              "active_only"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "update_last_login",
            "line": 421,
            "decorators": [],
            "args": [
              "self",
              "wa_id"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "create_channel_token",
            "line": 427,
            "decorators": [],
            "args": [
              "self",
              "wa_id",
              "channel_id",
              "ttl"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "create_gateway_token",
            "line": 461,
            "decorators": [],
            "args": [
              "self",
              "wa",
              "expires_hours"
            ],
            "is_async": false,
            "class": "AuthenticationService"
          },
          {
            "name": "_create_authority_token",
            "line": 484,
            "decorators": [],
            "args": [
              "self",
              "wa",
              "private_key"
            ],
            "is_async": false,
            "class": "AuthenticationService"
          },
          {
            "name": "_verify_jwt_and_get_context",
            "line": 507,
            "decorators": [],
            "args": [
              "self",
              "token"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "generate_keypair",
            "line": 567,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AuthenticationService"
          },
          {
            "name": "sign_data",
            "line": 585,
            "decorators": [],
            "args": [
              "self",
              "data",
              "private_key"
            ],
            "is_async": false,
            "class": "AuthenticationService"
          },
          {
            "name": "_verify_signature",
            "line": 591,
            "decorators": [],
            "args": [
              "self",
              "data",
              "signature",
              "public_key"
            ],
            "is_async": false,
            "class": "AuthenticationService"
          },
          {
            "name": "sign_task",
            "line": 603,
            "decorators": [],
            "args": [
              "self",
              "task",
              "wa_id"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "verify_task_signature",
            "line": 644,
            "decorators": [],
            "args": [
              "self",
              "task"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "_generate_wa_id",
            "line": 682,
            "decorators": [],
            "args": [
              "self",
              "timestamp"
            ],
            "is_async": false,
            "class": "AuthenticationService"
          },
          {
            "name": "hash_password",
            "line": 688,
            "decorators": [],
            "args": [
              "self",
              "password"
            ],
            "is_async": false,
            "class": "AuthenticationService"
          },
          {
            "name": "_verify_password",
            "line": 700,
            "decorators": [],
            "args": [
              "self",
              "password",
              "hash"
            ],
            "is_async": false,
            "class": "AuthenticationService"
          },
          {
            "name": "_generate_api_key",
            "line": 718,
            "decorators": [],
            "args": [
              "self",
              "wa_id"
            ],
            "is_async": false,
            "class": "AuthenticationService"
          },
          {
            "name": "_generate_wa_id",
            "line": 724,
            "decorators": [],
            "args": [
              "self",
              "timestamp"
            ],
            "is_async": false,
            "class": "AuthenticationService"
          },
          {
            "name": "authenticate",
            "line": 732,
            "decorators": [],
            "args": [
              "self",
              "token"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "create_token",
            "line": 764,
            "decorators": [],
            "args": [
              "self",
              "wa_id",
              "token_type",
              "ttl"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "verify_token",
            "line": 778,
            "decorators": [],
            "args": [
              "self",
              "token"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "create_wa",
            "line": 805,
            "decorators": [],
            "args": [
              "self",
              "name",
              "email",
              "scopes",
              "role"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "list_was",
            "line": 836,
            "decorators": [],
            "args": [
              "self",
              "active_only"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "rotate_keys",
            "line": 840,
            "decorators": [],
            "args": [
              "self",
              "wa_id"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "_verify_token_internal",
            "line": 859,
            "decorators": [],
            "args": [
              "self",
              "token"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "_require_scope",
            "line": 877,
            "decorators": [],
            "args": [
              "self",
              "scope"
            ],
            "is_async": false,
            "class": "AuthenticationService"
          },
          {
            "name": "_require_wa_auth",
            "line": 934,
            "decorators": [],
            "args": [
              "self",
              "scope"
            ],
            "is_async": false,
            "class": "AuthenticationService"
          },
          {
            "name": "_get_adapter_token",
            "line": 1019,
            "decorators": [],
            "args": [
              "self",
              "adapter_id"
            ],
            "is_async": false,
            "class": "AuthenticationService"
          },
          {
            "name": "start",
            "line": 1025,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "stop",
            "line": 1030,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "_get_system_wa",
            "line": 1036,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "get_system_wa_id",
            "line": 1044,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "_create_system_wa_certificate",
            "line": 1049,
            "decorators": [],
            "args": [
              "self",
              "parent_wa_id"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "sign_task",
            "line": 1110,
            "decorators": [],
            "args": [
              "self",
              "task",
              "wa_id"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "verify_task_signature",
            "line": 1149,
            "decorators": [],
            "args": [
              "self",
              "task"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "bootstrap_if_needed",
            "line": 1183,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "_create_channel_token_for_adapter",
            "line": 1217,
            "decorators": [],
            "args": [
              "self",
              "adapter_type",
              "adapter_info"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "verify_token_sync",
            "line": 1251,
            "decorators": [],
            "args": [
              "self",
              "token"
            ],
            "is_async": false,
            "class": "AuthenticationService"
          },
          {
            "name": "get_capabilities",
            "line": 1280,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AuthenticationService"
          },
          {
            "name": "get_status",
            "line": 1301,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AuthenticationService"
          },
          {
            "name": "start",
            "line": 1328,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "stop",
            "line": 1334,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          },
          {
            "name": "is_healthy",
            "line": 1343,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "AuthenticationService"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/services/runtime/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/services/runtime/control_service.py",
        "classes": [
          {
            "name": "RuntimeControlService",
            "line": 35,
            "decorators": [],
            "bases": [
              "Service",
              "RuntimeControlServiceProtocol"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 38,
                "decorators": [],
                "args": [
                  "self",
                  "runtime",
                  "adapter_manager",
                  "config_manager",
                  "time_service"
                ],
                "is_async": false,
                "class": "RuntimeControlService"
              },
              {
                "name": "_get_config_manager",
                "line": 69,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "RuntimeControlService"
              },
              {
                "name": "_initialize",
                "line": 75,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              },
              {
                "name": "single_step",
                "line": 84,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              },
              {
                "name": "pause_processing",
                "line": 120,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              },
              {
                "name": "resume_processing",
                "line": 158,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              },
              {
                "name": "get_processor_queue_status",
                "line": 196,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              },
              {
                "name": "shutdown_runtime",
                "line": 234,
                "decorators": [],
                "args": [
                  "self",
                  "reason"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              },
              {
                "name": "handle_emergency_shutdown",
                "line": 273,
                "decorators": [],
                "args": [
                  "self",
                  "command"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              },
              {
                "name": "_verify_wa_signature",
                "line": 343,
                "decorators": [],
                "args": [
                  "self",
                  "command"
                ],
                "is_async": false,
                "class": "RuntimeControlService"
              },
              {
                "name": "_configure_kill_switch",
                "line": 388,
                "decorators": [],
                "args": [
                  "self",
                  "config"
                ],
                "is_async": false,
                "class": "RuntimeControlService"
              },
              {
                "name": "_extract_wa_id_from_pem",
                "line": 414,
                "decorators": [],
                "args": [
                  "self",
                  "key_pem"
                ],
                "is_async": false,
                "class": "RuntimeControlService"
              },
              {
                "name": "load_adapter",
                "line": 425,
                "decorators": [],
                "args": [
                  "self",
                  "adapter_type",
                  "adapter_id",
                  "config",
                  "auto_start"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              },
              {
                "name": "unload_adapter",
                "line": 457,
                "decorators": [],
                "args": [
                  "self",
                  "adapter_id",
                  "force"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              },
              {
                "name": "list_adapters",
                "line": 489,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              },
              {
                "name": "get_adapter_info",
                "line": 517,
                "decorators": [],
                "args": [
                  "self",
                  "adapter_id"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              },
              {
                "name": "get_config",
                "line": 544,
                "decorators": [],
                "args": [
                  "self",
                  "path",
                  "include_sensitive"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              },
              {
                "name": "update_config",
                "line": 556,
                "decorators": [],
                "args": [
                  "self",
                  "path",
                  "value",
                  "scope",
                  "validation_level",
                  "reason"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              },
              {
                "name": "validate_config",
                "line": 586,
                "decorators": [],
                "args": [
                  "self",
                  "config_data",
                  "config_path"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              },
              {
                "name": "backup_config",
                "line": 601,
                "decorators": [],
                "args": [
                  "self",
                  "backup_name"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              },
              {
                "name": "restore_config",
                "line": 621,
                "decorators": [],
                "args": [
                  "self",
                  "backup_name"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              },
              {
                "name": "list_config_backups",
                "line": 655,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              },
              {
                "name": "get_runtime_status",
                "line": 663,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              },
              {
                "name": "get_runtime_snapshot",
                "line": 699,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              },
              {
                "name": "_get_service_registry_info",
                "line": 731,
                "decorators": [],
                "args": [
                  "self",
                  "handler",
                  "service_type"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              },
              {
                "name": "_update_service_priority",
                "line": 747,
                "decorators": [],
                "args": [
                  "self",
                  "provider_name",
                  "new_priority",
                  "new_priority_group",
                  "new_strategy"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              },
              {
                "name": "_reset_circuit_breakers",
                "line": 897,
                "decorators": [],
                "args": [
                  "self",
                  "service_type"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              },
              {
                "name": "get_service_health_status",
                "line": 918,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              },
              {
                "name": "_get_service_selection_explanation",
                "line": 991,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              },
              {
                "name": "_record_event",
                "line": 1026,
                "decorators": [],
                "args": [
                  "self",
                  "category",
                  "action",
                  "success",
                  "result",
                  "error"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              },
              {
                "name": "get_events_history",
                "line": 1056,
                "decorators": [],
                "args": [
                  "self",
                  "limit"
                ],
                "is_async": false,
                "class": "RuntimeControlService"
              },
              {
                "name": "_reload_config",
                "line": 1061,
                "decorators": [],
                "args": [
                  "self",
                  "config_path"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              },
              {
                "name": "is_healthy",
                "line": 1082,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              },
              {
                "name": "get_capabilities",
                "line": 1097,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "RuntimeControlService"
              },
              {
                "name": "get_status",
                "line": 1120,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "RuntimeControlService"
              },
              {
                "name": "start",
                "line": 1136,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              },
              {
                "name": "stop",
                "line": 1141,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeControlService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 38,
            "decorators": [],
            "args": [
              "self",
              "runtime",
              "adapter_manager",
              "config_manager",
              "time_service"
            ],
            "is_async": false,
            "class": "RuntimeControlService"
          },
          {
            "name": "_get_config_manager",
            "line": 69,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "RuntimeControlService"
          },
          {
            "name": "_initialize",
            "line": 75,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          },
          {
            "name": "single_step",
            "line": 84,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          },
          {
            "name": "pause_processing",
            "line": 120,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          },
          {
            "name": "resume_processing",
            "line": 158,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          },
          {
            "name": "get_processor_queue_status",
            "line": 196,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          },
          {
            "name": "shutdown_runtime",
            "line": 234,
            "decorators": [],
            "args": [
              "self",
              "reason"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          },
          {
            "name": "handle_emergency_shutdown",
            "line": 273,
            "decorators": [],
            "args": [
              "self",
              "command"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          },
          {
            "name": "_verify_wa_signature",
            "line": 343,
            "decorators": [],
            "args": [
              "self",
              "command"
            ],
            "is_async": false,
            "class": "RuntimeControlService"
          },
          {
            "name": "_configure_kill_switch",
            "line": 388,
            "decorators": [],
            "args": [
              "self",
              "config"
            ],
            "is_async": false,
            "class": "RuntimeControlService"
          },
          {
            "name": "_extract_wa_id_from_pem",
            "line": 414,
            "decorators": [],
            "args": [
              "self",
              "key_pem"
            ],
            "is_async": false,
            "class": "RuntimeControlService"
          },
          {
            "name": "load_adapter",
            "line": 425,
            "decorators": [],
            "args": [
              "self",
              "adapter_type",
              "adapter_id",
              "config",
              "auto_start"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          },
          {
            "name": "unload_adapter",
            "line": 457,
            "decorators": [],
            "args": [
              "self",
              "adapter_id",
              "force"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          },
          {
            "name": "list_adapters",
            "line": 489,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          },
          {
            "name": "get_adapter_info",
            "line": 517,
            "decorators": [],
            "args": [
              "self",
              "adapter_id"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          },
          {
            "name": "get_config",
            "line": 544,
            "decorators": [],
            "args": [
              "self",
              "path",
              "include_sensitive"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          },
          {
            "name": "update_config",
            "line": 556,
            "decorators": [],
            "args": [
              "self",
              "path",
              "value",
              "scope",
              "validation_level",
              "reason"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          },
          {
            "name": "validate_config",
            "line": 586,
            "decorators": [],
            "args": [
              "self",
              "config_data",
              "config_path"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          },
          {
            "name": "backup_config",
            "line": 601,
            "decorators": [],
            "args": [
              "self",
              "backup_name"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          },
          {
            "name": "restore_config",
            "line": 621,
            "decorators": [],
            "args": [
              "self",
              "backup_name"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          },
          {
            "name": "list_config_backups",
            "line": 655,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          },
          {
            "name": "get_runtime_status",
            "line": 663,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          },
          {
            "name": "get_runtime_snapshot",
            "line": 699,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          },
          {
            "name": "_get_service_registry_info",
            "line": 731,
            "decorators": [],
            "args": [
              "self",
              "handler",
              "service_type"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          },
          {
            "name": "_update_service_priority",
            "line": 747,
            "decorators": [],
            "args": [
              "self",
              "provider_name",
              "new_priority",
              "new_priority_group",
              "new_strategy"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          },
          {
            "name": "_reset_circuit_breakers",
            "line": 897,
            "decorators": [],
            "args": [
              "self",
              "service_type"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          },
          {
            "name": "get_service_health_status",
            "line": 918,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          },
          {
            "name": "_get_service_selection_explanation",
            "line": 991,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          },
          {
            "name": "_record_event",
            "line": 1026,
            "decorators": [],
            "args": [
              "self",
              "category",
              "action",
              "success",
              "result",
              "error"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          },
          {
            "name": "get_events_history",
            "line": 1056,
            "decorators": [],
            "args": [
              "self",
              "limit"
            ],
            "is_async": false,
            "class": "RuntimeControlService"
          },
          {
            "name": "_reload_config",
            "line": 1061,
            "decorators": [],
            "args": [
              "self",
              "config_path"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          },
          {
            "name": "is_healthy",
            "line": 1082,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          },
          {
            "name": "get_capabilities",
            "line": 1097,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "RuntimeControlService"
          },
          {
            "name": "get_status",
            "line": 1120,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "RuntimeControlService"
          },
          {
            "name": "start",
            "line": 1136,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          },
          {
            "name": "stop",
            "line": 1141,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeControlService"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/services/runtime/llm_service.py",
        "classes": [
          {
            "name": "OpenAIConfig",
            "line": 17,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "OpenAICompatibleClient",
            "line": 33,
            "decorators": [],
            "bases": [
              "LLMServiceProtocol"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 36,
                "decorators": [],
                "args": [
                  "self",
                  "config",
                  "telemetry_service"
                ],
                "is_async": false,
                "class": "OpenAICompatibleClient"
              },
              {
                "name": "_start",
                "line": 92,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "OpenAICompatibleClient"
              },
              {
                "name": "_stop",
                "line": 99,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "OpenAICompatibleClient"
              },
              {
                "name": "_get_client",
                "line": 104,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "OpenAICompatibleClient"
              },
              {
                "name": "is_healthy",
                "line": 108,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "OpenAICompatibleClient"
              },
              {
                "name": "start",
                "line": 112,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "OpenAICompatibleClient"
              },
              {
                "name": "stop",
                "line": 116,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "OpenAICompatibleClient"
              },
              {
                "name": "get_capabilities",
                "line": 120,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "OpenAICompatibleClient"
              },
              {
                "name": "get_status",
                "line": 128,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "OpenAICompatibleClient"
              },
              {
                "name": "_extract_json_from_response",
                "line": 150,
                "decorators": [],
                "args": [
                  "self",
                  "raw"
                ],
                "is_async": false,
                "class": "OpenAICompatibleClient"
              },
              {
                "name": "_extract_json",
                "line": 155,
                "decorators": [
                  "classmethod"
                ],
                "args": [
                  "cls",
                  "raw"
                ],
                "is_async": false,
                "class": "OpenAICompatibleClient"
              },
              {
                "name": "call_llm_structured",
                "line": 187,
                "decorators": [],
                "args": [
                  "self",
                  "messages",
                  "response_model",
                  "max_tokens",
                  "temperature"
                ],
                "is_async": true,
                "class": "OpenAICompatibleClient"
              },
              {
                "name": "_get_status",
                "line": 263,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "OpenAICompatibleClient"
              },
              {
                "name": "_retry_with_backoff",
                "line": 285,
                "decorators": [],
                "args": [
                  "self",
                  "func"
                ],
                "is_async": true,
                "class": "OpenAICompatibleClient"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 36,
            "decorators": [],
            "args": [
              "self",
              "config",
              "telemetry_service"
            ],
            "is_async": false,
            "class": "OpenAICompatibleClient"
          },
          {
            "name": "_start",
            "line": 92,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "OpenAICompatibleClient"
          },
          {
            "name": "_stop",
            "line": 99,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "OpenAICompatibleClient"
          },
          {
            "name": "_get_client",
            "line": 104,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "OpenAICompatibleClient"
          },
          {
            "name": "is_healthy",
            "line": 108,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "OpenAICompatibleClient"
          },
          {
            "name": "start",
            "line": 112,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "OpenAICompatibleClient"
          },
          {
            "name": "stop",
            "line": 116,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "OpenAICompatibleClient"
          },
          {
            "name": "get_capabilities",
            "line": 120,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "OpenAICompatibleClient"
          },
          {
            "name": "get_status",
            "line": 128,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "OpenAICompatibleClient"
          },
          {
            "name": "_extract_json_from_response",
            "line": 150,
            "decorators": [],
            "args": [
              "self",
              "raw"
            ],
            "is_async": false,
            "class": "OpenAICompatibleClient"
          },
          {
            "name": "_extract_json",
            "line": 155,
            "decorators": [
              "classmethod"
            ],
            "args": [
              "cls",
              "raw"
            ],
            "is_async": false,
            "class": "OpenAICompatibleClient"
          },
          {
            "name": "call_llm_structured",
            "line": 187,
            "decorators": [],
            "args": [
              "self",
              "messages",
              "response_model",
              "max_tokens",
              "temperature"
            ],
            "is_async": true,
            "class": "OpenAICompatibleClient"
          },
          {
            "name": "_get_status",
            "line": 263,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "OpenAICompatibleClient"
          },
          {
            "name": "_retry_with_backoff",
            "line": 285,
            "decorators": [],
            "args": [
              "self",
              "func"
            ],
            "is_async": true,
            "class": "OpenAICompatibleClient"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/services/runtime/secrets_service.py",
        "classes": [
          {
            "name": "RecallSecretParams",
            "line": 24,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "UpdateSecretsFilterParams",
            "line": 30,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SecretsTools",
            "line": 40,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 48,
                "decorators": [],
                "args": [
                  "self",
                  "secrets_service",
                  "time_service"
                ],
                "is_async": false,
                "class": "SecretsTools"
              },
              {
                "name": "recall_secret",
                "line": 61,
                "decorators": [],
                "args": [
                  "self",
                  "params",
                  "requester_id",
                  "context"
                ],
                "is_async": true,
                "class": "SecretsTools"
              },
              {
                "name": "update_secrets_filter",
                "line": 189,
                "decorators": [],
                "args": [
                  "self",
                  "params",
                  "requester_id",
                  "context"
                ],
                "is_async": true,
                "class": "SecretsTools"
              },
              {
                "name": "list_secrets",
                "line": 320,
                "decorators": [],
                "args": [
                  "self",
                  "requester_id",
                  "include_sensitive",
                  "context"
                ],
                "is_async": true,
                "class": "SecretsTools"
              }
            ]
          }
        ],
        "functions": [
          {
            "name": "register_secrets_tools",
            "line": 385,
            "decorators": [],
            "args": [
              "registry",
              "secrets_service"
            ],
            "is_async": false
          }
        ],
        "methods": [
          {
            "name": "__init__",
            "line": 48,
            "decorators": [],
            "args": [
              "self",
              "secrets_service",
              "time_service"
            ],
            "is_async": false,
            "class": "SecretsTools"
          },
          {
            "name": "recall_secret",
            "line": 61,
            "decorators": [],
            "args": [
              "self",
              "params",
              "requester_id",
              "context"
            ],
            "is_async": true,
            "class": "SecretsTools"
          },
          {
            "name": "update_secrets_filter",
            "line": 189,
            "decorators": [],
            "args": [
              "self",
              "params",
              "requester_id",
              "context"
            ],
            "is_async": true,
            "class": "SecretsTools"
          },
          {
            "name": "list_secrets",
            "line": 320,
            "decorators": [],
            "args": [
              "self",
              "requester_id",
              "include_sensitive",
              "context"
            ],
            "is_async": true,
            "class": "SecretsTools"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/services/governance/visibility.py",
        "classes": [
          {
            "name": "VisibilityService",
            "line": 37,
            "decorators": [],
            "bases": [
              "VisibilityServiceProtocol",
              "ServiceProtocol"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 40,
                "decorators": [],
                "args": [
                  "self",
                  "bus_manager",
                  "time_service",
                  "db_path"
                ],
                "is_async": false,
                "class": "VisibilityService"
              },
              {
                "name": "start",
                "line": 48,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "VisibilityService"
              },
              {
                "name": "stop",
                "line": 54,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "VisibilityService"
              },
              {
                "name": "get_capabilities",
                "line": 58,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "VisibilityService"
              },
              {
                "name": "get_status",
                "line": 72,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "VisibilityService"
              },
              {
                "name": "is_healthy",
                "line": 88,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "VisibilityService"
              },
              {
                "name": "get_current_state",
                "line": 93,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "VisibilityService"
              },
              {
                "name": "get_reasoning_trace",
                "line": 153,
                "decorators": [],
                "args": [
                  "self",
                  "task_id"
                ],
                "is_async": true,
                "class": "VisibilityService"
              },
              {
                "name": "get_decision_history",
                "line": 246,
                "decorators": [],
                "args": [
                  "self",
                  "task_id"
                ],
                "is_async": true,
                "class": "VisibilityService"
              },
              {
                "name": "explain_action",
                "line": 325,
                "decorators": [],
                "args": [
                  "self",
                  "action_id"
                ],
                "is_async": true,
                "class": "VisibilityService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 40,
            "decorators": [],
            "args": [
              "self",
              "bus_manager",
              "time_service",
              "db_path"
            ],
            "is_async": false,
            "class": "VisibilityService"
          },
          {
            "name": "start",
            "line": 48,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "VisibilityService"
          },
          {
            "name": "stop",
            "line": 54,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "VisibilityService"
          },
          {
            "name": "get_capabilities",
            "line": 58,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "VisibilityService"
          },
          {
            "name": "get_status",
            "line": 72,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "VisibilityService"
          },
          {
            "name": "is_healthy",
            "line": 88,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "VisibilityService"
          },
          {
            "name": "get_current_state",
            "line": 93,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "VisibilityService"
          },
          {
            "name": "get_reasoning_trace",
            "line": 153,
            "decorators": [],
            "args": [
              "self",
              "task_id"
            ],
            "is_async": true,
            "class": "VisibilityService"
          },
          {
            "name": "get_decision_history",
            "line": 246,
            "decorators": [],
            "args": [
              "self",
              "task_id"
            ],
            "is_async": true,
            "class": "VisibilityService"
          },
          {
            "name": "explain_action",
            "line": 325,
            "decorators": [],
            "args": [
              "self",
              "action_id"
            ],
            "is_async": true,
            "class": "VisibilityService"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/services/governance/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/services/governance/filter.py",
        "classes": [
          {
            "name": "AdaptiveFilterService",
            "line": 28,
            "decorators": [],
            "bases": [
              "Service",
              "AdaptiveFilterServiceProtocol"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 31,
                "decorators": [],
                "args": [
                  "self",
                  "memory_service",
                  "time_service",
                  "llm_service",
                  "config_service"
                ],
                "is_async": false,
                "class": "AdaptiveFilterService"
              },
              {
                "name": "start",
                "line": 43,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "AdaptiveFilterService"
              },
              {
                "name": "stop",
                "line": 49,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "AdaptiveFilterService"
              },
              {
                "name": "_initialize",
                "line": 60,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "AdaptiveFilterService"
              },
              {
                "name": "_create_default_config",
                "line": 82,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AdaptiveFilterService"
              },
              {
                "name": "filter_message",
                "line": 180,
                "decorators": [],
                "args": [
                  "self",
                  "message",
                  "adapter_type",
                  "is_llm_response"
                ],
                "is_async": true,
                "class": "AdaptiveFilterService"
              },
              {
                "name": "_test_trigger",
                "line": 268,
                "decorators": [],
                "args": [
                  "self",
                  "trigger",
                  "content",
                  "message",
                  "adapter_type"
                ],
                "is_async": true,
                "class": "AdaptiveFilterService"
              },
              {
                "name": "_check_frequency",
                "line": 322,
                "decorators": [],
                "args": [
                  "self",
                  "user_id",
                  "count_threshold",
                  "time_window"
                ],
                "is_async": true,
                "class": "AdaptiveFilterService"
              },
              {
                "name": "_semantic_analysis",
                "line": 339,
                "decorators": [],
                "args": [
                  "self",
                  "content",
                  "pattern"
                ],
                "is_async": true,
                "class": "AdaptiveFilterService"
              },
              {
                "name": "_update_user_trust",
                "line": 345,
                "decorators": [],
                "args": [
                  "self",
                  "user_id",
                  "priority",
                  "triggered"
                ],
                "is_async": true,
                "class": "AdaptiveFilterService"
              },
              {
                "name": "_extract_content",
                "line": 370,
                "decorators": [],
                "args": [
                  "self",
                  "message",
                  "adapter_type"
                ],
                "is_async": false,
                "class": "AdaptiveFilterService"
              },
              {
                "name": "_extract_user_id",
                "line": 381,
                "decorators": [],
                "args": [
                  "self",
                  "message",
                  "adapter_type"
                ],
                "is_async": false,
                "class": "AdaptiveFilterService"
              },
              {
                "name": "_extract_channel_id",
                "line": 391,
                "decorators": [],
                "args": [
                  "self",
                  "message",
                  "adapter_type"
                ],
                "is_async": false,
                "class": "AdaptiveFilterService"
              },
              {
                "name": "_extract_message_id",
                "line": 399,
                "decorators": [],
                "args": [
                  "self",
                  "message",
                  "adapter_type"
                ],
                "is_async": false,
                "class": "AdaptiveFilterService"
              },
              {
                "name": "_is_direct_message",
                "line": 409,
                "decorators": [],
                "args": [
                  "self",
                  "message",
                  "adapter_type"
                ],
                "is_async": false,
                "class": "AdaptiveFilterService"
              },
              {
                "name": "_priority_value",
                "line": 427,
                "decorators": [],
                "args": [
                  "self",
                  "priority"
                ],
                "is_async": false,
                "class": "AdaptiveFilterService"
              },
              {
                "name": "_generate_reasoning",
                "line": 438,
                "decorators": [],
                "args": [
                  "self",
                  "triggered",
                  "priority",
                  "is_llm_response"
                ],
                "is_async": false,
                "class": "AdaptiveFilterService"
              },
              {
                "name": "_save_config",
                "line": 454,
                "decorators": [],
                "args": [
                  "self",
                  "reason"
                ],
                "is_async": true,
                "class": "AdaptiveFilterService"
              },
              {
                "name": "get_health",
                "line": 475,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "AdaptiveFilterService"
              },
              {
                "name": "add_filter_trigger",
                "line": 504,
                "decorators": [],
                "args": [
                  "self",
                  "trigger",
                  "trigger_list"
                ],
                "is_async": true,
                "class": "AdaptiveFilterService"
              },
              {
                "name": "remove_filter_trigger",
                "line": 526,
                "decorators": [],
                "args": [
                  "self",
                  "trigger_id"
                ],
                "is_async": true,
                "class": "AdaptiveFilterService"
              },
              {
                "name": "get_capabilities",
                "line": 548,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AdaptiveFilterService"
              },
              {
                "name": "get_status",
                "line": 564,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AdaptiveFilterService"
              },
              {
                "name": "is_healthy",
                "line": 582,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "AdaptiveFilterService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 31,
            "decorators": [],
            "args": [
              "self",
              "memory_service",
              "time_service",
              "llm_service",
              "config_service"
            ],
            "is_async": false,
            "class": "AdaptiveFilterService"
          },
          {
            "name": "start",
            "line": 43,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "AdaptiveFilterService"
          },
          {
            "name": "stop",
            "line": 49,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "AdaptiveFilterService"
          },
          {
            "name": "_initialize",
            "line": 60,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "AdaptiveFilterService"
          },
          {
            "name": "_create_default_config",
            "line": 82,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AdaptiveFilterService"
          },
          {
            "name": "filter_message",
            "line": 180,
            "decorators": [],
            "args": [
              "self",
              "message",
              "adapter_type",
              "is_llm_response"
            ],
            "is_async": true,
            "class": "AdaptiveFilterService"
          },
          {
            "name": "_test_trigger",
            "line": 268,
            "decorators": [],
            "args": [
              "self",
              "trigger",
              "content",
              "message",
              "adapter_type"
            ],
            "is_async": true,
            "class": "AdaptiveFilterService"
          },
          {
            "name": "_check_frequency",
            "line": 322,
            "decorators": [],
            "args": [
              "self",
              "user_id",
              "count_threshold",
              "time_window"
            ],
            "is_async": true,
            "class": "AdaptiveFilterService"
          },
          {
            "name": "_semantic_analysis",
            "line": 339,
            "decorators": [],
            "args": [
              "self",
              "content",
              "pattern"
            ],
            "is_async": true,
            "class": "AdaptiveFilterService"
          },
          {
            "name": "_update_user_trust",
            "line": 345,
            "decorators": [],
            "args": [
              "self",
              "user_id",
              "priority",
              "triggered"
            ],
            "is_async": true,
            "class": "AdaptiveFilterService"
          },
          {
            "name": "_extract_content",
            "line": 370,
            "decorators": [],
            "args": [
              "self",
              "message",
              "adapter_type"
            ],
            "is_async": false,
            "class": "AdaptiveFilterService"
          },
          {
            "name": "_extract_user_id",
            "line": 381,
            "decorators": [],
            "args": [
              "self",
              "message",
              "adapter_type"
            ],
            "is_async": false,
            "class": "AdaptiveFilterService"
          },
          {
            "name": "_extract_channel_id",
            "line": 391,
            "decorators": [],
            "args": [
              "self",
              "message",
              "adapter_type"
            ],
            "is_async": false,
            "class": "AdaptiveFilterService"
          },
          {
            "name": "_extract_message_id",
            "line": 399,
            "decorators": [],
            "args": [
              "self",
              "message",
              "adapter_type"
            ],
            "is_async": false,
            "class": "AdaptiveFilterService"
          },
          {
            "name": "_is_direct_message",
            "line": 409,
            "decorators": [],
            "args": [
              "self",
              "message",
              "adapter_type"
            ],
            "is_async": false,
            "class": "AdaptiveFilterService"
          },
          {
            "name": "_priority_value",
            "line": 427,
            "decorators": [],
            "args": [
              "self",
              "priority"
            ],
            "is_async": false,
            "class": "AdaptiveFilterService"
          },
          {
            "name": "_generate_reasoning",
            "line": 438,
            "decorators": [],
            "args": [
              "self",
              "triggered",
              "priority",
              "is_llm_response"
            ],
            "is_async": false,
            "class": "AdaptiveFilterService"
          },
          {
            "name": "_save_config",
            "line": 454,
            "decorators": [],
            "args": [
              "self",
              "reason"
            ],
            "is_async": true,
            "class": "AdaptiveFilterService"
          },
          {
            "name": "get_health",
            "line": 475,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "AdaptiveFilterService"
          },
          {
            "name": "add_filter_trigger",
            "line": 504,
            "decorators": [],
            "args": [
              "self",
              "trigger",
              "trigger_list"
            ],
            "is_async": true,
            "class": "AdaptiveFilterService"
          },
          {
            "name": "remove_filter_trigger",
            "line": 526,
            "decorators": [],
            "args": [
              "self",
              "trigger_id"
            ],
            "is_async": true,
            "class": "AdaptiveFilterService"
          },
          {
            "name": "get_capabilities",
            "line": 548,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AdaptiveFilterService"
          },
          {
            "name": "get_status",
            "line": 564,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AdaptiveFilterService"
          },
          {
            "name": "is_healthy",
            "line": 582,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "AdaptiveFilterService"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/services/governance/wise_authority.py",
        "classes": [
          {
            "name": "WiseAuthorityService",
            "line": 40,
            "decorators": [],
            "bases": [
              "Service",
              "WiseAuthorityServiceProtocol",
              "ServiceProtocol"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 51,
                "decorators": [],
                "args": [
                  "self",
                  "time_service",
                  "auth_service",
                  "db_path"
                ],
                "is_async": false,
                "class": "WiseAuthorityService"
              },
              {
                "name": "start",
                "line": 70,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "WiseAuthorityService"
              },
              {
                "name": "stop",
                "line": 84,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "WiseAuthorityService"
              },
              {
                "name": "get_capabilities",
                "line": 90,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "WiseAuthorityService"
              },
              {
                "name": "check_authorization",
                "line": 110,
                "decorators": [],
                "args": [
                  "self",
                  "wa_id",
                  "action",
                  "resource"
                ],
                "is_async": true,
                "class": "WiseAuthorityService"
              },
              {
                "name": "request_approval",
                "line": 136,
                "decorators": [],
                "args": [
                  "self",
                  "action",
                  "context"
                ],
                "is_async": true,
                "class": "WiseAuthorityService"
              },
              {
                "name": "grant_permission",
                "line": 174,
                "decorators": [],
                "args": [
                  "self",
                  "wa_id",
                  "permission",
                  "resource"
                ],
                "is_async": true,
                "class": "WiseAuthorityService"
              },
              {
                "name": "revoke_permission",
                "line": 188,
                "decorators": [],
                "args": [
                  "self",
                  "wa_id",
                  "permission",
                  "resource"
                ],
                "is_async": true,
                "class": "WiseAuthorityService"
              },
              {
                "name": "list_permissions",
                "line": 202,
                "decorators": [],
                "args": [
                  "self",
                  "wa_id"
                ],
                "is_async": true,
                "class": "WiseAuthorityService"
              },
              {
                "name": "send_deferral",
                "line": 250,
                "decorators": [],
                "args": [
                  "self",
                  "deferral"
                ],
                "is_async": true,
                "class": "WiseAuthorityService"
              },
              {
                "name": "get_pending_deferrals",
                "line": 279,
                "decorators": [],
                "args": [
                  "self",
                  "wa_id"
                ],
                "is_async": true,
                "class": "WiseAuthorityService"
              },
              {
                "name": "resolve_deferral",
                "line": 309,
                "decorators": [],
                "args": [
                  "self",
                  "deferral_id",
                  "response"
                ],
                "is_async": true,
                "class": "WiseAuthorityService"
              },
              {
                "name": "fetch_guidance",
                "line": 337,
                "decorators": [],
                "args": [
                  "self",
                  "context"
                ],
                "is_async": true,
                "class": "WiseAuthorityService"
              },
              {
                "name": "get_guidance",
                "line": 365,
                "decorators": [],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "WiseAuthorityService"
              },
              {
                "name": "get_status",
                "line": 406,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "WiseAuthorityService"
              },
              {
                "name": "is_healthy",
                "line": 425,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "WiseAuthorityService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 51,
            "decorators": [],
            "args": [
              "self",
              "time_service",
              "auth_service",
              "db_path"
            ],
            "is_async": false,
            "class": "WiseAuthorityService"
          },
          {
            "name": "start",
            "line": 70,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "WiseAuthorityService"
          },
          {
            "name": "stop",
            "line": 84,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "WiseAuthorityService"
          },
          {
            "name": "get_capabilities",
            "line": 90,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "WiseAuthorityService"
          },
          {
            "name": "check_authorization",
            "line": 110,
            "decorators": [],
            "args": [
              "self",
              "wa_id",
              "action",
              "resource"
            ],
            "is_async": true,
            "class": "WiseAuthorityService"
          },
          {
            "name": "request_approval",
            "line": 136,
            "decorators": [],
            "args": [
              "self",
              "action",
              "context"
            ],
            "is_async": true,
            "class": "WiseAuthorityService"
          },
          {
            "name": "grant_permission",
            "line": 174,
            "decorators": [],
            "args": [
              "self",
              "wa_id",
              "permission",
              "resource"
            ],
            "is_async": true,
            "class": "WiseAuthorityService"
          },
          {
            "name": "revoke_permission",
            "line": 188,
            "decorators": [],
            "args": [
              "self",
              "wa_id",
              "permission",
              "resource"
            ],
            "is_async": true,
            "class": "WiseAuthorityService"
          },
          {
            "name": "list_permissions",
            "line": 202,
            "decorators": [],
            "args": [
              "self",
              "wa_id"
            ],
            "is_async": true,
            "class": "WiseAuthorityService"
          },
          {
            "name": "send_deferral",
            "line": 250,
            "decorators": [],
            "args": [
              "self",
              "deferral"
            ],
            "is_async": true,
            "class": "WiseAuthorityService"
          },
          {
            "name": "get_pending_deferrals",
            "line": 279,
            "decorators": [],
            "args": [
              "self",
              "wa_id"
            ],
            "is_async": true,
            "class": "WiseAuthorityService"
          },
          {
            "name": "resolve_deferral",
            "line": 309,
            "decorators": [],
            "args": [
              "self",
              "deferral_id",
              "response"
            ],
            "is_async": true,
            "class": "WiseAuthorityService"
          },
          {
            "name": "fetch_guidance",
            "line": 337,
            "decorators": [],
            "args": [
              "self",
              "context"
            ],
            "is_async": true,
            "class": "WiseAuthorityService"
          },
          {
            "name": "get_guidance",
            "line": 365,
            "decorators": [],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "WiseAuthorityService"
          },
          {
            "name": "get_status",
            "line": 406,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "WiseAuthorityService"
          },
          {
            "name": "is_healthy",
            "line": 425,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "WiseAuthorityService"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/services/lifecycle/time.py",
        "classes": [
          {
            "name": "TimeService",
            "line": 18,
            "decorators": [],
            "bases": [
              "TimeServiceProtocol",
              "ServiceProtocol"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 21,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TimeService"
              },
              {
                "name": "start",
                "line": 26,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TimeService"
              },
              {
                "name": "stop",
                "line": 31,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TimeService"
              },
              {
                "name": "get_capabilities",
                "line": 35,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TimeService"
              },
              {
                "name": "get_status",
                "line": 45,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TimeService"
              },
              {
                "name": "is_healthy",
                "line": 58,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TimeService"
              },
              {
                "name": "now",
                "line": 62,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TimeService"
              },
              {
                "name": "now_iso",
                "line": 71,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TimeService"
              },
              {
                "name": "timestamp",
                "line": 80,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TimeService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 21,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TimeService"
          },
          {
            "name": "start",
            "line": 26,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TimeService"
          },
          {
            "name": "stop",
            "line": 31,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TimeService"
          },
          {
            "name": "get_capabilities",
            "line": 35,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TimeService"
          },
          {
            "name": "get_status",
            "line": 45,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TimeService"
          },
          {
            "name": "is_healthy",
            "line": 58,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TimeService"
          },
          {
            "name": "now",
            "line": 62,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TimeService"
          },
          {
            "name": "now_iso",
            "line": 71,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TimeService"
          },
          {
            "name": "timestamp",
            "line": 80,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TimeService"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/services/lifecycle/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/services/lifecycle/initialization.py",
        "classes": [
          {
            "name": "InitializationStep",
            "line": 25,
            "decorators": [
              "dataclass"
            ],
            "bases": [],
            "methods": []
          },
          {
            "name": "InitializationService",
            "line": 34,
            "decorators": [],
            "bases": [
              "InitializationServiceProtocol",
              "ServiceProtocol"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 37,
                "decorators": [],
                "args": [
                  "self",
                  "time_service"
                ],
                "is_async": false,
                "class": "InitializationService"
              },
              {
                "name": "start",
                "line": 48,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "InitializationService"
              },
              {
                "name": "stop",
                "line": 53,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "InitializationService"
              },
              {
                "name": "get_capabilities",
                "line": 58,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "InitializationService"
              },
              {
                "name": "get_status",
                "line": 73,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "InitializationService"
              },
              {
                "name": "is_healthy",
                "line": 94,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "InitializationService"
              },
              {
                "name": "register_step",
                "line": 98,
                "decorators": [],
                "args": [
                  "self",
                  "phase",
                  "name",
                  "handler",
                  "verifier",
                  "critical",
                  "timeout"
                ],
                "is_async": false,
                "class": "InitializationService"
              },
              {
                "name": "initialize",
                "line": 129,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "InitializationService"
              },
              {
                "name": "verify_initialization",
                "line": 173,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "InitializationService"
              },
              {
                "name": "_is_initialized",
                "line": 191,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "InitializationService"
              },
              {
                "name": "get_initialization_status",
                "line": 195,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "InitializationService"
              },
              {
                "name": "_execute_phase",
                "line": 211,
                "decorators": [],
                "args": [
                  "self",
                  "phase",
                  "steps"
                ],
                "is_async": true,
                "class": "InitializationService"
              },
              {
                "name": "_execute_step",
                "line": 229,
                "decorators": [],
                "args": [
                  "self",
                  "step"
                ],
                "is_async": true,
                "class": "InitializationService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 37,
            "decorators": [],
            "args": [
              "self",
              "time_service"
            ],
            "is_async": false,
            "class": "InitializationService"
          },
          {
            "name": "start",
            "line": 48,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "InitializationService"
          },
          {
            "name": "stop",
            "line": 53,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "InitializationService"
          },
          {
            "name": "get_capabilities",
            "line": 58,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "InitializationService"
          },
          {
            "name": "get_status",
            "line": 73,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "InitializationService"
          },
          {
            "name": "is_healthy",
            "line": 94,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "InitializationService"
          },
          {
            "name": "register_step",
            "line": 98,
            "decorators": [],
            "args": [
              "self",
              "phase",
              "name",
              "handler",
              "verifier",
              "critical",
              "timeout"
            ],
            "is_async": false,
            "class": "InitializationService"
          },
          {
            "name": "initialize",
            "line": 129,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "InitializationService"
          },
          {
            "name": "verify_initialization",
            "line": 173,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "InitializationService"
          },
          {
            "name": "_is_initialized",
            "line": 191,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "InitializationService"
          },
          {
            "name": "get_initialization_status",
            "line": 195,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "InitializationService"
          },
          {
            "name": "_execute_phase",
            "line": 211,
            "decorators": [],
            "args": [
              "self",
              "phase",
              "steps"
            ],
            "is_async": true,
            "class": "InitializationService"
          },
          {
            "name": "_execute_step",
            "line": 229,
            "decorators": [],
            "args": [
              "self",
              "step"
            ],
            "is_async": true,
            "class": "InitializationService"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/services/lifecycle/scheduler.py",
        "classes": [
          {
            "name": "TaskSchedulerService",
            "line": 45,
            "decorators": [],
            "bases": [
              "Service",
              "TaskSchedulerServiceProtocol"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 53,
                "decorators": [],
                "args": [
                  "self",
                  "db_path",
                  "time_service",
                  "check_interval_seconds"
                ],
                "is_async": false,
                "class": "TaskSchedulerService"
              },
              {
                "name": "start",
                "line": 68,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TaskSchedulerService"
              },
              {
                "name": "stop",
                "line": 82,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TaskSchedulerService"
              },
              {
                "name": "_load_active_tasks",
                "line": 92,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TaskSchedulerService"
              },
              {
                "name": "_create_scheduled_task",
                "line": 105,
                "decorators": [],
                "args": [
                  "self",
                  "task_id",
                  "name",
                  "goal_description",
                  "trigger_prompt",
                  "origin_thought_id",
                  "defer_until",
                  "schedule_cron"
                ],
                "is_async": false,
                "class": "TaskSchedulerService"
              },
              {
                "name": "_scheduler_loop",
                "line": 131,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TaskSchedulerService"
              },
              {
                "name": "_get_due_tasks",
                "line": 149,
                "decorators": [],
                "args": [
                  "self",
                  "current_time"
                ],
                "is_async": false,
                "class": "TaskSchedulerService"
              },
              {
                "name": "_is_task_due",
                "line": 159,
                "decorators": [],
                "args": [
                  "self",
                  "task",
                  "current_time"
                ],
                "is_async": false,
                "class": "TaskSchedulerService"
              },
              {
                "name": "_should_trigger_cron",
                "line": 176,
                "decorators": [],
                "args": [
                  "self",
                  "task",
                  "current_time"
                ],
                "is_async": false,
                "class": "TaskSchedulerService"
              },
              {
                "name": "_trigger_task",
                "line": 215,
                "decorators": [],
                "args": [
                  "self",
                  "task"
                ],
                "is_async": true,
                "class": "TaskSchedulerService"
              },
              {
                "name": "_update_task_triggered",
                "line": 255,
                "decorators": [],
                "args": [
                  "self",
                  "task"
                ],
                "is_async": true,
                "class": "TaskSchedulerService"
              },
              {
                "name": "_complete_task",
                "line": 275,
                "decorators": [],
                "args": [
                  "self",
                  "task"
                ],
                "is_async": true,
                "class": "TaskSchedulerService"
              },
              {
                "name": "schedule_task",
                "line": 282,
                "decorators": [],
                "args": [
                  "self",
                  "name",
                  "goal_description",
                  "trigger_prompt",
                  "origin_thought_id",
                  "defer_until",
                  "schedule_cron"
                ],
                "is_async": true,
                "class": "TaskSchedulerService"
              },
              {
                "name": "cancel_task",
                "line": 339,
                "decorators": [],
                "args": [
                  "self",
                  "task_id"
                ],
                "is_async": true,
                "class": "TaskSchedulerService"
              },
              {
                "name": "get_scheduled_tasks",
                "line": 358,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TaskSchedulerService"
              },
              {
                "name": "_defer_task",
                "line": 375,
                "decorators": [],
                "args": [
                  "self",
                  "task_id",
                  "defer_until",
                  "reason"
                ],
                "is_async": true,
                "class": "TaskSchedulerService"
              },
              {
                "name": "_handle_shutdown",
                "line": 406,
                "decorators": [],
                "args": [
                  "self",
                  "context"
                ],
                "is_async": true,
                "class": "TaskSchedulerService"
              },
              {
                "name": "get_capabilities",
                "line": 425,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TaskSchedulerService"
              },
              {
                "name": "get_status",
                "line": 440,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TaskSchedulerService"
              },
              {
                "name": "_validate_cron_expression",
                "line": 457,
                "decorators": [],
                "args": [
                  "self",
                  "cron_expr"
                ],
                "is_async": false,
                "class": "TaskSchedulerService"
              },
              {
                "name": "_get_next_cron_time",
                "line": 479,
                "decorators": [],
                "args": [
                  "self",
                  "cron_expr"
                ],
                "is_async": false,
                "class": "TaskSchedulerService"
              },
              {
                "name": "is_healthy",
                "line": 501,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TaskSchedulerService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 53,
            "decorators": [],
            "args": [
              "self",
              "db_path",
              "time_service",
              "check_interval_seconds"
            ],
            "is_async": false,
            "class": "TaskSchedulerService"
          },
          {
            "name": "start",
            "line": 68,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TaskSchedulerService"
          },
          {
            "name": "stop",
            "line": 82,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TaskSchedulerService"
          },
          {
            "name": "_load_active_tasks",
            "line": 92,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TaskSchedulerService"
          },
          {
            "name": "_create_scheduled_task",
            "line": 105,
            "decorators": [],
            "args": [
              "self",
              "task_id",
              "name",
              "goal_description",
              "trigger_prompt",
              "origin_thought_id",
              "defer_until",
              "schedule_cron"
            ],
            "is_async": false,
            "class": "TaskSchedulerService"
          },
          {
            "name": "_scheduler_loop",
            "line": 131,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TaskSchedulerService"
          },
          {
            "name": "_get_due_tasks",
            "line": 149,
            "decorators": [],
            "args": [
              "self",
              "current_time"
            ],
            "is_async": false,
            "class": "TaskSchedulerService"
          },
          {
            "name": "_is_task_due",
            "line": 159,
            "decorators": [],
            "args": [
              "self",
              "task",
              "current_time"
            ],
            "is_async": false,
            "class": "TaskSchedulerService"
          },
          {
            "name": "_should_trigger_cron",
            "line": 176,
            "decorators": [],
            "args": [
              "self",
              "task",
              "current_time"
            ],
            "is_async": false,
            "class": "TaskSchedulerService"
          },
          {
            "name": "_trigger_task",
            "line": 215,
            "decorators": [],
            "args": [
              "self",
              "task"
            ],
            "is_async": true,
            "class": "TaskSchedulerService"
          },
          {
            "name": "_update_task_triggered",
            "line": 255,
            "decorators": [],
            "args": [
              "self",
              "task"
            ],
            "is_async": true,
            "class": "TaskSchedulerService"
          },
          {
            "name": "_complete_task",
            "line": 275,
            "decorators": [],
            "args": [
              "self",
              "task"
            ],
            "is_async": true,
            "class": "TaskSchedulerService"
          },
          {
            "name": "schedule_task",
            "line": 282,
            "decorators": [],
            "args": [
              "self",
              "name",
              "goal_description",
              "trigger_prompt",
              "origin_thought_id",
              "defer_until",
              "schedule_cron"
            ],
            "is_async": true,
            "class": "TaskSchedulerService"
          },
          {
            "name": "cancel_task",
            "line": 339,
            "decorators": [],
            "args": [
              "self",
              "task_id"
            ],
            "is_async": true,
            "class": "TaskSchedulerService"
          },
          {
            "name": "get_scheduled_tasks",
            "line": 358,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TaskSchedulerService"
          },
          {
            "name": "_defer_task",
            "line": 375,
            "decorators": [],
            "args": [
              "self",
              "task_id",
              "defer_until",
              "reason"
            ],
            "is_async": true,
            "class": "TaskSchedulerService"
          },
          {
            "name": "_handle_shutdown",
            "line": 406,
            "decorators": [],
            "args": [
              "self",
              "context"
            ],
            "is_async": true,
            "class": "TaskSchedulerService"
          },
          {
            "name": "get_capabilities",
            "line": 425,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TaskSchedulerService"
          },
          {
            "name": "get_status",
            "line": 440,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TaskSchedulerService"
          },
          {
            "name": "_validate_cron_expression",
            "line": 457,
            "decorators": [],
            "args": [
              "self",
              "cron_expr"
            ],
            "is_async": false,
            "class": "TaskSchedulerService"
          },
          {
            "name": "_get_next_cron_time",
            "line": 479,
            "decorators": [],
            "args": [
              "self",
              "cron_expr"
            ],
            "is_async": false,
            "class": "TaskSchedulerService"
          },
          {
            "name": "is_healthy",
            "line": 501,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TaskSchedulerService"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/services/lifecycle/shutdown.py",
        "classes": [
          {
            "name": "ShutdownService",
            "line": 18,
            "decorators": [],
            "bases": [
              "ShutdownServiceProtocol",
              "ServiceProtocol"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 21,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ShutdownService"
              },
              {
                "name": "start",
                "line": 31,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ShutdownService"
              },
              {
                "name": "stop",
                "line": 42,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ShutdownService"
              },
              {
                "name": "get_capabilities",
                "line": 47,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ShutdownService"
              },
              {
                "name": "get_status",
                "line": 62,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ShutdownService"
              },
              {
                "name": "is_healthy",
                "line": 80,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ShutdownService"
              },
              {
                "name": "request_shutdown",
                "line": 84,
                "decorators": [],
                "args": [
                  "self",
                  "reason"
                ],
                "is_async": true,
                "class": "ShutdownService"
              },
              {
                "name": "_request_shutdown_sync",
                "line": 95,
                "decorators": [],
                "args": [
                  "self",
                  "reason"
                ],
                "is_async": false,
                "class": "ShutdownService"
              },
              {
                "name": "register_shutdown_handler",
                "line": 119,
                "decorators": [],
                "args": [
                  "self",
                  "handler"
                ],
                "is_async": false,
                "class": "ShutdownService"
              },
              {
                "name": "_register_async_shutdown_handler",
                "line": 130,
                "decorators": [],
                "args": [
                  "self",
                  "handler"
                ],
                "is_async": false,
                "class": "ShutdownService"
              },
              {
                "name": "is_shutdown_requested",
                "line": 141,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ShutdownService"
              },
              {
                "name": "_wait_for_shutdown",
                "line": 145,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ShutdownService"
              },
              {
                "name": "get_shutdown_reason",
                "line": 157,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ShutdownService"
              },
              {
                "name": "_execute_sync_handlers",
                "line": 161,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ShutdownService"
              },
              {
                "name": "_execute_async_handlers",
                "line": 173,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ShutdownService"
              },
              {
                "name": "wait_for_shutdown",
                "line": 188,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ShutdownService"
              },
              {
                "name": "wait_for_shutdown_async",
                "line": 194,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ShutdownService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 21,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ShutdownService"
          },
          {
            "name": "start",
            "line": 31,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ShutdownService"
          },
          {
            "name": "stop",
            "line": 42,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ShutdownService"
          },
          {
            "name": "get_capabilities",
            "line": 47,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ShutdownService"
          },
          {
            "name": "get_status",
            "line": 62,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ShutdownService"
          },
          {
            "name": "is_healthy",
            "line": 80,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ShutdownService"
          },
          {
            "name": "request_shutdown",
            "line": 84,
            "decorators": [],
            "args": [
              "self",
              "reason"
            ],
            "is_async": true,
            "class": "ShutdownService"
          },
          {
            "name": "_request_shutdown_sync",
            "line": 95,
            "decorators": [],
            "args": [
              "self",
              "reason"
            ],
            "is_async": false,
            "class": "ShutdownService"
          },
          {
            "name": "register_shutdown_handler",
            "line": 119,
            "decorators": [],
            "args": [
              "self",
              "handler"
            ],
            "is_async": false,
            "class": "ShutdownService"
          },
          {
            "name": "_register_async_shutdown_handler",
            "line": 130,
            "decorators": [],
            "args": [
              "self",
              "handler"
            ],
            "is_async": false,
            "class": "ShutdownService"
          },
          {
            "name": "is_shutdown_requested",
            "line": 141,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ShutdownService"
          },
          {
            "name": "_wait_for_shutdown",
            "line": 145,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ShutdownService"
          },
          {
            "name": "get_shutdown_reason",
            "line": 157,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ShutdownService"
          },
          {
            "name": "_execute_sync_handlers",
            "line": 161,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ShutdownService"
          },
          {
            "name": "_execute_async_handlers",
            "line": 173,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ShutdownService"
          },
          {
            "name": "wait_for_shutdown",
            "line": 188,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ShutdownService"
          },
          {
            "name": "wait_for_shutdown_async",
            "line": 194,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ShutdownService"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/services/memory_service/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/services/adaptation/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/services/adaptation/self_configuration.py",
        "classes": [
          {
            "name": "AdaptationState",
            "line": 45,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "AdaptationCycle",
            "line": 54,
            "decorators": [
              "dataclass"
            ],
            "bases": [],
            "methods": []
          },
          {
            "name": "SelfConfigurationService",
            "line": 66,
            "decorators": [],
            "bases": [
              "Service",
              "SelfConfigurationServiceProtocol",
              "ServiceProtocol"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 80,
                "decorators": [],
                "args": [
                  "self",
                  "time_service",
                  "memory_bus",
                  "variance_threshold",
                  "adaptation_interval_hours",
                  "stabilization_period_hours"
                ],
                "is_async": false,
                "class": "SelfConfigurationService"
              },
              {
                "name": "_set_service_registry",
                "line": 112,
                "decorators": [],
                "args": [
                  "self",
                  "registry"
                ],
                "is_async": false,
                "class": "SelfConfigurationService"
              },
              {
                "name": "_initialize_components",
                "line": 127,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "SelfConfigurationService"
              },
              {
                "name": "_initialize_identity_baseline",
                "line": 160,
                "decorators": [],
                "args": [
                  "self",
                  "identity"
                ],
                "is_async": true,
                "class": "SelfConfigurationService"
              },
              {
                "name": "_should_run_adaptation_cycle",
                "line": 191,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "SelfConfigurationService"
              },
              {
                "name": "_run_adaptation_cycle",
                "line": 216,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "SelfConfigurationService"
              },
              {
                "name": "_store_cycle_event",
                "line": 283,
                "decorators": [],
                "args": [
                  "self",
                  "event_type",
                  "data"
                ],
                "is_async": true,
                "class": "SelfConfigurationService"
              },
              {
                "name": "_store_cycle_summary",
                "line": 301,
                "decorators": [],
                "args": [
                  "self",
                  "cycle"
                ],
                "is_async": true,
                "class": "SelfConfigurationService"
              },
              {
                "name": "get_adaptation_status",
                "line": 328,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "SelfConfigurationService"
              },
              {
                "name": "resume_after_review",
                "line": 349,
                "decorators": [],
                "args": [
                  "self",
                  "review_outcome"
                ],
                "is_async": true,
                "class": "SelfConfigurationService"
              },
              {
                "name": "emergency_stop",
                "line": 382,
                "decorators": [],
                "args": [
                  "self",
                  "reason"
                ],
                "is_async": true,
                "class": "SelfConfigurationService"
              },
              {
                "name": "start",
                "line": 403,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "SelfConfigurationService"
              },
              {
                "name": "stop",
                "line": 415,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "SelfConfigurationService"
              },
              {
                "name": "is_healthy",
                "line": 432,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "SelfConfigurationService"
              },
              {
                "name": "get_capabilities",
                "line": 446,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "SelfConfigurationService"
              },
              {
                "name": "get_status",
                "line": 464,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "SelfConfigurationService"
              },
              {
                "name": "initialize_baseline",
                "line": 483,
                "decorators": [],
                "args": [
                  "self",
                  "identity"
                ],
                "is_async": true,
                "class": "SelfConfigurationService"
              },
              {
                "name": "analyze_observability_window",
                "line": 490,
                "decorators": [],
                "args": [
                  "self",
                  "window"
                ],
                "is_async": true,
                "class": "SelfConfigurationService"
              },
              {
                "name": "trigger_adaptation_cycle",
                "line": 542,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "SelfConfigurationService"
              },
              {
                "name": "get_pattern_library",
                "line": 561,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "SelfConfigurationService"
              },
              {
                "name": "measure_adaptation_effectiveness",
                "line": 599,
                "decorators": [],
                "args": [
                  "self",
                  "adaptation_id"
                ],
                "is_async": true,
                "class": "SelfConfigurationService"
              },
              {
                "name": "get_improvement_report",
                "line": 629,
                "decorators": [],
                "args": [
                  "self",
                  "period"
                ],
                "is_async": true,
                "class": "SelfConfigurationService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 80,
            "decorators": [],
            "args": [
              "self",
              "time_service",
              "memory_bus",
              "variance_threshold",
              "adaptation_interval_hours",
              "stabilization_period_hours"
            ],
            "is_async": false,
            "class": "SelfConfigurationService"
          },
          {
            "name": "_set_service_registry",
            "line": 112,
            "decorators": [],
            "args": [
              "self",
              "registry"
            ],
            "is_async": false,
            "class": "SelfConfigurationService"
          },
          {
            "name": "_initialize_components",
            "line": 127,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "SelfConfigurationService"
          },
          {
            "name": "_initialize_identity_baseline",
            "line": 160,
            "decorators": [],
            "args": [
              "self",
              "identity"
            ],
            "is_async": true,
            "class": "SelfConfigurationService"
          },
          {
            "name": "_should_run_adaptation_cycle",
            "line": 191,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "SelfConfigurationService"
          },
          {
            "name": "_run_adaptation_cycle",
            "line": 216,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "SelfConfigurationService"
          },
          {
            "name": "_store_cycle_event",
            "line": 283,
            "decorators": [],
            "args": [
              "self",
              "event_type",
              "data"
            ],
            "is_async": true,
            "class": "SelfConfigurationService"
          },
          {
            "name": "_store_cycle_summary",
            "line": 301,
            "decorators": [],
            "args": [
              "self",
              "cycle"
            ],
            "is_async": true,
            "class": "SelfConfigurationService"
          },
          {
            "name": "get_adaptation_status",
            "line": 328,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "SelfConfigurationService"
          },
          {
            "name": "resume_after_review",
            "line": 349,
            "decorators": [],
            "args": [
              "self",
              "review_outcome"
            ],
            "is_async": true,
            "class": "SelfConfigurationService"
          },
          {
            "name": "emergency_stop",
            "line": 382,
            "decorators": [],
            "args": [
              "self",
              "reason"
            ],
            "is_async": true,
            "class": "SelfConfigurationService"
          },
          {
            "name": "start",
            "line": 403,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "SelfConfigurationService"
          },
          {
            "name": "stop",
            "line": 415,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "SelfConfigurationService"
          },
          {
            "name": "is_healthy",
            "line": 432,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "SelfConfigurationService"
          },
          {
            "name": "get_capabilities",
            "line": 446,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "SelfConfigurationService"
          },
          {
            "name": "get_status",
            "line": 464,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "SelfConfigurationService"
          },
          {
            "name": "initialize_baseline",
            "line": 483,
            "decorators": [],
            "args": [
              "self",
              "identity"
            ],
            "is_async": true,
            "class": "SelfConfigurationService"
          },
          {
            "name": "analyze_observability_window",
            "line": 490,
            "decorators": [],
            "args": [
              "self",
              "window"
            ],
            "is_async": true,
            "class": "SelfConfigurationService"
          },
          {
            "name": "trigger_adaptation_cycle",
            "line": 542,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "SelfConfigurationService"
          },
          {
            "name": "get_pattern_library",
            "line": 561,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "SelfConfigurationService"
          },
          {
            "name": "measure_adaptation_effectiveness",
            "line": 599,
            "decorators": [],
            "args": [
              "self",
              "adaptation_id"
            ],
            "is_async": true,
            "class": "SelfConfigurationService"
          },
          {
            "name": "get_improvement_report",
            "line": 629,
            "decorators": [],
            "args": [
              "self",
              "period"
            ],
            "is_async": true,
            "class": "SelfConfigurationService"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/services/graph/base.py",
        "classes": [
          {
            "name": "BaseGraphService",
            "line": 22,
            "decorators": [],
            "bases": [
              "ABC",
              "GraphServiceProtocol"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 32,
                "decorators": [],
                "args": [
                  "self",
                  "memory_bus",
                  "time_service"
                ],
                "is_async": false,
                "class": "BaseGraphService"
              },
              {
                "name": "set_memory_bus",
                "line": 44,
                "decorators": [],
                "args": [
                  "self",
                  "memory_bus"
                ],
                "is_async": false,
                "class": "BaseGraphService"
              },
              {
                "name": "set_time_service",
                "line": 48,
                "decorators": [],
                "args": [
                  "self",
                  "time_service"
                ],
                "is_async": false,
                "class": "BaseGraphService"
              },
              {
                "name": "start",
                "line": 52,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "BaseGraphService"
              },
              {
                "name": "stop",
                "line": 57,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "BaseGraphService"
              },
              {
                "name": "get_capabilities",
                "line": 62,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "BaseGraphService"
              },
              {
                "name": "get_status",
                "line": 74,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "BaseGraphService"
              },
              {
                "name": "is_healthy",
                "line": 86,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "BaseGraphService"
              },
              {
                "name": "store_in_graph",
                "line": 90,
                "decorators": [],
                "args": [
                  "self",
                  "node"
                ],
                "is_async": true,
                "class": "BaseGraphService"
              },
              {
                "name": "query_graph",
                "line": 111,
                "decorators": [],
                "args": [
                  "self",
                  "query"
                ],
                "is_async": true,
                "class": "BaseGraphService"
              },
              {
                "name": "get_node_type",
                "line": 141,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "BaseGraphService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 32,
            "decorators": [],
            "args": [
              "self",
              "memory_bus",
              "time_service"
            ],
            "is_async": false,
            "class": "BaseGraphService"
          },
          {
            "name": "set_memory_bus",
            "line": 44,
            "decorators": [],
            "args": [
              "self",
              "memory_bus"
            ],
            "is_async": false,
            "class": "BaseGraphService"
          },
          {
            "name": "set_time_service",
            "line": 48,
            "decorators": [],
            "args": [
              "self",
              "time_service"
            ],
            "is_async": false,
            "class": "BaseGraphService"
          },
          {
            "name": "start",
            "line": 52,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "BaseGraphService"
          },
          {
            "name": "stop",
            "line": 57,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "BaseGraphService"
          },
          {
            "name": "get_capabilities",
            "line": 62,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "BaseGraphService"
          },
          {
            "name": "get_status",
            "line": 74,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "BaseGraphService"
          },
          {
            "name": "is_healthy",
            "line": 86,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "BaseGraphService"
          },
          {
            "name": "store_in_graph",
            "line": 90,
            "decorators": [],
            "args": [
              "self",
              "node"
            ],
            "is_async": true,
            "class": "BaseGraphService"
          },
          {
            "name": "query_graph",
            "line": 111,
            "decorators": [],
            "args": [
              "self",
              "query"
            ],
            "is_async": true,
            "class": "BaseGraphService"
          },
          {
            "name": "get_node_type",
            "line": 141,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "BaseGraphService"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/services/graph/incident_service.py",
        "classes": [
          {
            "name": "IncidentManagementService",
            "line": 33,
            "decorators": [],
            "bases": [
              "BaseGraphService"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 45,
                "decorators": [],
                "args": [
                  "self",
                  "memory_bus",
                  "time_service"
                ],
                "is_async": false,
                "class": "IncidentManagementService"
              },
              {
                "name": "_get_time_service",
                "line": 50,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "IncidentManagementService"
              },
              {
                "name": "process_recent_incidents",
                "line": 54,
                "decorators": [],
                "args": [
                  "self",
                  "hours"
                ],
                "is_async": true,
                "class": "IncidentManagementService"
              },
              {
                "name": "_get_recent_incidents",
                "line": 129,
                "decorators": [],
                "args": [
                  "self",
                  "cutoff_time"
                ],
                "is_async": true,
                "class": "IncidentManagementService"
              },
              {
                "name": "_detect_patterns",
                "line": 168,
                "decorators": [],
                "args": [
                  "self",
                  "incidents"
                ],
                "is_async": false,
                "class": "IncidentManagementService"
              },
              {
                "name": "_identify_problems",
                "line": 198,
                "decorators": [],
                "args": [
                  "self",
                  "patterns"
                ],
                "is_async": true,
                "class": "IncidentManagementService"
              },
              {
                "name": "_generate_recommendations",
                "line": 250,
                "decorators": [],
                "args": [
                  "self",
                  "patterns",
                  "problems"
                ],
                "is_async": false,
                "class": "IncidentManagementService"
              },
              {
                "name": "_group_by_similarity",
                "line": 305,
                "decorators": [],
                "args": [
                  "self",
                  "incidents"
                ],
                "is_async": false,
                "class": "IncidentManagementService"
              },
              {
                "name": "_detect_time_clusters",
                "line": 316,
                "decorators": [],
                "args": [
                  "self",
                  "incidents"
                ],
                "is_async": false,
                "class": "IncidentManagementService"
              },
              {
                "name": "_analyze_root_causes",
                "line": 342,
                "decorators": [],
                "args": [
                  "self",
                  "incidents"
                ],
                "is_async": false,
                "class": "IncidentManagementService"
              },
              {
                "name": "_create_problem_statement",
                "line": 368,
                "decorators": [],
                "args": [
                  "self",
                  "pattern_key",
                  "incidents"
                ],
                "is_async": false,
                "class": "IncidentManagementService"
              },
              {
                "name": "_suggest_fixes",
                "line": 380,
                "decorators": [],
                "args": [
                  "self",
                  "pattern_key",
                  "root_causes"
                ],
                "is_async": false,
                "class": "IncidentManagementService"
              },
              {
                "name": "_summarize_analysis",
                "line": 400,
                "decorators": [],
                "args": [
                  "self",
                  "incident_count",
                  "pattern_count",
                  "problem_count"
                ],
                "is_async": false,
                "class": "IncidentManagementService"
              },
              {
                "name": "_get_severity_breakdown",
                "line": 411,
                "decorators": [],
                "args": [
                  "self",
                  "incidents"
                ],
                "is_async": false,
                "class": "IncidentManagementService"
              },
              {
                "name": "_get_component_breakdown",
                "line": 418,
                "decorators": [],
                "args": [
                  "self",
                  "incidents"
                ],
                "is_async": false,
                "class": "IncidentManagementService"
              },
              {
                "name": "_get_time_distribution",
                "line": 425,
                "decorators": [],
                "args": [
                  "self",
                  "incidents"
                ],
                "is_async": false,
                "class": "IncidentManagementService"
              },
              {
                "name": "_create_no_incidents_insight",
                "line": 433,
                "decorators": [],
                "args": [
                  "self",
                  "current_time"
                ],
                "is_async": true,
                "class": "IncidentManagementService"
              },
              {
                "name": "_mark_incidents_analyzed",
                "line": 456,
                "decorators": [],
                "args": [
                  "self",
                  "incidents"
                ],
                "is_async": true,
                "class": "IncidentManagementService"
              },
              {
                "name": "_update_incident",
                "line": 462,
                "decorators": [],
                "args": [
                  "self",
                  "incident"
                ],
                "is_async": true,
                "class": "IncidentManagementService"
              },
              {
                "name": "get_node_type",
                "line": 474,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "IncidentManagementService"
              },
              {
                "name": "start",
                "line": 478,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "IncidentManagementService"
              },
              {
                "name": "stop",
                "line": 483,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "IncidentManagementService"
              },
              {
                "name": "get_capabilities",
                "line": 488,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "IncidentManagementService"
              },
              {
                "name": "get_status",
                "line": 506,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "IncidentManagementService"
              },
              {
                "name": "is_healthy",
                "line": 520,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "IncidentManagementService"
              },
              {
                "name": "_get_current_time",
                "line": 524,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "IncidentManagementService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 45,
            "decorators": [],
            "args": [
              "self",
              "memory_bus",
              "time_service"
            ],
            "is_async": false,
            "class": "IncidentManagementService"
          },
          {
            "name": "_get_time_service",
            "line": 50,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "IncidentManagementService"
          },
          {
            "name": "process_recent_incidents",
            "line": 54,
            "decorators": [],
            "args": [
              "self",
              "hours"
            ],
            "is_async": true,
            "class": "IncidentManagementService"
          },
          {
            "name": "_get_recent_incidents",
            "line": 129,
            "decorators": [],
            "args": [
              "self",
              "cutoff_time"
            ],
            "is_async": true,
            "class": "IncidentManagementService"
          },
          {
            "name": "_detect_patterns",
            "line": 168,
            "decorators": [],
            "args": [
              "self",
              "incidents"
            ],
            "is_async": false,
            "class": "IncidentManagementService"
          },
          {
            "name": "_identify_problems",
            "line": 198,
            "decorators": [],
            "args": [
              "self",
              "patterns"
            ],
            "is_async": true,
            "class": "IncidentManagementService"
          },
          {
            "name": "_generate_recommendations",
            "line": 250,
            "decorators": [],
            "args": [
              "self",
              "patterns",
              "problems"
            ],
            "is_async": false,
            "class": "IncidentManagementService"
          },
          {
            "name": "_group_by_similarity",
            "line": 305,
            "decorators": [],
            "args": [
              "self",
              "incidents"
            ],
            "is_async": false,
            "class": "IncidentManagementService"
          },
          {
            "name": "_detect_time_clusters",
            "line": 316,
            "decorators": [],
            "args": [
              "self",
              "incidents"
            ],
            "is_async": false,
            "class": "IncidentManagementService"
          },
          {
            "name": "_analyze_root_causes",
            "line": 342,
            "decorators": [],
            "args": [
              "self",
              "incidents"
            ],
            "is_async": false,
            "class": "IncidentManagementService"
          },
          {
            "name": "_create_problem_statement",
            "line": 368,
            "decorators": [],
            "args": [
              "self",
              "pattern_key",
              "incidents"
            ],
            "is_async": false,
            "class": "IncidentManagementService"
          },
          {
            "name": "_suggest_fixes",
            "line": 380,
            "decorators": [],
            "args": [
              "self",
              "pattern_key",
              "root_causes"
            ],
            "is_async": false,
            "class": "IncidentManagementService"
          },
          {
            "name": "_summarize_analysis",
            "line": 400,
            "decorators": [],
            "args": [
              "self",
              "incident_count",
              "pattern_count",
              "problem_count"
            ],
            "is_async": false,
            "class": "IncidentManagementService"
          },
          {
            "name": "_get_severity_breakdown",
            "line": 411,
            "decorators": [],
            "args": [
              "self",
              "incidents"
            ],
            "is_async": false,
            "class": "IncidentManagementService"
          },
          {
            "name": "_get_component_breakdown",
            "line": 418,
            "decorators": [],
            "args": [
              "self",
              "incidents"
            ],
            "is_async": false,
            "class": "IncidentManagementService"
          },
          {
            "name": "_get_time_distribution",
            "line": 425,
            "decorators": [],
            "args": [
              "self",
              "incidents"
            ],
            "is_async": false,
            "class": "IncidentManagementService"
          },
          {
            "name": "_create_no_incidents_insight",
            "line": 433,
            "decorators": [],
            "args": [
              "self",
              "current_time"
            ],
            "is_async": true,
            "class": "IncidentManagementService"
          },
          {
            "name": "_mark_incidents_analyzed",
            "line": 456,
            "decorators": [],
            "args": [
              "self",
              "incidents"
            ],
            "is_async": true,
            "class": "IncidentManagementService"
          },
          {
            "name": "_update_incident",
            "line": 462,
            "decorators": [],
            "args": [
              "self",
              "incident"
            ],
            "is_async": true,
            "class": "IncidentManagementService"
          },
          {
            "name": "get_node_type",
            "line": 474,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "IncidentManagementService"
          },
          {
            "name": "start",
            "line": 478,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "IncidentManagementService"
          },
          {
            "name": "stop",
            "line": 483,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "IncidentManagementService"
          },
          {
            "name": "get_capabilities",
            "line": 488,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "IncidentManagementService"
          },
          {
            "name": "get_status",
            "line": 506,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "IncidentManagementService"
          },
          {
            "name": "is_healthy",
            "line": 520,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "IncidentManagementService"
          },
          {
            "name": "_get_current_time",
            "line": 524,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "IncidentManagementService"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/services/graph/audit_service.py",
        "classes": [
          {
            "name": "GraphAuditService",
            "line": 52,
            "decorators": [],
            "bases": [
              "AuditServiceProtocol",
              "GraphServiceProtocol",
              "ServiceProtocol"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 64,
                "decorators": [],
                "args": [
                  "self",
                  "memory_bus",
                  "time_service",
                  "export_path",
                  "export_format",
                  "enable_hash_chain",
                  "db_path",
                  "key_path",
                  "retention_days",
                  "cache_size"
                ],
                "is_async": false,
                "class": "GraphAuditService"
              },
              {
                "name": "set_service_registry",
                "line": 126,
                "decorators": [],
                "args": [
                  "self",
                  "registry"
                ],
                "is_async": false,
                "class": "GraphAuditService"
              },
              {
                "name": "start",
                "line": 136,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "GraphAuditService"
              },
              {
                "name": "stop",
                "line": 154,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "GraphAuditService"
              },
              {
                "name": "log_action",
                "line": 192,
                "decorators": [],
                "args": [
                  "self",
                  "action_type",
                  "context",
                  "outcome"
                ],
                "is_async": true,
                "class": "GraphAuditService"
              },
              {
                "name": "log_event",
                "line": 234,
                "decorators": [],
                "args": [
                  "self",
                  "event_type",
                  "event_data"
                ],
                "is_async": true,
                "class": "GraphAuditService"
              },
              {
                "name": "log_conscience_event",
                "line": 303,
                "decorators": [],
                "args": [
                  "self",
                  "conscience_name",
                  "action_type",
                  "result"
                ],
                "is_async": true,
                "class": "GraphAuditService"
              },
              {
                "name": "get_audit_trail",
                "line": 330,
                "decorators": [],
                "args": [
                  "self",
                  "entity_id",
                  "limit"
                ],
                "is_async": true,
                "class": "GraphAuditService"
              },
              {
                "name": "query_audit_trail",
                "line": 375,
                "decorators": [],
                "args": [
                  "self",
                  "start_time",
                  "end_time",
                  "action_types",
                  "thought_id",
                  "task_id",
                  "limit"
                ],
                "is_async": true,
                "class": "GraphAuditService"
              },
              {
                "name": "verify_audit_integrity",
                "line": 422,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "GraphAuditService"
              },
              {
                "name": "get_verification_report",
                "line": 472,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "GraphAuditService"
              },
              {
                "name": "export_audit_data",
                "line": 507,
                "decorators": [],
                "args": [
                  "self",
                  "start_time",
                  "end_time",
                  "format"
                ],
                "is_async": true,
                "class": "GraphAuditService"
              },
              {
                "name": "store_in_graph",
                "line": 541,
                "decorators": [],
                "args": [
                  "self",
                  "node"
                ],
                "is_async": true,
                "class": "GraphAuditService"
              },
              {
                "name": "query_graph",
                "line": 548,
                "decorators": [],
                "args": [
                  "self",
                  "query"
                ],
                "is_async": true,
                "class": "GraphAuditService"
              },
              {
                "name": "get_node_type",
                "line": 587,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "GraphAuditService"
              },
              {
                "name": "get_capabilities",
                "line": 593,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "GraphAuditService"
              },
              {
                "name": "get_status",
                "line": 607,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "GraphAuditService"
              },
              {
                "name": "is_healthy",
                "line": 621,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "GraphAuditService"
              },
              {
                "name": "_store_entry_in_graph",
                "line": 627,
                "decorators": [],
                "args": [
                  "self",
                  "entry",
                  "action_type"
                ],
                "is_async": true,
                "class": "GraphAuditService"
              },
              {
                "name": "_initialize_hash_chain",
                "line": 673,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "GraphAuditService"
              },
              {
                "name": "_init_components_sync",
                "line": 705,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "GraphAuditService"
              },
              {
                "name": "_init_database",
                "line": 717,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "GraphAuditService"
              },
              {
                "name": "_add_to_hash_chain",
                "line": 773,
                "decorators": [],
                "args": [
                  "self",
                  "entry"
                ],
                "is_async": true,
                "class": "GraphAuditService"
              },
              {
                "name": "_cache_entry",
                "line": 824,
                "decorators": [],
                "args": [
                  "self",
                  "entry"
                ],
                "is_async": false,
                "class": "GraphAuditService"
              },
              {
                "name": "_export_worker",
                "line": 830,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "GraphAuditService"
              },
              {
                "name": "_flush_exports",
                "line": 842,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "GraphAuditService"
              },
              {
                "name": "_export_jsonl",
                "line": 859,
                "decorators": [],
                "args": [
                  "self",
                  "entries",
                  "path"
                ],
                "is_async": true,
                "class": "GraphAuditService"
              },
              {
                "name": "_export_csv",
                "line": 868,
                "decorators": [],
                "args": [
                  "self",
                  "entries",
                  "path"
                ],
                "is_async": true,
                "class": "GraphAuditService"
              },
              {
                "name": "_export_sqlite",
                "line": 898,
                "decorators": [],
                "args": [
                  "self",
                  "entries",
                  "path"
                ],
                "is_async": true,
                "class": "GraphAuditService"
              },
              {
                "name": "_get_severity",
                "line": 938,
                "decorators": [],
                "args": [
                  "self",
                  "action"
                ],
                "is_async": false,
                "class": "GraphAuditService"
              },
              {
                "name": "_calculate_hours",
                "line": 947,
                "decorators": [],
                "args": [
                  "self",
                  "start_time",
                  "end_time"
                ],
                "is_async": false,
                "class": "GraphAuditService"
              },
              {
                "name": "_matches_filters",
                "line": 960,
                "decorators": [],
                "args": [
                  "self",
                  "data",
                  "start_time",
                  "end_time",
                  "action_types",
                  "thought_id",
                  "task_id"
                ],
                "is_async": false,
                "class": "GraphAuditService"
              },
              {
                "name": "_tsdb_to_audit_entry",
                "line": 996,
                "decorators": [],
                "args": [
                  "self",
                  "data"
                ],
                "is_async": false,
                "class": "GraphAuditService"
              },
              {
                "name": "_convert_timeseries_to_entries",
                "line": 1058,
                "decorators": [],
                "args": [
                  "self",
                  "timeseries_data",
                  "entity_id"
                ],
                "is_async": false,
                "class": "GraphAuditService"
              },
              {
                "name": "query_events",
                "line": 1080,
                "decorators": [],
                "args": [
                  "self",
                  "event_type",
                  "start_time",
                  "end_time",
                  "limit"
                ],
                "is_async": true,
                "class": "GraphAuditService"
              },
              {
                "name": "get_event_by_id",
                "line": 1109,
                "decorators": [],
                "args": [
                  "self",
                  "event_id"
                ],
                "is_async": true,
                "class": "GraphAuditService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 64,
            "decorators": [],
            "args": [
              "self",
              "memory_bus",
              "time_service",
              "export_path",
              "export_format",
              "enable_hash_chain",
              "db_path",
              "key_path",
              "retention_days",
              "cache_size"
            ],
            "is_async": false,
            "class": "GraphAuditService"
          },
          {
            "name": "set_service_registry",
            "line": 126,
            "decorators": [],
            "args": [
              "self",
              "registry"
            ],
            "is_async": false,
            "class": "GraphAuditService"
          },
          {
            "name": "start",
            "line": 136,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "GraphAuditService"
          },
          {
            "name": "stop",
            "line": 154,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "GraphAuditService"
          },
          {
            "name": "log_action",
            "line": 192,
            "decorators": [],
            "args": [
              "self",
              "action_type",
              "context",
              "outcome"
            ],
            "is_async": true,
            "class": "GraphAuditService"
          },
          {
            "name": "log_event",
            "line": 234,
            "decorators": [],
            "args": [
              "self",
              "event_type",
              "event_data"
            ],
            "is_async": true,
            "class": "GraphAuditService"
          },
          {
            "name": "log_conscience_event",
            "line": 303,
            "decorators": [],
            "args": [
              "self",
              "conscience_name",
              "action_type",
              "result"
            ],
            "is_async": true,
            "class": "GraphAuditService"
          },
          {
            "name": "get_audit_trail",
            "line": 330,
            "decorators": [],
            "args": [
              "self",
              "entity_id",
              "limit"
            ],
            "is_async": true,
            "class": "GraphAuditService"
          },
          {
            "name": "query_audit_trail",
            "line": 375,
            "decorators": [],
            "args": [
              "self",
              "start_time",
              "end_time",
              "action_types",
              "thought_id",
              "task_id",
              "limit"
            ],
            "is_async": true,
            "class": "GraphAuditService"
          },
          {
            "name": "verify_audit_integrity",
            "line": 422,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "GraphAuditService"
          },
          {
            "name": "get_verification_report",
            "line": 472,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "GraphAuditService"
          },
          {
            "name": "export_audit_data",
            "line": 507,
            "decorators": [],
            "args": [
              "self",
              "start_time",
              "end_time",
              "format"
            ],
            "is_async": true,
            "class": "GraphAuditService"
          },
          {
            "name": "store_in_graph",
            "line": 541,
            "decorators": [],
            "args": [
              "self",
              "node"
            ],
            "is_async": true,
            "class": "GraphAuditService"
          },
          {
            "name": "query_graph",
            "line": 548,
            "decorators": [],
            "args": [
              "self",
              "query"
            ],
            "is_async": true,
            "class": "GraphAuditService"
          },
          {
            "name": "get_node_type",
            "line": 587,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "GraphAuditService"
          },
          {
            "name": "get_capabilities",
            "line": 593,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "GraphAuditService"
          },
          {
            "name": "get_status",
            "line": 607,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "GraphAuditService"
          },
          {
            "name": "is_healthy",
            "line": 621,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "GraphAuditService"
          },
          {
            "name": "_store_entry_in_graph",
            "line": 627,
            "decorators": [],
            "args": [
              "self",
              "entry",
              "action_type"
            ],
            "is_async": true,
            "class": "GraphAuditService"
          },
          {
            "name": "_initialize_hash_chain",
            "line": 673,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "GraphAuditService"
          },
          {
            "name": "_init_components_sync",
            "line": 705,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "GraphAuditService"
          },
          {
            "name": "_init_database",
            "line": 717,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "GraphAuditService"
          },
          {
            "name": "_add_to_hash_chain",
            "line": 773,
            "decorators": [],
            "args": [
              "self",
              "entry"
            ],
            "is_async": true,
            "class": "GraphAuditService"
          },
          {
            "name": "_cache_entry",
            "line": 824,
            "decorators": [],
            "args": [
              "self",
              "entry"
            ],
            "is_async": false,
            "class": "GraphAuditService"
          },
          {
            "name": "_export_worker",
            "line": 830,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "GraphAuditService"
          },
          {
            "name": "_flush_exports",
            "line": 842,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "GraphAuditService"
          },
          {
            "name": "_export_jsonl",
            "line": 859,
            "decorators": [],
            "args": [
              "self",
              "entries",
              "path"
            ],
            "is_async": true,
            "class": "GraphAuditService"
          },
          {
            "name": "_export_csv",
            "line": 868,
            "decorators": [],
            "args": [
              "self",
              "entries",
              "path"
            ],
            "is_async": true,
            "class": "GraphAuditService"
          },
          {
            "name": "_export_sqlite",
            "line": 898,
            "decorators": [],
            "args": [
              "self",
              "entries",
              "path"
            ],
            "is_async": true,
            "class": "GraphAuditService"
          },
          {
            "name": "_get_severity",
            "line": 938,
            "decorators": [],
            "args": [
              "self",
              "action"
            ],
            "is_async": false,
            "class": "GraphAuditService"
          },
          {
            "name": "_calculate_hours",
            "line": 947,
            "decorators": [],
            "args": [
              "self",
              "start_time",
              "end_time"
            ],
            "is_async": false,
            "class": "GraphAuditService"
          },
          {
            "name": "_matches_filters",
            "line": 960,
            "decorators": [],
            "args": [
              "self",
              "data",
              "start_time",
              "end_time",
              "action_types",
              "thought_id",
              "task_id"
            ],
            "is_async": false,
            "class": "GraphAuditService"
          },
          {
            "name": "_tsdb_to_audit_entry",
            "line": 996,
            "decorators": [],
            "args": [
              "self",
              "data"
            ],
            "is_async": false,
            "class": "GraphAuditService"
          },
          {
            "name": "_convert_timeseries_to_entries",
            "line": 1058,
            "decorators": [],
            "args": [
              "self",
              "timeseries_data",
              "entity_id"
            ],
            "is_async": false,
            "class": "GraphAuditService"
          },
          {
            "name": "query_events",
            "line": 1080,
            "decorators": [],
            "args": [
              "self",
              "event_type",
              "start_time",
              "end_time",
              "limit"
            ],
            "is_async": true,
            "class": "GraphAuditService"
          },
          {
            "name": "get_event_by_id",
            "line": 1109,
            "decorators": [],
            "args": [
              "self",
              "event_id"
            ],
            "is_async": true,
            "class": "GraphAuditService"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/services/graph/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/services/graph/telemetry_service.py",
        "classes": [
          {
            "name": "MemoryType",
            "line": 34,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "GracePolicy",
            "line": 42,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "ConsolidationCandidate",
            "line": 50,
            "decorators": [
              "dataclass"
            ],
            "bases": [],
            "methods": []
          },
          {
            "name": "GraphTelemetryService",
            "line": 59,
            "decorators": [],
            "bases": [
              "TelemetryServiceProtocol",
              "ServiceProtocol"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 73,
                "decorators": [],
                "args": [
                  "self",
                  "memory_bus",
                  "time_service"
                ],
                "is_async": false,
                "class": "GraphTelemetryService"
              },
              {
                "name": "_set_service_registry",
                "line": 95,
                "decorators": [],
                "args": [
                  "self",
                  "registry"
                ],
                "is_async": false,
                "class": "GraphTelemetryService"
              },
              {
                "name": "_now",
                "line": 113,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "GraphTelemetryService"
              },
              {
                "name": "record_metric",
                "line": 119,
                "decorators": [],
                "args": [
                  "self",
                  "metric_name",
                  "value",
                  "tags",
                  "handler_name"
                ],
                "is_async": true,
                "class": "GraphTelemetryService"
              },
              {
                "name": "_record_resource_usage",
                "line": 183,
                "decorators": [],
                "args": [
                  "self",
                  "service_name",
                  "usage"
                ],
                "is_async": true,
                "class": "GraphTelemetryService"
              },
              {
                "name": "query_metrics",
                "line": 248,
                "decorators": [],
                "args": [
                  "self",
                  "metric_name",
                  "start_time",
                  "end_time",
                  "tags"
                ],
                "is_async": true,
                "class": "GraphTelemetryService"
              },
              {
                "name": "get_metric_summary",
                "line": 317,
                "decorators": [],
                "args": [
                  "self",
                  "metric_name",
                  "window_minutes"
                ],
                "is_async": true,
                "class": "GraphTelemetryService"
              },
              {
                "name": "_get_service_status",
                "line": 361,
                "decorators": [],
                "args": [
                  "self",
                  "service_name"
                ],
                "is_async": true,
                "class": "GraphTelemetryService"
              },
              {
                "name": "_get_resource_limits",
                "line": 417,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "GraphTelemetryService"
              },
              {
                "name": "_process_system_snapshot",
                "line": 421,
                "decorators": [],
                "args": [
                  "self",
                  "snapshot",
                  "thought_id",
                  "task_id"
                ],
                "is_async": true,
                "class": "GraphTelemetryService"
              },
              {
                "name": "_store_telemetry_metrics",
                "line": 476,
                "decorators": [],
                "args": [
                  "self",
                  "telemetry",
                  "thought_id",
                  "task_id"
                ],
                "is_async": true,
                "class": "GraphTelemetryService"
              },
              {
                "name": "_store_resource_usage",
                "line": 508,
                "decorators": [],
                "args": [
                  "self",
                  "resources",
                  "thought_id",
                  "task_id"
                ],
                "is_async": true,
                "class": "GraphTelemetryService"
              },
              {
                "name": "_store_behavioral_data",
                "line": 519,
                "decorators": [],
                "args": [
                  "self",
                  "data",
                  "data_type",
                  "thought_id"
                ],
                "is_async": true,
                "class": "GraphTelemetryService"
              },
              {
                "name": "_store_social_context",
                "line": 548,
                "decorators": [],
                "args": [
                  "self",
                  "user_profiles",
                  "channel_context",
                  "thought_id"
                ],
                "is_async": true,
                "class": "GraphTelemetryService"
              },
              {
                "name": "_store_identity_context",
                "line": 575,
                "decorators": [],
                "args": [
                  "self",
                  "snapshot",
                  "thought_id"
                ],
                "is_async": true,
                "class": "GraphTelemetryService"
              },
              {
                "name": "start",
                "line": 602,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "GraphTelemetryService"
              },
              {
                "name": "stop",
                "line": 606,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "GraphTelemetryService"
              },
              {
                "name": "get_status",
                "line": 616,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "GraphTelemetryService"
              },
              {
                "name": "store_in_graph",
                "line": 626,
                "decorators": [],
                "args": [
                  "self",
                  "node"
                ],
                "is_async": true,
                "class": "GraphTelemetryService"
              },
              {
                "name": "query_graph",
                "line": 633,
                "decorators": [],
                "args": [
                  "self",
                  "query"
                ],
                "is_async": true,
                "class": "GraphTelemetryService"
              },
              {
                "name": "get_node_type",
                "line": 645,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "GraphTelemetryService"
              },
              {
                "name": "get_capabilities",
                "line": 649,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "GraphTelemetryService"
              },
              {
                "name": "is_healthy",
                "line": 660,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "GraphTelemetryService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 73,
            "decorators": [],
            "args": [
              "self",
              "memory_bus",
              "time_service"
            ],
            "is_async": false,
            "class": "GraphTelemetryService"
          },
          {
            "name": "_set_service_registry",
            "line": 95,
            "decorators": [],
            "args": [
              "self",
              "registry"
            ],
            "is_async": false,
            "class": "GraphTelemetryService"
          },
          {
            "name": "_now",
            "line": 113,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "GraphTelemetryService"
          },
          {
            "name": "record_metric",
            "line": 119,
            "decorators": [],
            "args": [
              "self",
              "metric_name",
              "value",
              "tags",
              "handler_name"
            ],
            "is_async": true,
            "class": "GraphTelemetryService"
          },
          {
            "name": "_record_resource_usage",
            "line": 183,
            "decorators": [],
            "args": [
              "self",
              "service_name",
              "usage"
            ],
            "is_async": true,
            "class": "GraphTelemetryService"
          },
          {
            "name": "query_metrics",
            "line": 248,
            "decorators": [],
            "args": [
              "self",
              "metric_name",
              "start_time",
              "end_time",
              "tags"
            ],
            "is_async": true,
            "class": "GraphTelemetryService"
          },
          {
            "name": "get_metric_summary",
            "line": 317,
            "decorators": [],
            "args": [
              "self",
              "metric_name",
              "window_minutes"
            ],
            "is_async": true,
            "class": "GraphTelemetryService"
          },
          {
            "name": "_get_service_status",
            "line": 361,
            "decorators": [],
            "args": [
              "self",
              "service_name"
            ],
            "is_async": true,
            "class": "GraphTelemetryService"
          },
          {
            "name": "_get_resource_limits",
            "line": 417,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "GraphTelemetryService"
          },
          {
            "name": "_process_system_snapshot",
            "line": 421,
            "decorators": [],
            "args": [
              "self",
              "snapshot",
              "thought_id",
              "task_id"
            ],
            "is_async": true,
            "class": "GraphTelemetryService"
          },
          {
            "name": "_store_telemetry_metrics",
            "line": 476,
            "decorators": [],
            "args": [
              "self",
              "telemetry",
              "thought_id",
              "task_id"
            ],
            "is_async": true,
            "class": "GraphTelemetryService"
          },
          {
            "name": "_store_resource_usage",
            "line": 508,
            "decorators": [],
            "args": [
              "self",
              "resources",
              "thought_id",
              "task_id"
            ],
            "is_async": true,
            "class": "GraphTelemetryService"
          },
          {
            "name": "_store_behavioral_data",
            "line": 519,
            "decorators": [],
            "args": [
              "self",
              "data",
              "data_type",
              "thought_id"
            ],
            "is_async": true,
            "class": "GraphTelemetryService"
          },
          {
            "name": "_store_social_context",
            "line": 548,
            "decorators": [],
            "args": [
              "self",
              "user_profiles",
              "channel_context",
              "thought_id"
            ],
            "is_async": true,
            "class": "GraphTelemetryService"
          },
          {
            "name": "_store_identity_context",
            "line": 575,
            "decorators": [],
            "args": [
              "self",
              "snapshot",
              "thought_id"
            ],
            "is_async": true,
            "class": "GraphTelemetryService"
          },
          {
            "name": "start",
            "line": 602,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "GraphTelemetryService"
          },
          {
            "name": "stop",
            "line": 606,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "GraphTelemetryService"
          },
          {
            "name": "get_status",
            "line": 616,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "GraphTelemetryService"
          },
          {
            "name": "store_in_graph",
            "line": 626,
            "decorators": [],
            "args": [
              "self",
              "node"
            ],
            "is_async": true,
            "class": "GraphTelemetryService"
          },
          {
            "name": "query_graph",
            "line": 633,
            "decorators": [],
            "args": [
              "self",
              "query"
            ],
            "is_async": true,
            "class": "GraphTelemetryService"
          },
          {
            "name": "get_node_type",
            "line": 645,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "GraphTelemetryService"
          },
          {
            "name": "get_capabilities",
            "line": 649,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "GraphTelemetryService"
          },
          {
            "name": "is_healthy",
            "line": 660,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "GraphTelemetryService"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/services/graph/tsdb_consolidation_service.py",
        "classes": [
          {
            "name": "TSDBConsolidationService",
            "line": 35,
            "decorators": [],
            "bases": [
              "BaseGraphService"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 47,
                "decorators": [],
                "args": [
                  "self",
                  "memory_bus",
                  "time_service",
                  "consolidation_interval_hours",
                  "raw_retention_hours"
                ],
                "is_async": false,
                "class": "TSDBConsolidationService"
              },
              {
                "name": "_set_service_registry",
                "line": 74,
                "decorators": [],
                "args": [
                  "self",
                  "registry"
                ],
                "is_async": false,
                "class": "TSDBConsolidationService"
              },
              {
                "name": "_get_current_time",
                "line": 91,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TSDBConsolidationService"
              },
              {
                "name": "_now",
                "line": 97,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TSDBConsolidationService"
              },
              {
                "name": "start",
                "line": 101,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TSDBConsolidationService"
              },
              {
                "name": "stop",
                "line": 115,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TSDBConsolidationService"
              },
              {
                "name": "_consolidation_loop",
                "line": 138,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TSDBConsolidationService"
              },
              {
                "name": "_calculate_next_run_time",
                "line": 160,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TSDBConsolidationService"
              },
              {
                "name": "_run_consolidation",
                "line": 173,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TSDBConsolidationService"
              },
              {
                "name": "_is_period_consolidated",
                "line": 210,
                "decorators": [],
                "args": [
                  "self",
                  "period_start",
                  "period_end"
                ],
                "is_async": true,
                "class": "TSDBConsolidationService"
              },
              {
                "name": "_consolidate_period",
                "line": 227,
                "decorators": [],
                "args": [
                  "self",
                  "period_start",
                  "period_end"
                ],
                "is_async": true,
                "class": "TSDBConsolidationService"
              },
              {
                "name": "_query_tsdb_nodes",
                "line": 347,
                "decorators": [],
                "args": [
                  "self",
                  "period_start",
                  "period_end"
                ],
                "is_async": true,
                "class": "TSDBConsolidationService"
              },
              {
                "name": "_cleanup_old_nodes",
                "line": 394,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TSDBConsolidationService"
              },
              {
                "name": "_get_period_label",
                "line": 409,
                "decorators": [],
                "args": [
                  "self",
                  "period_start"
                ],
                "is_async": false,
                "class": "TSDBConsolidationService"
              },
              {
                "name": "is_healthy",
                "line": 425,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TSDBConsolidationService"
              },
              {
                "name": "get_capabilities",
                "line": 433,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TSDBConsolidationService"
              },
              {
                "name": "get_status",
                "line": 451,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TSDBConsolidationService"
              },
              {
                "name": "_force_consolidation",
                "line": 466,
                "decorators": [],
                "args": [
                  "self",
                  "period_start"
                ],
                "is_async": true,
                "class": "TSDBConsolidationService"
              },
              {
                "name": "get_summary_for_period",
                "line": 471,
                "decorators": [],
                "args": [
                  "self",
                  "period_start"
                ],
                "is_async": true,
                "class": "TSDBConsolidationService"
              },
              {
                "name": "get_node_type",
                "line": 505,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TSDBConsolidationService"
              },
              {
                "name": "store_in_graph",
                "line": 509,
                "decorators": [],
                "args": [
                  "self",
                  "node"
                ],
                "is_async": true,
                "class": "TSDBConsolidationService"
              },
              {
                "name": "query_graph",
                "line": 517,
                "decorators": [],
                "args": [
                  "self",
                  "query"
                ],
                "is_async": true,
                "class": "TSDBConsolidationService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 47,
            "decorators": [],
            "args": [
              "self",
              "memory_bus",
              "time_service",
              "consolidation_interval_hours",
              "raw_retention_hours"
            ],
            "is_async": false,
            "class": "TSDBConsolidationService"
          },
          {
            "name": "_set_service_registry",
            "line": 74,
            "decorators": [],
            "args": [
              "self",
              "registry"
            ],
            "is_async": false,
            "class": "TSDBConsolidationService"
          },
          {
            "name": "_get_current_time",
            "line": 91,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TSDBConsolidationService"
          },
          {
            "name": "_now",
            "line": 97,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TSDBConsolidationService"
          },
          {
            "name": "start",
            "line": 101,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TSDBConsolidationService"
          },
          {
            "name": "stop",
            "line": 115,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TSDBConsolidationService"
          },
          {
            "name": "_consolidation_loop",
            "line": 138,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TSDBConsolidationService"
          },
          {
            "name": "_calculate_next_run_time",
            "line": 160,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TSDBConsolidationService"
          },
          {
            "name": "_run_consolidation",
            "line": 173,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TSDBConsolidationService"
          },
          {
            "name": "_is_period_consolidated",
            "line": 210,
            "decorators": [],
            "args": [
              "self",
              "period_start",
              "period_end"
            ],
            "is_async": true,
            "class": "TSDBConsolidationService"
          },
          {
            "name": "_consolidate_period",
            "line": 227,
            "decorators": [],
            "args": [
              "self",
              "period_start",
              "period_end"
            ],
            "is_async": true,
            "class": "TSDBConsolidationService"
          },
          {
            "name": "_query_tsdb_nodes",
            "line": 347,
            "decorators": [],
            "args": [
              "self",
              "period_start",
              "period_end"
            ],
            "is_async": true,
            "class": "TSDBConsolidationService"
          },
          {
            "name": "_cleanup_old_nodes",
            "line": 394,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TSDBConsolidationService"
          },
          {
            "name": "_get_period_label",
            "line": 409,
            "decorators": [],
            "args": [
              "self",
              "period_start"
            ],
            "is_async": false,
            "class": "TSDBConsolidationService"
          },
          {
            "name": "is_healthy",
            "line": 425,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TSDBConsolidationService"
          },
          {
            "name": "get_capabilities",
            "line": 433,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TSDBConsolidationService"
          },
          {
            "name": "get_status",
            "line": 451,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TSDBConsolidationService"
          },
          {
            "name": "_force_consolidation",
            "line": 466,
            "decorators": [],
            "args": [
              "self",
              "period_start"
            ],
            "is_async": true,
            "class": "TSDBConsolidationService"
          },
          {
            "name": "get_summary_for_period",
            "line": 471,
            "decorators": [],
            "args": [
              "self",
              "period_start"
            ],
            "is_async": true,
            "class": "TSDBConsolidationService"
          },
          {
            "name": "get_node_type",
            "line": 505,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TSDBConsolidationService"
          },
          {
            "name": "store_in_graph",
            "line": 509,
            "decorators": [],
            "args": [
              "self",
              "node"
            ],
            "is_async": true,
            "class": "TSDBConsolidationService"
          },
          {
            "name": "query_graph",
            "line": 517,
            "decorators": [],
            "args": [
              "self",
              "query"
            ],
            "is_async": true,
            "class": "TSDBConsolidationService"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/services/graph/memory_service.py",
        "classes": [
          {
            "name": "DateTimeEncoder",
            "line": 33,
            "decorators": [],
            "bases": [
              "JSONEncoder"
            ],
            "methods": [
              {
                "name": "default",
                "line": 36,
                "decorators": [],
                "args": [
                  "self",
                  "obj"
                ],
                "is_async": false,
                "class": "DateTimeEncoder"
              }
            ]
          },
          {
            "name": "LocalGraphMemoryService",
            "line": 41,
            "decorators": [],
            "bases": [
              "MemoryService",
              "GraphMemoryServiceProtocol"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 44,
                "decorators": [],
                "args": [
                  "self",
                  "db_path",
                  "secrets_service",
                  "time_service"
                ],
                "is_async": false,
                "class": "LocalGraphMemoryService"
              },
              {
                "name": "memorize",
                "line": 52,
                "decorators": [],
                "args": [
                  "self",
                  "node"
                ],
                "is_async": true,
                "class": "LocalGraphMemoryService"
              },
              {
                "name": "recall",
                "line": 65,
                "decorators": [],
                "args": [
                  "self",
                  "recall_query"
                ],
                "is_async": true,
                "class": "LocalGraphMemoryService"
              },
              {
                "name": "forget",
                "line": 96,
                "decorators": [],
                "args": [
                  "self",
                  "node"
                ],
                "is_async": true,
                "class": "LocalGraphMemoryService"
              },
              {
                "name": "export_identity_context",
                "line": 112,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "LocalGraphMemoryService"
              },
              {
                "name": "_process_secrets_for_memorize",
                "line": 125,
                "decorators": [],
                "args": [
                  "self",
                  "node"
                ],
                "is_async": true,
                "class": "LocalGraphMemoryService"
              },
              {
                "name": "_process_secrets_for_recall",
                "line": 163,
                "decorators": [],
                "args": [
                  "self",
                  "attributes",
                  "action_type"
                ],
                "is_async": true,
                "class": "LocalGraphMemoryService"
              },
              {
                "name": "_process_secrets_for_forget",
                "line": 204,
                "decorators": [],
                "args": [
                  "self",
                  "attributes"
                ],
                "is_async": true,
                "class": "LocalGraphMemoryService"
              },
              {
                "name": "recall_timeseries",
                "line": 228,
                "decorators": [],
                "args": [
                  "self",
                  "scope",
                  "hours",
                  "correlation_types"
                ],
                "is_async": true,
                "class": "LocalGraphMemoryService"
              },
              {
                "name": "memorize_metric",
                "line": 361,
                "decorators": [],
                "args": [
                  "self",
                  "metric_name",
                  "value",
                  "tags",
                  "scope"
                ],
                "is_async": true,
                "class": "LocalGraphMemoryService"
              },
              {
                "name": "memorize_log",
                "line": 428,
                "decorators": [],
                "args": [
                  "self",
                  "log_message",
                  "log_level",
                  "tags",
                  "scope"
                ],
                "is_async": true,
                "class": "LocalGraphMemoryService"
              },
              {
                "name": "search",
                "line": 490,
                "decorators": [],
                "args": [
                  "self",
                  "query",
                  "filters"
                ],
                "is_async": true,
                "class": "LocalGraphMemoryService"
              },
              {
                "name": "start",
                "line": 554,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "LocalGraphMemoryService"
              },
              {
                "name": "stop",
                "line": 560,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "LocalGraphMemoryService"
              },
              {
                "name": "get_capabilities",
                "line": 564,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "LocalGraphMemoryService"
              },
              {
                "name": "get_status",
                "line": 586,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "LocalGraphMemoryService"
              },
              {
                "name": "is_healthy",
                "line": 606,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "LocalGraphMemoryService"
              },
              {
                "name": "store_in_graph",
                "line": 618,
                "decorators": [],
                "args": [
                  "self",
                  "node"
                ],
                "is_async": true,
                "class": "LocalGraphMemoryService"
              },
              {
                "name": "query_graph",
                "line": 623,
                "decorators": [],
                "args": [
                  "self",
                  "query"
                ],
                "is_async": true,
                "class": "LocalGraphMemoryService"
              },
              {
                "name": "get_node_type",
                "line": 627,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "LocalGraphMemoryService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "default",
            "line": 36,
            "decorators": [],
            "args": [
              "self",
              "obj"
            ],
            "is_async": false,
            "class": "DateTimeEncoder"
          },
          {
            "name": "__init__",
            "line": 44,
            "decorators": [],
            "args": [
              "self",
              "db_path",
              "secrets_service",
              "time_service"
            ],
            "is_async": false,
            "class": "LocalGraphMemoryService"
          },
          {
            "name": "memorize",
            "line": 52,
            "decorators": [],
            "args": [
              "self",
              "node"
            ],
            "is_async": true,
            "class": "LocalGraphMemoryService"
          },
          {
            "name": "recall",
            "line": 65,
            "decorators": [],
            "args": [
              "self",
              "recall_query"
            ],
            "is_async": true,
            "class": "LocalGraphMemoryService"
          },
          {
            "name": "forget",
            "line": 96,
            "decorators": [],
            "args": [
              "self",
              "node"
            ],
            "is_async": true,
            "class": "LocalGraphMemoryService"
          },
          {
            "name": "export_identity_context",
            "line": 112,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "LocalGraphMemoryService"
          },
          {
            "name": "_process_secrets_for_memorize",
            "line": 125,
            "decorators": [],
            "args": [
              "self",
              "node"
            ],
            "is_async": true,
            "class": "LocalGraphMemoryService"
          },
          {
            "name": "_process_secrets_for_recall",
            "line": 163,
            "decorators": [],
            "args": [
              "self",
              "attributes",
              "action_type"
            ],
            "is_async": true,
            "class": "LocalGraphMemoryService"
          },
          {
            "name": "_process_secrets_for_forget",
            "line": 204,
            "decorators": [],
            "args": [
              "self",
              "attributes"
            ],
            "is_async": true,
            "class": "LocalGraphMemoryService"
          },
          {
            "name": "recall_timeseries",
            "line": 228,
            "decorators": [],
            "args": [
              "self",
              "scope",
              "hours",
              "correlation_types"
            ],
            "is_async": true,
            "class": "LocalGraphMemoryService"
          },
          {
            "name": "memorize_metric",
            "line": 361,
            "decorators": [],
            "args": [
              "self",
              "metric_name",
              "value",
              "tags",
              "scope"
            ],
            "is_async": true,
            "class": "LocalGraphMemoryService"
          },
          {
            "name": "memorize_log",
            "line": 428,
            "decorators": [],
            "args": [
              "self",
              "log_message",
              "log_level",
              "tags",
              "scope"
            ],
            "is_async": true,
            "class": "LocalGraphMemoryService"
          },
          {
            "name": "search",
            "line": 490,
            "decorators": [],
            "args": [
              "self",
              "query",
              "filters"
            ],
            "is_async": true,
            "class": "LocalGraphMemoryService"
          },
          {
            "name": "start",
            "line": 554,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "LocalGraphMemoryService"
          },
          {
            "name": "stop",
            "line": 560,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "LocalGraphMemoryService"
          },
          {
            "name": "get_capabilities",
            "line": 564,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "LocalGraphMemoryService"
          },
          {
            "name": "get_status",
            "line": 586,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "LocalGraphMemoryService"
          },
          {
            "name": "is_healthy",
            "line": 606,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "LocalGraphMemoryService"
          },
          {
            "name": "store_in_graph",
            "line": 618,
            "decorators": [],
            "args": [
              "self",
              "node"
            ],
            "is_async": true,
            "class": "LocalGraphMemoryService"
          },
          {
            "name": "query_graph",
            "line": 623,
            "decorators": [],
            "args": [
              "self",
              "query"
            ],
            "is_async": true,
            "class": "LocalGraphMemoryService"
          },
          {
            "name": "get_node_type",
            "line": 627,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "LocalGraphMemoryService"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/services/graph/config_service.py",
        "classes": [
          {
            "name": "GraphConfigService",
            "line": 19,
            "decorators": [],
            "bases": [
              "GraphConfigServiceProtocol",
              "ServiceProtocol"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 22,
                "decorators": [],
                "args": [
                  "self",
                  "graph_memory_service",
                  "time_service"
                ],
                "is_async": false,
                "class": "GraphConfigService"
              },
              {
                "name": "start",
                "line": 28,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "GraphConfigService"
              },
              {
                "name": "stop",
                "line": 32,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "GraphConfigService"
              },
              {
                "name": "get_capabilities",
                "line": 37,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "GraphConfigService"
              },
              {
                "name": "get_status",
                "line": 50,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "GraphConfigService"
              },
              {
                "name": "store_in_graph",
                "line": 62,
                "decorators": [],
                "args": [
                  "self",
                  "node"
                ],
                "is_async": true,
                "class": "GraphConfigService"
              },
              {
                "name": "query_graph",
                "line": 72,
                "decorators": [],
                "args": [
                  "self",
                  "query"
                ],
                "is_async": true,
                "class": "GraphConfigService"
              },
              {
                "name": "get_node_type",
                "line": 102,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "GraphConfigService"
              },
              {
                "name": "get_config",
                "line": 106,
                "decorators": [],
                "args": [
                  "self",
                  "key"
                ],
                "is_async": true,
                "class": "GraphConfigService"
              },
              {
                "name": "set_config",
                "line": 117,
                "decorators": [],
                "args": [
                  "self",
                  "key",
                  "value",
                  "updated_by"
                ],
                "is_async": true,
                "class": "GraphConfigService"
              },
              {
                "name": "list_configs",
                "line": 178,
                "decorators": [],
                "args": [
                  "self",
                  "prefix"
                ],
                "is_async": true,
                "class": "GraphConfigService"
              },
              {
                "name": "is_healthy",
                "line": 194,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "GraphConfigService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 22,
            "decorators": [],
            "args": [
              "self",
              "graph_memory_service",
              "time_service"
            ],
            "is_async": false,
            "class": "GraphConfigService"
          },
          {
            "name": "start",
            "line": 28,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "GraphConfigService"
          },
          {
            "name": "stop",
            "line": 32,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "GraphConfigService"
          },
          {
            "name": "get_capabilities",
            "line": 37,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "GraphConfigService"
          },
          {
            "name": "get_status",
            "line": 50,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "GraphConfigService"
          },
          {
            "name": "store_in_graph",
            "line": 62,
            "decorators": [],
            "args": [
              "self",
              "node"
            ],
            "is_async": true,
            "class": "GraphConfigService"
          },
          {
            "name": "query_graph",
            "line": 72,
            "decorators": [],
            "args": [
              "self",
              "query"
            ],
            "is_async": true,
            "class": "GraphConfigService"
          },
          {
            "name": "get_node_type",
            "line": 102,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "GraphConfigService"
          },
          {
            "name": "get_config",
            "line": 106,
            "decorators": [],
            "args": [
              "self",
              "key"
            ],
            "is_async": true,
            "class": "GraphConfigService"
          },
          {
            "name": "set_config",
            "line": 117,
            "decorators": [],
            "args": [
              "self",
              "key",
              "value",
              "updated_by"
            ],
            "is_async": true,
            "class": "GraphConfigService"
          },
          {
            "name": "list_configs",
            "line": 178,
            "decorators": [],
            "args": [
              "self",
              "prefix"
            ],
            "is_async": true,
            "class": "GraphConfigService"
          },
          {
            "name": "is_healthy",
            "line": 194,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "GraphConfigService"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/persistence/models/correlations.py",
        "classes": [],
        "functions": [
          {
            "name": "add_correlation",
            "line": 13,
            "decorators": [],
            "args": [
              "corr",
              "time_service",
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "update_correlation",
            "line": 61,
            "decorators": [],
            "args": [
              "update_request",
              "time_service",
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "get_correlation",
            "line": 90,
            "decorators": [],
            "args": [
              "correlation_id",
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "get_correlations_by_task_and_action",
            "line": 162,
            "decorators": [],
            "args": [
              "task_id",
              "action_type",
              "status",
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "get_correlations_by_type_and_time",
            "line": 249,
            "decorators": [],
            "args": [
              "correlation_type",
              "start_time",
              "end_time",
              "metric_names",
              "log_levels",
              "limit",
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "get_metrics_timeseries",
            "line": 361,
            "decorators": [],
            "args": [
              "query",
              "db_path"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/persistence/models/tasks.py",
        "classes": [],
        "functions": [
          {
            "name": "get_tasks_by_status",
            "line": 15,
            "decorators": [],
            "args": [
              "status",
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "get_all_tasks",
            "line": 33,
            "decorators": [],
            "args": [
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "add_task",
            "line": 47,
            "decorators": [],
            "args": [
              "task",
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "get_task_by_id",
            "line": 74,
            "decorators": [],
            "args": [
              "task_id",
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "update_task_status",
            "line": 88,
            "decorators": [],
            "args": [
              "task_id",
              "new_status",
              "time_service",
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "task_exists",
            "line": 104,
            "decorators": [],
            "args": [
              "task_id",
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "add_system_task",
            "line": 107,
            "decorators": [],
            "args": [
              "task",
              "auth_service",
              "db_path"
            ],
            "is_async": true
          },
          {
            "name": "get_recent_completed_tasks",
            "line": 140,
            "decorators": [],
            "args": [
              "limit",
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "get_top_tasks",
            "line": 146,
            "decorators": [],
            "args": [
              "limit",
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "get_pending_tasks_for_activation",
            "line": 151,
            "decorators": [],
            "args": [
              "limit",
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "count_tasks",
            "line": 158,
            "decorators": [],
            "args": [
              "status",
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "delete_tasks_by_ids",
            "line": 164,
            "decorators": [],
            "args": [
              "task_ids",
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "get_tasks_older_than",
            "line": 211,
            "decorators": [],
            "args": [
              "older_than_timestamp",
              "db_path"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/persistence/models/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/persistence/models/deferral.py",
        "classes": [],
        "functions": [
          {
            "name": "save_deferral_report_mapping",
            "line": 9,
            "decorators": [],
            "args": [
              "message_id",
              "task_id",
              "thought_id",
              "package",
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "get_deferral_report_context",
            "line": 32,
            "decorators": [],
            "args": [
              "message_id",
              "db_path"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/persistence/models/thoughts.py",
        "classes": [],
        "functions": [
          {
            "name": "get_thoughts_by_status",
            "line": 13,
            "decorators": [],
            "args": [
              "status",
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "add_thought",
            "line": 31,
            "decorators": [],
            "args": [
              "thought",
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "get_thought_by_id",
            "line": 57,
            "decorators": [],
            "args": [
              "thought_id",
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "async_get_thought_by_id",
            "line": 71,
            "decorators": [],
            "args": [
              "thought_id",
              "db_path"
            ],
            "is_async": true
          },
          {
            "name": "async_get_thought_status",
            "line": 75,
            "decorators": [],
            "args": [
              "thought_id",
              "db_path"
            ],
            "is_async": true
          },
          {
            "name": "get_thoughts_by_task_id",
            "line": 93,
            "decorators": [],
            "args": [
              "task_id",
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "delete_thoughts_by_ids",
            "line": 108,
            "decorators": [],
            "args": [
              "thought_ids",
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "count_thoughts",
            "line": 122,
            "decorators": [],
            "args": [
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "update_thought_status",
            "line": 137,
            "decorators": [],
            "args": [
              "thought_id",
              "status",
              "db_path",
              "final_action"
            ],
            "is_async": false
          },
          {
            "name": "get_thoughts_older_than",
            "line": 182,
            "decorators": [],
            "args": [
              "older_than_timestamp",
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "get_recent_thoughts",
            "line": 197,
            "decorators": [],
            "args": [
              "limit",
              "db_path"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/persistence/models/identity.py",
        "classes": [],
        "functions": [
          {
            "name": "store_agent_identity",
            "line": 25,
            "decorators": [],
            "args": [
              "identity",
              "time_service",
              "db_path"
            ],
            "is_async": true
          },
          {
            "name": "retrieve_agent_identity",
            "line": 59,
            "decorators": [],
            "args": [
              "db_path"
            ],
            "is_async": true
          },
          {
            "name": "update_agent_identity",
            "line": 99,
            "decorators": [],
            "args": [
              "identity",
              "updated_by",
              "time_service",
              "db_path"
            ],
            "is_async": true
          },
          {
            "name": "store_creation_ceremony",
            "line": 161,
            "decorators": [],
            "args": [
              "ceremony_request",
              "new_agent_id",
              "ceremony_id",
              "time_service",
              "db_path"
            ],
            "is_async": true
          },
          {
            "name": "get_identity_for_context",
            "line": 223,
            "decorators": [],
            "args": [
              "db_path"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/persistence/models/graph.py",
        "classes": [
          {
            "name": "DateTimeEncoder",
            "line": 12,
            "decorators": [],
            "bases": [
              "JSONEncoder"
            ],
            "methods": [
              {
                "name": "default",
                "line": 15,
                "decorators": [],
                "args": [
                  "self",
                  "obj"
                ],
                "is_async": false,
                "class": "DateTimeEncoder"
              }
            ]
          }
        ],
        "functions": [
          {
            "name": "add_graph_node",
            "line": 26,
            "decorators": [],
            "args": [
              "node",
              "time_service",
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "get_graph_node",
            "line": 52,
            "decorators": [],
            "args": [
              "node_id",
              "scope",
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "delete_graph_node",
            "line": 75,
            "decorators": [],
            "args": [
              "node_id",
              "scope",
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "add_graph_edge",
            "line": 86,
            "decorators": [],
            "args": [
              "edge",
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "delete_graph_edge",
            "line": 112,
            "decorators": [],
            "args": [
              "edge_id",
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "get_edges_for_node",
            "line": 123,
            "decorators": [],
            "args": [
              "node_id",
              "scope",
              "db_path"
            ],
            "is_async": false
          }
        ],
        "methods": [
          {
            "name": "default",
            "line": 15,
            "decorators": [],
            "args": [
              "self",
              "obj"
            ],
            "is_async": false,
            "class": "DateTimeEncoder"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/persistence/db/core.py",
        "classes": [],
        "functions": [
          {
            "name": "get_db_connection",
            "line": 21,
            "decorators": [],
            "args": [
              "db_path"
            ],
            "is_async": false
          },
          {
            "name": "get_graph_nodes_table_schema_sql",
            "line": 32,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "get_graph_edges_table_schema_sql",
            "line": 35,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "get_service_correlations_table_schema_sql",
            "line": 38,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "initialize_database",
            "line": 41,
            "decorators": [],
            "args": [
              "db_path"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/persistence/db/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/persistence/db/migration_runner.py",
        "classes": [],
        "functions": [
          {
            "name": "_ensure_tracking_table",
            "line": 9,
            "decorators": [],
            "args": [
              "conn"
            ],
            "is_async": false
          },
          {
            "name": "run_migrations",
            "line": 19,
            "decorators": [],
            "args": [
              "db_path"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/persistence/db/setup.py",
        "classes": [],
        "functions": [
          {
            "name": "initialize_database",
            "line": 9,
            "decorators": [],
            "args": [
              "db_path"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/logic/handlers/memory/recall_handler.py",
        "classes": [
          {
            "name": "RecallHandler",
            "line": 17,
            "decorators": [],
            "bases": [
              "BaseActionHandler"
            ],
            "methods": [
              {
                "name": "handle",
                "line": 18,
                "decorators": [],
                "args": [
                  "self",
                  "result",
                  "thought",
                  "dispatch_context"
                ],
                "is_async": true,
                "class": "RecallHandler"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "handle",
            "line": 18,
            "decorators": [],
            "args": [
              "self",
              "result",
              "thought",
              "dispatch_context"
            ],
            "is_async": true,
            "class": "RecallHandler"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/handlers/memory/forget_handler.py",
        "classes": [
          {
            "name": "ForgetHandler",
            "line": 18,
            "decorators": [],
            "bases": [
              "BaseActionHandler"
            ],
            "methods": [
              {
                "name": "handle",
                "line": 19,
                "decorators": [],
                "args": [
                  "self",
                  "result",
                  "thought",
                  "dispatch_context"
                ],
                "is_async": true,
                "class": "ForgetHandler"
              },
              {
                "name": "_can_forget",
                "line": 133,
                "decorators": [],
                "args": [
                  "self",
                  "params",
                  "dispatch_context"
                ],
                "is_async": false,
                "class": "ForgetHandler"
              },
              {
                "name": "_audit_forget_operation",
                "line": 140,
                "decorators": [],
                "args": [
                  "self",
                  "params",
                  "dispatch_context",
                  "result"
                ],
                "is_async": true,
                "class": "ForgetHandler"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "handle",
            "line": 19,
            "decorators": [],
            "args": [
              "self",
              "result",
              "thought",
              "dispatch_context"
            ],
            "is_async": true,
            "class": "ForgetHandler"
          },
          {
            "name": "_can_forget",
            "line": 133,
            "decorators": [],
            "args": [
              "self",
              "params",
              "dispatch_context"
            ],
            "is_async": false,
            "class": "ForgetHandler"
          },
          {
            "name": "_audit_forget_operation",
            "line": 140,
            "decorators": [],
            "args": [
              "self",
              "params",
              "dispatch_context",
              "result"
            ],
            "is_async": true,
            "class": "ForgetHandler"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/handlers/memory/memorize_handler.py",
        "classes": [
          {
            "name": "MemorizeHandler",
            "line": 22,
            "decorators": [],
            "bases": [
              "BaseActionHandler"
            ],
            "methods": [
              {
                "name": "handle",
                "line": 25,
                "decorators": [],
                "args": [
                  "self",
                  "result",
                  "thought",
                  "dispatch_context"
                ],
                "is_async": true,
                "class": "MemorizeHandler"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "handle",
            "line": 25,
            "decorators": [],
            "args": [
              "self",
              "result",
              "thought",
              "dispatch_context"
            ],
            "is_async": true,
            "class": "MemorizeHandler"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/handlers/control/ponder_handler.py",
        "classes": [
          {
            "name": "PonderHandler",
            "line": 17,
            "decorators": [],
            "bases": [
              "BaseActionHandler"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 18,
                "decorators": [],
                "args": [
                  "self",
                  "dependencies",
                  "max_rounds"
                ],
                "is_async": false,
                "class": "PonderHandler"
              },
              {
                "name": "handle",
                "line": 23,
                "decorators": [],
                "args": [
                  "self",
                  "result",
                  "thought",
                  "dispatch_context"
                ],
                "is_async": true,
                "class": "PonderHandler"
              },
              {
                "name": "_generate_ponder_follow_up_content",
                "line": 122,
                "decorators": [],
                "args": [
                  "self",
                  "task_context",
                  "questions_list",
                  "thought_depth",
                  "thought"
                ],
                "is_async": false,
                "class": "PonderHandler"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 18,
            "decorators": [],
            "args": [
              "self",
              "dependencies",
              "max_rounds"
            ],
            "is_async": false,
            "class": "PonderHandler"
          },
          {
            "name": "handle",
            "line": 23,
            "decorators": [],
            "args": [
              "self",
              "result",
              "thought",
              "dispatch_context"
            ],
            "is_async": true,
            "class": "PonderHandler"
          },
          {
            "name": "_generate_ponder_follow_up_content",
            "line": 122,
            "decorators": [],
            "args": [
              "self",
              "task_context",
              "questions_list",
              "thought_depth",
              "thought"
            ],
            "is_async": false,
            "class": "PonderHandler"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/handlers/control/defer_handler.py",
        "classes": [
          {
            "name": "DeferHandler",
            "line": 17,
            "decorators": [],
            "bases": [
              "BaseActionHandler"
            ],
            "methods": [
              {
                "name": "_get_task_scheduler_service",
                "line": 18,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DeferHandler"
              },
              {
                "name": "handle",
                "line": 31,
                "decorators": [],
                "args": [
                  "self",
                  "result",
                  "thought",
                  "dispatch_context"
                ],
                "is_async": true,
                "class": "DeferHandler"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "_get_task_scheduler_service",
            "line": 18,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DeferHandler"
          },
          {
            "name": "handle",
            "line": 31,
            "decorators": [],
            "args": [
              "self",
              "result",
              "thought",
              "dispatch_context"
            ],
            "is_async": true,
            "class": "DeferHandler"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/handlers/control/reject_handler.py",
        "classes": [
          {
            "name": "RejectHandler",
            "line": 24,
            "decorators": [],
            "bases": [
              "BaseActionHandler"
            ],
            "methods": [
              {
                "name": "handle",
                "line": 25,
                "decorators": [],
                "args": [
                  "self",
                  "result",
                  "thought",
                  "dispatch_context"
                ],
                "is_async": true,
                "class": "RejectHandler"
              },
              {
                "name": "_create_adaptive_filter",
                "line": 87,
                "decorators": [],
                "args": [
                  "self",
                  "params",
                  "thought",
                  "dispatch_context"
                ],
                "is_async": true,
                "class": "RejectHandler"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "handle",
            "line": 25,
            "decorators": [],
            "args": [
              "self",
              "result",
              "thought",
              "dispatch_context"
            ],
            "is_async": true,
            "class": "RejectHandler"
          },
          {
            "name": "_create_adaptive_filter",
            "line": 87,
            "decorators": [],
            "args": [
              "self",
              "params",
              "thought",
              "dispatch_context"
            ],
            "is_async": true,
            "class": "RejectHandler"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/handlers/external/observe_handler.py",
        "classes": [
          {
            "name": "ObserveHandler",
            "line": 26,
            "decorators": [],
            "bases": [
              "BaseActionHandler"
            ],
            "methods": [
              {
                "name": "_recall_from_messages",
                "line": 28,
                "decorators": [],
                "args": [
                  "self",
                  "channel_id",
                  "messages"
                ],
                "is_async": true,
                "class": "ObserveHandler"
              },
              {
                "name": "handle",
                "line": 69,
                "decorators": [],
                "args": [
                  "self",
                  "result",
                  "thought",
                  "dispatch_context"
                ],
                "is_async": true,
                "class": "ObserveHandler"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "_recall_from_messages",
            "line": 28,
            "decorators": [],
            "args": [
              "self",
              "channel_id",
              "messages"
            ],
            "is_async": true,
            "class": "ObserveHandler"
          },
          {
            "name": "handle",
            "line": 69,
            "decorators": [],
            "args": [
              "self",
              "result",
              "thought",
              "dispatch_context"
            ],
            "is_async": true,
            "class": "ObserveHandler"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/handlers/external/speak_handler.py",
        "classes": [
          {
            "name": "SpeakHandler",
            "line": 38,
            "decorators": [],
            "bases": [
              "BaseActionHandler"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 39,
                "decorators": [],
                "args": [
                  "self",
                  "dependencies"
                ],
                "is_async": false,
                "class": "SpeakHandler"
              },
              {
                "name": "handle",
                "line": 42,
                "decorators": [],
                "args": [
                  "self",
                  "result",
                  "thought",
                  "dispatch_context"
                ],
                "is_async": true,
                "class": "SpeakHandler"
              }
            ]
          }
        ],
        "functions": [
          {
            "name": "_build_speak_error_context",
            "line": 18,
            "decorators": [],
            "args": [
              "params",
              "thought_id",
              "error_type"
            ],
            "is_async": false
          }
        ],
        "methods": [
          {
            "name": "__init__",
            "line": 39,
            "decorators": [],
            "args": [
              "self",
              "dependencies"
            ],
            "is_async": false,
            "class": "SpeakHandler"
          },
          {
            "name": "handle",
            "line": 42,
            "decorators": [],
            "args": [
              "self",
              "result",
              "thought",
              "dispatch_context"
            ],
            "is_async": true,
            "class": "SpeakHandler"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/handlers/external/tool_handler.py",
        "classes": [
          {
            "name": "ToolHandler",
            "line": 17,
            "decorators": [],
            "bases": [
              "BaseActionHandler"
            ],
            "methods": [
              {
                "name": "handle",
                "line": 20,
                "decorators": [],
                "args": [
                  "self",
                  "result",
                  "thought",
                  "dispatch_context"
                ],
                "is_async": true,
                "class": "ToolHandler"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "handle",
            "line": 20,
            "decorators": [],
            "args": [
              "self",
              "result",
              "thought",
              "dispatch_context"
            ],
            "is_async": true,
            "class": "ToolHandler"
          }
        ]
      },
      {
        "file": "ciris_engine/logic/handlers/terminal/task_complete_handler.py",
        "classes": [
          {
            "name": "TaskCompleteHandler",
            "line": 15,
            "decorators": [],
            "bases": [
              "BaseActionHandler"
            ],
            "methods": [
              {
                "name": "handle",
                "line": 16,
                "decorators": [],
                "args": [
                  "self",
                  "result",
                  "thought",
                  "dispatch_context"
                ],
                "is_async": true,
                "class": "TaskCompleteHandler"
              },
              {
                "name": "_is_wakeup_task",
                "line": 112,
                "decorators": [],
                "args": [
                  "self",
                  "task_id"
                ],
                "is_async": true,
                "class": "TaskCompleteHandler"
              },
              {
                "name": "_has_speak_action_completed",
                "line": 134,
                "decorators": [],
                "args": [
                  "self",
                  "task_id"
                ],
                "is_async": true,
                "class": "TaskCompleteHandler"
              },
              {
                "name": "_memorize_positive_moment",
                "line": 153,
                "decorators": [],
                "args": [
                  "self",
                  "positive_moment",
                  "task_id",
                  "dispatch_context"
                ],
                "is_async": true,
                "class": "TaskCompleteHandler"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "handle",
            "line": 16,
            "decorators": [],
            "args": [
              "self",
              "result",
              "thought",
              "dispatch_context"
            ],
            "is_async": true,
            "class": "TaskCompleteHandler"
          },
          {
            "name": "_is_wakeup_task",
            "line": 112,
            "decorators": [],
            "args": [
              "self",
              "task_id"
            ],
            "is_async": true,
            "class": "TaskCompleteHandler"
          },
          {
            "name": "_has_speak_action_completed",
            "line": 134,
            "decorators": [],
            "args": [
              "self",
              "task_id"
            ],
            "is_async": true,
            "class": "TaskCompleteHandler"
          },
          {
            "name": "_memorize_positive_moment",
            "line": 153,
            "decorators": [],
            "args": [
              "self",
              "positive_moment",
              "task_id",
              "dispatch_context"
            ],
            "is_async": true,
            "class": "TaskCompleteHandler"
          }
        ]
      },
      {
        "file": "ciris_engine/schemas/utils/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/utils/config_validator.py",
        "classes": [
          {
            "name": "ConfigData",
            "line": 10,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "LLMConfig",
            "line": 17,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "DatabaseValidationConfig",
            "line": 24,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "MaskedConfigResult",
            "line": 29,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "NestedValueUpdate",
            "line": 35,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/infrastructure/behavioral_patterns.py",
        "classes": [
          {
            "name": "BehavioralPattern",
            "line": 11,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ActionFrequency",
            "line": 24,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "EthicalBoundary",
            "line": 36,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "IdentityMetric",
            "line": 49,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "IdentityVarianceReport",
            "line": 62,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "FeedbackLoopAnalysis",
            "line": 76,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/infrastructure/base.py",
        "classes": [
          {
            "name": "RuntimeStats",
            "line": 11,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "HealthCheckResult",
            "line": 24,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ComponentHealthStatus",
            "line": 32,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ServiceDependencies",
            "line": 40,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "BusMetrics",
            "line": 48,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ConsolidationResult",
            "line": 60,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "DreamSchedule",
            "line": 72,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "DreamInsight",
            "line": 82,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "IdentityBaseline",
            "line": 92,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "IdentityVarianceMetric",
            "line": 103,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ConfigurationFeedback",
            "line": 113,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ConfigurationPattern",
            "line": 124,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ConfigurationUpdate",
            "line": 134,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ActiveAdapter",
            "line": 146,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "CheckpointInfo",
            "line": 156,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ServiceRegistration",
            "line": 167,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ServiceRegistry",
            "line": 179,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/infrastructure/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/infrastructure/oauth.py",
        "classes": [
          {
            "name": "OAuthProviderConfig",
            "line": 11,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "OAuthSetupRequest",
            "line": 18,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "OAuthOperationResult",
            "line": 25,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "OAuthLoginResult",
            "line": 33,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "OAuthProviderList",
            "line": 41,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "OAuthProviderDetails",
            "line": 46,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "OAuthCallbackData",
            "line": 54,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "OAuthTokenExchange",
            "line": 61,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "OAuthTokenResponse",
            "line": 69,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "OAuthUserInfo",
            "line": 77,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/infrastructure/wa_cli_wizard.py",
        "classes": [
          {
            "name": "WizardResult",
            "line": 10,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "RootCreationResult",
            "line": 20,
            "decorators": [],
            "bases": [
              "WizardResult"
            ],
            "methods": []
          },
          {
            "name": "JoinRequestResult",
            "line": 25,
            "decorators": [],
            "bases": [
              "WizardResult"
            ],
            "methods": []
          },
          {
            "name": "OAuthConfigResult",
            "line": 31,
            "decorators": [],
            "bases": [
              "WizardResult"
            ],
            "methods": []
          },
          {
            "name": "OnboardingChoice",
            "line": 37,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/infrastructure/feedback_loop.py",
        "classes": [
          {
            "name": "PatternType",
            "line": 11,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "PatternMetrics",
            "line": 19,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "DetectedPattern",
            "line": 29,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AnalysisResult",
            "line": 39,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/infrastructure/identity_variance.py",
        "classes": [
          {
            "name": "VarianceImpact",
            "line": 12,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "IdentityDiff",
            "line": 19,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "VarianceReport",
            "line": 28,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "IdentitySnapshot",
            "line": 38,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "VarianceAnalysis",
            "line": 54,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "WAReviewRequest",
            "line": 64,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "VarianceCheckMetadata",
            "line": 74,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/runtime/extended.py",
        "classes": [
          {
            "name": "IdentityLineage",
            "line": 15,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "IdentityUpdateEntry",
            "line": 24,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "IdentityRoot",
            "line": 37,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "CreationCeremonyRequest",
            "line": 79,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "CreationCeremonyResponse",
            "line": 102,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ScheduledTask",
            "line": 114,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ScheduledTaskInfo",
            "line": 145,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ShutdownContext",
            "line": 159,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ConsciousnessPreservationMemory",
            "line": 179,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "IdentityEvolutionRequest",
            "line": 201,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "IdentityNodeType",
            "line": 213,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/runtime/system_context.py",
        "classes": [
          {
            "name": "SystemSnapshot",
            "line": 10,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "TaskSummary",
            "line": 129,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ThoughtContext",
            "line": 153,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "UserProfile",
            "line": 180,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ChannelContext",
            "line": 203,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ResourceUsage",
            "line": 225,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AuditVerification",
            "line": 240,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ConscienceResult",
            "line": 254,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ThoughtSummary",
            "line": 270,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "TelemetrySummary",
            "line": 281,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/runtime/tools.py",
        "classes": [
          {
            "name": "ToolParameterSchema",
            "line": 10,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ToolInfo",
            "line": 22,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ToolExecutionRequest",
            "line": 50,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ToolExecutionResult",
            "line": 63,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/runtime/messages.py",
        "classes": [
          {
            "name": "IncomingMessage",
            "line": 10,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": [
              {
                "name": "channel_id",
                "line": 23,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "IncomingMessage"
              }
            ]
          },
          {
            "name": "DiscordMessage",
            "line": 27,
            "decorators": [],
            "bases": [
              "IncomingMessage"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 33,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DiscordMessage"
              }
            ]
          },
          {
            "name": "FetchedMessage",
            "line": 38,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "channel_id",
            "line": 23,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "IncomingMessage"
          },
          {
            "name": "__init__",
            "line": 33,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DiscordMessage"
          }
        ]
      },
      {
        "file": "ciris_engine/schemas/runtime/core.py",
        "classes": [
          {
            "name": "CoreProfile",
            "line": 11,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "IdentityMetadata",
            "line": 52,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "CapabilityDefinition",
            "line": 79,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AgentIdentityRoot",
            "line": 110,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "IdentityUpdate",
            "line": 157,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "IdentityValidation",
            "line": 178,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "IdentitySnapshot",
            "line": 203,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/runtime/processing_context.py",
        "classes": [
          {
            "name": "ProcessingThoughtContext",
            "line": 14,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/runtime/resources.py",
        "classes": [
          {
            "name": "ResourceUsage",
            "line": 10,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/runtime/models.py",
        "classes": [
          {
            "name": "TaskContext",
            "line": 13,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "TaskOutcome",
            "line": 22,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ThoughtContext",
            "line": 32,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "FinalAction",
            "line": 43,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "Task",
            "line": 52,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "Thought",
            "line": 71,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/runtime/enums.py",
        "classes": [
          {
            "name": "CaseInsensitiveEnum",
            "line": 8,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": [
              {
                "name": "_missing_",
                "line": 11,
                "decorators": [
                  "classmethod"
                ],
                "args": [
                  "cls",
                  "value"
                ],
                "is_async": false,
                "class": "CaseInsensitiveEnum"
              }
            ]
          },
          {
            "name": "ServiceType",
            "line": 19,
            "decorators": [],
            "bases": [
              "CaseInsensitiveEnum"
            ],
            "methods": []
          },
          {
            "name": "HandlerActionType",
            "line": 42,
            "decorators": [],
            "bases": [
              "CaseInsensitiveEnum"
            ],
            "methods": []
          },
          {
            "name": "TaskStatus",
            "line": 62,
            "decorators": [],
            "bases": [
              "CaseInsensitiveEnum"
            ],
            "methods": []
          },
          {
            "name": "ThoughtStatus",
            "line": 71,
            "decorators": [],
            "bases": [
              "CaseInsensitiveEnum"
            ],
            "methods": []
          },
          {
            "name": "ThoughtType",
            "line": 79,
            "decorators": [],
            "bases": [
              "CaseInsensitiveEnum"
            ],
            "methods": []
          },
          {
            "name": "SensitivityLevel",
            "line": 121,
            "decorators": [],
            "bases": [
              "CaseInsensitiveEnum"
            ],
            "methods": []
          },
          {
            "name": "ObservationSourceType",
            "line": 128,
            "decorators": [],
            "bases": [
              "CaseInsensitiveEnum"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "_missing_",
            "line": 11,
            "decorators": [
              "classmethod"
            ],
            "args": [
              "cls",
              "value"
            ],
            "is_async": false,
            "class": "CaseInsensitiveEnum"
          }
        ]
      },
      {
        "file": "ciris_engine/schemas/runtime/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/runtime/contexts.py",
        "classes": [
          {
            "name": "DispatchContext",
            "line": 16,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/runtime/audit.py",
        "classes": [
          {
            "name": "ActionContext",
            "line": 11,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ConscienceCheckResult",
            "line": 21,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AuditEntry",
            "line": 30,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/runtime/protocols_core.py",
        "classes": [
          {
            "name": "LLMStatus",
            "line": 11,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "NetworkQueryRequest",
            "line": 24,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "MetricDataPoint",
            "line": 32,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ServiceStatus",
            "line": 42,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ResourceLimits",
            "line": 52,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ConfigValue",
            "line": 62,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SecretInfo",
            "line": 73,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SecretsServiceStats",
            "line": 86,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/runtime/memory.py",
        "classes": [
          {
            "name": "MemorySearchResult",
            "line": 11,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "TimeSeriesDataPoint",
            "line": 22,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "IdentityUpdateRequest",
            "line": 33,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "EnvironmentUpdateRequest",
            "line": 42,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/runtime/adapter_management.py",
        "classes": [
          {
            "name": "AdapterConfig",
            "line": 10,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AdapterLoadRequest",
            "line": 16,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AdapterOperationResult",
            "line": 23,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AdapterStatus",
            "line": 32,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AdapterListResponse",
            "line": 43,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ServiceRegistrationInfo",
            "line": 49,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AdapterMetrics",
            "line": 56,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/adapters/graphql_core.py",
        "classes": [
          {
            "name": "GraphQLVariable",
            "line": 11,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "GraphQLQuery",
            "line": 16,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "GraphQLUser",
            "line": 24,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "UserQueryVariables",
            "line": 32,
            "decorators": [],
            "bases": [
              "GraphQLVariable"
            ],
            "methods": []
          },
          {
            "name": "UserQueryResponse",
            "line": 38,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "GraphQLError",
            "line": 44,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "GraphQLResponse",
            "line": 52,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "UserAttribute",
            "line": 60,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "UserProfile",
            "line": 68,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "EnrichedContext",
            "line": 79,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "GraphQLMutation",
            "line": 87,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "GraphQLSubscription",
            "line": 95,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/adapters/cirisnode.py",
        "classes": [
          {
            "name": "SimpleBenchRequest",
            "line": 12,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SimpleBenchResult",
            "line": 17,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "HE300Request",
            "line": 27,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "HE300Result",
            "line": 32,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ChaosTestRequest",
            "line": 44,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ChaosTestResult",
            "line": 49,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "WAServiceRequest",
            "line": 58,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "WAServiceResponse",
            "line": 64,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "EventLogRequest",
            "line": 73,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "EventLogResponse",
            "line": 80,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "EventQueryRequest",
            "line": 87,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "EventQueryResult",
            "line": 95,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AssessmentSubmission",
            "line": 104,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AssessmentResult",
            "line": 110,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/adapters/core.py",
        "classes": [
          {
            "name": "MessageRequest",
            "line": 14,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "MessageResponse",
            "line": 23,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "MessageListResponse",
            "line": 35,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ServiceProvider",
            "line": 43,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ServiceTypeInfo",
            "line": 53,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ServicesResponse",
            "line": 61,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "RuntimeStatus",
            "line": 68,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "RuntimeMetrics",
            "line": 77,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "RuntimeStatusResponse",
            "line": 86,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "HealthResponse",
            "line": 94,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ErrorResponse",
            "line": 104,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ChannelInfo",
            "line": 113,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AgentIdentity",
            "line": 124,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "MessageProcessorMetrics",
            "line": 133,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AgentStatus",
            "line": 141,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ChannelListResponse",
            "line": 151,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/adapters/cli_tools.py",
        "classes": [
          {
            "name": "ToolParameters",
            "line": 10,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ListFilesParams",
            "line": 15,
            "decorators": [],
            "bases": [
              "ToolParameters"
            ],
            "methods": []
          },
          {
            "name": "ListFilesResult",
            "line": 19,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ReadFileParams",
            "line": 25,
            "decorators": [],
            "bases": [
              "ToolParameters"
            ],
            "methods": []
          },
          {
            "name": "ReadFileResult",
            "line": 29,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "WriteFileParams",
            "line": 35,
            "decorators": [],
            "bases": [
              "ToolParameters"
            ],
            "methods": []
          },
          {
            "name": "WriteFileResult",
            "line": 40,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ShellCommandParams",
            "line": 46,
            "decorators": [],
            "bases": [
              "ToolParameters"
            ],
            "methods": []
          },
          {
            "name": "ShellCommandResult",
            "line": 51,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SearchMatch",
            "line": 58,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SearchTextParams",
            "line": 63,
            "decorators": [],
            "bases": [
              "ToolParameters"
            ],
            "methods": []
          },
          {
            "name": "SearchTextResult",
            "line": 68,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ToolResult",
            "line": 73,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/adapters/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/adapters/registration.py",
        "classes": [
          {
            "name": "AdapterServiceRegistration",
            "line": 17,
            "decorators": [
              "dataclass"
            ],
            "bases": [],
            "methods": [
              {
                "name": "__post_init__",
                "line": 32,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AdapterServiceRegistration"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__post_init__",
            "line": 32,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AdapterServiceRegistration"
          }
        ]
      },
      {
        "file": "ciris_engine/schemas/adapters/cli.py",
        "classes": [
          {
            "name": "CLIMessage",
            "line": 10,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "CLIToolParameters",
            "line": 17,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ListFilesToolParams",
            "line": 21,
            "decorators": [],
            "bases": [
              "CLIToolParameters"
            ],
            "methods": []
          },
          {
            "name": "ListFilesToolResult",
            "line": 25,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ReadFileToolParams",
            "line": 31,
            "decorators": [],
            "bases": [
              "CLIToolParameters"
            ],
            "methods": []
          },
          {
            "name": "ReadFileToolResult",
            "line": 36,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "WriteFileToolParams",
            "line": 42,
            "decorators": [],
            "bases": [
              "CLIToolParameters"
            ],
            "methods": []
          },
          {
            "name": "WriteFileToolResult",
            "line": 48,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SystemInfoToolResult",
            "line": 54,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "CLIGuidanceRequest",
            "line": 62,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "CLIDeferralDisplay",
            "line": 69,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "CLICorrelationData",
            "line": 77,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/processors/base.py",
        "classes": [
          {
            "name": "ProcessorMetrics",
            "line": 11,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ProcessingResult",
            "line": 22,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ProcessorServices",
            "line": 32,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ProcessorContext",
            "line": 41,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "MetricsUpdate",
            "line": 49,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/processors/main.py",
        "classes": [
          {
            "name": "ProcessorServices",
            "line": 13,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ProcessingRoundResult",
            "line": 24,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ProcessingStatus",
            "line": 37,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "PreloadTask",
            "line": 48,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "StateTransitionResult",
            "line": 55,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ProcessorMetrics",
            "line": 64,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "GlobalProcessingMetrics",
            "line": 73,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ShutdownRequest",
            "line": 82,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/processors/core.py",
        "classes": [
          {
            "name": "DMAResults",
            "line": 23,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ConscienceResult",
            "line": 32,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ProcessedThoughtResult",
            "line": 42,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": [
              {
                "name": "selected_action",
                "line": 48,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ProcessedThoughtResult"
              },
              {
                "name": "action_parameters",
                "line": 53,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ProcessedThoughtResult"
              }
            ]
          },
          {
            "name": "ThoughtProcessingMetrics",
            "line": 70,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ProcessingError",
            "line": 80,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "selected_action",
            "line": 48,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ProcessedThoughtResult"
          },
          {
            "name": "action_parameters",
            "line": 53,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ProcessedThoughtResult"
          }
        ]
      },
      {
        "file": "ciris_engine/schemas/processors/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/processors/dma.py",
        "classes": [
          {
            "name": "DMAContext",
            "line": 15,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "InitialDMAResults",
            "line": 23,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "DMAError",
            "line": 29,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "DMAErrors",
            "line": 36,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": [
              {
                "name": "has_errors",
                "line": 42,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DMAErrors"
              },
              {
                "name": "get_error_summary",
                "line": 46,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DMAErrors"
              }
            ]
          },
          {
            "name": "ActionSelectionContext",
            "line": 57,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "CircuitBreakerStatus",
            "line": 67,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "DMAOrchestratorStatus",
            "line": 75,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "has_errors",
            "line": 42,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DMAErrors"
          },
          {
            "name": "get_error_summary",
            "line": 46,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DMAErrors"
          }
        ]
      },
      {
        "file": "ciris_engine/schemas/processors/states.py",
        "classes": [
          {
            "name": "AgentState",
            "line": 8,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/processors/solitude.py",
        "classes": [
          {
            "name": "ReflectionData",
            "line": 10,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SolitudeProcessingResult",
            "line": 17,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "MaintenanceResult",
            "line": 28,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "TaskTypePattern",
            "line": 35,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ReflectionResult",
            "line": 41,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ExitConditions",
            "line": 48,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "TaskTypeStats",
            "line": 56,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/processors/status.py",
        "classes": [
          {
            "name": "SolitudeStats",
            "line": 13,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ProcessorInfo",
            "line": 20,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/processors/results.py",
        "classes": [
          {
            "name": "WakeupResult",
            "line": 11,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "WorkResult",
            "line": 19,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "PlayResult",
            "line": 27,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SolitudeResult",
            "line": 34,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "DreamResult",
            "line": 41,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ShutdownResult",
            "line": 48,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/processors/cognitive.py",
        "classes": [
          {
            "name": "WakeupState",
            "line": 12,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "WorkState",
            "line": 22,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "PlayState",
            "line": 31,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SolitudeState",
            "line": 39,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "DreamState",
            "line": 47,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ShutdownState",
            "line": 58,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/context/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/telemetry/core.py",
        "classes": [
          {
            "name": "ServiceCorrelationStatus",
            "line": 17,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "CorrelationType",
            "line": 23,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "ServiceRequestData",
            "line": 36,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ServiceResponseData",
            "line": 58,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "TraceContext",
            "line": 82,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "MetricData",
            "line": 100,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "LogData",
            "line": 126,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ServiceCorrelation",
            "line": 145,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "CorrelationQuery",
            "line": 198,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "CorrelationSummary",
            "line": 232,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/telemetry/collector.py",
        "classes": [
          {
            "name": "HealthDetails",
            "line": 10,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "HealthStatus",
            "line": 17,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "MetricEntry",
            "line": 22,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ProcessorStateSnapshot",
            "line": 28,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SingleStepResult",
            "line": 34,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ProcessingQueueStatus",
            "line": 46,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/telemetry/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/conscience/core.py",
        "classes": [
          {
            "name": "ConscienceStatus",
            "line": 13,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "EntropyCheckResult",
            "line": 19,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "CoherenceCheckResult",
            "line": 28,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "OptimizationVetoResult",
            "line": 37,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "EpistemicHumilityResult",
            "line": 47,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "EpistemicData",
            "line": 56,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ConscienceCheckResult",
            "line": 65,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/conscience/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/conscience/results.py",
        "classes": [
          {
            "name": "ConscienceResult",
            "line": 11,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/audit/hash_chain.py",
        "classes": [
          {
            "name": "AuditEntry",
            "line": 10,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ChainVerificationResult",
            "line": 22,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ChainSummary",
            "line": 30,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/audit/core.py",
        "classes": [
          {
            "name": "AuditEventType",
            "line": 13,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "EventOutcome",
            "line": 34,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "EventPayload",
            "line": 41,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AuditEvent",
            "line": 55,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AuditLogEntry",
            "line": 67,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AuditSummary",
            "line": 89,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AuditQuery",
            "line": 103,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/audit/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/audit/verification.py",
        "classes": [
          {
            "name": "ChainVerificationResult",
            "line": 11,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SignatureVerificationResult",
            "line": 18,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "CompleteVerificationResult",
            "line": 26,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "EntryVerificationResult",
            "line": 39,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "RangeVerificationResult",
            "line": 49,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ChainSummary",
            "line": 60,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "VerificationReport",
            "line": 72,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "RootAnchorVerificationResult",
            "line": 82,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/config/essential.py",
        "classes": [
          {
            "name": "DatabaseConfig",
            "line": 11,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ServiceEndpointsConfig",
            "line": 28,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SecurityConfig",
            "line": 49,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "OperationalLimitsConfig",
            "line": 74,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "TelemetryConfig",
            "line": 107,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "WorkflowConfig",
            "line": 124,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "EssentialConfig",
            "line": 141,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "CIRISNodeConfig",
            "line": 189,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/config/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/config/agent.py",
        "classes": [
          {
            "name": "AgentTemplate",
            "line": 9,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/dma/core.py",
        "classes": [
          {
            "name": "DMAInputData",
            "line": 15,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": [
              {
                "name": "has_ethical_concerns",
                "line": 60,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DMAInputData"
              },
              {
                "name": "has_common_sense_flags",
                "line": 68,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DMAInputData"
              },
              {
                "name": "should_escalate",
                "line": 75,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DMAInputData"
              },
              {
                "name": "resource_usage_summary",
                "line": 84,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DMAInputData"
              },
              {
                "name": "audit_is_valid",
                "line": 96,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "DMAInputData"
              }
            ]
          },
          {
            "name": "DMAContext",
            "line": 104,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "DMADecision",
            "line": 139,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "PrincipleEvaluation",
            "line": 153,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "CommonSenseEvaluation",
            "line": 166,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "DomainEvaluation",
            "line": 178,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "RecursiveReasoning",
            "line": 192,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "has_ethical_concerns",
            "line": 60,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DMAInputData"
          },
          {
            "name": "has_common_sense_flags",
            "line": 68,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DMAInputData"
          },
          {
            "name": "should_escalate",
            "line": 75,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DMAInputData"
          },
          {
            "name": "resource_usage_summary",
            "line": 84,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DMAInputData"
          },
          {
            "name": "audit_is_valid",
            "line": 96,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "DMAInputData"
          }
        ]
      },
      {
        "file": "ciris_engine/schemas/dma/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/dma/decisions.py",
        "classes": [
          {
            "name": "PDMADecision",
            "line": 11,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "CSDMADecision",
            "line": 21,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "DSDMADecision",
            "line": 31,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ActionSelectionDecision",
            "line": 41,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/dma/results.py",
        "classes": [
          {
            "name": "EthicalDMAResult",
            "line": 16,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "CSDMAResult",
            "line": 24,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "DSDMAResult",
            "line": 32,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ActionSelectionDMAResult",
            "line": 41,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/secrets/core.py",
        "classes": [
          {
            "name": "SecretType",
            "line": 15,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "SecretRecord",
            "line": 30,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SecretReference",
            "line": 56,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SecretAccessLog",
            "line": 69,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "DetectedSecret",
            "line": 85,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SecretsFilterResult",
            "line": 97,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "RecallSecretParams",
            "line": 106,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SecretPattern",
            "line": 114,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SecretsDetectionConfig",
            "line": 150,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "UpdateSecretsFilterParams",
            "line": 160,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SecretStorageConfig",
            "line": 173,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SecretMetrics",
            "line": 183,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [
          {
            "name": "_default_secret_patterns",
            "line": 124,
            "decorators": [],
            "args": [],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/secrets/service.py",
        "classes": [
          {
            "name": "SecretRecallResult",
            "line": 11,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "DecapsulationContext",
            "line": 19,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "PatternConfig",
            "line": 27,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SensitivityConfig",
            "line": 36,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "FilterStats",
            "line": 44,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "FilterUpdateRequest",
            "line": 51,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "FilterUpdateResult",
            "line": 58,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/secrets/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/secrets/filter.py",
        "classes": [
          {
            "name": "PatternStats",
            "line": 10,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ConfigExport",
            "line": 19,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "FilterConfigUpdate",
            "line": 30,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SecretsFilterResult",
            "line": 36,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/formatters/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/registries/base.py",
        "classes": [
          {
            "name": "ServiceMetadata",
            "line": 10,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ProviderInfo",
            "line": 17,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ServiceTypeInfo",
            "line": 27,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "HandlerInfo",
            "line": 31,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "CircuitBreakerStats",
            "line": 35,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "RegistryInfo",
            "line": 43,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/registries/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/actions/parameters.py",
        "classes": [
          {
            "name": "ObserveParams",
            "line": 19,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SpeakParams",
            "line": 27,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ToolParams",
            "line": 34,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "PonderParams",
            "line": 41,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "RejectParams",
            "line": 47,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "DeferParams",
            "line": 57,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "MemorizeParams",
            "line": 68,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": [
              {
                "name": "scope",
                "line": 75,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "MemorizeParams"
              }
            ]
          },
          {
            "name": "RecallParams",
            "line": 78,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ForgetParams",
            "line": 88,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": [
              {
                "name": "scope",
                "line": 97,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ForgetParams"
              }
            ]
          },
          {
            "name": "TaskCompleteParams",
            "line": 100,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "scope",
            "line": 75,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "MemorizeParams"
          },
          {
            "name": "scope",
            "line": 97,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ForgetParams"
          }
        ]
      },
      {
        "file": "ciris_engine/schemas/actions/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/graph_typed_nodes.py",
        "classes": [
          {
            "name": "TypedGraphNode",
            "line": 16,
            "decorators": [],
            "bases": [
              "GraphNode",
              "ABC"
            ],
            "methods": [
              {
                "name": "to_graph_node",
                "line": 25,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TypedGraphNode"
              },
              {
                "name": "from_graph_node",
                "line": 36,
                "decorators": [
                  "classmethod",
                  "abstractmethod"
                ],
                "args": [
                  "cls",
                  "node"
                ],
                "is_async": false,
                "class": "TypedGraphNode"
              },
              {
                "name": "_serialize_extra_fields",
                "line": 44,
                "decorators": [],
                "args": [
                  "self",
                  "exclude_fields"
                ],
                "is_async": false,
                "class": "TypedGraphNode"
              },
              {
                "name": "_deserialize_datetime",
                "line": 82,
                "decorators": [
                  "classmethod"
                ],
                "args": [
                  "cls",
                  "value"
                ],
                "is_async": false,
                "class": "TypedGraphNode"
              }
            ]
          },
          {
            "name": "NodeTypeRegistry",
            "line": 92,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "register",
                "line": 102,
                "decorators": [
                  "classmethod"
                ],
                "args": [
                  "cls",
                  "node_type",
                  "node_class"
                ],
                "is_async": false,
                "class": "NodeTypeRegistry"
              },
              {
                "name": "get",
                "line": 116,
                "decorators": [
                  "classmethod"
                ],
                "args": [
                  "cls",
                  "node_type"
                ],
                "is_async": false,
                "class": "NodeTypeRegistry"
              },
              {
                "name": "deserialize",
                "line": 121,
                "decorators": [
                  "classmethod"
                ],
                "args": [
                  "cls",
                  "node"
                ],
                "is_async": false,
                "class": "NodeTypeRegistry"
              }
            ]
          }
        ],
        "functions": [
          {
            "name": "register_node_type",
            "line": 141,
            "decorators": [],
            "args": [
              "node_type"
            ],
            "is_async": false
          }
        ],
        "methods": [
          {
            "name": "to_graph_node",
            "line": 25,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TypedGraphNode"
          },
          {
            "name": "from_graph_node",
            "line": 36,
            "decorators": [
              "classmethod",
              "abstractmethod"
            ],
            "args": [
              "cls",
              "node"
            ],
            "is_async": false,
            "class": "TypedGraphNode"
          },
          {
            "name": "_serialize_extra_fields",
            "line": 44,
            "decorators": [],
            "args": [
              "self",
              "exclude_fields"
            ],
            "is_async": false,
            "class": "TypedGraphNode"
          },
          {
            "name": "_deserialize_datetime",
            "line": 82,
            "decorators": [
              "classmethod"
            ],
            "args": [
              "cls",
              "value"
            ],
            "is_async": false,
            "class": "TypedGraphNode"
          },
          {
            "name": "register",
            "line": 102,
            "decorators": [
              "classmethod"
            ],
            "args": [
              "cls",
              "node_type",
              "node_class"
            ],
            "is_async": false,
            "class": "NodeTypeRegistry"
          },
          {
            "name": "get",
            "line": 116,
            "decorators": [
              "classmethod"
            ],
            "args": [
              "cls",
              "node_type"
            ],
            "is_async": false,
            "class": "NodeTypeRegistry"
          },
          {
            "name": "deserialize",
            "line": 121,
            "decorators": [
              "classmethod"
            ],
            "args": [
              "cls",
              "node"
            ],
            "is_async": false,
            "class": "NodeTypeRegistry"
          }
        ]
      },
      {
        "file": "ciris_engine/schemas/services/resources_core.py",
        "classes": [
          {
            "name": "ResourceAction",
            "line": 13,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "ResourceLimit",
            "line": 22,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ResourceBudget",
            "line": 50,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ResourceSnapshot",
            "line": 79,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ResourceCost",
            "line": 97,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": [
              {
                "name": "calculate_from_tokens",
                "line": 122,
                "decorators": [],
                "args": [
                  "self",
                  "tokens",
                  "model"
                ],
                "is_async": false,
                "class": "ResourceCost"
              },
              {
                "name": "add_usage",
                "line": 132,
                "decorators": [],
                "args": [
                  "self",
                  "other"
                ],
                "is_async": false,
                "class": "ResourceCost"
              },
              {
                "name": "cost_dollars",
                "line": 141,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ResourceCost"
              },
              {
                "name": "water_liters",
                "line": 146,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ResourceCost"
              },
              {
                "name": "carbon_kg",
                "line": 151,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ResourceCost"
              }
            ]
          },
          {
            "name": "ResourceUsageMetrics",
            "line": 157,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ResourceAlert",
            "line": 189,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [
          {
            "name": "_memory_mb_limit",
            "line": 32,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "_cpu_percent_limit",
            "line": 35,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "_tokens_hour_limit",
            "line": 38,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "_tokens_day_limit",
            "line": 41,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "_disk_mb_limit",
            "line": 44,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "_thoughts_active_limit",
            "line": 47,
            "decorators": [],
            "args": [],
            "is_async": false
          }
        ],
        "methods": [
          {
            "name": "calculate_from_tokens",
            "line": 122,
            "decorators": [],
            "args": [
              "self",
              "tokens",
              "model"
            ],
            "is_async": false,
            "class": "ResourceCost"
          },
          {
            "name": "add_usage",
            "line": 132,
            "decorators": [],
            "args": [
              "self",
              "other"
            ],
            "is_async": false,
            "class": "ResourceCost"
          },
          {
            "name": "cost_dollars",
            "line": 141,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ResourceCost"
          },
          {
            "name": "water_liters",
            "line": 146,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ResourceCost"
          },
          {
            "name": "carbon_kg",
            "line": 151,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ResourceCost"
          }
        ]
      },
      {
        "file": "ciris_engine/schemas/services/tools.py",
        "classes": [
          {
            "name": "ToolParameterType",
            "line": 12,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "ToolParameter",
            "line": 21,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ToolRateLimits",
            "line": 33,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ToolInfo",
            "line": 40,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ToolExecutionResult",
            "line": 53,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/nodes.py",
        "classes": [
          {
            "name": "AuditEntryContext",
            "line": 15,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AuditEntry",
            "line": 24,
            "decorators": [
              "register_node_type"
            ],
            "bases": [
              "TypedGraphNode"
            ],
            "methods": [
              {
                "name": "to_graph_node",
                "line": 42,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AuditEntry"
              },
              {
                "name": "from_graph_node",
                "line": 80,
                "decorators": [
                  "classmethod"
                ],
                "args": [
                  "cls",
                  "node"
                ],
                "is_async": false,
                "class": "AuditEntry"
              }
            ]
          },
          {
            "name": "ConfigValue",
            "line": 120,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": [
              {
                "name": "value",
                "line": 130,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ConfigValue"
              }
            ]
          },
          {
            "name": "ConfigNode",
            "line": 138,
            "decorators": [
              "register_node_type"
            ],
            "bases": [
              "TypedGraphNode"
            ],
            "methods": [
              {
                "name": "to_graph_node",
                "line": 150,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ConfigNode"
              },
              {
                "name": "from_graph_node",
                "line": 178,
                "decorators": [
                  "classmethod"
                ],
                "args": [
                  "cls",
                  "node"
                ],
                "is_async": false,
                "class": "ConfigNode"
              }
            ]
          },
          {
            "name": "IdentitySnapshot",
            "line": 215,
            "decorators": [
              "register_node_type"
            ],
            "bases": [
              "TypedGraphNode"
            ],
            "methods": [
              {
                "name": "to_graph_node",
                "line": 242,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "IdentitySnapshot"
              },
              {
                "name": "from_graph_node",
                "line": 280,
                "decorators": [
                  "classmethod"
                ],
                "args": [
                  "cls",
                  "node"
                ],
                "is_async": false,
                "class": "IdentitySnapshot"
              }
            ]
          },
          {
            "name": "TSDBSummary",
            "line": 314,
            "decorators": [
              "register_node_type"
            ],
            "bases": [
              "TypedGraphNode"
            ],
            "methods": [
              {
                "name": "to_graph_node",
                "line": 349,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TSDBSummary"
              },
              {
                "name": "from_graph_node",
                "line": 386,
                "decorators": [
                  "classmethod"
                ],
                "args": [
                  "cls",
                  "node"
                ],
                "is_async": false,
                "class": "TSDBSummary"
              }
            ]
          },
          {
            "name": "IdentityNode",
            "line": 418,
            "decorators": [
              "register_node_type"
            ],
            "bases": [
              "TypedGraphNode"
            ],
            "methods": [
              {
                "name": "to_graph_node",
                "line": 465,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "IdentityNode"
              },
              {
                "name": "from_graph_node",
                "line": 512,
                "decorators": [
                  "classmethod"
                ],
                "args": [
                  "cls",
                  "node"
                ],
                "is_async": false,
                "class": "IdentityNode"
              },
              {
                "name": "from_agent_identity_root",
                "line": 561,
                "decorators": [
                  "classmethod"
                ],
                "args": [
                  "cls",
                  "identity",
                  "time_service"
                ],
                "is_async": false,
                "class": "IdentityNode"
              },
              {
                "name": "to_agent_identity_root",
                "line": 596,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "IdentityNode"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "to_graph_node",
            "line": 42,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AuditEntry"
          },
          {
            "name": "from_graph_node",
            "line": 80,
            "decorators": [
              "classmethod"
            ],
            "args": [
              "cls",
              "node"
            ],
            "is_async": false,
            "class": "AuditEntry"
          },
          {
            "name": "value",
            "line": 130,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ConfigValue"
          },
          {
            "name": "to_graph_node",
            "line": 150,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ConfigNode"
          },
          {
            "name": "from_graph_node",
            "line": 178,
            "decorators": [
              "classmethod"
            ],
            "args": [
              "cls",
              "node"
            ],
            "is_async": false,
            "class": "ConfigNode"
          },
          {
            "name": "to_graph_node",
            "line": 242,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "IdentitySnapshot"
          },
          {
            "name": "from_graph_node",
            "line": 280,
            "decorators": [
              "classmethod"
            ],
            "args": [
              "cls",
              "node"
            ],
            "is_async": false,
            "class": "IdentitySnapshot"
          },
          {
            "name": "to_graph_node",
            "line": 349,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TSDBSummary"
          },
          {
            "name": "from_graph_node",
            "line": 386,
            "decorators": [
              "classmethod"
            ],
            "args": [
              "cls",
              "node"
            ],
            "is_async": false,
            "class": "TSDBSummary"
          },
          {
            "name": "to_graph_node",
            "line": 465,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "IdentityNode"
          },
          {
            "name": "from_graph_node",
            "line": 512,
            "decorators": [
              "classmethod"
            ],
            "args": [
              "cls",
              "node"
            ],
            "is_async": false,
            "class": "IdentityNode"
          },
          {
            "name": "from_agent_identity_root",
            "line": 561,
            "decorators": [
              "classmethod"
            ],
            "args": [
              "cls",
              "identity",
              "time_service"
            ],
            "is_async": false,
            "class": "IdentityNode"
          },
          {
            "name": "to_agent_identity_root",
            "line": 596,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "IdentityNode"
          }
        ]
      },
      {
        "file": "ciris_engine/schemas/services/visibility.py",
        "classes": [
          {
            "name": "VisibilitySnapshot",
            "line": 17,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ThoughtStep",
            "line": 33,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ReasoningTrace",
            "line": 40,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "DecisionRecord",
            "line": 54,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "TaskDecisionHistory",
            "line": 71,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/community_core.py",
        "classes": [
          {
            "name": "SchemaVersion",
            "line": 12,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "CommunityHealth",
            "line": 16,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "CommunityValue",
            "line": 25,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "MinimalCommunityContext",
            "line": 32,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "CommunityMember",
            "line": 43,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "CommunityEvent",
            "line": 52,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "CommunitySnapshot",
            "line": 62,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/feedback_core.py",
        "classes": [
          {
            "name": "FeedbackType",
            "line": 13,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "FeedbackSource",
            "line": 22,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "FeedbackDirective",
            "line": 29,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "WiseAuthorityFeedback",
            "line": 38,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "FeedbackMapping",
            "line": 73,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "FeedbackProcessingRequest",
            "line": 91,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "FeedbackProcessingResult",
            "line": 99,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/operations.py",
        "classes": [
          {
            "name": "InitializationPhase",
            "line": 14,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "InitializationStatus",
            "line": 25,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "MemoryOpStatus",
            "line": 33,
            "decorators": [],
            "bases": [
              "CaseInsensitiveEnum"
            ],
            "methods": []
          },
          {
            "name": "MemoryOpAction",
            "line": 43,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "MemoryOpResult",
            "line": 49,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "MemoryQuery",
            "line": 58,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "MemoryRecallResult",
            "line": 68,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/metadata.py",
        "classes": [
          {
            "name": "ServiceMetadata",
            "line": 13,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/authority_core.py",
        "classes": [
          {
            "name": "WARole",
            "line": 12,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "TokenType",
            "line": 18,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "JWTSubType",
            "line": 24,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "WACertificate",
            "line": 31,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": [
              {
                "name": "validate_scopes_json",
                "line": 70,
                "decorators": [
                  "field_validator"
                ],
                "args": [
                  "cls",
                  "v"
                ],
                "is_async": false,
                "class": "WACertificate"
              },
              {
                "name": "scopes",
                "line": 80,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "WACertificate"
              },
              {
                "name": "has_scope",
                "line": 85,
                "decorators": [],
                "args": [
                  "self",
                  "scope"
                ],
                "is_async": false,
                "class": "WACertificate"
              }
            ]
          },
          {
            "name": "ChannelIdentity",
            "line": 91,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AuthorizationContext",
            "line": 101,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "WACertificateRequest",
            "line": 114,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "WAToken",
            "line": 130,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "WAAuthRequest",
            "line": 140,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "WAAuthResponse",
            "line": 151,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "WARoleMintRequest",
            "line": 160,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "DeferralRequest",
            "line": 171,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "DeferralResponse",
            "line": 181,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "GuidanceRequest",
            "line": 191,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "GuidanceResponse",
            "line": 200,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "DeferralApprovalContext",
            "line": 210,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "WAPermission",
            "line": 222,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "validate_scopes_json",
            "line": 70,
            "decorators": [
              "field_validator"
            ],
            "args": [
              "cls",
              "v"
            ],
            "is_async": false,
            "class": "WACertificate"
          },
          {
            "name": "scopes",
            "line": 80,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "WACertificate"
          },
          {
            "name": "has_scope",
            "line": 85,
            "decorators": [],
            "args": [
              "self",
              "scope"
            ],
            "is_async": false,
            "class": "WACertificate"
          }
        ]
      },
      {
        "file": "ciris_engine/schemas/services/filters_core.py",
        "classes": [
          {
            "name": "FilterPriority",
            "line": 14,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "TriggerType",
            "line": 22,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "FilterTrigger",
            "line": 31,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "UserTrustProfile",
            "line": 56,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ConversationHealth",
            "line": 74,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ContextHint",
            "line": 93,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "FilterResult",
            "line": 101,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ChannelConfig",
            "line": 116,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AdaptiveFilterConfig",
            "line": 125,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "PriorityStats",
            "line": 162,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "TriggerStats",
            "line": 170,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "FilterStats",
            "line": 178,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "FilterHealth",
            "line": 190,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/discord_nodes.py",
        "classes": [
          {
            "name": "DiscordDeferralNode",
            "line": 11,
            "decorators": [
              "register_node_type"
            ],
            "bases": [
              "TypedGraphNode"
            ],
            "methods": []
          },
          {
            "name": "DiscordApprovalNode",
            "line": 37,
            "decorators": [
              "register_node_type"
            ],
            "bases": [
              "TypedGraphNode"
            ],
            "methods": []
          },
          {
            "name": "DiscordWANode",
            "line": 67,
            "decorators": [
              "register_node_type"
            ],
            "bases": [
              "TypedGraphNode"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/context.py",
        "classes": [
          {
            "name": "GuidanceContext",
            "line": 11,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "DeferralContext",
            "line": 28,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ApprovalContext",
            "line": 43,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "WADecision",
            "line": 67,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "WAInteractionLog",
            "line": 98,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/llm.py",
        "classes": [
          {
            "name": "CircuitBreakerStats",
            "line": 10,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "LLMHealthResponse",
            "line": 20,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "LLMResponse",
            "line": 31,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "JSONExtractionResult",
            "line": 39,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "LLMCallMetadata",
            "line": 46,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "LLMMessage",
            "line": 57,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "LLMCallParams",
            "line": 63,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/graph_core.py",
        "classes": [
          {
            "name": "GraphScope",
            "line": 12,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "NodeType",
            "line": 19,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "ConfigNodeType",
            "line": 34,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "GraphNodeAttributes",
            "line": 64,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "GraphNode",
            "line": 73,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "GraphEdgeAttributes",
            "line": 85,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "GraphEdge",
            "line": 92,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/capabilities.py",
        "classes": [
          {
            "name": "LLMCapabilities",
            "line": 9,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "AuditCapabilities",
            "line": 13,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "CommunicationCapabilities",
            "line": 18,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "WiseAuthorityCapabilities",
            "line": 23,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "MemoryCapabilities",
            "line": 28,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "ToolCapabilities",
            "line": 34,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "TelemetryCapabilities",
            "line": 40,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/tools_core.py",
        "classes": [
          {
            "name": "ToolExecutionStatus",
            "line": 11,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "ToolParameterType",
            "line": 19,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "ToolParameter",
            "line": 29,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ToolExample",
            "line": 50,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ToolDescription",
            "line": 58,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ToolInvocation",
            "line": 72,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ToolResult",
            "line": 84,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ToolRegistryEntry",
            "line": 95,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ToolCapability",
            "line": 106,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/requests.py",
        "classes": [
          {
            "name": "ServiceRequest",
            "line": 21,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ServiceResponse",
            "line": 28,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "MemorizeRequest",
            "line": 39,
            "decorators": [],
            "bases": [
              "ServiceRequest"
            ],
            "methods": []
          },
          {
            "name": "MemorizeResponse",
            "line": 43,
            "decorators": [],
            "bases": [
              "ServiceResponse"
            ],
            "methods": []
          },
          {
            "name": "RecallRequest",
            "line": 48,
            "decorators": [],
            "bases": [
              "ServiceRequest"
            ],
            "methods": []
          },
          {
            "name": "RecallResponse",
            "line": 52,
            "decorators": [],
            "bases": [
              "ServiceResponse"
            ],
            "methods": []
          },
          {
            "name": "ToolExecutionRequest",
            "line": 59,
            "decorators": [],
            "bases": [
              "ServiceRequest"
            ],
            "methods": []
          },
          {
            "name": "ToolExecutionResponse",
            "line": 65,
            "decorators": [],
            "bases": [
              "ServiceResponse"
            ],
            "methods": []
          },
          {
            "name": "LLMRequest",
            "line": 74,
            "decorators": [],
            "bases": [
              "ServiceRequest"
            ],
            "methods": []
          },
          {
            "name": "LLMResponse",
            "line": 81,
            "decorators": [],
            "bases": [
              "ServiceResponse"
            ],
            "methods": []
          },
          {
            "name": "AuditRequest",
            "line": 90,
            "decorators": [],
            "bases": [
              "ServiceRequest"
            ],
            "methods": []
          },
          {
            "name": "AuditResponse",
            "line": 96,
            "decorators": [],
            "bases": [
              "ServiceResponse"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/shutdown.py",
        "classes": [
          {
            "name": "EmergencyCommandType",
            "line": 12,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "WASignedCommand",
            "line": 18,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "EmergencyShutdownStatus",
            "line": 43,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "KillSwitchConfig",
            "line": 59,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/data/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/persistence/core.py",
        "classes": [
          {
            "name": "DeferralPackage",
            "line": 18,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "DeferralReportContext",
            "line": 26,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "CorrelationUpdateRequest",
            "line": 34,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "MetricsQuery",
            "line": 44,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "IdentityContext",
            "line": 55,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ThoughtSummary",
            "line": 75,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "TaskSummaryInfo",
            "line": 86,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "QueryTimeRange",
            "line": 97,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "PersistenceHealth",
            "line": 104,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/persistence/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/persistence/tables.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/handlers/core.py",
        "classes": [
          {
            "name": "DeferralReason",
            "line": 13,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "EthicalAssessment",
            "line": 25,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "CSDMAAssessment",
            "line": 35,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "DSDMAAssessment",
            "line": 44,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ActionHistoryItem",
            "line": 53,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "DeferralPackage",
            "line": 62,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "TransportData",
            "line": 106,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "DeferralReport",
            "line": 119,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "DeferralResolution",
            "line": 142,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/handlers/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/handlers/contexts.py",
        "classes": [
          {
            "name": "BaseActionContext",
            "line": 13,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SpeakContext",
            "line": 23,
            "decorators": [],
            "bases": [
              "BaseActionContext"
            ],
            "methods": []
          },
          {
            "name": "ToolContext",
            "line": 30,
            "decorators": [],
            "bases": [
              "BaseActionContext"
            ],
            "methods": []
          },
          {
            "name": "ObserveContext",
            "line": 36,
            "decorators": [],
            "bases": [
              "BaseActionContext"
            ],
            "methods": []
          },
          {
            "name": "MemorizeContext",
            "line": 43,
            "decorators": [],
            "bases": [
              "BaseActionContext"
            ],
            "methods": []
          },
          {
            "name": "RecallContext",
            "line": 51,
            "decorators": [],
            "bases": [
              "BaseActionContext"
            ],
            "methods": []
          },
          {
            "name": "ForgetContext",
            "line": 59,
            "decorators": [],
            "bases": [
              "BaseActionContext"
            ],
            "methods": []
          },
          {
            "name": "RejectContext",
            "line": 65,
            "decorators": [],
            "bases": [
              "BaseActionContext"
            ],
            "methods": []
          },
          {
            "name": "PonderContext",
            "line": 72,
            "decorators": [],
            "bases": [
              "BaseActionContext"
            ],
            "methods": []
          },
          {
            "name": "DeferContext",
            "line": 77,
            "decorators": [],
            "bases": [
              "BaseActionContext"
            ],
            "methods": []
          },
          {
            "name": "TaskCompleteContext",
            "line": 83,
            "decorators": [],
            "bases": [
              "BaseActionContext"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/handlers/context.py",
        "classes": [
          {
            "name": "HandlerData",
            "line": 11,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SpeakHandlerData",
            "line": 15,
            "decorators": [],
            "bases": [
              "HandlerData"
            ],
            "methods": []
          },
          {
            "name": "ToolHandlerData",
            "line": 21,
            "decorators": [],
            "bases": [
              "HandlerData"
            ],
            "methods": []
          },
          {
            "name": "MemoryHandlerData",
            "line": 27,
            "decorators": [],
            "bases": [
              "HandlerData"
            ],
            "methods": []
          },
          {
            "name": "HandlerContext",
            "line": 33,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ActionContextParams",
            "line": 47,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SpeakActionParams",
            "line": 51,
            "decorators": [],
            "bases": [
              "ActionContextParams"
            ],
            "methods": []
          },
          {
            "name": "ToolActionParams",
            "line": 57,
            "decorators": [],
            "bases": [
              "ActionContextParams"
            ],
            "methods": []
          },
          {
            "name": "MemoryActionParams",
            "line": 62,
            "decorators": [],
            "bases": [
              "ActionContextParams"
            ],
            "methods": []
          },
          {
            "name": "ActionContext",
            "line": 69,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/handlers/schemas.py",
        "classes": [
          {
            "name": "HandlerContext",
            "line": 63,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "HandlerResult",
            "line": 72,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/buses/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/infrastructure/resource_monitor.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/special/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/special/self_configuration.py",
        "classes": [
          {
            "name": "AdaptationState",
            "line": 12,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "ProcessSnapshotResult",
            "line": 20,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AdaptationCycleResult",
            "line": 29,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "CycleEventData",
            "line": 58,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AdaptationStatus",
            "line": 75,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ReviewOutcome",
            "line": 100,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AgentIdentityRoot",
            "line": 125,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ConfigurationChange",
            "line": 134,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ChangeApprovalResult",
            "line": 148,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "RollbackResult",
            "line": 156,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ObservabilitySignal",
            "line": 164,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AdaptationOpportunity",
            "line": 172,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ObservabilityAnalysis",
            "line": 181,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AdaptationImpact",
            "line": 201,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AdaptationEffectiveness",
            "line": 209,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "PatternRecord",
            "line": 225,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "PatternLibrarySummary",
            "line": 236,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ServiceImprovementReport",
            "line": 244,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/authority/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/authority/wise_authority.py",
        "classes": [
          {
            "name": "PermissionEntry",
            "line": 12,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ApprovalRequestContext",
            "line": 19,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AuthenticationResult",
            "line": 25,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "WAUpdate",
            "line": 35,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "TokenVerification",
            "line": 43,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "PendingDeferral",
            "line": 52,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "DeferralResolution",
            "line": 77,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "WAResource",
            "line": 98,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "OAuthConfig",
            "line": 117,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/core/runtime.py",
        "classes": [
          {
            "name": "AdapterStatus",
            "line": 12,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "ProcessorStatus",
            "line": 21,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "ConfigScope",
            "line": 28,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "ConfigValidationLevel",
            "line": 35,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "ProcessorQueueStatus",
            "line": 42,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AdapterInfo",
            "line": 51,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AdapterOperationResult",
            "line": 61,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ConfigBackup",
            "line": 69,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ServiceRegistryInfo",
            "line": 78,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "CircuitBreakerResetResult",
            "line": 86,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ServiceHealthStatus",
            "line": 93,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ServiceSelectionExplanation",
            "line": 102,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "RuntimeEvent",
            "line": 110,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ConfigReloadResult",
            "line": 118,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ProcessorControlResponse",
            "line": 126,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AdapterOperationResponse",
            "line": 134,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "RuntimeStatusResponse",
            "line": 143,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "RuntimeStateSnapshot",
            "line": 152,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ConfigOperationResponse",
            "line": 161,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ConfigValidationResponse",
            "line": 169,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ConfigBackupResponse",
            "line": 177,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/core/runtime_config.py",
        "classes": [
          {
            "name": "AdapterConfig",
            "line": 11,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ProcessorConfig",
            "line": 34,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "RuntimeConfig",
            "line": 52,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ServiceInfo",
            "line": 72,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ServiceHealthReport",
            "line": 92,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/core/__init__.py",
        "classes": [
          {
            "name": "ServiceCapabilities",
            "line": 17,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ServiceStatus",
            "line": 25,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ServiceContainer",
            "line": 35,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": [
              {
                "name": "get_service_by_type",
                "line": 59,
                "decorators": [],
                "args": [
                  "self",
                  "service_type"
                ],
                "is_async": false,
                "class": "ServiceContainer"
              },
              {
                "name": "audit_service",
                "line": 80,
                "decorators": [
                  "property"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ServiceContainer"
              }
            ]
          },
          {
            "name": "RuntimeMetrics",
            "line": 84,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "RuntimeStatus",
            "line": 104,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "BusMessage",
            "line": 113,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ServiceRegistration",
            "line": 124,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "get_service_by_type",
            "line": 59,
            "decorators": [],
            "args": [
              "self",
              "service_type"
            ],
            "is_async": false,
            "class": "ServiceContainer"
          },
          {
            "name": "audit_service",
            "line": 80,
            "decorators": [
              "property"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ServiceContainer"
          }
        ]
      },
      {
        "file": "ciris_engine/schemas/services/core/secrets.py",
        "classes": [
          {
            "name": "SecretContext",
            "line": 12,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ConfigUpdate",
            "line": 20,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SecretAccessLog",
            "line": 29,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SecretFilterStatus",
            "line": 39,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "SecretsServiceStats",
            "line": 49,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/lifecycle/time.py",
        "classes": [
          {
            "name": "TimeServiceConfig",
            "line": 11,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "TimeSnapshot",
            "line": 23,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "TimeServiceStatus",
            "line": 32,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/lifecycle/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/lifecycle/initialization.py",
        "classes": [
          {
            "name": "InitializationStatus",
            "line": 7,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "InitializationVerification",
            "line": 17,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/graph/node_data.py",
        "error": "unexpected indent (<unknown>, line 26)",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/graph/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/graph/audit.py",
        "classes": [
          {
            "name": "AuditEventData",
            "line": 11,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "VerificationReport",
            "line": 31,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AuditQueryResult",
            "line": 53,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "AuditQuery",
            "line": 71,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/graph/incident.py",
        "classes": [
          {
            "name": "IncidentSeverity",
            "line": 14,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "IncidentStatus",
            "line": 21,
            "decorators": [],
            "bases": [
              "str",
              "Enum"
            ],
            "methods": []
          },
          {
            "name": "IncidentNode",
            "line": 30,
            "decorators": [
              "register_node_type"
            ],
            "bases": [
              "TypedGraphNode"
            ],
            "methods": [
              {
                "name": "to_graph_node",
                "line": 72,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "IncidentNode"
              },
              {
                "name": "from_graph_node",
                "line": 98,
                "decorators": [
                  "classmethod"
                ],
                "args": [
                  "cls",
                  "node"
                ],
                "is_async": false,
                "class": "IncidentNode"
              }
            ]
          },
          {
            "name": "ProblemNode",
            "line": 133,
            "decorators": [
              "register_node_type"
            ],
            "bases": [
              "TypedGraphNode"
            ],
            "methods": [
              {
                "name": "to_graph_node",
                "line": 157,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ProblemNode"
              },
              {
                "name": "from_graph_node",
                "line": 180,
                "decorators": [
                  "classmethod"
                ],
                "args": [
                  "cls",
                  "node"
                ],
                "is_async": false,
                "class": "ProblemNode"
              }
            ]
          },
          {
            "name": "IncidentInsightNode",
            "line": 211,
            "decorators": [
              "register_node_type"
            ],
            "bases": [
              "TypedGraphNode"
            ],
            "methods": [
              {
                "name": "to_graph_node",
                "line": 235,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "IncidentInsightNode"
              },
              {
                "name": "from_graph_node",
                "line": 254,
                "decorators": [
                  "classmethod"
                ],
                "args": [
                  "cls",
                  "node"
                ],
                "is_async": false,
                "class": "IncidentInsightNode"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "to_graph_node",
            "line": 72,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "IncidentNode"
          },
          {
            "name": "from_graph_node",
            "line": 98,
            "decorators": [
              "classmethod"
            ],
            "args": [
              "cls",
              "node"
            ],
            "is_async": false,
            "class": "IncidentNode"
          },
          {
            "name": "to_graph_node",
            "line": 157,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ProblemNode"
          },
          {
            "name": "from_graph_node",
            "line": 180,
            "decorators": [
              "classmethod"
            ],
            "args": [
              "cls",
              "node"
            ],
            "is_async": false,
            "class": "ProblemNode"
          },
          {
            "name": "to_graph_node",
            "line": 235,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "IncidentInsightNode"
          },
          {
            "name": "from_graph_node",
            "line": 254,
            "decorators": [
              "classmethod"
            ],
            "args": [
              "cls",
              "node"
            ],
            "is_async": false,
            "class": "IncidentInsightNode"
          }
        ]
      },
      {
        "file": "ciris_engine/schemas/services/graph/memory.py",
        "classes": [
          {
            "name": "NodeAttributes",
            "line": 11,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "MemorySearchFilter",
            "line": 30,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "GraphQuery",
            "line": 44,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "MemoryOperationContext",
            "line": 69,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/graph/tsdb_consolidation.py",
        "classes": [
          {
            "name": "TSDBConsolidationConfig",
            "line": 10,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "TSDBConsolidationStatus",
            "line": 26,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/schemas/services/graph/telemetry.py",
        "classes": [
          {
            "name": "TelemetrySnapshotResult",
            "line": 14,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "TelemetryData",
            "line": 22,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ResourceData",
            "line": 28,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "BehavioralData",
            "line": 34,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "UserProfile",
            "line": 40,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ChannelContext",
            "line": 47,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ConsolidationResult",
            "line": 54,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "TelemetryServiceStatus",
            "line": 62,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "GraphQuery",
            "line": 70,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          },
          {
            "name": "ServiceCapabilities",
            "line": 77,
            "decorators": [],
            "bases": [
              "BaseModel"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/protocols/utils/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/protocols/infrastructure/base.py",
        "classes": [
          {
            "name": "RuntimeProtocol",
            "line": 24,
            "decorators": [],
            "bases": [
              "ServiceProtocol"
            ],
            "methods": [
              {
                "name": "run",
                "line": 28,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeProtocol"
              },
              {
                "name": "pause",
                "line": 33,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeProtocol"
              },
              {
                "name": "resume",
                "line": 38,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeProtocol"
              },
              {
                "name": "shutdown",
                "line": 43,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "reason"
                ],
                "is_async": true,
                "class": "RuntimeProtocol"
              },
              {
                "name": "get_runtime_stats",
                "line": 48,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "RuntimeProtocol"
              },
              {
                "name": "health_check",
                "line": 53,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeProtocol"
              }
            ]
          },
          {
            "name": "ServiceInitializerProtocol",
            "line": 57,
            "decorators": [],
            "bases": [
              "ServiceProtocol"
            ],
            "methods": [
              {
                "name": "initialize_services",
                "line": 61,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ServiceInitializerProtocol"
              },
              {
                "name": "validate_dependencies",
                "line": 66,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ServiceInitializerProtocol"
              },
              {
                "name": "bootstrap",
                "line": 71,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ServiceInitializerProtocol"
              },
              {
                "name": "get_initialization_order",
                "line": 76,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ServiceInitializerProtocol"
              },
              {
                "name": "teardown_services",
                "line": 81,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ServiceInitializerProtocol"
              }
            ]
          },
          {
            "name": "BusManagerProtocol",
            "line": 85,
            "decorators": [],
            "bases": [
              "ServiceProtocol"
            ],
            "methods": [
              {
                "name": "send",
                "line": 89,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "service",
                  "action",
                  "payload"
                ],
                "is_async": true,
                "class": "BusManagerProtocol"
              },
              {
                "name": "request",
                "line": 94,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "service",
                  "action",
                  "payload"
                ],
                "is_async": true,
                "class": "BusManagerProtocol"
              },
              {
                "name": "subscribe",
                "line": 99,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "pattern",
                  "handler"
                ],
                "is_async": true,
                "class": "BusManagerProtocol"
              },
              {
                "name": "unsubscribe",
                "line": 104,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "subscription_id"
                ],
                "is_async": true,
                "class": "BusManagerProtocol"
              },
              {
                "name": "get_bus_metrics",
                "line": 109,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "BusManagerProtocol"
              }
            ]
          },
          {
            "name": "IdentityVarianceMonitorProtocol",
            "line": 121,
            "decorators": [],
            "bases": [
              "ServiceProtocol"
            ],
            "methods": [
              {
                "name": "measure_drift",
                "line": 125,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "IdentityVarianceMonitorProtocol"
              },
              {
                "name": "get_baseline",
                "line": 130,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "IdentityVarianceMonitorProtocol"
              },
              {
                "name": "update_baseline",
                "line": 135,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "reason"
                ],
                "is_async": true,
                "class": "IdentityVarianceMonitorProtocol"
              },
              {
                "name": "alert_on_variance",
                "line": 140,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "threshold"
                ],
                "is_async": true,
                "class": "IdentityVarianceMonitorProtocol"
              },
              {
                "name": "get_variance_history",
                "line": 145,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "IdentityVarianceMonitorProtocol"
              }
            ]
          },
          {
            "name": "ConfigurationFeedbackLoopProtocol",
            "line": 149,
            "decorators": [],
            "bases": [
              "ServiceProtocol"
            ],
            "methods": [
              {
                "name": "collect_feedback",
                "line": 153,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ConfigurationFeedbackLoopProtocol"
              },
              {
                "name": "analyze_patterns",
                "line": 158,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ConfigurationFeedbackLoopProtocol"
              },
              {
                "name": "propose_updates",
                "line": 163,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ConfigurationFeedbackLoopProtocol"
              },
              {
                "name": "apply_learning",
                "line": 168,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "update_id"
                ],
                "is_async": true,
                "class": "ConfigurationFeedbackLoopProtocol"
              }
            ]
          },
          {
            "name": "AdapterManagerProtocol",
            "line": 176,
            "decorators": [],
            "bases": [
              "ServiceProtocol"
            ],
            "methods": [
              {
                "name": "register_adapter",
                "line": 180,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "adapter_type",
                  "adapter"
                ],
                "is_async": true,
                "class": "AdapterManagerProtocol"
              },
              {
                "name": "start_adapter",
                "line": 185,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "adapter_type"
                ],
                "is_async": true,
                "class": "AdapterManagerProtocol"
              },
              {
                "name": "stop_adapter",
                "line": 190,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "adapter_type"
                ],
                "is_async": true,
                "class": "AdapterManagerProtocol"
              },
              {
                "name": "get_active_adapters",
                "line": 195,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AdapterManagerProtocol"
              },
              {
                "name": "route_message",
                "line": 200,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "message"
                ],
                "is_async": true,
                "class": "AdapterManagerProtocol"
              }
            ]
          },
          {
            "name": "PersistenceManagerProtocol",
            "line": 208,
            "decorators": [],
            "bases": [
              "ServiceProtocol"
            ],
            "methods": [
              {
                "name": "save_checkpoint",
                "line": 212,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "checkpoint_id"
                ],
                "is_async": true,
                "class": "PersistenceManagerProtocol"
              },
              {
                "name": "restore_checkpoint",
                "line": 217,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "checkpoint_id"
                ],
                "is_async": true,
                "class": "PersistenceManagerProtocol"
              },
              {
                "name": "get_checkpoints",
                "line": 222,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "PersistenceManagerProtocol"
              },
              {
                "name": "cleanup_old_data",
                "line": 227,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "retention_days"
                ],
                "is_async": true,
                "class": "PersistenceManagerProtocol"
              }
            ]
          },
          {
            "name": "ServiceRegistryProtocol",
            "line": 235,
            "decorators": [],
            "bases": [
              "ServiceProtocol"
            ],
            "methods": [
              {
                "name": "register_service",
                "line": 239,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "service_name",
                  "service_info"
                ],
                "is_async": true,
                "class": "ServiceRegistryProtocol"
              },
              {
                "name": "unregister_service",
                "line": 244,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "service_name"
                ],
                "is_async": true,
                "class": "ServiceRegistryProtocol"
              },
              {
                "name": "get_service",
                "line": 249,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "service_name"
                ],
                "is_async": false,
                "class": "ServiceRegistryProtocol"
              },
              {
                "name": "list_services",
                "line": 254,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ServiceRegistryProtocol"
              },
              {
                "name": "health_check_service",
                "line": 259,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "service_name"
                ],
                "is_async": true,
                "class": "ServiceRegistryProtocol"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "run",
            "line": 28,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeProtocol"
          },
          {
            "name": "pause",
            "line": 33,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeProtocol"
          },
          {
            "name": "resume",
            "line": 38,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeProtocol"
          },
          {
            "name": "shutdown",
            "line": 43,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "reason"
            ],
            "is_async": true,
            "class": "RuntimeProtocol"
          },
          {
            "name": "get_runtime_stats",
            "line": 48,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "RuntimeProtocol"
          },
          {
            "name": "health_check",
            "line": 53,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeProtocol"
          },
          {
            "name": "initialize_services",
            "line": 61,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ServiceInitializerProtocol"
          },
          {
            "name": "validate_dependencies",
            "line": 66,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ServiceInitializerProtocol"
          },
          {
            "name": "bootstrap",
            "line": 71,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ServiceInitializerProtocol"
          },
          {
            "name": "get_initialization_order",
            "line": 76,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ServiceInitializerProtocol"
          },
          {
            "name": "teardown_services",
            "line": 81,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ServiceInitializerProtocol"
          },
          {
            "name": "send",
            "line": 89,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "service",
              "action",
              "payload"
            ],
            "is_async": true,
            "class": "BusManagerProtocol"
          },
          {
            "name": "request",
            "line": 94,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "service",
              "action",
              "payload"
            ],
            "is_async": true,
            "class": "BusManagerProtocol"
          },
          {
            "name": "subscribe",
            "line": 99,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "pattern",
              "handler"
            ],
            "is_async": true,
            "class": "BusManagerProtocol"
          },
          {
            "name": "unsubscribe",
            "line": 104,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "subscription_id"
            ],
            "is_async": true,
            "class": "BusManagerProtocol"
          },
          {
            "name": "get_bus_metrics",
            "line": 109,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "BusManagerProtocol"
          },
          {
            "name": "measure_drift",
            "line": 125,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "IdentityVarianceMonitorProtocol"
          },
          {
            "name": "get_baseline",
            "line": 130,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "IdentityVarianceMonitorProtocol"
          },
          {
            "name": "update_baseline",
            "line": 135,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "reason"
            ],
            "is_async": true,
            "class": "IdentityVarianceMonitorProtocol"
          },
          {
            "name": "alert_on_variance",
            "line": 140,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "threshold"
            ],
            "is_async": true,
            "class": "IdentityVarianceMonitorProtocol"
          },
          {
            "name": "get_variance_history",
            "line": 145,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "IdentityVarianceMonitorProtocol"
          },
          {
            "name": "collect_feedback",
            "line": 153,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ConfigurationFeedbackLoopProtocol"
          },
          {
            "name": "analyze_patterns",
            "line": 158,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ConfigurationFeedbackLoopProtocol"
          },
          {
            "name": "propose_updates",
            "line": 163,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ConfigurationFeedbackLoopProtocol"
          },
          {
            "name": "apply_learning",
            "line": 168,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "update_id"
            ],
            "is_async": true,
            "class": "ConfigurationFeedbackLoopProtocol"
          },
          {
            "name": "register_adapter",
            "line": 180,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "adapter_type",
              "adapter"
            ],
            "is_async": true,
            "class": "AdapterManagerProtocol"
          },
          {
            "name": "start_adapter",
            "line": 185,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "adapter_type"
            ],
            "is_async": true,
            "class": "AdapterManagerProtocol"
          },
          {
            "name": "stop_adapter",
            "line": 190,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "adapter_type"
            ],
            "is_async": true,
            "class": "AdapterManagerProtocol"
          },
          {
            "name": "get_active_adapters",
            "line": 195,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AdapterManagerProtocol"
          },
          {
            "name": "route_message",
            "line": 200,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "message"
            ],
            "is_async": true,
            "class": "AdapterManagerProtocol"
          },
          {
            "name": "save_checkpoint",
            "line": 212,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "checkpoint_id"
            ],
            "is_async": true,
            "class": "PersistenceManagerProtocol"
          },
          {
            "name": "restore_checkpoint",
            "line": 217,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "checkpoint_id"
            ],
            "is_async": true,
            "class": "PersistenceManagerProtocol"
          },
          {
            "name": "get_checkpoints",
            "line": 222,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "PersistenceManagerProtocol"
          },
          {
            "name": "cleanup_old_data",
            "line": 227,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "retention_days"
            ],
            "is_async": true,
            "class": "PersistenceManagerProtocol"
          },
          {
            "name": "register_service",
            "line": 239,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "service_name",
              "service_info"
            ],
            "is_async": true,
            "class": "ServiceRegistryProtocol"
          },
          {
            "name": "unregister_service",
            "line": 244,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "service_name"
            ],
            "is_async": true,
            "class": "ServiceRegistryProtocol"
          },
          {
            "name": "get_service",
            "line": 249,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "service_name"
            ],
            "is_async": false,
            "class": "ServiceRegistryProtocol"
          },
          {
            "name": "list_services",
            "line": 254,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ServiceRegistryProtocol"
          },
          {
            "name": "health_check_service",
            "line": 259,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "service_name"
            ],
            "is_async": true,
            "class": "ServiceRegistryProtocol"
          }
        ]
      },
      {
        "file": "ciris_engine/protocols/infrastructure/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/protocols/runtime/base.py",
        "classes": [
          {
            "name": "ServiceProtocol",
            "line": 19,
            "decorators": [],
            "bases": [
              "Protocol"
            ],
            "methods": [
              {
                "name": "start",
                "line": 23,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ServiceProtocol"
              },
              {
                "name": "stop",
                "line": 28,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ServiceProtocol"
              },
              {
                "name": "get_capabilities",
                "line": 33,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ServiceProtocol"
              },
              {
                "name": "get_status",
                "line": 38,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ServiceProtocol"
              },
              {
                "name": "is_healthy",
                "line": 43,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ServiceProtocol"
              }
            ]
          },
          {
            "name": "GraphServiceProtocol",
            "line": 53,
            "decorators": [],
            "bases": [
              "ServiceProtocol",
              "Protocol"
            ],
            "methods": [
              {
                "name": "store_in_graph",
                "line": 57,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "node"
                ],
                "is_async": true,
                "class": "GraphServiceProtocol"
              },
              {
                "name": "query_graph",
                "line": 62,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "query"
                ],
                "is_async": true,
                "class": "GraphServiceProtocol"
              },
              {
                "name": "get_node_type",
                "line": 67,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "GraphServiceProtocol"
              }
            ]
          },
          {
            "name": "CoreServiceProtocol",
            "line": 71,
            "decorators": [],
            "bases": [
              "ServiceProtocol",
              "Protocol"
            ],
            "methods": [
              {
                "name": "get_resource_limits",
                "line": 75,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CoreServiceProtocol"
              }
            ]
          },
          {
            "name": "VisibilityServiceProtocol",
            "line": 79,
            "decorators": [],
            "bases": [
              "ServiceProtocol",
              "Protocol"
            ],
            "methods": [
              {
                "name": "get_visibility_data",
                "line": 83,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "VisibilityServiceProtocol"
              }
            ]
          },
          {
            "name": "BaseHandlerProtocol",
            "line": 87,
            "decorators": [],
            "bases": [
              "Protocol"
            ],
            "methods": [
              {
                "name": "handle",
                "line": 91,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "task",
                  "thought",
                  "context"
                ],
                "is_async": true,
                "class": "BaseHandlerProtocol"
              },
              {
                "name": "get_action_type",
                "line": 96,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "BaseHandlerProtocol"
              }
            ]
          },
          {
            "name": "BaseAdapterProtocol",
            "line": 100,
            "decorators": [],
            "bases": [
              "Protocol"
            ],
            "methods": [
              {
                "name": "start",
                "line": 104,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "BaseAdapterProtocol"
              },
              {
                "name": "stop",
                "line": 109,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "BaseAdapterProtocol"
              },
              {
                "name": "get_config",
                "line": 114,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "BaseAdapterProtocol"
              },
              {
                "name": "get_status",
                "line": 119,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "BaseAdapterProtocol"
              }
            ]
          },
          {
            "name": "BaseDMAProtocol",
            "line": 123,
            "decorators": [],
            "bases": [
              "Protocol"
            ],
            "methods": [
              {
                "name": "evaluate",
                "line": 127,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "context"
                ],
                "is_async": true,
                "class": "BaseDMAProtocol"
              },
              {
                "name": "get_confidence",
                "line": 132,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "BaseDMAProtocol"
              },
              {
                "name": "get_algorithm_type",
                "line": 137,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "BaseDMAProtocol"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "start",
            "line": 23,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ServiceProtocol"
          },
          {
            "name": "stop",
            "line": 28,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ServiceProtocol"
          },
          {
            "name": "get_capabilities",
            "line": 33,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ServiceProtocol"
          },
          {
            "name": "get_status",
            "line": 38,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ServiceProtocol"
          },
          {
            "name": "is_healthy",
            "line": 43,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ServiceProtocol"
          },
          {
            "name": "store_in_graph",
            "line": 57,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "node"
            ],
            "is_async": true,
            "class": "GraphServiceProtocol"
          },
          {
            "name": "query_graph",
            "line": 62,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "query"
            ],
            "is_async": true,
            "class": "GraphServiceProtocol"
          },
          {
            "name": "get_node_type",
            "line": 67,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "GraphServiceProtocol"
          },
          {
            "name": "get_resource_limits",
            "line": 75,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CoreServiceProtocol"
          },
          {
            "name": "get_visibility_data",
            "line": 83,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "VisibilityServiceProtocol"
          },
          {
            "name": "handle",
            "line": 91,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "task",
              "thought",
              "context"
            ],
            "is_async": true,
            "class": "BaseHandlerProtocol"
          },
          {
            "name": "get_action_type",
            "line": 96,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "BaseHandlerProtocol"
          },
          {
            "name": "start",
            "line": 104,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "BaseAdapterProtocol"
          },
          {
            "name": "stop",
            "line": 109,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "BaseAdapterProtocol"
          },
          {
            "name": "get_config",
            "line": 114,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "BaseAdapterProtocol"
          },
          {
            "name": "get_status",
            "line": 119,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "BaseAdapterProtocol"
          },
          {
            "name": "evaluate",
            "line": 127,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "context"
            ],
            "is_async": true,
            "class": "BaseDMAProtocol"
          },
          {
            "name": "get_confidence",
            "line": 132,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "BaseDMAProtocol"
          },
          {
            "name": "get_algorithm_type",
            "line": 137,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "BaseDMAProtocol"
          }
        ]
      },
      {
        "file": "ciris_engine/protocols/runtime/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/protocols/adapters/base.py",
        "classes": [
          {
            "name": "APIAdapterProtocol",
            "line": 16,
            "decorators": [],
            "bases": [
              "BaseAdapterProtocol"
            ],
            "methods": [
              {
                "name": "setup_routes",
                "line": 20,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "APIAdapterProtocol"
              },
              {
                "name": "handle_request",
                "line": 25,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "APIAdapterProtocol"
              },
              {
                "name": "get_openapi_spec",
                "line": 30,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "APIAdapterProtocol"
              },
              {
                "name": "add_middleware",
                "line": 35,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "middleware"
                ],
                "is_async": false,
                "class": "APIAdapterProtocol"
              },
              {
                "name": "get_route_metrics",
                "line": 40,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "APIAdapterProtocol"
              }
            ]
          },
          {
            "name": "CLIAdapterProtocol",
            "line": 44,
            "decorators": [],
            "bases": [
              "BaseAdapterProtocol"
            ],
            "methods": [
              {
                "name": "register_commands",
                "line": 48,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CLIAdapterProtocol"
              },
              {
                "name": "handle_input",
                "line": 53,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "input_text"
                ],
                "is_async": true,
                "class": "CLIAdapterProtocol"
              },
              {
                "name": "show_prompt",
                "line": 58,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CLIAdapterProtocol"
              },
              {
                "name": "get_command_help",
                "line": 63,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "command"
                ],
                "is_async": false,
                "class": "CLIAdapterProtocol"
              },
              {
                "name": "set_output_format",
                "line": 68,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "format"
                ],
                "is_async": false,
                "class": "CLIAdapterProtocol"
              }
            ]
          },
          {
            "name": "DiscordAdapterProtocol",
            "line": 72,
            "decorators": [],
            "bases": [
              "BaseAdapterProtocol"
            ],
            "methods": [
              {
                "name": "setup_bot",
                "line": 76,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "DiscordAdapterProtocol"
              },
              {
                "name": "handle_message",
                "line": 81,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "message"
                ],
                "is_async": true,
                "class": "DiscordAdapterProtocol"
              },
              {
                "name": "handle_reaction",
                "line": 86,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "reaction",
                  "user"
                ],
                "is_async": true,
                "class": "DiscordAdapterProtocol"
              },
              {
                "name": "send_message",
                "line": 91,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "channel_id",
                  "content",
                  "embed"
                ],
                "is_async": true,
                "class": "DiscordAdapterProtocol"
              },
              {
                "name": "get_guild_config",
                "line": 96,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "guild_id"
                ],
                "is_async": false,
                "class": "DiscordAdapterProtocol"
              },
              {
                "name": "handle_slash_command",
                "line": 101,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "interaction"
                ],
                "is_async": true,
                "class": "DiscordAdapterProtocol"
              }
            ]
          },
          {
            "name": "SlackAdapterProtocol",
            "line": 109,
            "decorators": [],
            "bases": [
              "BaseAdapterProtocol"
            ],
            "methods": [
              {
                "name": "handle_event",
                "line": 113,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "event"
                ],
                "is_async": true,
                "class": "SlackAdapterProtocol"
              },
              {
                "name": "handle_slash_command",
                "line": 118,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "command"
                ],
                "is_async": true,
                "class": "SlackAdapterProtocol"
              }
            ]
          },
          {
            "name": "WebSocketAdapterProtocol",
            "line": 122,
            "decorators": [],
            "bases": [
              "BaseAdapterProtocol"
            ],
            "methods": [
              {
                "name": "handle_connection",
                "line": 126,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "websocket"
                ],
                "is_async": true,
                "class": "WebSocketAdapterProtocol"
              },
              {
                "name": "broadcast_message",
                "line": 131,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "message"
                ],
                "is_async": true,
                "class": "WebSocketAdapterProtocol"
              }
            ]
          },
          {
            "name": "MatrixAdapterProtocol",
            "line": 135,
            "decorators": [],
            "bases": [
              "BaseAdapterProtocol"
            ],
            "methods": [
              {
                "name": "handle_room_message",
                "line": 139,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "room",
                  "event"
                ],
                "is_async": true,
                "class": "MatrixAdapterProtocol"
              },
              {
                "name": "join_room",
                "line": 144,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "room_id"
                ],
                "is_async": true,
                "class": "MatrixAdapterProtocol"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "setup_routes",
            "line": 20,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "APIAdapterProtocol"
          },
          {
            "name": "handle_request",
            "line": 25,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "APIAdapterProtocol"
          },
          {
            "name": "get_openapi_spec",
            "line": 30,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "APIAdapterProtocol"
          },
          {
            "name": "add_middleware",
            "line": 35,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "middleware"
            ],
            "is_async": false,
            "class": "APIAdapterProtocol"
          },
          {
            "name": "get_route_metrics",
            "line": 40,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "APIAdapterProtocol"
          },
          {
            "name": "register_commands",
            "line": 48,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CLIAdapterProtocol"
          },
          {
            "name": "handle_input",
            "line": 53,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "input_text"
            ],
            "is_async": true,
            "class": "CLIAdapterProtocol"
          },
          {
            "name": "show_prompt",
            "line": 58,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CLIAdapterProtocol"
          },
          {
            "name": "get_command_help",
            "line": 63,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "command"
            ],
            "is_async": false,
            "class": "CLIAdapterProtocol"
          },
          {
            "name": "set_output_format",
            "line": 68,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "format"
            ],
            "is_async": false,
            "class": "CLIAdapterProtocol"
          },
          {
            "name": "setup_bot",
            "line": 76,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "DiscordAdapterProtocol"
          },
          {
            "name": "handle_message",
            "line": 81,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "message"
            ],
            "is_async": true,
            "class": "DiscordAdapterProtocol"
          },
          {
            "name": "handle_reaction",
            "line": 86,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "reaction",
              "user"
            ],
            "is_async": true,
            "class": "DiscordAdapterProtocol"
          },
          {
            "name": "send_message",
            "line": 91,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "channel_id",
              "content",
              "embed"
            ],
            "is_async": true,
            "class": "DiscordAdapterProtocol"
          },
          {
            "name": "get_guild_config",
            "line": 96,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "guild_id"
            ],
            "is_async": false,
            "class": "DiscordAdapterProtocol"
          },
          {
            "name": "handle_slash_command",
            "line": 101,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "interaction"
            ],
            "is_async": true,
            "class": "DiscordAdapterProtocol"
          },
          {
            "name": "handle_event",
            "line": 113,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "event"
            ],
            "is_async": true,
            "class": "SlackAdapterProtocol"
          },
          {
            "name": "handle_slash_command",
            "line": 118,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "command"
            ],
            "is_async": true,
            "class": "SlackAdapterProtocol"
          },
          {
            "name": "handle_connection",
            "line": 126,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "websocket"
            ],
            "is_async": true,
            "class": "WebSocketAdapterProtocol"
          },
          {
            "name": "broadcast_message",
            "line": 131,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "message"
            ],
            "is_async": true,
            "class": "WebSocketAdapterProtocol"
          },
          {
            "name": "handle_room_message",
            "line": 139,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "room",
              "event"
            ],
            "is_async": true,
            "class": "MatrixAdapterProtocol"
          },
          {
            "name": "join_room",
            "line": 144,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "room_id"
            ],
            "is_async": true,
            "class": "MatrixAdapterProtocol"
          }
        ]
      },
      {
        "file": "ciris_engine/protocols/adapters/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/protocols/processors/base.py",
        "classes": [
          {
            "name": "ProcessorProtocol",
            "line": 11,
            "decorators": [],
            "bases": [
              "Protocol"
            ],
            "methods": [
              {
                "name": "get_supported_states",
                "line": 23,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ProcessorProtocol"
              },
              {
                "name": "process",
                "line": 35,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "round_number"
                ],
                "is_async": true,
                "class": "ProcessorProtocol"
              },
              {
                "name": "can_process",
                "line": 54,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ProcessorProtocol"
              },
              {
                "name": "initialize",
                "line": 69,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ProcessorProtocol"
              },
              {
                "name": "cleanup",
                "line": 79,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ProcessorProtocol"
              },
              {
                "name": "get_metrics",
                "line": 89,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ProcessorProtocol"
              },
              {
                "name": "should_transition",
                "line": 99,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ProcessorProtocol"
              },
              {
                "name": "handle_error",
                "line": 109,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "error",
                  "context"
                ],
                "is_async": true,
                "class": "ProcessorProtocol"
              },
              {
                "name": "get_processor_config",
                "line": 124,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ProcessorProtocol"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "get_supported_states",
            "line": 23,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ProcessorProtocol"
          },
          {
            "name": "process",
            "line": 35,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "round_number"
            ],
            "is_async": true,
            "class": "ProcessorProtocol"
          },
          {
            "name": "can_process",
            "line": 54,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ProcessorProtocol"
          },
          {
            "name": "initialize",
            "line": 69,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ProcessorProtocol"
          },
          {
            "name": "cleanup",
            "line": 79,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ProcessorProtocol"
          },
          {
            "name": "get_metrics",
            "line": 89,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ProcessorProtocol"
          },
          {
            "name": "should_transition",
            "line": 99,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ProcessorProtocol"
          },
          {
            "name": "handle_error",
            "line": 109,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "error",
              "context"
            ],
            "is_async": true,
            "class": "ProcessorProtocol"
          },
          {
            "name": "get_processor_config",
            "line": 124,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ProcessorProtocol"
          }
        ]
      },
      {
        "file": "ciris_engine/protocols/processors/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/protocols/processors/agent.py",
        "classes": [
          {
            "name": "ProcessingSchedule",
            "line": 15,
            "decorators": [],
            "bases": [
              "Protocol"
            ],
            "methods": []
          },
          {
            "name": "ProcessorMetrics",
            "line": 23,
            "decorators": [],
            "bases": [
              "Protocol"
            ],
            "methods": []
          },
          {
            "name": "QueueStatus",
            "line": 35,
            "decorators": [],
            "bases": [
              "Protocol"
            ],
            "methods": []
          },
          {
            "name": "ProcessingResult",
            "line": 45,
            "decorators": [],
            "bases": [
              "Protocol"
            ],
            "methods": []
          },
          {
            "name": "AgentProcessorProtocol",
            "line": 54,
            "decorators": [],
            "bases": [
              "Protocol"
            ],
            "methods": [
              {
                "name": "enter_state",
                "line": 74,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "state"
                ],
                "is_async": true,
                "class": "AgentProcessorProtocol"
              },
              {
                "name": "get_current_state",
                "line": 87,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AgentProcessorProtocol"
              },
              {
                "name": "get_processing_schedule",
                "line": 97,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AgentProcessorProtocol"
              },
              {
                "name": "force_state_transition",
                "line": 112,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "target_state",
                  "reason"
                ],
                "is_async": true,
                "class": "AgentProcessorProtocol"
              },
              {
                "name": "pause_processing",
                "line": 130,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "AgentProcessorProtocol"
              },
              {
                "name": "resume_processing",
                "line": 143,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "AgentProcessorProtocol"
              },
              {
                "name": "single_step",
                "line": 153,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "AgentProcessorProtocol"
              },
              {
                "name": "stop_processing",
                "line": 165,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "graceful"
                ],
                "is_async": true,
                "class": "AgentProcessorProtocol"
              },
              {
                "name": "emergency_stop",
                "line": 176,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "AgentProcessorProtocol"
              },
              {
                "name": "get_processor_metrics",
                "line": 190,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AgentProcessorProtocol"
              },
              {
                "name": "get_queue_status",
                "line": 200,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AgentProcessorProtocol"
              },
              {
                "name": "is_paused",
                "line": 210,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AgentProcessorProtocol"
              },
              {
                "name": "is_single_stepping",
                "line": 220,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AgentProcessorProtocol"
              },
              {
                "name": "is_processing",
                "line": 230,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AgentProcessorProtocol"
              },
              {
                "name": "set_processing_speed",
                "line": 244,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "multiplier"
                ],
                "is_async": true,
                "class": "AgentProcessorProtocol"
              },
              {
                "name": "skip_current_item",
                "line": 254,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "reason"
                ],
                "is_async": true,
                "class": "AgentProcessorProtocol"
              },
              {
                "name": "replay_last_item",
                "line": 267,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "AgentProcessorProtocol"
              },
              {
                "name": "get_state_history",
                "line": 279,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "limit"
                ],
                "is_async": false,
                "class": "AgentProcessorProtocol"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "enter_state",
            "line": 74,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "state"
            ],
            "is_async": true,
            "class": "AgentProcessorProtocol"
          },
          {
            "name": "get_current_state",
            "line": 87,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AgentProcessorProtocol"
          },
          {
            "name": "get_processing_schedule",
            "line": 97,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AgentProcessorProtocol"
          },
          {
            "name": "force_state_transition",
            "line": 112,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "target_state",
              "reason"
            ],
            "is_async": true,
            "class": "AgentProcessorProtocol"
          },
          {
            "name": "pause_processing",
            "line": 130,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "AgentProcessorProtocol"
          },
          {
            "name": "resume_processing",
            "line": 143,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "AgentProcessorProtocol"
          },
          {
            "name": "single_step",
            "line": 153,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "AgentProcessorProtocol"
          },
          {
            "name": "stop_processing",
            "line": 165,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "graceful"
            ],
            "is_async": true,
            "class": "AgentProcessorProtocol"
          },
          {
            "name": "emergency_stop",
            "line": 176,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "AgentProcessorProtocol"
          },
          {
            "name": "get_processor_metrics",
            "line": 190,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AgentProcessorProtocol"
          },
          {
            "name": "get_queue_status",
            "line": 200,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AgentProcessorProtocol"
          },
          {
            "name": "is_paused",
            "line": 210,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AgentProcessorProtocol"
          },
          {
            "name": "is_single_stepping",
            "line": 220,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AgentProcessorProtocol"
          },
          {
            "name": "is_processing",
            "line": 230,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AgentProcessorProtocol"
          },
          {
            "name": "set_processing_speed",
            "line": 244,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "multiplier"
            ],
            "is_async": true,
            "class": "AgentProcessorProtocol"
          },
          {
            "name": "skip_current_item",
            "line": 254,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "reason"
            ],
            "is_async": true,
            "class": "AgentProcessorProtocol"
          },
          {
            "name": "replay_last_item",
            "line": 267,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "AgentProcessorProtocol"
          },
          {
            "name": "get_state_history",
            "line": 279,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "limit"
            ],
            "is_async": false,
            "class": "AgentProcessorProtocol"
          }
        ]
      },
      {
        "file": "ciris_engine/protocols/context/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/protocols/telemetry/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/protocols/conscience/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/protocols/audit/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/protocols/config/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/protocols/dma/base.py",
        "classes": [
          {
            "name": "PDMAProtocol",
            "line": 16,
            "decorators": [],
            "bases": [
              "BaseDMAProtocol"
            ],
            "methods": []
          },
          {
            "name": "CSDMAProtocol",
            "line": 25,
            "decorators": [],
            "bases": [
              "BaseDMAProtocol"
            ],
            "methods": []
          },
          {
            "name": "DSDMAProtocol",
            "line": 35,
            "decorators": [],
            "bases": [
              "BaseDMAProtocol"
            ],
            "methods": []
          },
          {
            "name": "ActionSelectionDMAProtocol",
            "line": 45,
            "decorators": [],
            "bases": [
              "BaseDMAProtocol"
            ],
            "methods": []
          },
          {
            "name": "EmergencyDMAProtocol",
            "line": 65,
            "decorators": [],
            "bases": [
              "BaseDMAProtocol"
            ],
            "methods": [
              {
                "name": "evaluate_emergency",
                "line": 69,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "situation"
                ],
                "is_async": true,
                "class": "EmergencyDMAProtocol"
              },
              {
                "name": "get_emergency_level",
                "line": 74,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "EmergencyDMAProtocol"
              },
              {
                "name": "get_emergency_protocols",
                "line": 79,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "EmergencyDMAProtocol"
              }
            ]
          },
          {
            "name": "CollaborativeDMAProtocol",
            "line": 83,
            "decorators": [],
            "bases": [
              "BaseDMAProtocol"
            ],
            "methods": [
              {
                "name": "evaluate_collaborative",
                "line": 87,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "action",
                  "agents"
                ],
                "is_async": true,
                "class": "CollaborativeDMAProtocol"
              },
              {
                "name": "get_consensus_score",
                "line": 92,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "CollaborativeDMAProtocol"
              },
              {
                "name": "negotiate_action",
                "line": 97,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "proposals"
                ],
                "is_async": true,
                "class": "CollaborativeDMAProtocol"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "evaluate_emergency",
            "line": 69,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "situation"
            ],
            "is_async": true,
            "class": "EmergencyDMAProtocol"
          },
          {
            "name": "get_emergency_level",
            "line": 74,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "EmergencyDMAProtocol"
          },
          {
            "name": "get_emergency_protocols",
            "line": 79,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "EmergencyDMAProtocol"
          },
          {
            "name": "evaluate_collaborative",
            "line": 87,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "action",
              "agents"
            ],
            "is_async": true,
            "class": "CollaborativeDMAProtocol"
          },
          {
            "name": "get_consensus_score",
            "line": 92,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "CollaborativeDMAProtocol"
          },
          {
            "name": "negotiate_action",
            "line": 97,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "proposals"
            ],
            "is_async": true,
            "class": "CollaborativeDMAProtocol"
          }
        ]
      },
      {
        "file": "ciris_engine/protocols/dma/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/protocols/secrets/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/protocols/formatters/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/protocols/registries/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/protocols/services/__init__.py",
        "classes": [
          {
            "name": "GraphMemoryServiceProtocol",
            "line": 56,
            "decorators": [],
            "bases": [
              "ServiceProtocol"
            ],
            "methods": []
          }
        ],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/protocols/data/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/protocols/persistence/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/protocols/handlers/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/protocols/buses/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/protocols/services/infrastructure/resource_monitor.py",
        "classes": [
          {
            "name": "ResourceMonitorServiceProtocol",
            "line": 19,
            "decorators": [
              "runtime_checkable"
            ],
            "bases": [
              "ServiceProtocol",
              "Protocol"
            ],
            "methods": [
              {
                "name": "start",
                "line": 30,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ResourceMonitorServiceProtocol"
              },
              {
                "name": "stop",
                "line": 34,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ResourceMonitorServiceProtocol"
              },
              {
                "name": "record_tokens",
                "line": 38,
                "decorators": [],
                "args": [
                  "self",
                  "tokens"
                ],
                "is_async": true,
                "class": "ResourceMonitorServiceProtocol"
              },
              {
                "name": "check_available",
                "line": 46,
                "decorators": [],
                "args": [
                  "self",
                  "resource",
                  "amount"
                ],
                "is_async": true,
                "class": "ResourceMonitorServiceProtocol"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "start",
            "line": 30,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ResourceMonitorServiceProtocol"
          },
          {
            "name": "stop",
            "line": 34,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ResourceMonitorServiceProtocol"
          },
          {
            "name": "record_tokens",
            "line": 38,
            "decorators": [],
            "args": [
              "self",
              "tokens"
            ],
            "is_async": true,
            "class": "ResourceMonitorServiceProtocol"
          },
          {
            "name": "check_available",
            "line": 46,
            "decorators": [],
            "args": [
              "self",
              "resource",
              "amount"
            ],
            "is_async": true,
            "class": "ResourceMonitorServiceProtocol"
          }
        ]
      },
      {
        "file": "ciris_engine/protocols/services/infrastructure/authentication.py",
        "classes": [
          {
            "name": "AuthenticationServiceProtocol",
            "line": 22,
            "decorators": [],
            "bases": [
              "ServiceProtocol",
              "Protocol"
            ],
            "methods": [
              {
                "name": "authenticate",
                "line": 26,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "token"
                ],
                "is_async": true,
                "class": "AuthenticationServiceProtocol"
              },
              {
                "name": "create_token",
                "line": 31,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "wa_id",
                  "token_type",
                  "ttl"
                ],
                "is_async": true,
                "class": "AuthenticationServiceProtocol"
              },
              {
                "name": "verify_token",
                "line": 36,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "token"
                ],
                "is_async": true,
                "class": "AuthenticationServiceProtocol"
              },
              {
                "name": "create_wa",
                "line": 41,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "name",
                  "email",
                  "scopes",
                  "role"
                ],
                "is_async": true,
                "class": "AuthenticationServiceProtocol"
              },
              {
                "name": "revoke_wa",
                "line": 47,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "wa_id",
                  "reason"
                ],
                "is_async": true,
                "class": "AuthenticationServiceProtocol"
              },
              {
                "name": "update_wa",
                "line": 52,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "wa_id",
                  "updates"
                ],
                "is_async": true,
                "class": "AuthenticationServiceProtocol"
              },
              {
                "name": "list_was",
                "line": 57,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "active_only"
                ],
                "is_async": true,
                "class": "AuthenticationServiceProtocol"
              },
              {
                "name": "get_wa",
                "line": 62,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "wa_id"
                ],
                "is_async": true,
                "class": "AuthenticationServiceProtocol"
              },
              {
                "name": "rotate_keys",
                "line": 67,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "wa_id"
                ],
                "is_async": true,
                "class": "AuthenticationServiceProtocol"
              },
              {
                "name": "bootstrap_if_needed",
                "line": 72,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "AuthenticationServiceProtocol"
              },
              {
                "name": "create_channel_token",
                "line": 77,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "wa_id",
                  "channel_id",
                  "ttl"
                ],
                "is_async": false,
                "class": "AuthenticationServiceProtocol"
              },
              {
                "name": "verify_token_sync",
                "line": 82,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "token"
                ],
                "is_async": false,
                "class": "AuthenticationServiceProtocol"
              },
              {
                "name": "update_last_login",
                "line": 87,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "wa_id"
                ],
                "is_async": true,
                "class": "AuthenticationServiceProtocol"
              },
              {
                "name": "create_gateway_token",
                "line": 92,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "wa",
                  "expires_hours"
                ],
                "is_async": false,
                "class": "AuthenticationServiceProtocol"
              },
              {
                "name": "get_wa_by_oauth",
                "line": 97,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "provider",
                  "external_id"
                ],
                "is_async": true,
                "class": "AuthenticationServiceProtocol"
              },
              {
                "name": "generate_keypair",
                "line": 102,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AuthenticationServiceProtocol"
              },
              {
                "name": "hash_password",
                "line": 107,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "password"
                ],
                "is_async": false,
                "class": "AuthenticationServiceProtocol"
              },
              {
                "name": "sign_data",
                "line": 112,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "data",
                  "private_key"
                ],
                "is_async": false,
                "class": "AuthenticationServiceProtocol"
              },
              {
                "name": "sign_task",
                "line": 117,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "task",
                  "wa_id"
                ],
                "is_async": true,
                "class": "AuthenticationServiceProtocol"
              },
              {
                "name": "verify_task_signature",
                "line": 126,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "task"
                ],
                "is_async": true,
                "class": "AuthenticationServiceProtocol"
              },
              {
                "name": "get_system_wa_id",
                "line": 135,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "AuthenticationServiceProtocol"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "authenticate",
            "line": 26,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "token"
            ],
            "is_async": true,
            "class": "AuthenticationServiceProtocol"
          },
          {
            "name": "create_token",
            "line": 31,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "wa_id",
              "token_type",
              "ttl"
            ],
            "is_async": true,
            "class": "AuthenticationServiceProtocol"
          },
          {
            "name": "verify_token",
            "line": 36,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "token"
            ],
            "is_async": true,
            "class": "AuthenticationServiceProtocol"
          },
          {
            "name": "create_wa",
            "line": 41,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "name",
              "email",
              "scopes",
              "role"
            ],
            "is_async": true,
            "class": "AuthenticationServiceProtocol"
          },
          {
            "name": "revoke_wa",
            "line": 47,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "wa_id",
              "reason"
            ],
            "is_async": true,
            "class": "AuthenticationServiceProtocol"
          },
          {
            "name": "update_wa",
            "line": 52,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "wa_id",
              "updates"
            ],
            "is_async": true,
            "class": "AuthenticationServiceProtocol"
          },
          {
            "name": "list_was",
            "line": 57,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "active_only"
            ],
            "is_async": true,
            "class": "AuthenticationServiceProtocol"
          },
          {
            "name": "get_wa",
            "line": 62,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "wa_id"
            ],
            "is_async": true,
            "class": "AuthenticationServiceProtocol"
          },
          {
            "name": "rotate_keys",
            "line": 67,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "wa_id"
            ],
            "is_async": true,
            "class": "AuthenticationServiceProtocol"
          },
          {
            "name": "bootstrap_if_needed",
            "line": 72,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "AuthenticationServiceProtocol"
          },
          {
            "name": "create_channel_token",
            "line": 77,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "wa_id",
              "channel_id",
              "ttl"
            ],
            "is_async": false,
            "class": "AuthenticationServiceProtocol"
          },
          {
            "name": "verify_token_sync",
            "line": 82,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "token"
            ],
            "is_async": false,
            "class": "AuthenticationServiceProtocol"
          },
          {
            "name": "update_last_login",
            "line": 87,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "wa_id"
            ],
            "is_async": true,
            "class": "AuthenticationServiceProtocol"
          },
          {
            "name": "create_gateway_token",
            "line": 92,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "wa",
              "expires_hours"
            ],
            "is_async": false,
            "class": "AuthenticationServiceProtocol"
          },
          {
            "name": "get_wa_by_oauth",
            "line": 97,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "provider",
              "external_id"
            ],
            "is_async": true,
            "class": "AuthenticationServiceProtocol"
          },
          {
            "name": "generate_keypair",
            "line": 102,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AuthenticationServiceProtocol"
          },
          {
            "name": "hash_password",
            "line": 107,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "password"
            ],
            "is_async": false,
            "class": "AuthenticationServiceProtocol"
          },
          {
            "name": "sign_data",
            "line": 112,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "data",
              "private_key"
            ],
            "is_async": false,
            "class": "AuthenticationServiceProtocol"
          },
          {
            "name": "sign_task",
            "line": 117,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "task",
              "wa_id"
            ],
            "is_async": true,
            "class": "AuthenticationServiceProtocol"
          },
          {
            "name": "verify_task_signature",
            "line": 126,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "task"
            ],
            "is_async": true,
            "class": "AuthenticationServiceProtocol"
          },
          {
            "name": "get_system_wa_id",
            "line": 135,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "AuthenticationServiceProtocol"
          }
        ]
      },
      {
        "file": "ciris_engine/protocols/services/infrastructure/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/protocols/services/runtime/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/protocols/services/runtime/tool.py",
        "classes": [
          {
            "name": "ToolServiceProtocol",
            "line": 8,
            "decorators": [],
            "bases": [
              "ServiceProtocol",
              "Protocol"
            ],
            "methods": [
              {
                "name": "execute_tool",
                "line": 12,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "tool_name",
                  "parameters"
                ],
                "is_async": true,
                "class": "ToolServiceProtocol"
              },
              {
                "name": "list_tools",
                "line": 17,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "ToolServiceProtocol"
              },
              {
                "name": "get_tool_schema",
                "line": 22,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "tool_name"
                ],
                "is_async": true,
                "class": "ToolServiceProtocol"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "execute_tool",
            "line": 12,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "tool_name",
              "parameters"
            ],
            "is_async": true,
            "class": "ToolServiceProtocol"
          },
          {
            "name": "list_tools",
            "line": 17,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "ToolServiceProtocol"
          },
          {
            "name": "get_tool_schema",
            "line": 22,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "tool_name"
            ],
            "is_async": true,
            "class": "ToolServiceProtocol"
          }
        ]
      },
      {
        "file": "ciris_engine/protocols/services/runtime/llm.py",
        "classes": [
          {
            "name": "MessageDict",
            "line": 11,
            "decorators": [],
            "bases": [
              "TypedDict"
            ],
            "methods": []
          },
          {
            "name": "LLMServiceProtocol",
            "line": 16,
            "decorators": [],
            "bases": [
              "ServiceProtocol",
              "Protocol"
            ],
            "methods": [
              {
                "name": "call_llm_structured",
                "line": 25,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "messages",
                  "response_model",
                  "max_tokens",
                  "temperature"
                ],
                "is_async": true,
                "class": "LLMServiceProtocol"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "call_llm_structured",
            "line": 25,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "messages",
              "response_model",
              "max_tokens",
              "temperature"
            ],
            "is_async": true,
            "class": "LLMServiceProtocol"
          }
        ]
      },
      {
        "file": "ciris_engine/protocols/services/runtime/secrets.py",
        "classes": [
          {
            "name": "SecretsServiceProtocol",
            "line": 13,
            "decorators": [],
            "bases": [
              "ServiceProtocol",
              "Protocol"
            ],
            "methods": [
              {
                "name": "encrypt",
                "line": 17,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "plaintext"
                ],
                "is_async": true,
                "class": "SecretsServiceProtocol"
              },
              {
                "name": "decrypt",
                "line": 22,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "ciphertext"
                ],
                "is_async": true,
                "class": "SecretsServiceProtocol"
              },
              {
                "name": "store_secret",
                "line": 27,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "key",
                  "value"
                ],
                "is_async": true,
                "class": "SecretsServiceProtocol"
              },
              {
                "name": "retrieve_secret",
                "line": 32,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "key"
                ],
                "is_async": true,
                "class": "SecretsServiceProtocol"
              },
              {
                "name": "process_incoming_text",
                "line": 37,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "text",
                  "source_message_id"
                ],
                "is_async": true,
                "class": "SecretsServiceProtocol"
              },
              {
                "name": "decapsulate_secrets_in_parameters",
                "line": 46,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "action_type",
                  "action_params",
                  "context"
                ],
                "is_async": true,
                "class": "SecretsServiceProtocol"
              },
              {
                "name": "list_stored_secrets",
                "line": 56,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "limit"
                ],
                "is_async": true,
                "class": "SecretsServiceProtocol"
              },
              {
                "name": "get_filter_config",
                "line": 61,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "SecretsServiceProtocol"
              },
              {
                "name": "recall_secret",
                "line": 66,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "secret_uuid",
                  "purpose",
                  "accessor",
                  "decrypt"
                ],
                "is_async": true,
                "class": "SecretsServiceProtocol"
              },
              {
                "name": "forget_secret",
                "line": 77,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "secret_uuid",
                  "accessor"
                ],
                "is_async": true,
                "class": "SecretsServiceProtocol"
              },
              {
                "name": "update_filter_config",
                "line": 82,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "updates",
                  "accessor"
                ],
                "is_async": true,
                "class": "SecretsServiceProtocol"
              },
              {
                "name": "get_service_stats",
                "line": 91,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "SecretsServiceProtocol"
              },
              {
                "name": "is_healthy",
                "line": 96,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "SecretsServiceProtocol"
              },
              {
                "name": "reencrypt_all",
                "line": 101,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "new_master_key"
                ],
                "is_async": true,
                "class": "SecretsServiceProtocol"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "encrypt",
            "line": 17,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "plaintext"
            ],
            "is_async": true,
            "class": "SecretsServiceProtocol"
          },
          {
            "name": "decrypt",
            "line": 22,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "ciphertext"
            ],
            "is_async": true,
            "class": "SecretsServiceProtocol"
          },
          {
            "name": "store_secret",
            "line": 27,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "key",
              "value"
            ],
            "is_async": true,
            "class": "SecretsServiceProtocol"
          },
          {
            "name": "retrieve_secret",
            "line": 32,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "key"
            ],
            "is_async": true,
            "class": "SecretsServiceProtocol"
          },
          {
            "name": "process_incoming_text",
            "line": 37,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "text",
              "source_message_id"
            ],
            "is_async": true,
            "class": "SecretsServiceProtocol"
          },
          {
            "name": "decapsulate_secrets_in_parameters",
            "line": 46,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "action_type",
              "action_params",
              "context"
            ],
            "is_async": true,
            "class": "SecretsServiceProtocol"
          },
          {
            "name": "list_stored_secrets",
            "line": 56,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "limit"
            ],
            "is_async": true,
            "class": "SecretsServiceProtocol"
          },
          {
            "name": "get_filter_config",
            "line": 61,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "SecretsServiceProtocol"
          },
          {
            "name": "recall_secret",
            "line": 66,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "secret_uuid",
              "purpose",
              "accessor",
              "decrypt"
            ],
            "is_async": true,
            "class": "SecretsServiceProtocol"
          },
          {
            "name": "forget_secret",
            "line": 77,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "secret_uuid",
              "accessor"
            ],
            "is_async": true,
            "class": "SecretsServiceProtocol"
          },
          {
            "name": "update_filter_config",
            "line": 82,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "updates",
              "accessor"
            ],
            "is_async": true,
            "class": "SecretsServiceProtocol"
          },
          {
            "name": "get_service_stats",
            "line": 91,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "SecretsServiceProtocol"
          },
          {
            "name": "is_healthy",
            "line": 96,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "SecretsServiceProtocol"
          },
          {
            "name": "reencrypt_all",
            "line": 101,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "new_master_key"
            ],
            "is_async": true,
            "class": "SecretsServiceProtocol"
          }
        ]
      },
      {
        "file": "ciris_engine/protocols/services/runtime/runtime_control.py",
        "classes": [
          {
            "name": "RuntimeControlServiceProtocol",
            "line": 25,
            "decorators": [],
            "bases": [
              "ServiceProtocol",
              "Protocol"
            ],
            "methods": [
              {
                "name": "pause_processing",
                "line": 37,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeControlServiceProtocol"
              },
              {
                "name": "resume_processing",
                "line": 42,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeControlServiceProtocol"
              },
              {
                "name": "single_step",
                "line": 47,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeControlServiceProtocol"
              },
              {
                "name": "get_processor_queue_status",
                "line": 52,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeControlServiceProtocol"
              },
              {
                "name": "shutdown_runtime",
                "line": 57,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "reason"
                ],
                "is_async": true,
                "class": "RuntimeControlServiceProtocol"
              },
              {
                "name": "load_adapter",
                "line": 64,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "adapter_type",
                  "adapter_id",
                  "config",
                  "auto_start"
                ],
                "is_async": true,
                "class": "RuntimeControlServiceProtocol"
              },
              {
                "name": "unload_adapter",
                "line": 75,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "adapter_id",
                  "force"
                ],
                "is_async": true,
                "class": "RuntimeControlServiceProtocol"
              },
              {
                "name": "list_adapters",
                "line": 84,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeControlServiceProtocol"
              },
              {
                "name": "get_adapter_info",
                "line": 89,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "adapter_id"
                ],
                "is_async": true,
                "class": "RuntimeControlServiceProtocol"
              },
              {
                "name": "get_config",
                "line": 96,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "path",
                  "include_sensitive"
                ],
                "is_async": true,
                "class": "RuntimeControlServiceProtocol"
              },
              {
                "name": "update_config",
                "line": 105,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "path",
                  "value",
                  "scope",
                  "validation_level",
                  "reason"
                ],
                "is_async": true,
                "class": "RuntimeControlServiceProtocol"
              },
              {
                "name": "validate_config",
                "line": 117,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "config_data",
                  "config_path"
                ],
                "is_async": true,
                "class": "RuntimeControlServiceProtocol"
              },
              {
                "name": "backup_config",
                "line": 126,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "backup_name"
                ],
                "is_async": true,
                "class": "RuntimeControlServiceProtocol"
              },
              {
                "name": "restore_config",
                "line": 134,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "backup_name"
                ],
                "is_async": true,
                "class": "RuntimeControlServiceProtocol"
              },
              {
                "name": "list_config_backups",
                "line": 142,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeControlServiceProtocol"
              },
              {
                "name": "get_runtime_status",
                "line": 149,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeControlServiceProtocol"
              },
              {
                "name": "get_runtime_snapshot",
                "line": 154,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeControlServiceProtocol"
              },
              {
                "name": "get_service_health_status",
                "line": 159,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "RuntimeControlServiceProtocol"
              },
              {
                "name": "get_events_history",
                "line": 164,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "limit"
                ],
                "is_async": false,
                "class": "RuntimeControlServiceProtocol"
              },
              {
                "name": "handle_emergency_shutdown",
                "line": 171,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "command"
                ],
                "is_async": true,
                "class": "RuntimeControlServiceProtocol"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "pause_processing",
            "line": 37,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeControlServiceProtocol"
          },
          {
            "name": "resume_processing",
            "line": 42,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeControlServiceProtocol"
          },
          {
            "name": "single_step",
            "line": 47,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeControlServiceProtocol"
          },
          {
            "name": "get_processor_queue_status",
            "line": 52,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeControlServiceProtocol"
          },
          {
            "name": "shutdown_runtime",
            "line": 57,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "reason"
            ],
            "is_async": true,
            "class": "RuntimeControlServiceProtocol"
          },
          {
            "name": "load_adapter",
            "line": 64,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "adapter_type",
              "adapter_id",
              "config",
              "auto_start"
            ],
            "is_async": true,
            "class": "RuntimeControlServiceProtocol"
          },
          {
            "name": "unload_adapter",
            "line": 75,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "adapter_id",
              "force"
            ],
            "is_async": true,
            "class": "RuntimeControlServiceProtocol"
          },
          {
            "name": "list_adapters",
            "line": 84,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeControlServiceProtocol"
          },
          {
            "name": "get_adapter_info",
            "line": 89,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "adapter_id"
            ],
            "is_async": true,
            "class": "RuntimeControlServiceProtocol"
          },
          {
            "name": "get_config",
            "line": 96,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "path",
              "include_sensitive"
            ],
            "is_async": true,
            "class": "RuntimeControlServiceProtocol"
          },
          {
            "name": "update_config",
            "line": 105,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "path",
              "value",
              "scope",
              "validation_level",
              "reason"
            ],
            "is_async": true,
            "class": "RuntimeControlServiceProtocol"
          },
          {
            "name": "validate_config",
            "line": 117,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "config_data",
              "config_path"
            ],
            "is_async": true,
            "class": "RuntimeControlServiceProtocol"
          },
          {
            "name": "backup_config",
            "line": 126,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "backup_name"
            ],
            "is_async": true,
            "class": "RuntimeControlServiceProtocol"
          },
          {
            "name": "restore_config",
            "line": 134,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "backup_name"
            ],
            "is_async": true,
            "class": "RuntimeControlServiceProtocol"
          },
          {
            "name": "list_config_backups",
            "line": 142,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeControlServiceProtocol"
          },
          {
            "name": "get_runtime_status",
            "line": 149,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeControlServiceProtocol"
          },
          {
            "name": "get_runtime_snapshot",
            "line": 154,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeControlServiceProtocol"
          },
          {
            "name": "get_service_health_status",
            "line": 159,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "RuntimeControlServiceProtocol"
          },
          {
            "name": "get_events_history",
            "line": 164,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "limit"
            ],
            "is_async": false,
            "class": "RuntimeControlServiceProtocol"
          },
          {
            "name": "handle_emergency_shutdown",
            "line": 171,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "command"
            ],
            "is_async": true,
            "class": "RuntimeControlServiceProtocol"
          }
        ]
      },
      {
        "file": "ciris_engine/protocols/services/governance/visibility.py",
        "classes": [
          {
            "name": "VisibilityServiceProtocol",
            "line": 11,
            "decorators": [],
            "bases": [
              "ServiceProtocol",
              "Protocol"
            ],
            "methods": [
              {
                "name": "get_current_state",
                "line": 15,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "VisibilityServiceProtocol"
              },
              {
                "name": "get_reasoning_trace",
                "line": 20,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "task_id"
                ],
                "is_async": true,
                "class": "VisibilityServiceProtocol"
              },
              {
                "name": "get_decision_history",
                "line": 25,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "task_id"
                ],
                "is_async": true,
                "class": "VisibilityServiceProtocol"
              },
              {
                "name": "explain_action",
                "line": 30,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "action_id"
                ],
                "is_async": true,
                "class": "VisibilityServiceProtocol"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "get_current_state",
            "line": 15,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "VisibilityServiceProtocol"
          },
          {
            "name": "get_reasoning_trace",
            "line": 20,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "task_id"
            ],
            "is_async": true,
            "class": "VisibilityServiceProtocol"
          },
          {
            "name": "get_decision_history",
            "line": 25,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "task_id"
            ],
            "is_async": true,
            "class": "VisibilityServiceProtocol"
          },
          {
            "name": "explain_action",
            "line": 30,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "action_id"
            ],
            "is_async": true,
            "class": "VisibilityServiceProtocol"
          }
        ]
      },
      {
        "file": "ciris_engine/protocols/services/governance/wa_auth.py",
        "classes": [
          {
            "name": "WAStore",
            "line": 14,
            "decorators": [],
            "bases": [
              "Protocol"
            ],
            "methods": [
              {
                "name": "get_wa_cert",
                "line": 18,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "wa_id"
                ],
                "is_async": true,
                "class": "WAStore"
              },
              {
                "name": "get_wa_cert_by_pubkey",
                "line": 23,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "pubkey"
                ],
                "is_async": true,
                "class": "WAStore"
              },
              {
                "name": "get_wa_cert_by_channel",
                "line": 28,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "channel_id"
                ],
                "is_async": true,
                "class": "WAStore"
              },
              {
                "name": "create_wa_cert",
                "line": 33,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "cert"
                ],
                "is_async": true,
                "class": "WAStore"
              },
              {
                "name": "update_wa_cert",
                "line": 38,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "wa_id",
                  "updates"
                ],
                "is_async": true,
                "class": "WAStore"
              },
              {
                "name": "list_wa_certs",
                "line": 43,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "active_only"
                ],
                "is_async": true,
                "class": "WAStore"
              },
              {
                "name": "revoke_wa_cert",
                "line": 48,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "wa_id"
                ],
                "is_async": true,
                "class": "WAStore"
              }
            ]
          },
          {
            "name": "JWTService",
            "line": 52,
            "decorators": [],
            "bases": [
              "Protocol"
            ],
            "methods": [
              {
                "name": "issue_token",
                "line": 56,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "sub",
                  "sub_type",
                  "scopes",
                  "name",
                  "expires_in",
                  "kid",
                  "signing_key"
                ],
                "is_async": false,
                "class": "JWTService"
              },
              {
                "name": "verify_token",
                "line": 70,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "token"
                ],
                "is_async": false,
                "class": "JWTService"
              },
              {
                "name": "get_gateway_secret",
                "line": 75,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "JWTService"
              }
            ]
          },
          {
            "name": "WACrypto",
            "line": 79,
            "decorators": [],
            "bases": [
              "Protocol"
            ],
            "methods": [
              {
                "name": "generate_keypair",
                "line": 83,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "WACrypto"
              },
              {
                "name": "sign_message",
                "line": 88,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "message",
                  "private_key"
                ],
                "is_async": false,
                "class": "WACrypto"
              },
              {
                "name": "verify_signature",
                "line": 93,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "message",
                  "signature",
                  "public_key"
                ],
                "is_async": false,
                "class": "WACrypto"
              },
              {
                "name": "save_private_key",
                "line": 98,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "wa_id",
                  "private_key"
                ],
                "is_async": false,
                "class": "WACrypto"
              },
              {
                "name": "load_private_key",
                "line": 103,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "wa_id"
                ],
                "is_async": false,
                "class": "WACrypto"
              },
              {
                "name": "hash_password",
                "line": 108,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "password"
                ],
                "is_async": false,
                "class": "WACrypto"
              },
              {
                "name": "verify_password",
                "line": 113,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "password",
                  "password_hash"
                ],
                "is_async": false,
                "class": "WACrypto"
              },
              {
                "name": "generate_api_key",
                "line": 118,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "wa_id"
                ],
                "is_async": false,
                "class": "WACrypto"
              }
            ]
          },
          {
            "name": "WAAuthMiddleware",
            "line": 122,
            "decorators": [],
            "bases": [
              "Protocol"
            ],
            "methods": [
              {
                "name": "authenticate",
                "line": 126,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "token"
                ],
                "is_async": true,
                "class": "WAAuthMiddleware"
              },
              {
                "name": "authorize",
                "line": 131,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "context",
                  "required_scopes"
                ],
                "is_async": true,
                "class": "WAAuthMiddleware"
              },
              {
                "name": "extract_token",
                "line": 136,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "authorization"
                ],
                "is_async": false,
                "class": "WAAuthMiddleware"
              }
            ]
          },
          {
            "name": "OAuthService",
            "line": 140,
            "decorators": [],
            "bases": [
              "Protocol"
            ],
            "methods": [
              {
                "name": "get_oauth_providers",
                "line": 144,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "OAuthService"
              },
              {
                "name": "save_oauth_provider",
                "line": 149,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "provider",
                  "config"
                ],
                "is_async": true,
                "class": "OAuthService"
              },
              {
                "name": "get_oauth_url",
                "line": 154,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "provider",
                  "state"
                ],
                "is_async": true,
                "class": "OAuthService"
              },
              {
                "name": "handle_oauth_callback",
                "line": 159,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "provider",
                  "code",
                  "state"
                ],
                "is_async": true,
                "class": "OAuthService"
              },
              {
                "name": "create_oauth_wa",
                "line": 169,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "provider",
                  "external_id",
                  "profile"
                ],
                "is_async": true,
                "class": "OAuthService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "get_wa_cert",
            "line": 18,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "wa_id"
            ],
            "is_async": true,
            "class": "WAStore"
          },
          {
            "name": "get_wa_cert_by_pubkey",
            "line": 23,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "pubkey"
            ],
            "is_async": true,
            "class": "WAStore"
          },
          {
            "name": "get_wa_cert_by_channel",
            "line": 28,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "channel_id"
            ],
            "is_async": true,
            "class": "WAStore"
          },
          {
            "name": "create_wa_cert",
            "line": 33,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "cert"
            ],
            "is_async": true,
            "class": "WAStore"
          },
          {
            "name": "update_wa_cert",
            "line": 38,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "wa_id",
              "updates"
            ],
            "is_async": true,
            "class": "WAStore"
          },
          {
            "name": "list_wa_certs",
            "line": 43,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "active_only"
            ],
            "is_async": true,
            "class": "WAStore"
          },
          {
            "name": "revoke_wa_cert",
            "line": 48,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "wa_id"
            ],
            "is_async": true,
            "class": "WAStore"
          },
          {
            "name": "issue_token",
            "line": 56,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "sub",
              "sub_type",
              "scopes",
              "name",
              "expires_in",
              "kid",
              "signing_key"
            ],
            "is_async": false,
            "class": "JWTService"
          },
          {
            "name": "verify_token",
            "line": 70,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "token"
            ],
            "is_async": false,
            "class": "JWTService"
          },
          {
            "name": "get_gateway_secret",
            "line": 75,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "JWTService"
          },
          {
            "name": "generate_keypair",
            "line": 83,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "WACrypto"
          },
          {
            "name": "sign_message",
            "line": 88,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "message",
              "private_key"
            ],
            "is_async": false,
            "class": "WACrypto"
          },
          {
            "name": "verify_signature",
            "line": 93,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "message",
              "signature",
              "public_key"
            ],
            "is_async": false,
            "class": "WACrypto"
          },
          {
            "name": "save_private_key",
            "line": 98,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "wa_id",
              "private_key"
            ],
            "is_async": false,
            "class": "WACrypto"
          },
          {
            "name": "load_private_key",
            "line": 103,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "wa_id"
            ],
            "is_async": false,
            "class": "WACrypto"
          },
          {
            "name": "hash_password",
            "line": 108,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "password"
            ],
            "is_async": false,
            "class": "WACrypto"
          },
          {
            "name": "verify_password",
            "line": 113,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "password",
              "password_hash"
            ],
            "is_async": false,
            "class": "WACrypto"
          },
          {
            "name": "generate_api_key",
            "line": 118,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "wa_id"
            ],
            "is_async": false,
            "class": "WACrypto"
          },
          {
            "name": "authenticate",
            "line": 126,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "token"
            ],
            "is_async": true,
            "class": "WAAuthMiddleware"
          },
          {
            "name": "authorize",
            "line": 131,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "context",
              "required_scopes"
            ],
            "is_async": true,
            "class": "WAAuthMiddleware"
          },
          {
            "name": "extract_token",
            "line": 136,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "authorization"
            ],
            "is_async": false,
            "class": "WAAuthMiddleware"
          },
          {
            "name": "get_oauth_providers",
            "line": 144,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "OAuthService"
          },
          {
            "name": "save_oauth_provider",
            "line": 149,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "provider",
              "config"
            ],
            "is_async": true,
            "class": "OAuthService"
          },
          {
            "name": "get_oauth_url",
            "line": 154,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "provider",
              "state"
            ],
            "is_async": true,
            "class": "OAuthService"
          },
          {
            "name": "handle_oauth_callback",
            "line": 159,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "provider",
              "code",
              "state"
            ],
            "is_async": true,
            "class": "OAuthService"
          },
          {
            "name": "create_oauth_wa",
            "line": 169,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "provider",
              "external_id",
              "profile"
            ],
            "is_async": true,
            "class": "OAuthService"
          }
        ]
      },
      {
        "file": "ciris_engine/protocols/services/governance/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/protocols/services/governance/filter.py",
        "classes": [
          {
            "name": "AdaptiveFilterServiceProtocol",
            "line": 9,
            "decorators": [],
            "bases": [
              "ServiceProtocol",
              "Protocol"
            ],
            "methods": [
              {
                "name": "filter_message",
                "line": 13,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "message",
                  "adapter_type",
                  "is_llm_response"
                ],
                "is_async": true,
                "class": "AdaptiveFilterServiceProtocol"
              },
              {
                "name": "get_health",
                "line": 32,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "AdaptiveFilterServiceProtocol"
              },
              {
                "name": "add_filter_trigger",
                "line": 37,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "trigger"
                ],
                "is_async": false,
                "class": "AdaptiveFilterServiceProtocol"
              },
              {
                "name": "remove_filter_trigger",
                "line": 42,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "pattern"
                ],
                "is_async": false,
                "class": "AdaptiveFilterServiceProtocol"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "filter_message",
            "line": 13,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "message",
              "adapter_type",
              "is_llm_response"
            ],
            "is_async": true,
            "class": "AdaptiveFilterServiceProtocol"
          },
          {
            "name": "get_health",
            "line": 32,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "AdaptiveFilterServiceProtocol"
          },
          {
            "name": "add_filter_trigger",
            "line": 37,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "trigger"
            ],
            "is_async": false,
            "class": "AdaptiveFilterServiceProtocol"
          },
          {
            "name": "remove_filter_trigger",
            "line": 42,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "pattern"
            ],
            "is_async": false,
            "class": "AdaptiveFilterServiceProtocol"
          }
        ]
      },
      {
        "file": "ciris_engine/protocols/services/governance/wise_authority.py",
        "classes": [
          {
            "name": "WiseAuthorityServiceProtocol",
            "line": 19,
            "decorators": [],
            "bases": [
              "ServiceProtocol",
              "Protocol"
            ],
            "methods": [
              {
                "name": "check_authorization",
                "line": 23,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "wa_id",
                  "action",
                  "resource"
                ],
                "is_async": true,
                "class": "WiseAuthorityServiceProtocol"
              },
              {
                "name": "request_approval",
                "line": 28,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "action",
                  "context"
                ],
                "is_async": true,
                "class": "WiseAuthorityServiceProtocol"
              },
              {
                "name": "get_guidance",
                "line": 33,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "request"
                ],
                "is_async": true,
                "class": "WiseAuthorityServiceProtocol"
              },
              {
                "name": "send_deferral",
                "line": 38,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "deferral"
                ],
                "is_async": true,
                "class": "WiseAuthorityServiceProtocol"
              },
              {
                "name": "get_pending_deferrals",
                "line": 43,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "wa_id"
                ],
                "is_async": true,
                "class": "WiseAuthorityServiceProtocol"
              },
              {
                "name": "resolve_deferral",
                "line": 48,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "deferral_id",
                  "response"
                ],
                "is_async": true,
                "class": "WiseAuthorityServiceProtocol"
              },
              {
                "name": "grant_permission",
                "line": 53,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "wa_id",
                  "permission",
                  "resource"
                ],
                "is_async": true,
                "class": "WiseAuthorityServiceProtocol"
              },
              {
                "name": "revoke_permission",
                "line": 58,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "wa_id",
                  "permission",
                  "resource"
                ],
                "is_async": true,
                "class": "WiseAuthorityServiceProtocol"
              },
              {
                "name": "list_permissions",
                "line": 63,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "wa_id"
                ],
                "is_async": true,
                "class": "WiseAuthorityServiceProtocol"
              },
              {
                "name": "fetch_guidance",
                "line": 68,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "context"
                ],
                "is_async": true,
                "class": "WiseAuthorityServiceProtocol"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "check_authorization",
            "line": 23,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "wa_id",
              "action",
              "resource"
            ],
            "is_async": true,
            "class": "WiseAuthorityServiceProtocol"
          },
          {
            "name": "request_approval",
            "line": 28,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "action",
              "context"
            ],
            "is_async": true,
            "class": "WiseAuthorityServiceProtocol"
          },
          {
            "name": "get_guidance",
            "line": 33,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "request"
            ],
            "is_async": true,
            "class": "WiseAuthorityServiceProtocol"
          },
          {
            "name": "send_deferral",
            "line": 38,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "deferral"
            ],
            "is_async": true,
            "class": "WiseAuthorityServiceProtocol"
          },
          {
            "name": "get_pending_deferrals",
            "line": 43,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "wa_id"
            ],
            "is_async": true,
            "class": "WiseAuthorityServiceProtocol"
          },
          {
            "name": "resolve_deferral",
            "line": 48,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "deferral_id",
              "response"
            ],
            "is_async": true,
            "class": "WiseAuthorityServiceProtocol"
          },
          {
            "name": "grant_permission",
            "line": 53,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "wa_id",
              "permission",
              "resource"
            ],
            "is_async": true,
            "class": "WiseAuthorityServiceProtocol"
          },
          {
            "name": "revoke_permission",
            "line": 58,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "wa_id",
              "permission",
              "resource"
            ],
            "is_async": true,
            "class": "WiseAuthorityServiceProtocol"
          },
          {
            "name": "list_permissions",
            "line": 63,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "wa_id"
            ],
            "is_async": true,
            "class": "WiseAuthorityServiceProtocol"
          },
          {
            "name": "fetch_guidance",
            "line": 68,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "context"
            ],
            "is_async": true,
            "class": "WiseAuthorityServiceProtocol"
          }
        ]
      },
      {
        "file": "ciris_engine/protocols/services/governance/communication.py",
        "classes": [
          {
            "name": "CommunicationServiceProtocol",
            "line": 9,
            "decorators": [],
            "bases": [
              "ServiceProtocol",
              "Protocol"
            ],
            "methods": [
              {
                "name": "send_message",
                "line": 13,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "channel_id",
                  "content"
                ],
                "is_async": true,
                "class": "CommunicationServiceProtocol"
              },
              {
                "name": "fetch_messages",
                "line": 18,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "channel_id"
                ],
                "is_async": true,
                "class": "CommunicationServiceProtocol"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "send_message",
            "line": 13,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "channel_id",
              "content"
            ],
            "is_async": true,
            "class": "CommunicationServiceProtocol"
          },
          {
            "name": "fetch_messages",
            "line": 18,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "channel_id"
            ],
            "is_async": true,
            "class": "CommunicationServiceProtocol"
          }
        ]
      },
      {
        "file": "ciris_engine/protocols/services/lifecycle/time.py",
        "classes": [
          {
            "name": "TimeServiceProtocol",
            "line": 9,
            "decorators": [],
            "bases": [
              "ServiceProtocol",
              "Protocol"
            ],
            "methods": [
              {
                "name": "now",
                "line": 13,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TimeServiceProtocol"
              },
              {
                "name": "now_iso",
                "line": 18,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TimeServiceProtocol"
              },
              {
                "name": "timestamp",
                "line": 23,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TimeServiceProtocol"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "now",
            "line": 13,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TimeServiceProtocol"
          },
          {
            "name": "now_iso",
            "line": 18,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TimeServiceProtocol"
          },
          {
            "name": "timestamp",
            "line": 23,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TimeServiceProtocol"
          }
        ]
      },
      {
        "file": "ciris_engine/protocols/services/lifecycle/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/protocols/services/lifecycle/initialization.py",
        "classes": [
          {
            "name": "InitializationServiceProtocol",
            "line": 12,
            "decorators": [],
            "bases": [
              "ServiceProtocol",
              "Protocol"
            ],
            "methods": [
              {
                "name": "register_step",
                "line": 16,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "phase",
                  "name",
                  "handler",
                  "verifier",
                  "critical",
                  "timeout"
                ],
                "is_async": false,
                "class": "InitializationServiceProtocol"
              },
              {
                "name": "initialize",
                "line": 29,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "InitializationServiceProtocol"
              },
              {
                "name": "verify_initialization",
                "line": 34,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "InitializationServiceProtocol"
              },
              {
                "name": "get_initialization_status",
                "line": 39,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "InitializationServiceProtocol"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "register_step",
            "line": 16,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "phase",
              "name",
              "handler",
              "verifier",
              "critical",
              "timeout"
            ],
            "is_async": false,
            "class": "InitializationServiceProtocol"
          },
          {
            "name": "initialize",
            "line": 29,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "InitializationServiceProtocol"
          },
          {
            "name": "verify_initialization",
            "line": 34,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "InitializationServiceProtocol"
          },
          {
            "name": "get_initialization_status",
            "line": 39,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "InitializationServiceProtocol"
          }
        ]
      },
      {
        "file": "ciris_engine/protocols/services/lifecycle/scheduler.py",
        "classes": [
          {
            "name": "TaskSchedulerServiceProtocol",
            "line": 10,
            "decorators": [],
            "bases": [
              "ServiceProtocol",
              "Protocol"
            ],
            "methods": [
              {
                "name": "schedule_task",
                "line": 14,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "task_id",
                  "run_at",
                  "handler"
                ],
                "is_async": true,
                "class": "TaskSchedulerServiceProtocol"
              },
              {
                "name": "cancel_task",
                "line": 25,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "task_id"
                ],
                "is_async": true,
                "class": "TaskSchedulerServiceProtocol"
              },
              {
                "name": "get_scheduled_tasks",
                "line": 30,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TaskSchedulerServiceProtocol"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "schedule_task",
            "line": 14,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "task_id",
              "run_at",
              "handler"
            ],
            "is_async": true,
            "class": "TaskSchedulerServiceProtocol"
          },
          {
            "name": "cancel_task",
            "line": 25,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "task_id"
            ],
            "is_async": true,
            "class": "TaskSchedulerServiceProtocol"
          },
          {
            "name": "get_scheduled_tasks",
            "line": 30,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TaskSchedulerServiceProtocol"
          }
        ]
      },
      {
        "file": "ciris_engine/protocols/services/lifecycle/shutdown.py",
        "classes": [
          {
            "name": "ShutdownServiceProtocol",
            "line": 8,
            "decorators": [],
            "bases": [
              "ServiceProtocol",
              "Protocol"
            ],
            "methods": [
              {
                "name": "request_shutdown",
                "line": 12,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "reason"
                ],
                "is_async": true,
                "class": "ShutdownServiceProtocol"
              },
              {
                "name": "is_shutdown_requested",
                "line": 17,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ShutdownServiceProtocol"
              },
              {
                "name": "get_shutdown_reason",
                "line": 22,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "ShutdownServiceProtocol"
              },
              {
                "name": "register_shutdown_handler",
                "line": 27,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "handler"
                ],
                "is_async": false,
                "class": "ShutdownServiceProtocol"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "request_shutdown",
            "line": 12,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "reason"
            ],
            "is_async": true,
            "class": "ShutdownServiceProtocol"
          },
          {
            "name": "is_shutdown_requested",
            "line": 17,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ShutdownServiceProtocol"
          },
          {
            "name": "get_shutdown_reason",
            "line": 22,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "ShutdownServiceProtocol"
          },
          {
            "name": "register_shutdown_handler",
            "line": 27,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "handler"
            ],
            "is_async": false,
            "class": "ShutdownServiceProtocol"
          }
        ]
      },
      {
        "file": "ciris_engine/protocols/services/adaptation/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/protocols/services/adaptation/self_configuration.py",
        "classes": [
          {
            "name": "SelfConfigurationServiceProtocol",
            "line": 28,
            "decorators": [],
            "bases": [
              "ServiceProtocol",
              "Protocol"
            ],
            "methods": [
              {
                "name": "initialize_baseline",
                "line": 43,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "identity"
                ],
                "is_async": true,
                "class": "SelfConfigurationServiceProtocol"
              },
              {
                "name": "analyze_observability_window",
                "line": 65,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "window"
                ],
                "is_async": true,
                "class": "SelfConfigurationServiceProtocol"
              },
              {
                "name": "get_adaptation_status",
                "line": 90,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "SelfConfigurationServiceProtocol"
              },
              {
                "name": "trigger_adaptation_cycle",
                "line": 100,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "SelfConfigurationServiceProtocol"
              },
              {
                "name": "get_pending_changes",
                "line": 115,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "SelfConfigurationServiceProtocol"
              },
              {
                "name": "approve_changes",
                "line": 125,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "change_ids",
                  "approver"
                ],
                "is_async": true,
                "class": "SelfConfigurationServiceProtocol"
              },
              {
                "name": "get_pattern_library",
                "line": 145,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "SelfConfigurationServiceProtocol"
              },
              {
                "name": "measure_adaptation_effectiveness",
                "line": 155,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "adaptation_id"
                ],
                "is_async": true,
                "class": "SelfConfigurationServiceProtocol"
              },
              {
                "name": "resume_after_review",
                "line": 175,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "review_outcome"
                ],
                "is_async": true,
                "class": "SelfConfigurationServiceProtocol"
              },
              {
                "name": "emergency_stop",
                "line": 191,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "reason"
                ],
                "is_async": true,
                "class": "SelfConfigurationServiceProtocol"
              },
              {
                "name": "get_improvement_report",
                "line": 209,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "period"
                ],
                "is_async": true,
                "class": "SelfConfigurationServiceProtocol"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "initialize_baseline",
            "line": 43,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "identity"
            ],
            "is_async": true,
            "class": "SelfConfigurationServiceProtocol"
          },
          {
            "name": "analyze_observability_window",
            "line": 65,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "window"
            ],
            "is_async": true,
            "class": "SelfConfigurationServiceProtocol"
          },
          {
            "name": "get_adaptation_status",
            "line": 90,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "SelfConfigurationServiceProtocol"
          },
          {
            "name": "trigger_adaptation_cycle",
            "line": 100,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "SelfConfigurationServiceProtocol"
          },
          {
            "name": "get_pending_changes",
            "line": 115,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "SelfConfigurationServiceProtocol"
          },
          {
            "name": "approve_changes",
            "line": 125,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "change_ids",
              "approver"
            ],
            "is_async": true,
            "class": "SelfConfigurationServiceProtocol"
          },
          {
            "name": "get_pattern_library",
            "line": 145,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "SelfConfigurationServiceProtocol"
          },
          {
            "name": "measure_adaptation_effectiveness",
            "line": 155,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "adaptation_id"
            ],
            "is_async": true,
            "class": "SelfConfigurationServiceProtocol"
          },
          {
            "name": "resume_after_review",
            "line": 175,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "review_outcome"
            ],
            "is_async": true,
            "class": "SelfConfigurationServiceProtocol"
          },
          {
            "name": "emergency_stop",
            "line": 191,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "reason"
            ],
            "is_async": true,
            "class": "SelfConfigurationServiceProtocol"
          },
          {
            "name": "get_improvement_report",
            "line": 209,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "period"
            ],
            "is_async": true,
            "class": "SelfConfigurationServiceProtocol"
          }
        ]
      },
      {
        "file": "ciris_engine/protocols/services/graph/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "ciris_engine/protocols/services/graph/audit.py",
        "classes": [
          {
            "name": "AuditServiceProtocol",
            "line": 12,
            "decorators": [],
            "bases": [
              "GraphServiceProtocol",
              "Protocol"
            ],
            "methods": [
              {
                "name": "log_action",
                "line": 16,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "action",
                  "actor_id",
                  "thought_id",
                  "task_id",
                  "context",
                  "metadata"
                ],
                "is_async": true,
                "class": "AuditServiceProtocol"
              },
              {
                "name": "log_event",
                "line": 29,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "event_type",
                  "event_data"
                ],
                "is_async": true,
                "class": "AuditServiceProtocol"
              },
              {
                "name": "log_conscience_event",
                "line": 34,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "thought_id",
                  "decision",
                  "reasoning",
                  "confidence",
                  "metadata"
                ],
                "is_async": true,
                "class": "AuditServiceProtocol"
              },
              {
                "name": "get_audit_trail",
                "line": 46,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "entity_id",
                  "hours",
                  "action_types"
                ],
                "is_async": true,
                "class": "AuditServiceProtocol"
              },
              {
                "name": "query_audit_trail",
                "line": 56,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "query"
                ],
                "is_async": true,
                "class": "AuditServiceProtocol"
              },
              {
                "name": "verify_audit_integrity",
                "line": 64,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "AuditServiceProtocol"
              },
              {
                "name": "get_verification_report",
                "line": 69,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "AuditServiceProtocol"
              },
              {
                "name": "export_audit_data",
                "line": 74,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "start_date",
                  "end_date",
                  "format"
                ],
                "is_async": true,
                "class": "AuditServiceProtocol"
              },
              {
                "name": "query_events",
                "line": 84,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "event_type",
                  "start_time",
                  "end_time",
                  "limit"
                ],
                "is_async": true,
                "class": "AuditServiceProtocol"
              },
              {
                "name": "get_event_by_id",
                "line": 95,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "event_id"
                ],
                "is_async": true,
                "class": "AuditServiceProtocol"
              },
              {
                "name": "set_service_registry",
                "line": 100,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "registry"
                ],
                "is_async": false,
                "class": "AuditServiceProtocol"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "log_action",
            "line": 16,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "action",
              "actor_id",
              "thought_id",
              "task_id",
              "context",
              "metadata"
            ],
            "is_async": true,
            "class": "AuditServiceProtocol"
          },
          {
            "name": "log_event",
            "line": 29,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "event_type",
              "event_data"
            ],
            "is_async": true,
            "class": "AuditServiceProtocol"
          },
          {
            "name": "log_conscience_event",
            "line": 34,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "thought_id",
              "decision",
              "reasoning",
              "confidence",
              "metadata"
            ],
            "is_async": true,
            "class": "AuditServiceProtocol"
          },
          {
            "name": "get_audit_trail",
            "line": 46,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "entity_id",
              "hours",
              "action_types"
            ],
            "is_async": true,
            "class": "AuditServiceProtocol"
          },
          {
            "name": "query_audit_trail",
            "line": 56,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "query"
            ],
            "is_async": true,
            "class": "AuditServiceProtocol"
          },
          {
            "name": "verify_audit_integrity",
            "line": 64,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "AuditServiceProtocol"
          },
          {
            "name": "get_verification_report",
            "line": 69,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "AuditServiceProtocol"
          },
          {
            "name": "export_audit_data",
            "line": 74,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "start_date",
              "end_date",
              "format"
            ],
            "is_async": true,
            "class": "AuditServiceProtocol"
          },
          {
            "name": "query_events",
            "line": 84,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "event_type",
              "start_time",
              "end_time",
              "limit"
            ],
            "is_async": true,
            "class": "AuditServiceProtocol"
          },
          {
            "name": "get_event_by_id",
            "line": 95,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "event_id"
            ],
            "is_async": true,
            "class": "AuditServiceProtocol"
          },
          {
            "name": "set_service_registry",
            "line": 100,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "registry"
            ],
            "is_async": false,
            "class": "AuditServiceProtocol"
          }
        ]
      },
      {
        "file": "ciris_engine/protocols/services/graph/incident.py",
        "classes": [
          {
            "name": "IncidentManagementServiceProtocol",
            "line": 17,
            "decorators": [
              "runtime_checkable"
            ],
            "bases": [
              "GraphServiceProtocol",
              "Protocol"
            ],
            "methods": [
              {
                "name": "process_recent_incidents",
                "line": 24,
                "decorators": [],
                "args": [
                  "self",
                  "hours"
                ],
                "is_async": true,
                "class": "IncidentManagementServiceProtocol"
              },
              {
                "name": "start",
                "line": 37,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "IncidentManagementServiceProtocol"
              },
              {
                "name": "stop",
                "line": 41,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "IncidentManagementServiceProtocol"
              },
              {
                "name": "get_capabilities",
                "line": 45,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "IncidentManagementServiceProtocol"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "process_recent_incidents",
            "line": 24,
            "decorators": [],
            "args": [
              "self",
              "hours"
            ],
            "is_async": true,
            "class": "IncidentManagementServiceProtocol"
          },
          {
            "name": "start",
            "line": 37,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "IncidentManagementServiceProtocol"
          },
          {
            "name": "stop",
            "line": 41,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "IncidentManagementServiceProtocol"
          },
          {
            "name": "get_capabilities",
            "line": 45,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "IncidentManagementServiceProtocol"
          }
        ]
      },
      {
        "file": "ciris_engine/protocols/services/graph/memory.py",
        "classes": [
          {
            "name": "MemoryServiceProtocol",
            "line": 12,
            "decorators": [],
            "bases": [
              "GraphServiceProtocol",
              "Protocol"
            ],
            "methods": [
              {
                "name": "memorize",
                "line": 16,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "node"
                ],
                "is_async": true,
                "class": "MemoryServiceProtocol"
              },
              {
                "name": "recall",
                "line": 21,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "recall_query"
                ],
                "is_async": true,
                "class": "MemoryServiceProtocol"
              },
              {
                "name": "forget",
                "line": 26,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "node"
                ],
                "is_async": true,
                "class": "MemoryServiceProtocol"
              },
              {
                "name": "memorize_metric",
                "line": 31,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "metric_name",
                  "value",
                  "tags",
                  "scope"
                ],
                "is_async": true,
                "class": "MemoryServiceProtocol"
              },
              {
                "name": "memorize_log",
                "line": 37,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "log_message",
                  "log_level",
                  "tags",
                  "scope"
                ],
                "is_async": true,
                "class": "MemoryServiceProtocol"
              },
              {
                "name": "recall_timeseries",
                "line": 43,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "scope",
                  "hours",
                  "correlation_types"
                ],
                "is_async": true,
                "class": "MemoryServiceProtocol"
              },
              {
                "name": "export_identity_context",
                "line": 49,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "MemoryServiceProtocol"
              },
              {
                "name": "search",
                "line": 54,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "query",
                  "filters"
                ],
                "is_async": true,
                "class": "MemoryServiceProtocol"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "memorize",
            "line": 16,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "node"
            ],
            "is_async": true,
            "class": "MemoryServiceProtocol"
          },
          {
            "name": "recall",
            "line": 21,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "recall_query"
            ],
            "is_async": true,
            "class": "MemoryServiceProtocol"
          },
          {
            "name": "forget",
            "line": 26,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "node"
            ],
            "is_async": true,
            "class": "MemoryServiceProtocol"
          },
          {
            "name": "memorize_metric",
            "line": 31,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "metric_name",
              "value",
              "tags",
              "scope"
            ],
            "is_async": true,
            "class": "MemoryServiceProtocol"
          },
          {
            "name": "memorize_log",
            "line": 37,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "log_message",
              "log_level",
              "tags",
              "scope"
            ],
            "is_async": true,
            "class": "MemoryServiceProtocol"
          },
          {
            "name": "recall_timeseries",
            "line": 43,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "scope",
              "hours",
              "correlation_types"
            ],
            "is_async": true,
            "class": "MemoryServiceProtocol"
          },
          {
            "name": "export_identity_context",
            "line": 49,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "MemoryServiceProtocol"
          },
          {
            "name": "search",
            "line": 54,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "query",
              "filters"
            ],
            "is_async": true,
            "class": "MemoryServiceProtocol"
          }
        ]
      },
      {
        "file": "ciris_engine/protocols/services/graph/config.py",
        "classes": [
          {
            "name": "GraphConfigServiceProtocol",
            "line": 11,
            "decorators": [],
            "bases": [
              "GraphServiceProtocol",
              "Protocol"
            ],
            "methods": [
              {
                "name": "get_config",
                "line": 15,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "key"
                ],
                "is_async": true,
                "class": "GraphConfigServiceProtocol"
              },
              {
                "name": "set_config",
                "line": 20,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "key",
                  "value",
                  "updated_by"
                ],
                "is_async": true,
                "class": "GraphConfigServiceProtocol"
              },
              {
                "name": "list_configs",
                "line": 25,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "prefix"
                ],
                "is_async": true,
                "class": "GraphConfigServiceProtocol"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "get_config",
            "line": 15,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "key"
            ],
            "is_async": true,
            "class": "GraphConfigServiceProtocol"
          },
          {
            "name": "set_config",
            "line": 20,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "key",
              "value",
              "updated_by"
            ],
            "is_async": true,
            "class": "GraphConfigServiceProtocol"
          },
          {
            "name": "list_configs",
            "line": 25,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "prefix"
            ],
            "is_async": true,
            "class": "GraphConfigServiceProtocol"
          }
        ]
      },
      {
        "file": "ciris_engine/protocols/services/graph/tsdb_consolidation.py",
        "classes": [
          {
            "name": "TSDBConsolidationServiceProtocol",
            "line": 17,
            "decorators": [
              "runtime_checkable"
            ],
            "bases": [
              "GraphServiceProtocol",
              "Protocol"
            ],
            "methods": [
              {
                "name": "start",
                "line": 24,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TSDBConsolidationServiceProtocol"
              },
              {
                "name": "stop",
                "line": 28,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TSDBConsolidationServiceProtocol"
              },
              {
                "name": "get_summary_for_period",
                "line": 32,
                "decorators": [],
                "args": [
                  "self",
                  "period_start"
                ],
                "is_async": true,
                "class": "TSDBConsolidationServiceProtocol"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "start",
            "line": 24,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TSDBConsolidationServiceProtocol"
          },
          {
            "name": "stop",
            "line": 28,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TSDBConsolidationServiceProtocol"
          },
          {
            "name": "get_summary_for_period",
            "line": 32,
            "decorators": [],
            "args": [
              "self",
              "period_start"
            ],
            "is_async": true,
            "class": "TSDBConsolidationServiceProtocol"
          }
        ]
      },
      {
        "file": "ciris_engine/protocols/services/graph/telemetry.py",
        "classes": [
          {
            "name": "TelemetryServiceProtocol",
            "line": 9,
            "decorators": [],
            "bases": [
              "GraphServiceProtocol",
              "Protocol"
            ],
            "methods": [
              {
                "name": "record_metric",
                "line": 13,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "metric_name",
                  "value",
                  "tags"
                ],
                "is_async": true,
                "class": "TelemetryServiceProtocol"
              },
              {
                "name": "query_metrics",
                "line": 18,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "metric_name",
                  "start_time",
                  "end_time",
                  "tags"
                ],
                "is_async": true,
                "class": "TelemetryServiceProtocol"
              },
              {
                "name": "get_metric_summary",
                "line": 29,
                "decorators": [
                  "abstractmethod"
                ],
                "args": [
                  "self",
                  "metric_name",
                  "window_minutes"
                ],
                "is_async": true,
                "class": "TelemetryServiceProtocol"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "record_metric",
            "line": 13,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "metric_name",
              "value",
              "tags"
            ],
            "is_async": true,
            "class": "TelemetryServiceProtocol"
          },
          {
            "name": "query_metrics",
            "line": 18,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "metric_name",
              "start_time",
              "end_time",
              "tags"
            ],
            "is_async": true,
            "class": "TelemetryServiceProtocol"
          },
          {
            "name": "get_metric_summary",
            "line": 29,
            "decorators": [
              "abstractmethod"
            ],
            "args": [
              "self",
              "metric_name",
              "window_minutes"
            ],
            "is_async": true,
            "class": "TelemetryServiceProtocol"
          }
        ]
      }
    ]
  },
  "tests": {
    "summary": {
      "total_files": 78,
      "total_classes": 39,
      "total_methods": 368,
      "total_functions": 376,
      "duplicate_classes": 3,
      "duplicate_methods": 3,
      "duplicate_functions": 13
    },
    "duplicates": {
      "classes": {
        "MockMemoryService": [
          {
            "file": "tests/test_observe_handler_recall_logic.py",
            "line": 28,
            "bases": []
          },
          {
            "file": "tests/integration/test_observe_handler_integration.py",
            "line": 29,
            "bases": []
          }
        ],
        "TestDiscordAdapter": [
          {
            "file": "tests/adapters/test_discord/test_discord_adapter_unit.py",
            "line": 17,
            "bases": []
          },
          {
            "file": "tests/ciris_engine/logic/adapters/discord/test_discord_adapter_unit.py",
            "line": 17,
            "bases": []
          }
        ],
        "TestDiscordErrorHandler": [
          {
            "file": "tests/adapters/test_discord/test_discord_components.py",
            "line": 73,
            "bases": []
          },
          {
            "file": "tests/ciris_engine/logic/adapters/discord/test_discord_adapter_unit.py",
            "line": 488,
            "bases": []
          }
        ]
      },
      "methods": {
        "MockMemoryService.__init__": [
          {
            "file": "tests/test_observe_handler_recall_logic.py",
            "line": 30,
            "class": "MockMemoryService",
            "args": [
              "self"
            ]
          },
          {
            "file": "tests/integration/test_observe_handler_integration.py",
            "line": 31,
            "class": "MockMemoryService",
            "args": [
              "self"
            ]
          }
        ],
        "MockMemoryService.recall": [
          {
            "file": "tests/test_observe_handler_recall_logic.py",
            "line": 34,
            "class": "MockMemoryService",
            "args": [
              "self",
              "recall_query",
              "handler_name"
            ]
          },
          {
            "file": "tests/integration/test_observe_handler_integration.py",
            "line": 35,
            "class": "MockMemoryService",
            "args": [
              "self",
              "recall_query",
              "handler_name"
            ]
          }
        ],
        "TestDiscordErrorHandler.error_handler": [
          {
            "file": "tests/adapters/test_discord/test_discord_components.py",
            "line": 77,
            "class": "TestDiscordErrorHandler",
            "args": [
              "self"
            ]
          },
          {
            "file": "tests/ciris_engine/logic/adapters/discord/test_discord_adapter_unit.py",
            "line": 492,
            "class": "TestDiscordErrorHandler",
            "args": [
              "self"
            ]
          }
        ]
      },
      "functions": {
        "main": [
          {
            "file": "tests/test_all_startup_fixes.py",
            "line": 106,
            "args": []
          },
          {
            "file": "tests/test_startup_issues_fixed.py",
            "line": 103,
            "args": []
          },
          {
            "file": "tests/test_final_startup_fixes.py",
            "line": 108,
            "args": []
          },
          {
            "file": "tests/integration/test_observe_handler_integration.py",
            "line": 354,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/graph/test_filter_config_bug.py",
            "line": 197,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/graph/test_config_service_bootstrap.py",
            "line": 292,
            "args": []
          }
        ],
        "create_test_thought": [
          {
            "file": "tests/test_memory_handlers.py",
            "line": 66,
            "args": [
              "thought_id",
              "task_id"
            ]
          },
          {
            "file": "tests/ciris_engine/logic/services/governance/test_visibility_service.py",
            "line": 69,
            "args": [
              "thought_id",
              "task_id",
              "status",
              "action_type",
              "parent_thought_id"
            ]
          }
        ],
        "api_available": [
          {
            "file": "tests/api/test_api_core.py",
            "line": 7,
            "args": []
          },
          {
            "file": "tests/api/test_api_wa.py",
            "line": 7,
            "args": []
          },
          {
            "file": "tests/api/test_api_memory.py",
            "line": 21,
            "args": []
          },
          {
            "file": "tests/api/test_api_enhanced_endpoints.py",
            "line": 17,
            "args": []
          },
          {
            "file": "tests/api/test_api_runtime.py",
            "line": 7,
            "args": []
          },
          {
            "file": "tests/api/test_api_healthy_server.py",
            "line": 21,
            "args": []
          },
          {
            "file": "tests/api/test_api_all.py",
            "line": 13,
            "args": []
          }
        ],
        "test_logs_tail": [
          {
            "file": "tests/api/test_api_core.py",
            "line": 35,
            "args": []
          },
          {
            "file": "tests/api/test_api_runtime.py",
            "line": 93,
            "args": []
          }
        ],
        "test_tools_list_and_detail": [
          {
            "file": "tests/api/test_api_core.py",
            "line": 54,
            "args": []
          },
          {
            "file": "tests/api/test_api_runtime.py",
            "line": 45,
            "args": []
          }
        ],
        "mock_time_service": [
          {
            "file": "tests/adapters/test_discord/test_discord_adapter_comprehensive.py",
            "line": 21,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/graph/test_incident_service.py",
            "line": 35,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/graph/test_tsdb_consolidation_service.py",
            "line": 28,
            "args": []
          }
        ],
        "time_service": [
          {
            "file": "tests/ciris_engine/logic/services/infrastructure/test_authentication_service.py",
            "line": 21,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/infrastructure/test_resource_monitor.py",
            "line": 21,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/runtime/test_secrets_service.py",
            "line": 16,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/governance/test_visibility_service.py",
            "line": 20,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/governance/test_wise_authority_service.py",
            "line": 23,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/lifecycle/test_initialization_service.py",
            "line": 17,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/graph/test_filter_config_bug.py",
            "line": 18,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/graph/test_config_node_fix.py",
            "line": 18,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/graph/test_config_service_bootstrap.py",
            "line": 25,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/graph/test_config_service.py",
            "line": 19,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/graph/test_telemetry_service.py",
            "line": 29,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/graph/test_memory_service.py",
            "line": 22,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/graph/test_audit_service.py",
            "line": 22,
            "args": []
          }
        ],
        "temp_db": [
          {
            "file": "tests/ciris_engine/logic/services/infrastructure/test_authentication_service.py",
            "line": 27,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/infrastructure/test_resource_monitor.py",
            "line": 27,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/runtime/test_secrets_service.py",
            "line": 22,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/governance/test_visibility_service.py",
            "line": 26,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/governance/test_wise_authority_service.py",
            "line": 29,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/graph/test_filter_config_bug.py",
            "line": 24,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/graph/test_config_node_fix.py",
            "line": 24,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/graph/test_config_service_bootstrap.py",
            "line": 31,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/graph/test_config_service.py",
            "line": 25,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/graph/test_telemetry_service.py",
            "line": 35,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/graph/test_memory_service.py",
            "line": 40,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/graph/test_audit_service.py",
            "line": 28,
            "args": []
          }
        ],
        "auth_service": [
          {
            "file": "tests/ciris_engine/logic/services/infrastructure/test_authentication_service.py",
            "line": 36,
            "args": [
              "temp_db",
              "time_service"
            ]
          },
          {
            "file": "tests/ciris_engine/logic/services/governance/test_wise_authority_service.py",
            "line": 38,
            "args": [
              "temp_db",
              "time_service"
            ]
          }
        ],
        "secrets_service": [
          {
            "file": "tests/ciris_engine/logic/services/runtime/test_secrets_service.py",
            "line": 31,
            "args": [
              "temp_db",
              "time_service"
            ]
          },
          {
            "file": "tests/ciris_engine/logic/services/graph/test_memory_service.py",
            "line": 28,
            "args": []
          }
        ],
        "mock_memory_bus": [
          {
            "file": "tests/ciris_engine/logic/services/graph/test_incident_service.py",
            "line": 18,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/graph/test_tsdb_consolidation_service.py",
            "line": 16,
            "args": []
          }
        ],
        "memory_service": [
          {
            "file": "tests/ciris_engine/logic/services/graph/test_config_service.py",
            "line": 34,
            "args": [
              "temp_db",
              "time_service"
            ]
          },
          {
            "file": "tests/ciris_engine/logic/services/graph/test_memory_service.py",
            "line": 49,
            "args": [
              "temp_db",
              "secrets_service",
              "time_service"
            ]
          }
        ],
        "memory_bus": [
          {
            "file": "tests/ciris_engine/logic/services/graph/test_telemetry_service.py",
            "line": 44,
            "args": []
          },
          {
            "file": "tests/ciris_engine/logic/services/graph/test_audit_service.py",
            "line": 37,
            "args": []
          }
        ]
      },
      "method_signatures": {}
    },
    "all_files": [
      {
        "file": "tests/test_memory_integration.py",
        "classes": [],
        "functions": [
          {
            "name": "test_memory_operations",
            "line": 12,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/test_discord_cli_failover.py",
        "classes": [],
        "functions": [
          {
            "name": "test_run_discord_uses_env",
            "line": 10,
            "decorators": [],
            "args": [
              "monkeypatch"
            ],
            "is_async": false
          },
          {
            "name": "test_discord_runtime_cli_fallback",
            "line": 43,
            "decorators": [
              "asyncio",
              "skip"
            ],
            "args": [
              "monkeypatch"
            ],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/test_thought_depth_propagation.py",
        "classes": [
          {
            "name": "TestThoughtDepthPropagation",
            "line": 32,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "sample_task",
                "line": 36,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestThoughtDepthPropagation"
              },
              {
                "name": "base_thought",
                "line": 49,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self",
                  "sample_task"
                ],
                "is_async": false,
                "class": "TestThoughtDepthPropagation"
              },
              {
                "name": "pondered_thought",
                "line": 68,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self",
                  "sample_task"
                ],
                "is_async": false,
                "class": "TestThoughtDepthPropagation"
              },
              {
                "name": "heavily_pondered_thought",
                "line": 88,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self",
                  "sample_task"
                ],
                "is_async": false,
                "class": "TestThoughtDepthPropagation"
              },
              {
                "name": "test_create_follow_up_thought_increments_thought_depth",
                "line": 107,
                "decorators": [],
                "args": [
                  "self",
                  "base_thought"
                ],
                "is_async": false,
                "class": "TestThoughtDepthPropagation"
              },
              {
                "name": "test_create_follow_up_from_pondered_thought",
                "line": 127,
                "decorators": [],
                "args": [
                  "self",
                  "pondered_thought"
                ],
                "is_async": false,
                "class": "TestThoughtDepthPropagation"
              },
              {
                "name": "test_create_follow_up_chain_maintains_count",
                "line": 142,
                "decorators": [],
                "args": [
                  "self",
                  "base_thought"
                ],
                "is_async": false,
                "class": "TestThoughtDepthPropagation"
              },
              {
                "name": "test_ponder_handler_creates_correct_follow_up_count",
                "line": 172,
                "decorators": [
                  "patch"
                ],
                "args": [
                  "self",
                  "mock_persistence",
                  "pondered_thought"
                ],
                "is_async": false,
                "class": "TestThoughtDepthPropagation"
              },
              {
                "name": "test_ponder_handler_dynamic_content_generation",
                "line": 234,
                "decorators": [],
                "args": [
                  "self",
                  "heavily_pondered_thought"
                ],
                "is_async": false,
                "class": "TestThoughtDepthPropagation"
              },
              {
                "name": "test_max_rounds_behavior_with_thought_depth",
                "line": 258,
                "decorators": [],
                "args": [
                  "self",
                  "heavily_pondered_thought"
                ],
                "is_async": false,
                "class": "TestThoughtDepthPropagation"
              },
              {
                "name": "test_thought_depth_increment_edge_cases",
                "line": 317,
                "decorators": [
                  "parametrize"
                ],
                "args": [
                  "self",
                  "sample_task",
                  "initial_count",
                  "expected_follow_up_count"
                ],
                "is_async": false,
                "class": "TestThoughtDepthPropagation"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "sample_task",
            "line": 36,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestThoughtDepthPropagation"
          },
          {
            "name": "base_thought",
            "line": 49,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self",
              "sample_task"
            ],
            "is_async": false,
            "class": "TestThoughtDepthPropagation"
          },
          {
            "name": "pondered_thought",
            "line": 68,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self",
              "sample_task"
            ],
            "is_async": false,
            "class": "TestThoughtDepthPropagation"
          },
          {
            "name": "heavily_pondered_thought",
            "line": 88,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self",
              "sample_task"
            ],
            "is_async": false,
            "class": "TestThoughtDepthPropagation"
          },
          {
            "name": "test_create_follow_up_thought_increments_thought_depth",
            "line": 107,
            "decorators": [],
            "args": [
              "self",
              "base_thought"
            ],
            "is_async": false,
            "class": "TestThoughtDepthPropagation"
          },
          {
            "name": "test_create_follow_up_from_pondered_thought",
            "line": 127,
            "decorators": [],
            "args": [
              "self",
              "pondered_thought"
            ],
            "is_async": false,
            "class": "TestThoughtDepthPropagation"
          },
          {
            "name": "test_create_follow_up_chain_maintains_count",
            "line": 142,
            "decorators": [],
            "args": [
              "self",
              "base_thought"
            ],
            "is_async": false,
            "class": "TestThoughtDepthPropagation"
          },
          {
            "name": "test_ponder_handler_creates_correct_follow_up_count",
            "line": 172,
            "decorators": [
              "patch"
            ],
            "args": [
              "self",
              "mock_persistence",
              "pondered_thought"
            ],
            "is_async": false,
            "class": "TestThoughtDepthPropagation"
          },
          {
            "name": "test_ponder_handler_dynamic_content_generation",
            "line": 234,
            "decorators": [],
            "args": [
              "self",
              "heavily_pondered_thought"
            ],
            "is_async": false,
            "class": "TestThoughtDepthPropagation"
          },
          {
            "name": "test_max_rounds_behavior_with_thought_depth",
            "line": 258,
            "decorators": [],
            "args": [
              "self",
              "heavily_pondered_thought"
            ],
            "is_async": false,
            "class": "TestThoughtDepthPropagation"
          },
          {
            "name": "test_thought_depth_increment_edge_cases",
            "line": 317,
            "decorators": [
              "parametrize"
            ],
            "args": [
              "self",
              "sample_task",
              "initial_count",
              "expected_follow_up_count"
            ],
            "is_async": false,
            "class": "TestThoughtDepthPropagation"
          }
        ]
      },
      {
        "file": "tests/conftest.py",
        "classes": [],
        "functions": [
          {
            "name": "cleanup_after_test",
            "line": 30,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "pytest_configure",
            "line": 55,
            "decorators": [],
            "args": [
              "config"
            ],
            "is_async": false
          },
          {
            "name": "skip_without_discord_token",
            "line": 61,
            "decorators": [
              "fixture"
            ],
            "args": [
              "request"
            ],
            "is_async": false
          },
          {
            "name": "api_required",
            "line": 75,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "tests/fixtures_api.py",
        "classes": [],
        "functions": [
          {
            "name": "get_free_port",
            "line": 8,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "randomize_api_port",
            "line": 18,
            "decorators": [
              "fixture"
            ],
            "args": [
              "monkeypatch"
            ],
            "is_async": false
          },
          {
            "name": "api_port",
            "line": 30,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "tests/fixtures.py",
        "classes": [],
        "functions": [
          {
            "name": "service_registry",
            "line": 10,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "runtime",
            "line": 18,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "ensure_pydantic_models_rebuilt",
            "line": 27,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "tests/test_all_startup_fixes.py",
        "classes": [],
        "functions": [
          {
            "name": "test_full_startup_and_wakeup",
            "line": 29,
            "decorators": [],
            "args": [],
            "is_async": true
          },
          {
            "name": "main",
            "line": 106,
            "decorators": [],
            "args": [],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/test_startup_issues_fixed.py",
        "classes": [],
        "functions": [
          {
            "name": "test_startup_and_shutdown",
            "line": 34,
            "decorators": [],
            "args": [],
            "is_async": true
          },
          {
            "name": "main",
            "line": 103,
            "decorators": [],
            "args": [],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/test_task_persistence_fix.py",
        "classes": [],
        "functions": [
          {
            "name": "test_task_persistence_with_retry_count",
            "line": 18,
            "decorators": [],
            "args": [],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "tests/test_graph_scopes.py",
        "classes": [],
        "functions": [
          {
            "name": "test_identity_graph_updates",
            "line": 9,
            "decorators": [
              "asyncio",
              "skip"
            ],
            "args": [],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "tests/test_llm_memory_responses.py",
        "classes": [],
        "functions": [
          {
            "name": "test_action_selection_produces_correct_memory_schemas",
            "line": 4,
            "decorators": [],
            "args": [],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "tests/test_main_entrypoint.py",
        "classes": [],
        "functions": [
          {
            "name": "test_main_function_existence",
            "line": 8,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "test_helper_functions_exist",
            "line": 13,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "test_ciris_runtime_initialization",
            "line": 21,
            "decorators": [],
            "args": [
              "monkeypatch"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "tests/test_memory_schemas.py",
        "classes": [],
        "functions": [
          {
            "name": "test_memorize_params_validation",
            "line": 6,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "test_old_to_new_memorize_mapping",
            "line": 16,
            "decorators": [],
            "args": [],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "tests/test_observe_handler_recall_logic.py",
        "classes": [
          {
            "name": "MockMemoryService",
            "line": 28,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 30,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "MockMemoryService"
              },
              {
                "name": "recall",
                "line": 34,
                "decorators": [],
                "args": [
                  "self",
                  "recall_query",
                  "handler_name"
                ],
                "is_async": true,
                "class": "MockMemoryService"
              },
              {
                "name": "set_recall_error",
                "line": 55,
                "decorators": [],
                "args": [
                  "self",
                  "node_id",
                  "scope",
                  "error"
                ],
                "is_async": false,
                "class": "MockMemoryService"
              },
              {
                "name": "clear_errors",
                "line": 59,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "MockMemoryService"
              }
            ]
          },
          {
            "name": "TestObserveHandlerRecallLogic",
            "line": 189,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "test_normal_message_processing",
                "line": 193,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "observe_handler",
                  "mock_memory_service",
                  "sample_messages"
                ],
                "is_async": true,
                "class": "TestObserveHandlerRecallLogic"
              },
              {
                "name": "test_no_memory_service",
                "line": 227,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "observe_handler",
                  "sample_messages"
                ],
                "is_async": true,
                "class": "TestObserveHandlerRecallLogic"
              },
              {
                "name": "test_no_channel_id",
                "line": 235,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "observe_handler",
                  "mock_memory_service",
                  "sample_messages"
                ],
                "is_async": true,
                "class": "TestObserveHandlerRecallLogic"
              },
              {
                "name": "test_empty_messages",
                "line": 254,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "observe_handler",
                  "mock_memory_service"
                ],
                "is_async": true,
                "class": "TestObserveHandlerRecallLogic"
              },
              {
                "name": "test_none_messages",
                "line": 272,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "observe_handler",
                  "mock_memory_service"
                ],
                "is_async": true,
                "class": "TestObserveHandlerRecallLogic"
              },
              {
                "name": "test_malformed_messages",
                "line": 289,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "observe_handler",
                  "mock_memory_service",
                  "malformed_messages"
                ],
                "is_async": true,
                "class": "TestObserveHandlerRecallLogic"
              },
              {
                "name": "test_duplicate_author_handling",
                "line": 311,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "observe_handler",
                  "mock_memory_service",
                  "duplicate_author_messages"
                ],
                "is_async": true,
                "class": "TestObserveHandlerRecallLogic"
              },
              {
                "name": "test_recall_error_handling",
                "line": 334,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "observe_handler",
                  "mock_memory_service"
                ],
                "is_async": true,
                "class": "TestObserveHandlerRecallLogic"
              },
              {
                "name": "test_message_structure_validation",
                "line": 360,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "sample_messages"
                ],
                "is_async": true,
                "class": "TestObserveHandlerRecallLogic"
              },
              {
                "name": "test_id_format_consistency",
                "line": 377,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "observe_handler",
                  "mock_memory_service"
                ],
                "is_async": true,
                "class": "TestObserveHandlerRecallLogic"
              },
              {
                "name": "test_scope_coverage",
                "line": 404,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "observe_handler",
                  "mock_memory_service"
                ],
                "is_async": true,
                "class": "TestObserveHandlerRecallLogic"
              },
              {
                "name": "test_channel_id_variations",
                "line": 436,
                "decorators": [
                  "parametrize",
                  "asyncio"
                ],
                "args": [
                  "self",
                  "observe_handler",
                  "mock_memory_service",
                  "channel_id",
                  "expected_channel_recalls"
                ],
                "is_async": true,
                "class": "TestObserveHandlerRecallLogic"
              },
              {
                "name": "test_author_id_variations",
                "line": 464,
                "decorators": [
                  "parametrize",
                  "asyncio"
                ],
                "args": [
                  "self",
                  "observe_handler",
                  "mock_memory_service",
                  "author_id",
                  "should_recall"
                ],
                "is_async": true,
                "class": "TestObserveHandlerRecallLogic"
              }
            ]
          }
        ],
        "functions": [
          {
            "name": "mock_memory_service",
            "line": 65,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "observe_handler",
            "line": 71,
            "decorators": [
              "fixture"
            ],
            "args": [
              "mock_memory_service"
            ],
            "is_async": false
          },
          {
            "name": "sample_messages",
            "line": 104,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "malformed_messages",
            "line": 144,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "duplicate_author_messages",
            "line": 157,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          }
        ],
        "methods": [
          {
            "name": "__init__",
            "line": 30,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "MockMemoryService"
          },
          {
            "name": "recall",
            "line": 34,
            "decorators": [],
            "args": [
              "self",
              "recall_query",
              "handler_name"
            ],
            "is_async": true,
            "class": "MockMemoryService"
          },
          {
            "name": "set_recall_error",
            "line": 55,
            "decorators": [],
            "args": [
              "self",
              "node_id",
              "scope",
              "error"
            ],
            "is_async": false,
            "class": "MockMemoryService"
          },
          {
            "name": "clear_errors",
            "line": 59,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "MockMemoryService"
          },
          {
            "name": "test_normal_message_processing",
            "line": 193,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "observe_handler",
              "mock_memory_service",
              "sample_messages"
            ],
            "is_async": true,
            "class": "TestObserveHandlerRecallLogic"
          },
          {
            "name": "test_no_memory_service",
            "line": 227,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "observe_handler",
              "sample_messages"
            ],
            "is_async": true,
            "class": "TestObserveHandlerRecallLogic"
          },
          {
            "name": "test_no_channel_id",
            "line": 235,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "observe_handler",
              "mock_memory_service",
              "sample_messages"
            ],
            "is_async": true,
            "class": "TestObserveHandlerRecallLogic"
          },
          {
            "name": "test_empty_messages",
            "line": 254,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "observe_handler",
              "mock_memory_service"
            ],
            "is_async": true,
            "class": "TestObserveHandlerRecallLogic"
          },
          {
            "name": "test_none_messages",
            "line": 272,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "observe_handler",
              "mock_memory_service"
            ],
            "is_async": true,
            "class": "TestObserveHandlerRecallLogic"
          },
          {
            "name": "test_malformed_messages",
            "line": 289,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "observe_handler",
              "mock_memory_service",
              "malformed_messages"
            ],
            "is_async": true,
            "class": "TestObserveHandlerRecallLogic"
          },
          {
            "name": "test_duplicate_author_handling",
            "line": 311,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "observe_handler",
              "mock_memory_service",
              "duplicate_author_messages"
            ],
            "is_async": true,
            "class": "TestObserveHandlerRecallLogic"
          },
          {
            "name": "test_recall_error_handling",
            "line": 334,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "observe_handler",
              "mock_memory_service"
            ],
            "is_async": true,
            "class": "TestObserveHandlerRecallLogic"
          },
          {
            "name": "test_message_structure_validation",
            "line": 360,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "sample_messages"
            ],
            "is_async": true,
            "class": "TestObserveHandlerRecallLogic"
          },
          {
            "name": "test_id_format_consistency",
            "line": 377,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "observe_handler",
              "mock_memory_service"
            ],
            "is_async": true,
            "class": "TestObserveHandlerRecallLogic"
          },
          {
            "name": "test_scope_coverage",
            "line": 404,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "observe_handler",
              "mock_memory_service"
            ],
            "is_async": true,
            "class": "TestObserveHandlerRecallLogic"
          },
          {
            "name": "test_channel_id_variations",
            "line": 436,
            "decorators": [
              "parametrize",
              "asyncio"
            ],
            "args": [
              "self",
              "observe_handler",
              "mock_memory_service",
              "channel_id",
              "expected_channel_recalls"
            ],
            "is_async": true,
            "class": "TestObserveHandlerRecallLogic"
          },
          {
            "name": "test_author_id_variations",
            "line": 464,
            "decorators": [
              "parametrize",
              "asyncio"
            ],
            "args": [
              "self",
              "observe_handler",
              "mock_memory_service",
              "author_id",
              "should_recall"
            ],
            "is_async": true,
            "class": "TestObserveHandlerRecallLogic"
          }
        ]
      },
      {
        "file": "tests/test_final_startup_fixes.py",
        "classes": [],
        "functions": [
          {
            "name": "test_complete_startup",
            "line": 33,
            "decorators": [],
            "args": [],
            "is_async": true
          },
          {
            "name": "main",
            "line": 108,
            "decorators": [],
            "args": [],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/helpers.py",
        "classes": [],
        "functions": [
          {
            "name": "create_test_dispatch_context",
            "line": 10,
            "decorators": [],
            "args": [
              "channel_id",
              "channel_context",
              "author_id",
              "author_name",
              "origin_service",
              "handler_name",
              "action_type",
              "thought_id",
              "task_id",
              "source_task_id",
              "event_summary",
              "event_timestamp",
              "wa_id",
              "wa_authorized",
              "correlation_id",
              "round_number",
              "guardrail_result"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "tests/test_cli_offline.py",
        "classes": [],
        "functions": [
          {
            "name": "test_cli_offline_non_interactive",
            "line": 10,
            "decorators": [],
            "args": [
              "monkeypatch"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "tests/test_memory_handlers.py",
        "classes": [],
        "functions": [
          {
            "name": "create_channel_context",
            "line": 22,
            "decorators": [],
            "args": [
              "channel_id"
            ],
            "is_async": false
          },
          {
            "name": "create_dispatch_context",
            "line": 32,
            "decorators": [],
            "args": [
              "thought_id",
              "task_id",
              "channel_id"
            ],
            "is_async": false
          },
          {
            "name": "create_test_system_snapshot",
            "line": 50,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "create_test_thought",
            "line": 66,
            "decorators": [],
            "args": [
              "thought_id",
              "task_id"
            ],
            "is_async": false
          },
          {
            "name": "test_memorize_handler_with_graph_node",
            "line": 86,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "monkeypatch"
            ],
            "is_async": true
          },
          {
            "name": "test_recall_handler_with_query",
            "line": 165,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "monkeypatch"
            ],
            "is_async": true
          },
          {
            "name": "test_memorize_handler_error_handling",
            "line": 259,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "monkeypatch"
            ],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/context_dumps/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "tests/adapters/test_mock_llm_comprehensive.py",
        "classes": [
          {
            "name": "TestMockLLMComprehensive",
            "line": 16,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "mock_client",
                "line": 20,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestMockLLMComprehensive"
              },
              {
                "name": "test_ethical_dma_result",
                "line": 25,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "mock_client"
                ],
                "is_async": true,
                "class": "TestMockLLMComprehensive"
              },
              {
                "name": "test_cs_dma_result",
                "line": 39,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "mock_client"
                ],
                "is_async": true,
                "class": "TestMockLLMComprehensive"
              },
              {
                "name": "test_ds_dma_result",
                "line": 53,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "mock_client"
                ],
                "is_async": true,
                "class": "TestMockLLMComprehensive"
              },
              {
                "name": "test_action_selection_result",
                "line": 67,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "mock_client"
                ],
                "is_async": true,
                "class": "TestMockLLMComprehensive"
              },
              {
                "name": "test_dsdma_llm_output",
                "line": 82,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "mock_client"
                ],
                "is_async": true,
                "class": "TestMockLLMComprehensive"
              },
              {
                "name": "test_optimization_veto_result",
                "line": 92,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "mock_client"
                ],
                "is_async": true,
                "class": "TestMockLLMComprehensive"
              },
              {
                "name": "test_epistemic_humility_result",
                "line": 106,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "mock_client"
                ],
                "is_async": true,
                "class": "TestMockLLMComprehensive"
              },
              {
                "name": "test_entropy_result",
                "line": 120,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "mock_client"
                ],
                "is_async": true,
                "class": "TestMockLLMComprehensive"
              },
              {
                "name": "test_coherence_result",
                "line": 134,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "mock_client"
                ],
                "is_async": true,
                "class": "TestMockLLMComprehensive"
              },
              {
                "name": "test_all_schemas_serializable",
                "line": 148,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "mock_client"
                ],
                "is_async": true,
                "class": "TestMockLLMComprehensive"
              },
              {
                "name": "test_mock_response_consistency",
                "line": 177,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "mock_client"
                ],
                "is_async": true,
                "class": "TestMockLLMComprehensive"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "mock_client",
            "line": 20,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestMockLLMComprehensive"
          },
          {
            "name": "test_ethical_dma_result",
            "line": 25,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "mock_client"
            ],
            "is_async": true,
            "class": "TestMockLLMComprehensive"
          },
          {
            "name": "test_cs_dma_result",
            "line": 39,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "mock_client"
            ],
            "is_async": true,
            "class": "TestMockLLMComprehensive"
          },
          {
            "name": "test_ds_dma_result",
            "line": 53,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "mock_client"
            ],
            "is_async": true,
            "class": "TestMockLLMComprehensive"
          },
          {
            "name": "test_action_selection_result",
            "line": 67,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "mock_client"
            ],
            "is_async": true,
            "class": "TestMockLLMComprehensive"
          },
          {
            "name": "test_dsdma_llm_output",
            "line": 82,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "mock_client"
            ],
            "is_async": true,
            "class": "TestMockLLMComprehensive"
          },
          {
            "name": "test_optimization_veto_result",
            "line": 92,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "mock_client"
            ],
            "is_async": true,
            "class": "TestMockLLMComprehensive"
          },
          {
            "name": "test_epistemic_humility_result",
            "line": 106,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "mock_client"
            ],
            "is_async": true,
            "class": "TestMockLLMComprehensive"
          },
          {
            "name": "test_entropy_result",
            "line": 120,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "mock_client"
            ],
            "is_async": true,
            "class": "TestMockLLMComprehensive"
          },
          {
            "name": "test_coherence_result",
            "line": 134,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "mock_client"
            ],
            "is_async": true,
            "class": "TestMockLLMComprehensive"
          },
          {
            "name": "test_all_schemas_serializable",
            "line": 148,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "mock_client"
            ],
            "is_async": true,
            "class": "TestMockLLMComprehensive"
          },
          {
            "name": "test_mock_response_consistency",
            "line": 177,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "mock_client"
            ],
            "is_async": true,
            "class": "TestMockLLMComprehensive"
          }
        ]
      },
      {
        "file": "tests/adapters/test_mock_llm_service.py",
        "classes": [],
        "functions": [
          {
            "name": "test_mock_llm_structured_outputs",
            "line": 9,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/api/test_api_core.py",
        "classes": [],
        "functions": [
          {
            "name": "api_available",
            "line": 7,
            "decorators": [],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_comms_send_and_receive",
            "line": 16,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_logs_tail",
            "line": 35,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_audit_entries",
            "line": 44,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_tools_list_and_detail",
            "line": 54,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/api/test_api_wa.py",
        "classes": [],
        "functions": [
          {
            "name": "api_available",
            "line": 7,
            "decorators": [],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_wa_deferrals_list_and_detail",
            "line": 16,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_wa_feedback",
            "line": 32,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/api/test_api_memory.py",
        "classes": [],
        "functions": [
          {
            "name": "get_scopes_from_response",
            "line": 7,
            "decorators": [],
            "args": [
              "resp"
            ],
            "is_async": false
          },
          {
            "name": "get_entries_from_response",
            "line": 14,
            "decorators": [],
            "args": [
              "resp"
            ],
            "is_async": false
          },
          {
            "name": "api_available",
            "line": 21,
            "decorators": [],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_memory_scopes_and_entries",
            "line": 30,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_memory_store_and_query",
            "line": 48,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/api/test_api_enhanced_endpoints.py",
        "classes": [],
        "functions": [
          {
            "name": "api_available",
            "line": 17,
            "decorators": [],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_messages_with_correlations",
            "line": 27,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_memory_search",
            "line": 72,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_memory_recall",
            "line": 100,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_memory_forget",
            "line": 128,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_memory_timeseries",
            "line": 151,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_audit_query",
            "line": 166,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_audit_log",
            "line": 188,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_tool_validation",
            "line": 211,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_ls_home_tool",
            "line": 239,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_messages_empty_channel",
            "line": 272,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_memory_invalid_scope",
            "line": 289,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_audit_query_edge_cases",
            "line": 306,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_concurrent_message_handling",
            "line": 332,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/api/test_api_runtime.py",
        "classes": [],
        "functions": [
          {
            "name": "api_available",
            "line": 7,
            "decorators": [],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_status",
            "line": 16,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_messages_post_and_get",
            "line": 26,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_tools_list_and_detail",
            "line": 45,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_guidance",
            "line": 61,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_defer",
            "line": 72,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_audit",
            "line": 83,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_logs_tail",
            "line": 93,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/api/test_api_healthy_server.py",
        "classes": [
          {
            "name": "TestHealthyServerAPI",
            "line": 30,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "test_health_endpoint_basic",
                "line": 35,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestHealthyServerAPI"
              },
              {
                "name": "test_health_endpoint_adapters",
                "line": 54,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestHealthyServerAPI"
              },
              {
                "name": "test_health_endpoint_services",
                "line": 74,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestHealthyServerAPI"
              },
              {
                "name": "test_health_endpoint_processor",
                "line": 94,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestHealthyServerAPI"
              },
              {
                "name": "test_telemetry_endpoint_basic",
                "line": 114,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestHealthyServerAPI"
              },
              {
                "name": "test_telemetry_adapters_info",
                "line": 142,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestHealthyServerAPI"
              },
              {
                "name": "test_telemetry_services_info",
                "line": 167,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestHealthyServerAPI"
              },
              {
                "name": "test_telemetry_processor_state",
                "line": 196,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestHealthyServerAPI"
              },
              {
                "name": "test_telemetry_configuration",
                "line": 229,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestHealthyServerAPI"
              },
              {
                "name": "test_telemetry_runtime_metrics",
                "line": 253,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestHealthyServerAPI"
              },
              {
                "name": "test_metrics_endpoint_basic",
                "line": 274,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestHealthyServerAPI"
              },
              {
                "name": "test_metrics_history_endpoint",
                "line": 310,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestHealthyServerAPI"
              },
              {
                "name": "test_health_and_telemetry_consistency",
                "line": 337,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestHealthyServerAPI"
              },
              {
                "name": "test_service_health_threshold_logic",
                "line": 375,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestHealthyServerAPI"
              }
            ]
          },
          {
            "name": "TestProcessorControl",
            "line": 401,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "test_processor_control_endpoints",
                "line": 406,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestProcessorControl"
              }
            ]
          }
        ],
        "functions": [
          {
            "name": "api_available",
            "line": 21,
            "decorators": [],
            "args": [],
            "is_async": true
          }
        ],
        "methods": [
          {
            "name": "test_health_endpoint_basic",
            "line": 35,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestHealthyServerAPI"
          },
          {
            "name": "test_health_endpoint_adapters",
            "line": 54,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestHealthyServerAPI"
          },
          {
            "name": "test_health_endpoint_services",
            "line": 74,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestHealthyServerAPI"
          },
          {
            "name": "test_health_endpoint_processor",
            "line": 94,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestHealthyServerAPI"
          },
          {
            "name": "test_telemetry_endpoint_basic",
            "line": 114,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestHealthyServerAPI"
          },
          {
            "name": "test_telemetry_adapters_info",
            "line": 142,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestHealthyServerAPI"
          },
          {
            "name": "test_telemetry_services_info",
            "line": 167,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestHealthyServerAPI"
          },
          {
            "name": "test_telemetry_processor_state",
            "line": 196,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestHealthyServerAPI"
          },
          {
            "name": "test_telemetry_configuration",
            "line": 229,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestHealthyServerAPI"
          },
          {
            "name": "test_telemetry_runtime_metrics",
            "line": 253,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestHealthyServerAPI"
          },
          {
            "name": "test_metrics_endpoint_basic",
            "line": 274,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestHealthyServerAPI"
          },
          {
            "name": "test_metrics_history_endpoint",
            "line": 310,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestHealthyServerAPI"
          },
          {
            "name": "test_health_and_telemetry_consistency",
            "line": 337,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestHealthyServerAPI"
          },
          {
            "name": "test_service_health_threshold_logic",
            "line": 375,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestHealthyServerAPI"
          },
          {
            "name": "test_processor_control_endpoints",
            "line": 406,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestProcessorControl"
          }
        ]
      },
      {
        "file": "tests/api/test_api_all.py",
        "classes": [],
        "functions": [
          {
            "name": "get_json_field",
            "line": 7,
            "decorators": [],
            "args": [
              "resp",
              "field",
              "default"
            ],
            "is_async": false
          },
          {
            "name": "api_available",
            "line": 13,
            "decorators": [],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_api_status",
            "line": 22,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_api_messages",
            "line": 32,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_api_tools",
            "line": 49,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_api_guidance_and_defer",
            "line": 64,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_api_wa_deferrals_and_feedback",
            "line": 80,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_api_audit",
            "line": 93,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_api_logs",
            "line": 103,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_api_memory",
            "line": 119,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/integration/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "tests/integration/test_observe_handler_integration.py",
        "classes": [
          {
            "name": "MockMemoryService",
            "line": 29,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 31,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "MockMemoryService"
              },
              {
                "name": "recall",
                "line": 35,
                "decorators": [],
                "args": [
                  "self",
                  "recall_query",
                  "handler_name"
                ],
                "is_async": true,
                "class": "MockMemoryService"
              }
            ]
          }
        ],
        "functions": [
          {
            "name": "create_realistic_discord_messages",
            "line": 51,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "create_edge_case_messages",
            "line": 96,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "test_real_observe_handler",
            "line": 133,
            "decorators": [],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_edge_cases_real_handler",
            "line": 216,
            "decorators": [],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_no_messages",
            "line": 268,
            "decorators": [],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_no_memory_service",
            "line": 294,
            "decorators": [],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_message_field_variations",
            "line": 316,
            "decorators": [],
            "args": [],
            "is_async": true
          },
          {
            "name": "main",
            "line": 354,
            "decorators": [],
            "args": [],
            "is_async": true
          }
        ],
        "methods": [
          {
            "name": "__init__",
            "line": 31,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "MockMemoryService"
          },
          {
            "name": "recall",
            "line": 35,
            "decorators": [],
            "args": [
              "self",
              "recall_query",
              "handler_name"
            ],
            "is_async": true,
            "class": "MockMemoryService"
          }
        ]
      },
      {
        "file": "tests/integration/test_full_cycle.py",
        "classes": [],
        "functions": [
          {
            "name": "test_full_thought_cycle",
            "line": 13,
            "decorators": [
              "asyncio",
              "skipif"
            ],
            "args": [],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/ciris_engine/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "tests/live/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "tests/live/test_discord_service_registry_live.py",
        "classes": [],
        "functions": [
          {
            "name": "test_discord_runtime_service_registry_live",
            "line": 14,
            "decorators": [
              "live",
              "skip",
              "asyncio"
            ],
            "args": [],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/adapters/test_discord/conftest.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "tests/adapters/test_discord/test_discord_simple.py",
        "classes": [],
        "functions": [
          {
            "name": "test_discord_import",
            "line": 5,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "test_discord_adapter_exists",
            "line": 12,
            "decorators": [],
            "args": [],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "tests/adapters/test_discord/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "tests/adapters/test_discord/test_discord_adapter_comprehensive.py",
        "classes": [
          {
            "name": "TestDiscordAdapterCore",
            "line": 76,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "test_adapter_initialization",
                "line": 80,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordAdapterCore"
              },
              {
                "name": "test_send_message_success",
                "line": 99,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter",
                  "mock_discord_client"
                ],
                "is_async": true,
                "class": "TestDiscordAdapterCore"
              },
              {
                "name": "test_send_message_with_rate_limiting",
                "line": 117,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordAdapterCore"
              },
              {
                "name": "test_fetch_messages",
                "line": 134,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordAdapterCore"
              }
            ]
          },
          {
            "name": "TestDiscordWiseAuthority",
            "line": 164,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "test_check_authorization_with_authority_role",
                "line": 168,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter",
                  "mock_discord_client"
                ],
                "is_async": true,
                "class": "TestDiscordWiseAuthority"
              },
              {
                "name": "test_check_authorization_observer_read_only",
                "line": 190,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter",
                  "mock_discord_client"
                ],
                "is_async": true,
                "class": "TestDiscordWiseAuthority"
              },
              {
                "name": "test_request_approval_with_reactions",
                "line": 213,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter",
                  "mock_discord_client"
                ],
                "is_async": true,
                "class": "TestDiscordWiseAuthority"
              },
              {
                "name": "test_get_pending_deferrals",
                "line": 262,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter",
                  "mock_bus_manager"
                ],
                "is_async": true,
                "class": "TestDiscordWiseAuthority"
              }
            ]
          },
          {
            "name": "TestDiscordToolExecution",
            "line": 297,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "test_execute_tool_success",
                "line": 301,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordToolExecution"
              },
              {
                "name": "test_list_tools",
                "line": 324,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordToolExecution"
              }
            ]
          },
          {
            "name": "TestDiscordConnectionResilience",
            "line": 339,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "test_connection_manager_reconnect",
                "line": 343,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordConnectionResilience"
              },
              {
                "name": "test_is_healthy_check",
                "line": 356,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordConnectionResilience"
              }
            ]
          },
          {
            "name": "TestDiscordErrorHandling",
            "line": 369,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "test_channel_not_found_error",
                "line": 373,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordErrorHandling"
              },
              {
                "name": "test_rate_limit_handling",
                "line": 385,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordErrorHandling"
              }
            ]
          },
          {
            "name": "TestDiscordAuditLogging",
            "line": 403,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "test_audit_log_message_operations",
                "line": 407,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordAuditLogging"
              }
            ]
          }
        ],
        "functions": [
          {
            "name": "mock_time_service",
            "line": 21,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "mock_bus_manager",
            "line": 29,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "mock_discord_client",
            "line": 40,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "discord_config",
            "line": 54,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "discord_adapter",
            "line": 64,
            "decorators": [
              "fixture"
            ],
            "args": [
              "mock_time_service",
              "mock_bus_manager",
              "mock_discord_client",
              "discord_config"
            ],
            "is_async": false
          }
        ],
        "methods": [
          {
            "name": "test_adapter_initialization",
            "line": 80,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordAdapterCore"
          },
          {
            "name": "test_send_message_success",
            "line": 99,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter",
              "mock_discord_client"
            ],
            "is_async": true,
            "class": "TestDiscordAdapterCore"
          },
          {
            "name": "test_send_message_with_rate_limiting",
            "line": 117,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordAdapterCore"
          },
          {
            "name": "test_fetch_messages",
            "line": 134,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordAdapterCore"
          },
          {
            "name": "test_check_authorization_with_authority_role",
            "line": 168,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter",
              "mock_discord_client"
            ],
            "is_async": true,
            "class": "TestDiscordWiseAuthority"
          },
          {
            "name": "test_check_authorization_observer_read_only",
            "line": 190,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter",
              "mock_discord_client"
            ],
            "is_async": true,
            "class": "TestDiscordWiseAuthority"
          },
          {
            "name": "test_request_approval_with_reactions",
            "line": 213,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter",
              "mock_discord_client"
            ],
            "is_async": true,
            "class": "TestDiscordWiseAuthority"
          },
          {
            "name": "test_get_pending_deferrals",
            "line": 262,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter",
              "mock_bus_manager"
            ],
            "is_async": true,
            "class": "TestDiscordWiseAuthority"
          },
          {
            "name": "test_execute_tool_success",
            "line": 301,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordToolExecution"
          },
          {
            "name": "test_list_tools",
            "line": 324,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordToolExecution"
          },
          {
            "name": "test_connection_manager_reconnect",
            "line": 343,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordConnectionResilience"
          },
          {
            "name": "test_is_healthy_check",
            "line": 356,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordConnectionResilience"
          },
          {
            "name": "test_channel_not_found_error",
            "line": 373,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordErrorHandling"
          },
          {
            "name": "test_rate_limit_handling",
            "line": 385,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordErrorHandling"
          },
          {
            "name": "test_audit_log_message_operations",
            "line": 407,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordAuditLogging"
          }
        ]
      },
      {
        "file": "tests/adapters/test_discord/test_discord_message_handler.py",
        "classes": [
          {
            "name": "TestDiscordMessageHandler",
            "line": 13,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "mock_bot",
                "line": 17,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestDiscordMessageHandler"
              },
              {
                "name": "handler",
                "line": 27,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self",
                  "mock_bot"
                ],
                "is_async": false,
                "class": "TestDiscordMessageHandler"
              },
              {
                "name": "test_send_message_success",
                "line": 32,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "handler",
                  "mock_bot"
                ],
                "is_async": true,
                "class": "TestDiscordMessageHandler"
              },
              {
                "name": "test_send_message_channel_not_found",
                "line": 43,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "handler",
                  "mock_bot"
                ],
                "is_async": true,
                "class": "TestDiscordMessageHandler"
              },
              {
                "name": "test_send_message_with_error",
                "line": 52,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "handler",
                  "mock_bot"
                ],
                "is_async": true,
                "class": "TestDiscordMessageHandler"
              },
              {
                "name": "test_fetch_messages_success",
                "line": 63,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "handler",
                  "mock_bot"
                ],
                "is_async": true,
                "class": "TestDiscordMessageHandler"
              },
              {
                "name": "test_fetch_messages_empty_channel",
                "line": 103,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "handler",
                  "mock_bot"
                ],
                "is_async": true,
                "class": "TestDiscordMessageHandler"
              },
              {
                "name": "test_convert_to_incoming_message",
                "line": 121,
                "decorators": [
                  "skip",
                  "asyncio"
                ],
                "args": [
                  "self",
                  "handler",
                  "mock_bot"
                ],
                "is_async": true,
                "class": "TestDiscordMessageHandler"
              },
              {
                "name": "test_filter_bot_messages",
                "line": 146,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "handler",
                  "mock_bot"
                ],
                "is_async": true,
                "class": "TestDiscordMessageHandler"
              },
              {
                "name": "test_handle_message_with_callback",
                "line": 185,
                "decorators": [
                  "skip",
                  "asyncio"
                ],
                "args": [
                  "self",
                  "handler",
                  "mock_bot"
                ],
                "is_async": true,
                "class": "TestDiscordMessageHandler"
              },
              {
                "name": "test_handle_bot_message_ignored",
                "line": 216,
                "decorators": [
                  "skip",
                  "asyncio"
                ],
                "args": [
                  "self",
                  "handler",
                  "mock_bot"
                ],
                "is_async": true,
                "class": "TestDiscordMessageHandler"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "mock_bot",
            "line": 17,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestDiscordMessageHandler"
          },
          {
            "name": "handler",
            "line": 27,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self",
              "mock_bot"
            ],
            "is_async": false,
            "class": "TestDiscordMessageHandler"
          },
          {
            "name": "test_send_message_success",
            "line": 32,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "handler",
              "mock_bot"
            ],
            "is_async": true,
            "class": "TestDiscordMessageHandler"
          },
          {
            "name": "test_send_message_channel_not_found",
            "line": 43,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "handler",
              "mock_bot"
            ],
            "is_async": true,
            "class": "TestDiscordMessageHandler"
          },
          {
            "name": "test_send_message_with_error",
            "line": 52,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "handler",
              "mock_bot"
            ],
            "is_async": true,
            "class": "TestDiscordMessageHandler"
          },
          {
            "name": "test_fetch_messages_success",
            "line": 63,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "handler",
              "mock_bot"
            ],
            "is_async": true,
            "class": "TestDiscordMessageHandler"
          },
          {
            "name": "test_fetch_messages_empty_channel",
            "line": 103,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "handler",
              "mock_bot"
            ],
            "is_async": true,
            "class": "TestDiscordMessageHandler"
          },
          {
            "name": "test_convert_to_incoming_message",
            "line": 121,
            "decorators": [
              "skip",
              "asyncio"
            ],
            "args": [
              "self",
              "handler",
              "mock_bot"
            ],
            "is_async": true,
            "class": "TestDiscordMessageHandler"
          },
          {
            "name": "test_filter_bot_messages",
            "line": 146,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "handler",
              "mock_bot"
            ],
            "is_async": true,
            "class": "TestDiscordMessageHandler"
          },
          {
            "name": "test_handle_message_with_callback",
            "line": 185,
            "decorators": [
              "skip",
              "asyncio"
            ],
            "args": [
              "self",
              "handler",
              "mock_bot"
            ],
            "is_async": true,
            "class": "TestDiscordMessageHandler"
          },
          {
            "name": "test_handle_bot_message_ignored",
            "line": 216,
            "decorators": [
              "skip",
              "asyncio"
            ],
            "args": [
              "self",
              "handler",
              "mock_bot"
            ],
            "is_async": true,
            "class": "TestDiscordMessageHandler"
          }
        ]
      },
      {
        "file": "tests/adapters/test_discord/test_discord_adapter_unit.py",
        "classes": [
          {
            "name": "TestDiscordAdapter",
            "line": 17,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "mock_bot",
                "line": 21,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "time_service",
                "line": 33,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "mock_bus_manager",
                "line": 38,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "adapter",
                "line": 46,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self",
                  "mock_bot",
                  "time_service",
                  "mock_bus_manager"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_adapter_initialization",
                "line": 59,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "mock_bot",
                  "time_service"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_send_message_success",
                "line": 75,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "adapter",
                  "mock_bot",
                  "mock_bus_manager"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_send_message_failure",
                "line": 96,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "adapter",
                  "mock_bot"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_fetch_messages",
                "line": 108,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "adapter",
                  "mock_bot"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_request_guidance",
                "line": 126,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "adapter"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_escalate_to_human",
                "line": 145,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "adapter"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_list_tools",
                "line": 163,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "adapter"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_execute_tool",
                "line": 187,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "adapter"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_telemetry_emission",
                "line": 208,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "adapter",
                  "mock_bus_manager"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_start_stop_lifecycle",
                "line": 228,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "mock_bot",
                  "time_service"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_channel_not_found",
                "line": 245,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "adapter",
                  "mock_bot"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "mock_bot",
            "line": 21,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "time_service",
            "line": 33,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "mock_bus_manager",
            "line": 38,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "adapter",
            "line": 46,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self",
              "mock_bot",
              "time_service",
              "mock_bus_manager"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_adapter_initialization",
            "line": 59,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "mock_bot",
              "time_service"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_send_message_success",
            "line": 75,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "adapter",
              "mock_bot",
              "mock_bus_manager"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_send_message_failure",
            "line": 96,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "adapter",
              "mock_bot"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_fetch_messages",
            "line": 108,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "adapter",
              "mock_bot"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_request_guidance",
            "line": 126,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "adapter"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_escalate_to_human",
            "line": 145,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "adapter"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_list_tools",
            "line": 163,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "adapter"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_execute_tool",
            "line": 187,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "adapter"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_telemetry_emission",
            "line": 208,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "adapter",
              "mock_bus_manager"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_start_stop_lifecycle",
            "line": 228,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "mock_bot",
              "time_service"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_channel_not_found",
            "line": 245,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "adapter",
              "mock_bot"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          }
        ]
      },
      {
        "file": "tests/adapters/test_discord/test_discord_components.py",
        "classes": [
          {
            "name": "TestDiscordVisionHelper",
            "line": 18,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "vision_helper",
                "line": 22,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestDiscordVisionHelper"
              },
              {
                "name": "test_vision_helper_initialization",
                "line": 28,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "vision_helper"
                ],
                "is_async": true,
                "class": "TestDiscordVisionHelper"
              },
              {
                "name": "test_process_image_attachment",
                "line": 34,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "vision_helper"
                ],
                "is_async": true,
                "class": "TestDiscordVisionHelper"
              },
              {
                "name": "test_vision_helper_no_api_key",
                "line": 62,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestDiscordVisionHelper"
              }
            ]
          },
          {
            "name": "TestDiscordErrorHandler",
            "line": 73,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "error_handler",
                "line": 77,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestDiscordErrorHandler"
              },
              {
                "name": "test_handle_channel_not_found",
                "line": 82,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "error_handler"
                ],
                "is_async": true,
                "class": "TestDiscordErrorHandler"
              },
              {
                "name": "test_handle_forbidden_error",
                "line": 96,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "error_handler"
                ],
                "is_async": true,
                "class": "TestDiscordErrorHandler"
              },
              {
                "name": "test_handle_rate_limit_error",
                "line": 110,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "error_handler"
                ],
                "is_async": true,
                "class": "TestDiscordErrorHandler"
              },
              {
                "name": "test_error_threshold_escalation",
                "line": 125,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "error_handler"
                ],
                "is_async": true,
                "class": "TestDiscordErrorHandler"
              }
            ]
          },
          {
            "name": "TestDiscordRateLimiter",
            "line": 137,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "rate_limiter",
                "line": 141,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestDiscordRateLimiter"
              },
              {
                "name": "test_global_rate_limit",
                "line": 146,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "rate_limiter"
                ],
                "is_async": true,
                "class": "TestDiscordRateLimiter"
              },
              {
                "name": "test_endpoint_normalization",
                "line": 160,
                "decorators": [],
                "args": [
                  "self",
                  "rate_limiter"
                ],
                "is_async": false,
                "class": "TestDiscordRateLimiter"
              },
              {
                "name": "test_update_from_headers",
                "line": 167,
                "decorators": [],
                "args": [
                  "self",
                  "rate_limiter"
                ],
                "is_async": false,
                "class": "TestDiscordRateLimiter"
              }
            ]
          },
          {
            "name": "TestDiscordEmbedFormatter",
            "line": 182,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "test_create_base_embed",
                "line": 185,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestDiscordEmbedFormatter"
              },
              {
                "name": "test_format_guidance_request",
                "line": 198,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestDiscordEmbedFormatter"
              },
              {
                "name": "test_format_approval_request",
                "line": 220,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestDiscordEmbedFormatter"
              },
              {
                "name": "test_format_tool_execution",
                "line": 239,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestDiscordEmbedFormatter"
              }
            ]
          },
          {
            "name": "TestDiscordThreadManager",
            "line": 279,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "thread_manager",
                "line": 283,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestDiscordThreadManager"
              },
              {
                "name": "test_create_thread",
                "line": 289,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "thread_manager"
                ],
                "is_async": true,
                "class": "TestDiscordThreadManager"
              },
              {
                "name": "test_get_or_create_thread",
                "line": 327,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "thread_manager"
                ],
                "is_async": true,
                "class": "TestDiscordThreadManager"
              },
              {
                "name": "test_archive_old_threads",
                "line": 347,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "thread_manager"
                ],
                "is_async": true,
                "class": "TestDiscordThreadManager"
              }
            ]
          },
          {
            "name": "TestDiscordAccessControl",
            "line": 367,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "access_control",
                "line": 371,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestDiscordAccessControl"
              },
              {
                "name": "test_check_channel_access_with_override",
                "line": 378,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "access_control"
                ],
                "is_async": true,
                "class": "TestDiscordAccessControl"
              },
              {
                "name": "test_check_operation_permissions",
                "line": 391,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "access_control"
                ],
                "is_async": true,
                "class": "TestDiscordAccessControl"
              },
              {
                "name": "test_global_role_permissions",
                "line": 425,
                "decorators": [],
                "args": [
                  "self",
                  "access_control"
                ],
                "is_async": false,
                "class": "TestDiscordAccessControl"
              }
            ]
          },
          {
            "name": "TestDiscordAuditLogger",
            "line": 436,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "audit_logger",
                "line": 440,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestDiscordAuditLogger"
              },
              {
                "name": "test_log_operation_with_audit_service",
                "line": 447,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "audit_logger"
                ],
                "is_async": true,
                "class": "TestDiscordAuditLogger"
              },
              {
                "name": "test_log_operation_without_audit_service",
                "line": 476,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "audit_logger"
                ],
                "is_async": true,
                "class": "TestDiscordAuditLogger"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "vision_helper",
            "line": 22,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestDiscordVisionHelper"
          },
          {
            "name": "test_vision_helper_initialization",
            "line": 28,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "vision_helper"
            ],
            "is_async": true,
            "class": "TestDiscordVisionHelper"
          },
          {
            "name": "test_process_image_attachment",
            "line": 34,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "vision_helper"
            ],
            "is_async": true,
            "class": "TestDiscordVisionHelper"
          },
          {
            "name": "test_vision_helper_no_api_key",
            "line": 62,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestDiscordVisionHelper"
          },
          {
            "name": "error_handler",
            "line": 77,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestDiscordErrorHandler"
          },
          {
            "name": "test_handle_channel_not_found",
            "line": 82,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "error_handler"
            ],
            "is_async": true,
            "class": "TestDiscordErrorHandler"
          },
          {
            "name": "test_handle_forbidden_error",
            "line": 96,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "error_handler"
            ],
            "is_async": true,
            "class": "TestDiscordErrorHandler"
          },
          {
            "name": "test_handle_rate_limit_error",
            "line": 110,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "error_handler"
            ],
            "is_async": true,
            "class": "TestDiscordErrorHandler"
          },
          {
            "name": "test_error_threshold_escalation",
            "line": 125,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "error_handler"
            ],
            "is_async": true,
            "class": "TestDiscordErrorHandler"
          },
          {
            "name": "rate_limiter",
            "line": 141,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestDiscordRateLimiter"
          },
          {
            "name": "test_global_rate_limit",
            "line": 146,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "rate_limiter"
            ],
            "is_async": true,
            "class": "TestDiscordRateLimiter"
          },
          {
            "name": "test_endpoint_normalization",
            "line": 160,
            "decorators": [],
            "args": [
              "self",
              "rate_limiter"
            ],
            "is_async": false,
            "class": "TestDiscordRateLimiter"
          },
          {
            "name": "test_update_from_headers",
            "line": 167,
            "decorators": [],
            "args": [
              "self",
              "rate_limiter"
            ],
            "is_async": false,
            "class": "TestDiscordRateLimiter"
          },
          {
            "name": "test_create_base_embed",
            "line": 185,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestDiscordEmbedFormatter"
          },
          {
            "name": "test_format_guidance_request",
            "line": 198,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestDiscordEmbedFormatter"
          },
          {
            "name": "test_format_approval_request",
            "line": 220,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestDiscordEmbedFormatter"
          },
          {
            "name": "test_format_tool_execution",
            "line": 239,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestDiscordEmbedFormatter"
          },
          {
            "name": "thread_manager",
            "line": 283,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestDiscordThreadManager"
          },
          {
            "name": "test_create_thread",
            "line": 289,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "thread_manager"
            ],
            "is_async": true,
            "class": "TestDiscordThreadManager"
          },
          {
            "name": "test_get_or_create_thread",
            "line": 327,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "thread_manager"
            ],
            "is_async": true,
            "class": "TestDiscordThreadManager"
          },
          {
            "name": "test_archive_old_threads",
            "line": 347,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "thread_manager"
            ],
            "is_async": true,
            "class": "TestDiscordThreadManager"
          },
          {
            "name": "access_control",
            "line": 371,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestDiscordAccessControl"
          },
          {
            "name": "test_check_channel_access_with_override",
            "line": 378,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "access_control"
            ],
            "is_async": true,
            "class": "TestDiscordAccessControl"
          },
          {
            "name": "test_check_operation_permissions",
            "line": 391,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "access_control"
            ],
            "is_async": true,
            "class": "TestDiscordAccessControl"
          },
          {
            "name": "test_global_role_permissions",
            "line": 425,
            "decorators": [],
            "args": [
              "self",
              "access_control"
            ],
            "is_async": false,
            "class": "TestDiscordAccessControl"
          },
          {
            "name": "audit_logger",
            "line": 440,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestDiscordAuditLogger"
          },
          {
            "name": "test_log_operation_with_audit_service",
            "line": 447,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "audit_logger"
            ],
            "is_async": true,
            "class": "TestDiscordAuditLogger"
          },
          {
            "name": "test_log_operation_without_audit_service",
            "line": 476,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "audit_logger"
            ],
            "is_async": true,
            "class": "TestDiscordAuditLogger"
          }
        ]
      },
      {
        "file": "tests/adapters/api/test_api_runtime_control.py",
        "classes": [
          {
            "name": "TestAPIRuntimeControlRoutes",
            "line": 13,
            "decorators": [],
            "bases": [
              "AioHTTPTestCase"
            ],
            "methods": [
              {
                "name": "get_application",
                "line": 16,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIRuntimeControlRoutes"
              },
              {
                "name": "test_register_routes",
                "line": 25,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIRuntimeControlRoutes"
              },
              {
                "name": "test_single_step_success",
                "line": 50,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIRuntimeControlRoutes"
              },
              {
                "name": "test_single_step_error",
                "line": 69,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIRuntimeControlRoutes"
              },
              {
                "name": "test_pause_processing",
                "line": 80,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIRuntimeControlRoutes"
              },
              {
                "name": "test_resume_processing",
                "line": 97,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIRuntimeControlRoutes"
              },
              {
                "name": "test_shutdown_runtime",
                "line": 107,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIRuntimeControlRoutes"
              },
              {
                "name": "test_get_queue_status",
                "line": 117,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIRuntimeControlRoutes"
              },
              {
                "name": "test_load_adapter",
                "line": 131,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIRuntimeControlRoutes"
              },
              {
                "name": "test_unload_adapter",
                "line": 154,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIRuntimeControlRoutes"
              },
              {
                "name": "test_list_adapters",
                "line": 164,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIRuntimeControlRoutes"
              },
              {
                "name": "test_get_adapter_info",
                "line": 180,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIRuntimeControlRoutes"
              },
              {
                "name": "test_get_config",
                "line": 196,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIRuntimeControlRoutes"
              },
              {
                "name": "test_update_config",
                "line": 210,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIRuntimeControlRoutes"
              },
              {
                "name": "test_validate_config",
                "line": 227,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIRuntimeControlRoutes"
              },
              {
                "name": "test_reload_config",
                "line": 244,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIRuntimeControlRoutes"
              },
              {
                "name": "test_list_profiles",
                "line": 258,
                "decorators": [
                  "skip"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIRuntimeControlRoutes"
              },
              {
                "name": "test_load_profile",
                "line": 263,
                "decorators": [
                  "skip"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIRuntimeControlRoutes"
              },
              {
                "name": "test_get_profile",
                "line": 268,
                "decorators": [
                  "skip"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIRuntimeControlRoutes"
              },
              {
                "name": "test_create_profile",
                "line": 273,
                "decorators": [
                  "skip"
                ],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIRuntimeControlRoutes"
              },
              {
                "name": "test_invalid_json_payload",
                "line": 277,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIRuntimeControlRoutes"
              },
              {
                "name": "test_method_not_allowed",
                "line": 284,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIRuntimeControlRoutes"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "get_application",
            "line": 16,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIRuntimeControlRoutes"
          },
          {
            "name": "test_register_routes",
            "line": 25,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIRuntimeControlRoutes"
          },
          {
            "name": "test_single_step_success",
            "line": 50,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIRuntimeControlRoutes"
          },
          {
            "name": "test_single_step_error",
            "line": 69,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIRuntimeControlRoutes"
          },
          {
            "name": "test_pause_processing",
            "line": 80,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIRuntimeControlRoutes"
          },
          {
            "name": "test_resume_processing",
            "line": 97,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIRuntimeControlRoutes"
          },
          {
            "name": "test_shutdown_runtime",
            "line": 107,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIRuntimeControlRoutes"
          },
          {
            "name": "test_get_queue_status",
            "line": 117,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIRuntimeControlRoutes"
          },
          {
            "name": "test_load_adapter",
            "line": 131,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIRuntimeControlRoutes"
          },
          {
            "name": "test_unload_adapter",
            "line": 154,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIRuntimeControlRoutes"
          },
          {
            "name": "test_list_adapters",
            "line": 164,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIRuntimeControlRoutes"
          },
          {
            "name": "test_get_adapter_info",
            "line": 180,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIRuntimeControlRoutes"
          },
          {
            "name": "test_get_config",
            "line": 196,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIRuntimeControlRoutes"
          },
          {
            "name": "test_update_config",
            "line": 210,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIRuntimeControlRoutes"
          },
          {
            "name": "test_validate_config",
            "line": 227,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIRuntimeControlRoutes"
          },
          {
            "name": "test_reload_config",
            "line": 244,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIRuntimeControlRoutes"
          },
          {
            "name": "test_list_profiles",
            "line": 258,
            "decorators": [
              "skip"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIRuntimeControlRoutes"
          },
          {
            "name": "test_load_profile",
            "line": 263,
            "decorators": [
              "skip"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIRuntimeControlRoutes"
          },
          {
            "name": "test_get_profile",
            "line": 268,
            "decorators": [
              "skip"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIRuntimeControlRoutes"
          },
          {
            "name": "test_create_profile",
            "line": 273,
            "decorators": [
              "skip"
            ],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIRuntimeControlRoutes"
          },
          {
            "name": "test_invalid_json_payload",
            "line": 277,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIRuntimeControlRoutes"
          },
          {
            "name": "test_method_not_allowed",
            "line": 284,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIRuntimeControlRoutes"
          }
        ]
      },
      {
        "file": "tests/adapters/api/test_api_memory_unit.py",
        "classes": [
          {
            "name": "TestAPIMemoryRoutes",
            "line": 11,
            "decorators": [],
            "bases": [
              "AioHTTPTestCase"
            ],
            "methods": [
              {
                "name": "get_application",
                "line": 14,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIMemoryRoutes"
              },
              {
                "name": "test_register_routes",
                "line": 41,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIMemoryRoutes"
              },
              {
                "name": "test_memory_scopes_success",
                "line": 60,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIMemoryRoutes"
              },
              {
                "name": "test_memory_scopes_fallback",
                "line": 73,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIMemoryRoutes"
              },
              {
                "name": "test_memory_scopes_error",
                "line": 87,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIMemoryRoutes"
              },
              {
                "name": "test_memory_scope_nodes_success",
                "line": 98,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIMemoryRoutes"
              },
              {
                "name": "test_memory_entries_missing_scope",
                "line": 131,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIMemoryRoutes"
              },
              {
                "name": "test_graph_nodes_list",
                "line": 136,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIMemoryRoutes"
              },
              {
                "name": "test_graph_search_success",
                "line": 166,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIMemoryRoutes"
              },
              {
                "name": "test_memory_timeline",
                "line": 191,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIMemoryRoutes"
              },
              {
                "name": "test_node_details",
                "line": 220,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIMemoryRoutes"
              },
              {
                "name": "test_memory_relationships",
                "line": 243,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIMemoryRoutes"
              },
              {
                "name": "test_agent_identity",
                "line": 272,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIMemoryRoutes"
              },
              {
                "name": "test_memory_timeseries_success",
                "line": 302,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIMemoryRoutes"
              },
              {
                "name": "test_memory_service_unavailable",
                "line": 323,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIMemoryRoutes"
              },
              {
                "name": "test_concurrent_memory_operations",
                "line": 335,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "TestAPIMemoryRoutes"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "get_application",
            "line": 14,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIMemoryRoutes"
          },
          {
            "name": "test_register_routes",
            "line": 41,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIMemoryRoutes"
          },
          {
            "name": "test_memory_scopes_success",
            "line": 60,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIMemoryRoutes"
          },
          {
            "name": "test_memory_scopes_fallback",
            "line": 73,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIMemoryRoutes"
          },
          {
            "name": "test_memory_scopes_error",
            "line": 87,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIMemoryRoutes"
          },
          {
            "name": "test_memory_scope_nodes_success",
            "line": 98,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIMemoryRoutes"
          },
          {
            "name": "test_memory_entries_missing_scope",
            "line": 131,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIMemoryRoutes"
          },
          {
            "name": "test_graph_nodes_list",
            "line": 136,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIMemoryRoutes"
          },
          {
            "name": "test_graph_search_success",
            "line": 166,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIMemoryRoutes"
          },
          {
            "name": "test_memory_timeline",
            "line": 191,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIMemoryRoutes"
          },
          {
            "name": "test_node_details",
            "line": 220,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIMemoryRoutes"
          },
          {
            "name": "test_memory_relationships",
            "line": 243,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIMemoryRoutes"
          },
          {
            "name": "test_agent_identity",
            "line": 272,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIMemoryRoutes"
          },
          {
            "name": "test_memory_timeseries_success",
            "line": 302,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIMemoryRoutes"
          },
          {
            "name": "test_memory_service_unavailable",
            "line": 323,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIMemoryRoutes"
          },
          {
            "name": "test_concurrent_memory_operations",
            "line": 335,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "TestAPIMemoryRoutes"
          }
        ]
      },
      {
        "file": "tests/adapters/mock_llm/responses_epistemic.py",
        "classes": [],
        "functions": [
          {
            "name": "entropy",
            "line": 4,
            "decorators": [],
            "args": [
              "context"
            ],
            "is_async": false
          },
          {
            "name": "coherence",
            "line": 17,
            "decorators": [],
            "args": [
              "context"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "tests/adapters/mock_llm/responses_feedback.py",
        "classes": [],
        "functions": [
          {
            "name": "optimization_veto",
            "line": 5,
            "decorators": [],
            "args": [
              "context"
            ],
            "is_async": false
          },
          {
            "name": "epistemic_humility",
            "line": 19,
            "decorators": [],
            "args": [
              "context"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "tests/adapters/mock_llm/responses_action_selection.py",
        "classes": [],
        "functions": [
          {
            "name": "action_selection",
            "line": 11,
            "decorators": [],
            "args": [
              "context",
              "messages"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "tests/adapters/mock_llm/service.py",
        "classes": [
          {
            "name": "MockInstructorClient",
            "line": 15,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 18,
                "decorators": [],
                "args": [
                  "self",
                  "base_client"
                ],
                "is_async": false,
                "class": "MockInstructorClient"
              },
              {
                "name": "_create",
                "line": 22,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "MockInstructorClient"
              }
            ]
          },
          {
            "name": "MockLLMClient",
            "line": 33,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 36,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "MockLLMClient"
              },
              {
                "name": "_create",
                "line": 50,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "MockLLMClient"
              },
              {
                "name": "__getattr__",
                "line": 69,
                "decorators": [],
                "args": [
                  "self",
                  "name"
                ],
                "is_async": false,
                "class": "MockLLMClient"
              }
            ]
          },
          {
            "name": "MockLLMService",
            "line": 77,
            "decorators": [],
            "bases": [
              "LLMService"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 80,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "MockLLMService"
              },
              {
                "name": "start",
                "line": 84,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "MockLLMService"
              },
              {
                "name": "stop",
                "line": 88,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "MockLLMService"
              },
              {
                "name": "_get_client",
                "line": 92,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "MockLLMService"
              },
              {
                "name": "call_llm_structured",
                "line": 97,
                "decorators": [],
                "args": [
                  "self",
                  "messages",
                  "response_model",
                  "max_tokens",
                  "temperature"
                ],
                "is_async": true,
                "class": "MockLLMService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "__init__",
            "line": 18,
            "decorators": [],
            "args": [
              "self",
              "base_client"
            ],
            "is_async": false,
            "class": "MockInstructorClient"
          },
          {
            "name": "_create",
            "line": 22,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "MockInstructorClient"
          },
          {
            "name": "__init__",
            "line": 36,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "MockLLMClient"
          },
          {
            "name": "_create",
            "line": 50,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "MockLLMClient"
          },
          {
            "name": "__getattr__",
            "line": 69,
            "decorators": [],
            "args": [
              "self",
              "name"
            ],
            "is_async": false,
            "class": "MockLLMClient"
          },
          {
            "name": "__init__",
            "line": 80,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "MockLLMService"
          },
          {
            "name": "start",
            "line": 84,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "MockLLMService"
          },
          {
            "name": "stop",
            "line": 88,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "MockLLMService"
          },
          {
            "name": "_get_client",
            "line": 92,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "MockLLMService"
          },
          {
            "name": "call_llm_structured",
            "line": 97,
            "decorators": [],
            "args": [
              "self",
              "messages",
              "response_model",
              "max_tokens",
              "temperature"
            ],
            "is_async": true,
            "class": "MockLLMService"
          }
        ]
      },
      {
        "file": "tests/adapters/mock_llm/__init__.py",
        "classes": [],
        "functions": [],
        "methods": []
      },
      {
        "file": "tests/adapters/mock_llm/responses.py",
        "classes": [
          {
            "name": "MockLLMConfig",
            "line": 32,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "line": 35,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "MockLLMConfig"
              }
            ]
          }
        ],
        "functions": [
          {
            "name": "set_mock_config",
            "line": 80,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "extract_context_from_messages",
            "line": 88,
            "decorators": [],
            "args": [
              "messages"
            ],
            "is_async": false
          },
          {
            "name": "_attach_extras",
            "line": 203,
            "decorators": [],
            "args": [
              "obj"
            ],
            "is_async": false
          },
          {
            "name": "ethical_dma",
            "line": 229,
            "decorators": [],
            "args": [
              "context"
            ],
            "is_async": false
          },
          {
            "name": "cs_dma",
            "line": 295,
            "decorators": [],
            "args": [
              "context"
            ],
            "is_async": false
          },
          {
            "name": "ds_dma",
            "line": 337,
            "decorators": [],
            "args": [
              "context"
            ],
            "is_async": false
          },
          {
            "name": "ds_dma_llm_output",
            "line": 346,
            "decorators": [],
            "args": [
              "context"
            ],
            "is_async": false
          },
          {
            "name": "create_response",
            "line": 374,
            "decorators": [],
            "args": [
              "response_model",
              "messages"
            ],
            "is_async": false
          }
        ],
        "methods": [
          {
            "name": "__init__",
            "line": 35,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "MockLLMConfig"
          }
        ]
      },
      {
        "file": "tests/ciris_engine/logic/runtime/test_ciris_runtime.py",
        "classes": [
          {
            "name": "TestCIRISRuntime",
            "line": 16,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "temp_data_dir",
                "line": 20,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestCIRISRuntime"
              },
              {
                "name": "mock_essential_config",
                "line": 26,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self",
                  "temp_data_dir"
                ],
                "is_async": false,
                "class": "TestCIRISRuntime"
              },
              {
                "name": "ciris_runtime",
                "line": 38,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self",
                  "mock_essential_config"
                ],
                "is_async": false,
                "class": "TestCIRISRuntime"
              },
              {
                "name": "test_initialize",
                "line": 51,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "ciris_runtime"
                ],
                "is_async": true,
                "class": "TestCIRISRuntime"
              },
              {
                "name": "test_initialize_already_initialized",
                "line": 69,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "ciris_runtime"
                ],
                "is_async": true,
                "class": "TestCIRISRuntime"
              },
              {
                "name": "test_start",
                "line": 79,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "ciris_runtime"
                ],
                "is_async": true,
                "class": "TestCIRISRuntime"
              },
              {
                "name": "test_start_not_initialized",
                "line": 99,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "ciris_runtime"
                ],
                "is_async": true,
                "class": "TestCIRISRuntime"
              },
              {
                "name": "test_shutdown",
                "line": 107,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "ciris_runtime"
                ],
                "is_async": true,
                "class": "TestCIRISRuntime"
              },
              {
                "name": "test_initialize_core_services",
                "line": 135,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "ciris_runtime"
                ],
                "is_async": true,
                "class": "TestCIRISRuntime"
              },
              {
                "name": "test_initialize_buses",
                "line": 151,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "ciris_runtime"
                ],
                "is_async": true,
                "class": "TestCIRISRuntime"
              },
              {
                "name": "test_initialize_processors",
                "line": 170,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "ciris_runtime"
                ],
                "is_async": true,
                "class": "TestCIRISRuntime"
              },
              {
                "name": "test_initialize_adapters",
                "line": 190,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "ciris_runtime"
                ],
                "is_async": true,
                "class": "TestCIRISRuntime"
              },
              {
                "name": "test_run_with_timeout",
                "line": 208,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "ciris_runtime"
                ],
                "is_async": true,
                "class": "TestCIRISRuntime"
              },
              {
                "name": "test_run_with_error",
                "line": 224,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "ciris_runtime"
                ],
                "is_async": true,
                "class": "TestCIRISRuntime"
              },
              {
                "name": "test_get_status",
                "line": 239,
                "decorators": [],
                "args": [
                  "self",
                  "ciris_runtime"
                ],
                "is_async": false,
                "class": "TestCIRISRuntime"
              },
              {
                "name": "test_get_services",
                "line": 254,
                "decorators": [],
                "args": [
                  "self",
                  "ciris_runtime"
                ],
                "is_async": false,
                "class": "TestCIRISRuntime"
              },
              {
                "name": "test_get_services_not_initialized",
                "line": 264,
                "decorators": [],
                "args": [
                  "self",
                  "ciris_runtime"
                ],
                "is_async": false,
                "class": "TestCIRISRuntime"
              },
              {
                "name": "test_handle_shutdown_signal",
                "line": 271,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "ciris_runtime"
                ],
                "is_async": true,
                "class": "TestCIRISRuntime"
              },
              {
                "name": "test_validate_configuration",
                "line": 282,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "ciris_runtime"
                ],
                "is_async": true,
                "class": "TestCIRISRuntime"
              },
              {
                "name": "test_multiple_adapters",
                "line": 296,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "ciris_runtime"
                ],
                "is_async": true,
                "class": "TestCIRISRuntime"
              },
              {
                "name": "test_mock_llm_configuration",
                "line": 319,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "ciris_runtime"
                ],
                "is_async": true,
                "class": "TestCIRISRuntime"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "temp_data_dir",
            "line": 20,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestCIRISRuntime"
          },
          {
            "name": "mock_essential_config",
            "line": 26,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self",
              "temp_data_dir"
            ],
            "is_async": false,
            "class": "TestCIRISRuntime"
          },
          {
            "name": "ciris_runtime",
            "line": 38,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self",
              "mock_essential_config"
            ],
            "is_async": false,
            "class": "TestCIRISRuntime"
          },
          {
            "name": "test_initialize",
            "line": 51,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "ciris_runtime"
            ],
            "is_async": true,
            "class": "TestCIRISRuntime"
          },
          {
            "name": "test_initialize_already_initialized",
            "line": 69,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "ciris_runtime"
            ],
            "is_async": true,
            "class": "TestCIRISRuntime"
          },
          {
            "name": "test_start",
            "line": 79,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "ciris_runtime"
            ],
            "is_async": true,
            "class": "TestCIRISRuntime"
          },
          {
            "name": "test_start_not_initialized",
            "line": 99,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "ciris_runtime"
            ],
            "is_async": true,
            "class": "TestCIRISRuntime"
          },
          {
            "name": "test_shutdown",
            "line": 107,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "ciris_runtime"
            ],
            "is_async": true,
            "class": "TestCIRISRuntime"
          },
          {
            "name": "test_initialize_core_services",
            "line": 135,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "ciris_runtime"
            ],
            "is_async": true,
            "class": "TestCIRISRuntime"
          },
          {
            "name": "test_initialize_buses",
            "line": 151,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "ciris_runtime"
            ],
            "is_async": true,
            "class": "TestCIRISRuntime"
          },
          {
            "name": "test_initialize_processors",
            "line": 170,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "ciris_runtime"
            ],
            "is_async": true,
            "class": "TestCIRISRuntime"
          },
          {
            "name": "test_initialize_adapters",
            "line": 190,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "ciris_runtime"
            ],
            "is_async": true,
            "class": "TestCIRISRuntime"
          },
          {
            "name": "test_run_with_timeout",
            "line": 208,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "ciris_runtime"
            ],
            "is_async": true,
            "class": "TestCIRISRuntime"
          },
          {
            "name": "test_run_with_error",
            "line": 224,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "ciris_runtime"
            ],
            "is_async": true,
            "class": "TestCIRISRuntime"
          },
          {
            "name": "test_get_status",
            "line": 239,
            "decorators": [],
            "args": [
              "self",
              "ciris_runtime"
            ],
            "is_async": false,
            "class": "TestCIRISRuntime"
          },
          {
            "name": "test_get_services",
            "line": 254,
            "decorators": [],
            "args": [
              "self",
              "ciris_runtime"
            ],
            "is_async": false,
            "class": "TestCIRISRuntime"
          },
          {
            "name": "test_get_services_not_initialized",
            "line": 264,
            "decorators": [],
            "args": [
              "self",
              "ciris_runtime"
            ],
            "is_async": false,
            "class": "TestCIRISRuntime"
          },
          {
            "name": "test_handle_shutdown_signal",
            "line": 271,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "ciris_runtime"
            ],
            "is_async": true,
            "class": "TestCIRISRuntime"
          },
          {
            "name": "test_validate_configuration",
            "line": 282,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "ciris_runtime"
            ],
            "is_async": true,
            "class": "TestCIRISRuntime"
          },
          {
            "name": "test_multiple_adapters",
            "line": 296,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "ciris_runtime"
            ],
            "is_async": true,
            "class": "TestCIRISRuntime"
          },
          {
            "name": "test_mock_llm_configuration",
            "line": 319,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "ciris_runtime"
            ],
            "is_async": true,
            "class": "TestCIRISRuntime"
          }
        ]
      },
      {
        "file": "tests/ciris_engine/logic/runtime/test_service_initializer.py",
        "classes": [
          {
            "name": "TestServiceInitializer",
            "line": 15,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "temp_data_dir",
                "line": 19,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestServiceInitializer"
              },
              {
                "name": "mock_essential_config",
                "line": 25,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self",
                  "temp_data_dir"
                ],
                "is_async": false,
                "class": "TestServiceInitializer"
              },
              {
                "name": "service_initializer",
                "line": 36,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self",
                  "mock_essential_config"
                ],
                "is_async": false,
                "class": "TestServiceInitializer"
              },
              {
                "name": "test_initialize_all",
                "line": 46,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "service_initializer"
                ],
                "is_async": true,
                "class": "TestServiceInitializer"
              },
              {
                "name": "test_initialize_infrastructure",
                "line": 67,
                "decorators": [],
                "args": [
                  "self",
                  "service_initializer"
                ],
                "is_async": false,
                "class": "TestServiceInitializer"
              },
              {
                "name": "test_initialize_database",
                "line": 80,
                "decorators": [],
                "args": [
                  "self",
                  "service_initializer"
                ],
                "is_async": false,
                "class": "TestServiceInitializer"
              },
              {
                "name": "test_initialize_memory",
                "line": 92,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "service_initializer"
                ],
                "is_async": true,
                "class": "TestServiceInitializer"
              },
              {
                "name": "test_initialize_identity",
                "line": 110,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "service_initializer"
                ],
                "is_async": true,
                "class": "TestServiceInitializer"
              },
              {
                "name": "test_initialize_security",
                "line": 128,
                "decorators": [],
                "args": [
                  "self",
                  "service_initializer"
                ],
                "is_async": false,
                "class": "TestServiceInitializer"
              },
              {
                "name": "test_initialize_services",
                "line": 146,
                "decorators": [],
                "args": [
                  "self",
                  "service_initializer"
                ],
                "is_async": false,
                "class": "TestServiceInitializer"
              },
              {
                "name": "test_initialize_llm_service_mock",
                "line": 170,
                "decorators": [],
                "args": [
                  "self",
                  "service_initializer"
                ],
                "is_async": false,
                "class": "TestServiceInitializer"
              },
              {
                "name": "test_initialize_llm_service_real",
                "line": 184,
                "decorators": [],
                "args": [
                  "self",
                  "service_initializer"
                ],
                "is_async": false,
                "class": "TestServiceInitializer"
              },
              {
                "name": "test_shutdown_all",
                "line": 201,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "service_initializer"
                ],
                "is_async": true,
                "class": "TestServiceInitializer"
              },
              {
                "name": "test_shutdown_with_error",
                "line": 222,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "service_initializer"
                ],
                "is_async": true,
                "class": "TestServiceInitializer"
              },
              {
                "name": "test_get_all_services",
                "line": 236,
                "decorators": [],
                "args": [
                  "self",
                  "service_initializer"
                ],
                "is_async": false,
                "class": "TestServiceInitializer"
              },
              {
                "name": "test_verify_initialization",
                "line": 249,
                "decorators": [],
                "args": [
                  "self",
                  "service_initializer"
                ],
                "is_async": false,
                "class": "TestServiceInitializer"
              },
              {
                "name": "test_verify_initialization_missing_service",
                "line": 261,
                "decorators": [],
                "args": [
                  "self",
                  "service_initializer"
                ],
                "is_async": false,
                "class": "TestServiceInitializer"
              },
              {
                "name": "test_service_count",
                "line": 271,
                "decorators": [],
                "args": [
                  "self",
                  "service_initializer"
                ],
                "is_async": false,
                "class": "TestServiceInitializer"
              },
              {
                "name": "test_initialization_order_dependencies",
                "line": 293,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "service_initializer"
                ],
                "is_async": true,
                "class": "TestServiceInitializer"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "temp_data_dir",
            "line": 19,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestServiceInitializer"
          },
          {
            "name": "mock_essential_config",
            "line": 25,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self",
              "temp_data_dir"
            ],
            "is_async": false,
            "class": "TestServiceInitializer"
          },
          {
            "name": "service_initializer",
            "line": 36,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self",
              "mock_essential_config"
            ],
            "is_async": false,
            "class": "TestServiceInitializer"
          },
          {
            "name": "test_initialize_all",
            "line": 46,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "service_initializer"
            ],
            "is_async": true,
            "class": "TestServiceInitializer"
          },
          {
            "name": "test_initialize_infrastructure",
            "line": 67,
            "decorators": [],
            "args": [
              "self",
              "service_initializer"
            ],
            "is_async": false,
            "class": "TestServiceInitializer"
          },
          {
            "name": "test_initialize_database",
            "line": 80,
            "decorators": [],
            "args": [
              "self",
              "service_initializer"
            ],
            "is_async": false,
            "class": "TestServiceInitializer"
          },
          {
            "name": "test_initialize_memory",
            "line": 92,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "service_initializer"
            ],
            "is_async": true,
            "class": "TestServiceInitializer"
          },
          {
            "name": "test_initialize_identity",
            "line": 110,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "service_initializer"
            ],
            "is_async": true,
            "class": "TestServiceInitializer"
          },
          {
            "name": "test_initialize_security",
            "line": 128,
            "decorators": [],
            "args": [
              "self",
              "service_initializer"
            ],
            "is_async": false,
            "class": "TestServiceInitializer"
          },
          {
            "name": "test_initialize_services",
            "line": 146,
            "decorators": [],
            "args": [
              "self",
              "service_initializer"
            ],
            "is_async": false,
            "class": "TestServiceInitializer"
          },
          {
            "name": "test_initialize_llm_service_mock",
            "line": 170,
            "decorators": [],
            "args": [
              "self",
              "service_initializer"
            ],
            "is_async": false,
            "class": "TestServiceInitializer"
          },
          {
            "name": "test_initialize_llm_service_real",
            "line": 184,
            "decorators": [],
            "args": [
              "self",
              "service_initializer"
            ],
            "is_async": false,
            "class": "TestServiceInitializer"
          },
          {
            "name": "test_shutdown_all",
            "line": 201,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "service_initializer"
            ],
            "is_async": true,
            "class": "TestServiceInitializer"
          },
          {
            "name": "test_shutdown_with_error",
            "line": 222,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "service_initializer"
            ],
            "is_async": true,
            "class": "TestServiceInitializer"
          },
          {
            "name": "test_get_all_services",
            "line": 236,
            "decorators": [],
            "args": [
              "self",
              "service_initializer"
            ],
            "is_async": false,
            "class": "TestServiceInitializer"
          },
          {
            "name": "test_verify_initialization",
            "line": 249,
            "decorators": [],
            "args": [
              "self",
              "service_initializer"
            ],
            "is_async": false,
            "class": "TestServiceInitializer"
          },
          {
            "name": "test_verify_initialization_missing_service",
            "line": 261,
            "decorators": [],
            "args": [
              "self",
              "service_initializer"
            ],
            "is_async": false,
            "class": "TestServiceInitializer"
          },
          {
            "name": "test_service_count",
            "line": 271,
            "decorators": [],
            "args": [
              "self",
              "service_initializer"
            ],
            "is_async": false,
            "class": "TestServiceInitializer"
          },
          {
            "name": "test_initialization_order_dependencies",
            "line": 293,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "service_initializer"
            ],
            "is_async": true,
            "class": "TestServiceInitializer"
          }
        ]
      },
      {
        "file": "tests/ciris_engine/logic/services/test_insight_processing.py",
        "classes": [
          {
            "name": "MockTimeService",
            "line": 21,
            "decorators": [],
            "bases": [
              "TimeServiceProtocol"
            ],
            "methods": [
              {
                "name": "__init__",
                "line": 23,
                "decorators": [],
                "args": [
                  "self",
                  "current_time"
                ],
                "is_async": false,
                "class": "MockTimeService"
              },
              {
                "name": "now",
                "line": 26,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "MockTimeService"
              },
              {
                "name": "now_iso",
                "line": 29,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "MockTimeService"
              },
              {
                "name": "get_current_time",
                "line": 32,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "MockTimeService"
              },
              {
                "name": "timestamp",
                "line": 35,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "MockTimeService"
              },
              {
                "name": "start",
                "line": 38,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "MockTimeService"
              },
              {
                "name": "stop",
                "line": 41,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "MockTimeService"
              },
              {
                "name": "is_healthy",
                "line": 44,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": true,
                "class": "MockTimeService"
              },
              {
                "name": "get_capabilities",
                "line": 47,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "MockTimeService"
              },
              {
                "name": "get_status",
                "line": 50,
                "decorators": [],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "MockTimeService"
              }
            ]
          }
        ],
        "functions": [
          {
            "name": "test_feedback_loop_stores_insights_as_concept_nodes",
            "line": 55,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_dream_processor_queries_behavioral_insights",
            "line": 103,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_all_insights_processed_without_filtering",
            "line": 176,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_feedback_loop_stores_all_detected_patterns",
            "line": 240,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_integration_feedback_loop_to_dream_processor",
            "line": 290,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_dream_processor_handles_missing_attributes",
            "line": 365,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          }
        ],
        "methods": [
          {
            "name": "__init__",
            "line": 23,
            "decorators": [],
            "args": [
              "self",
              "current_time"
            ],
            "is_async": false,
            "class": "MockTimeService"
          },
          {
            "name": "now",
            "line": 26,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "MockTimeService"
          },
          {
            "name": "now_iso",
            "line": 29,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "MockTimeService"
          },
          {
            "name": "get_current_time",
            "line": 32,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "MockTimeService"
          },
          {
            "name": "timestamp",
            "line": 35,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "MockTimeService"
          },
          {
            "name": "start",
            "line": 38,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "MockTimeService"
          },
          {
            "name": "stop",
            "line": 41,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "MockTimeService"
          },
          {
            "name": "is_healthy",
            "line": 44,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": true,
            "class": "MockTimeService"
          },
          {
            "name": "get_capabilities",
            "line": 47,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "MockTimeService"
          },
          {
            "name": "get_status",
            "line": 50,
            "decorators": [],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "MockTimeService"
          }
        ]
      },
      {
        "file": "tests/ciris_engine/logic/adapters/discord/test_discord_adapter_unit.py",
        "classes": [
          {
            "name": "TestDiscordAdapter",
            "line": 17,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "mock_time_service",
                "line": 21,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "mock_config",
                "line": 30,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "mock_services",
                "line": 41,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self",
                  "mock_time_service"
                ],
                "is_async": false,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "discord_adapter",
                "line": 51,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self",
                  "mock_config",
                  "mock_services"
                ],
                "is_async": false,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_start",
                "line": 72,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_stop",
                "line": 91,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_send_message",
                "line": 102,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_send_message_with_embed",
                "line": 120,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_send_message_too_long",
                "line": 142,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_get_channel_by_name",
                "line": 165,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_get_channel_by_id",
                "line": 179,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_get_channel_not_found",
                "line": 190,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_on_ready",
                "line": 200,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_on_message_from_bot",
                "line": 224,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_on_message_from_user",
                "line": 242,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_on_message_command",
                "line": 267,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_on_message_error",
                "line": 290,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_delete_message",
                "line": 307,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_delete_message_not_found",
                "line": 322,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_edit_message",
                "line": 333,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_add_reaction",
                "line": 348,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_get_capabilities",
                "line": 363,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_connection_error_handling",
                "line": 376,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_rate_limit_handling",
                "line": 389,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": true,
                "class": "TestDiscordAdapter"
              },
              {
                "name": "test_get_status",
                "line": 402,
                "decorators": [],
                "args": [
                  "self",
                  "discord_adapter"
                ],
                "is_async": false,
                "class": "TestDiscordAdapter"
              }
            ]
          },
          {
            "name": "TestDiscordObserver",
            "line": 419,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "discord_observer",
                "line": 423,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestDiscordObserver"
              },
              {
                "name": "test_on_message_received",
                "line": 433,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_observer"
                ],
                "is_async": true,
                "class": "TestDiscordObserver"
              },
              {
                "name": "test_on_message_received_no_handler",
                "line": 453,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_observer"
                ],
                "is_async": true,
                "class": "TestDiscordObserver"
              },
              {
                "name": "test_on_adapter_started",
                "line": 464,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_observer"
                ],
                "is_async": true,
                "class": "TestDiscordObserver"
              },
              {
                "name": "test_on_adapter_stopped",
                "line": 479,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "discord_observer"
                ],
                "is_async": true,
                "class": "TestDiscordObserver"
              }
            ]
          },
          {
            "name": "TestDiscordErrorHandler",
            "line": 488,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "error_handler",
                "line": 492,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestDiscordErrorHandler"
              },
              {
                "name": "test_handle_command_not_found",
                "line": 497,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "error_handler"
                ],
                "is_async": true,
                "class": "TestDiscordErrorHandler"
              },
              {
                "name": "test_handle_missing_permissions",
                "line": 505,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "error_handler"
                ],
                "is_async": true,
                "class": "TestDiscordErrorHandler"
              },
              {
                "name": "test_handle_generic_error",
                "line": 518,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "error_handler"
                ],
                "is_async": true,
                "class": "TestDiscordErrorHandler"
              },
              {
                "name": "test_format_error_message",
                "line": 525,
                "decorators": [],
                "args": [
                  "self",
                  "error_handler"
                ],
                "is_async": false,
                "class": "TestDiscordErrorHandler"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "mock_time_service",
            "line": 21,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "mock_config",
            "line": 30,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "mock_services",
            "line": 41,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self",
              "mock_time_service"
            ],
            "is_async": false,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "discord_adapter",
            "line": 51,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self",
              "mock_config",
              "mock_services"
            ],
            "is_async": false,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_start",
            "line": 72,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_stop",
            "line": 91,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_send_message",
            "line": 102,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_send_message_with_embed",
            "line": 120,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_send_message_too_long",
            "line": 142,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_get_channel_by_name",
            "line": 165,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_get_channel_by_id",
            "line": 179,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_get_channel_not_found",
            "line": 190,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_on_ready",
            "line": 200,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_on_message_from_bot",
            "line": 224,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_on_message_from_user",
            "line": 242,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_on_message_command",
            "line": 267,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_on_message_error",
            "line": 290,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_delete_message",
            "line": 307,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_delete_message_not_found",
            "line": 322,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_edit_message",
            "line": 333,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_add_reaction",
            "line": 348,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_get_capabilities",
            "line": 363,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_connection_error_handling",
            "line": 376,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_rate_limit_handling",
            "line": 389,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": true,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "test_get_status",
            "line": 402,
            "decorators": [],
            "args": [
              "self",
              "discord_adapter"
            ],
            "is_async": false,
            "class": "TestDiscordAdapter"
          },
          {
            "name": "discord_observer",
            "line": 423,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestDiscordObserver"
          },
          {
            "name": "test_on_message_received",
            "line": 433,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_observer"
            ],
            "is_async": true,
            "class": "TestDiscordObserver"
          },
          {
            "name": "test_on_message_received_no_handler",
            "line": 453,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_observer"
            ],
            "is_async": true,
            "class": "TestDiscordObserver"
          },
          {
            "name": "test_on_adapter_started",
            "line": 464,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_observer"
            ],
            "is_async": true,
            "class": "TestDiscordObserver"
          },
          {
            "name": "test_on_adapter_stopped",
            "line": 479,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "discord_observer"
            ],
            "is_async": true,
            "class": "TestDiscordObserver"
          },
          {
            "name": "error_handler",
            "line": 492,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestDiscordErrorHandler"
          },
          {
            "name": "test_handle_command_not_found",
            "line": 497,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "error_handler"
            ],
            "is_async": true,
            "class": "TestDiscordErrorHandler"
          },
          {
            "name": "test_handle_missing_permissions",
            "line": 505,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "error_handler"
            ],
            "is_async": true,
            "class": "TestDiscordErrorHandler"
          },
          {
            "name": "test_handle_generic_error",
            "line": 518,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "error_handler"
            ],
            "is_async": true,
            "class": "TestDiscordErrorHandler"
          },
          {
            "name": "test_format_error_message",
            "line": 525,
            "decorators": [],
            "args": [
              "self",
              "error_handler"
            ],
            "is_async": false,
            "class": "TestDiscordErrorHandler"
          }
        ]
      },
      {
        "file": "tests/ciris_engine/logic/processors/core/test_thought_processor.py",
        "classes": [
          {
            "name": "TestThoughtProcessor",
            "line": 19,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "mock_time_service",
                "line": 23,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestThoughtProcessor"
              },
              {
                "name": "mock_bus_manager",
                "line": 32,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestThoughtProcessor"
              },
              {
                "name": "mock_action_dispatcher",
                "line": 49,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestThoughtProcessor"
              },
              {
                "name": "mock_persistence",
                "line": 61,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestThoughtProcessor"
              },
              {
                "name": "thought_processor",
                "line": 75,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self",
                  "mock_time_service",
                  "mock_bus_manager",
                  "mock_action_dispatcher",
                  "mock_persistence"
                ],
                "is_async": false,
                "class": "TestThoughtProcessor"
              },
              {
                "name": "test_get_processing_queue",
                "line": 92,
                "decorators": [],
                "args": [
                  "self",
                  "thought_processor"
                ],
                "is_async": false,
                "class": "TestThoughtProcessor"
              },
              {
                "name": "test_create_thought_from_task",
                "line": 99,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "thought_processor"
                ],
                "is_async": true,
                "class": "TestThoughtProcessor"
              },
              {
                "name": "test_create_follow_up_thought",
                "line": 123,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "thought_processor"
                ],
                "is_async": true,
                "class": "TestThoughtProcessor"
              },
              {
                "name": "test_process_single_thought",
                "line": 147,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "thought_processor",
                  "mock_bus_manager"
                ],
                "is_async": true,
                "class": "TestThoughtProcessor"
              },
              {
                "name": "test_process_thought_with_error",
                "line": 179,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "thought_processor",
                  "mock_bus_manager"
                ],
                "is_async": true,
                "class": "TestThoughtProcessor"
              },
              {
                "name": "test_max_thought_depth_limit",
                "line": 218,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "thought_processor"
                ],
                "is_async": true,
                "class": "TestThoughtProcessor"
              },
              {
                "name": "test_process_multiple_thoughts",
                "line": 240,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "thought_processor"
                ],
                "is_async": true,
                "class": "TestThoughtProcessor"
              },
              {
                "name": "test_handle_terminal_action",
                "line": 276,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "thought_processor",
                  "mock_bus_manager"
                ],
                "is_async": true,
                "class": "TestThoughtProcessor"
              },
              {
                "name": "test_action_dispatch_failure",
                "line": 318,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "thought_processor",
                  "mock_action_dispatcher"
                ],
                "is_async": true,
                "class": "TestThoughtProcessor"
              },
              {
                "name": "test_get_queue_stats",
                "line": 358,
                "decorators": [],
                "args": [
                  "self",
                  "thought_processor"
                ],
                "is_async": false,
                "class": "TestThoughtProcessor"
              },
              {
                "name": "test_priority_processing_order",
                "line": 385,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "thought_processor"
                ],
                "is_async": true,
                "class": "TestThoughtProcessor"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "mock_time_service",
            "line": 23,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestThoughtProcessor"
          },
          {
            "name": "mock_bus_manager",
            "line": 32,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestThoughtProcessor"
          },
          {
            "name": "mock_action_dispatcher",
            "line": 49,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestThoughtProcessor"
          },
          {
            "name": "mock_persistence",
            "line": 61,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestThoughtProcessor"
          },
          {
            "name": "thought_processor",
            "line": 75,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self",
              "mock_time_service",
              "mock_bus_manager",
              "mock_action_dispatcher",
              "mock_persistence"
            ],
            "is_async": false,
            "class": "TestThoughtProcessor"
          },
          {
            "name": "test_get_processing_queue",
            "line": 92,
            "decorators": [],
            "args": [
              "self",
              "thought_processor"
            ],
            "is_async": false,
            "class": "TestThoughtProcessor"
          },
          {
            "name": "test_create_thought_from_task",
            "line": 99,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "thought_processor"
            ],
            "is_async": true,
            "class": "TestThoughtProcessor"
          },
          {
            "name": "test_create_follow_up_thought",
            "line": 123,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "thought_processor"
            ],
            "is_async": true,
            "class": "TestThoughtProcessor"
          },
          {
            "name": "test_process_single_thought",
            "line": 147,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "thought_processor",
              "mock_bus_manager"
            ],
            "is_async": true,
            "class": "TestThoughtProcessor"
          },
          {
            "name": "test_process_thought_with_error",
            "line": 179,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "thought_processor",
              "mock_bus_manager"
            ],
            "is_async": true,
            "class": "TestThoughtProcessor"
          },
          {
            "name": "test_max_thought_depth_limit",
            "line": 218,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "thought_processor"
            ],
            "is_async": true,
            "class": "TestThoughtProcessor"
          },
          {
            "name": "test_process_multiple_thoughts",
            "line": 240,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "thought_processor"
            ],
            "is_async": true,
            "class": "TestThoughtProcessor"
          },
          {
            "name": "test_handle_terminal_action",
            "line": 276,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "thought_processor",
              "mock_bus_manager"
            ],
            "is_async": true,
            "class": "TestThoughtProcessor"
          },
          {
            "name": "test_action_dispatch_failure",
            "line": 318,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "thought_processor",
              "mock_action_dispatcher"
            ],
            "is_async": true,
            "class": "TestThoughtProcessor"
          },
          {
            "name": "test_get_queue_stats",
            "line": 358,
            "decorators": [],
            "args": [
              "self",
              "thought_processor"
            ],
            "is_async": false,
            "class": "TestThoughtProcessor"
          },
          {
            "name": "test_priority_processing_order",
            "line": 385,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "thought_processor"
            ],
            "is_async": true,
            "class": "TestThoughtProcessor"
          }
        ]
      },
      {
        "file": "tests/ciris_engine/logic/processors/core/test_main_processor.py",
        "classes": [
          {
            "name": "TestAgentProcessor",
            "line": 16,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "mock_time_service",
                "line": 20,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestAgentProcessor"
              },
              {
                "name": "mock_config",
                "line": 29,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestAgentProcessor"
              },
              {
                "name": "mock_services",
                "line": 41,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self",
                  "mock_time_service"
                ],
                "is_async": false,
                "class": "TestAgentProcessor"
              },
              {
                "name": "mock_processors",
                "line": 53,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestAgentProcessor"
              },
              {
                "name": "main_processor",
                "line": 73,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self",
                  "mock_config",
                  "mock_services",
                  "mock_processors"
                ],
                "is_async": false,
                "class": "TestAgentProcessor"
              },
              {
                "name": "test_initialize",
                "line": 83,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "main_processor"
                ],
                "is_async": true,
                "class": "TestAgentProcessor"
              },
              {
                "name": "test_start_processing",
                "line": 92,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "main_processor"
                ],
                "is_async": true,
                "class": "TestAgentProcessor"
              },
              {
                "name": "test_process_single_round",
                "line": 104,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "main_processor",
                  "mock_processors"
                ],
                "is_async": true,
                "class": "TestAgentProcessor"
              },
              {
                "name": "test_state_transition",
                "line": 115,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "main_processor",
                  "mock_processors"
                ],
                "is_async": true,
                "class": "TestAgentProcessor"
              },
              {
                "name": "test_handle_processor_error",
                "line": 134,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "main_processor",
                  "mock_processors"
                ],
                "is_async": true,
                "class": "TestAgentProcessor"
              },
              {
                "name": "test_max_consecutive_errors",
                "line": 148,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "main_processor",
                  "mock_processors"
                ],
                "is_async": true,
                "class": "TestAgentProcessor"
              },
              {
                "name": "test_round_timeout",
                "line": 164,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "main_processor",
                  "mock_processors"
                ],
                "is_async": true,
                "class": "TestAgentProcessor"
              },
              {
                "name": "test_stop_processing",
                "line": 183,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "main_processor"
                ],
                "is_async": true,
                "class": "TestAgentProcessor"
              },
              {
                "name": "test_emergency_stop",
                "line": 203,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "main_processor"
                ],
                "is_async": true,
                "class": "TestAgentProcessor"
              },
              {
                "name": "test_get_current_state",
                "line": 213,
                "decorators": [],
                "args": [
                  "self",
                  "main_processor"
                ],
                "is_async": false,
                "class": "TestAgentProcessor"
              },
              {
                "name": "test_get_state_history",
                "line": 219,
                "decorators": [],
                "args": [
                  "self",
                  "main_processor"
                ],
                "is_async": false,
                "class": "TestAgentProcessor"
              },
              {
                "name": "test_get_processor_metrics",
                "line": 237,
                "decorators": [],
                "args": [
                  "self",
                  "main_processor"
                ],
                "is_async": false,
                "class": "TestAgentProcessor"
              },
              {
                "name": "test_validate_transition",
                "line": 251,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "main_processor"
                ],
                "is_async": true,
                "class": "TestAgentProcessor"
              },
              {
                "name": "test_transition_to_same_state",
                "line": 261,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "main_processor"
                ],
                "is_async": true,
                "class": "TestAgentProcessor"
              },
              {
                "name": "test_processor_not_found",
                "line": 272,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "main_processor"
                ],
                "is_async": true,
                "class": "TestAgentProcessor"
              },
              {
                "name": "test_state_transition_delay",
                "line": 286,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "main_processor"
                ],
                "is_async": true,
                "class": "TestAgentProcessor"
              },
              {
                "name": "test_cleanup",
                "line": 299,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "main_processor",
                  "mock_processors"
                ],
                "is_async": true,
                "class": "TestAgentProcessor"
              },
              {
                "name": "test_max_rounds_limit",
                "line": 314,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "main_processor"
                ],
                "is_async": true,
                "class": "TestAgentProcessor"
              },
              {
                "name": "test_record_state_transition",
                "line": 327,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "main_processor"
                ],
                "is_async": true,
                "class": "TestAgentProcessor"
              },
              {
                "name": "test_processor_initialization_failure",
                "line": 346,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "main_processor",
                  "mock_processors"
                ],
                "is_async": true,
                "class": "TestAgentProcessor"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "mock_time_service",
            "line": 20,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestAgentProcessor"
          },
          {
            "name": "mock_config",
            "line": 29,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestAgentProcessor"
          },
          {
            "name": "mock_services",
            "line": 41,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self",
              "mock_time_service"
            ],
            "is_async": false,
            "class": "TestAgentProcessor"
          },
          {
            "name": "mock_processors",
            "line": 53,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestAgentProcessor"
          },
          {
            "name": "main_processor",
            "line": 73,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self",
              "mock_config",
              "mock_services",
              "mock_processors"
            ],
            "is_async": false,
            "class": "TestAgentProcessor"
          },
          {
            "name": "test_initialize",
            "line": 83,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "main_processor"
            ],
            "is_async": true,
            "class": "TestAgentProcessor"
          },
          {
            "name": "test_start_processing",
            "line": 92,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "main_processor"
            ],
            "is_async": true,
            "class": "TestAgentProcessor"
          },
          {
            "name": "test_process_single_round",
            "line": 104,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "main_processor",
              "mock_processors"
            ],
            "is_async": true,
            "class": "TestAgentProcessor"
          },
          {
            "name": "test_state_transition",
            "line": 115,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "main_processor",
              "mock_processors"
            ],
            "is_async": true,
            "class": "TestAgentProcessor"
          },
          {
            "name": "test_handle_processor_error",
            "line": 134,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "main_processor",
              "mock_processors"
            ],
            "is_async": true,
            "class": "TestAgentProcessor"
          },
          {
            "name": "test_max_consecutive_errors",
            "line": 148,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "main_processor",
              "mock_processors"
            ],
            "is_async": true,
            "class": "TestAgentProcessor"
          },
          {
            "name": "test_round_timeout",
            "line": 164,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "main_processor",
              "mock_processors"
            ],
            "is_async": true,
            "class": "TestAgentProcessor"
          },
          {
            "name": "test_stop_processing",
            "line": 183,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "main_processor"
            ],
            "is_async": true,
            "class": "TestAgentProcessor"
          },
          {
            "name": "test_emergency_stop",
            "line": 203,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "main_processor"
            ],
            "is_async": true,
            "class": "TestAgentProcessor"
          },
          {
            "name": "test_get_current_state",
            "line": 213,
            "decorators": [],
            "args": [
              "self",
              "main_processor"
            ],
            "is_async": false,
            "class": "TestAgentProcessor"
          },
          {
            "name": "test_get_state_history",
            "line": 219,
            "decorators": [],
            "args": [
              "self",
              "main_processor"
            ],
            "is_async": false,
            "class": "TestAgentProcessor"
          },
          {
            "name": "test_get_processor_metrics",
            "line": 237,
            "decorators": [],
            "args": [
              "self",
              "main_processor"
            ],
            "is_async": false,
            "class": "TestAgentProcessor"
          },
          {
            "name": "test_validate_transition",
            "line": 251,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "main_processor"
            ],
            "is_async": true,
            "class": "TestAgentProcessor"
          },
          {
            "name": "test_transition_to_same_state",
            "line": 261,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "main_processor"
            ],
            "is_async": true,
            "class": "TestAgentProcessor"
          },
          {
            "name": "test_processor_not_found",
            "line": 272,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "main_processor"
            ],
            "is_async": true,
            "class": "TestAgentProcessor"
          },
          {
            "name": "test_state_transition_delay",
            "line": 286,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "main_processor"
            ],
            "is_async": true,
            "class": "TestAgentProcessor"
          },
          {
            "name": "test_cleanup",
            "line": 299,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "main_processor",
              "mock_processors"
            ],
            "is_async": true,
            "class": "TestAgentProcessor"
          },
          {
            "name": "test_max_rounds_limit",
            "line": 314,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "main_processor"
            ],
            "is_async": true,
            "class": "TestAgentProcessor"
          },
          {
            "name": "test_record_state_transition",
            "line": 327,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "main_processor"
            ],
            "is_async": true,
            "class": "TestAgentProcessor"
          },
          {
            "name": "test_processor_initialization_failure",
            "line": 346,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "main_processor",
              "mock_processors"
            ],
            "is_async": true,
            "class": "TestAgentProcessor"
          }
        ]
      },
      {
        "file": "tests/ciris_engine/logic/processors/states/test_dream_processor.py",
        "classes": [
          {
            "name": "TestDreamProcessor",
            "line": 21,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "mock_services",
                "line": 25,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestDreamProcessor"
              },
              {
                "name": "mock_config",
                "line": 47,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestDreamProcessor"
              },
              {
                "name": "mock_thought_processor",
                "line": 55,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestDreamProcessor"
              },
              {
                "name": "mock_action_dispatcher",
                "line": 65,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestDreamProcessor"
              },
              {
                "name": "dream_processor",
                "line": 70,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self",
                  "mock_config",
                  "mock_thought_processor",
                  "mock_action_dispatcher",
                  "mock_services"
                ],
                "is_async": false,
                "class": "TestDreamProcessor"
              },
              {
                "name": "test_get_supported_states",
                "line": 101,
                "decorators": [],
                "args": [
                  "self",
                  "dream_processor"
                ],
                "is_async": false,
                "class": "TestDreamProcessor"
              },
              {
                "name": "test_can_process_dream_state",
                "line": 107,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "dream_processor"
                ],
                "is_async": true,
                "class": "TestDreamProcessor"
              },
              {
                "name": "test_initialize",
                "line": 113,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "dream_processor"
                ],
                "is_async": true,
                "class": "TestDreamProcessor"
              },
              {
                "name": "test_process_entering_phase",
                "line": 121,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "dream_processor"
                ],
                "is_async": true,
                "class": "TestDreamProcessor"
              },
              {
                "name": "test_process_consolidating_phase",
                "line": 139,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "dream_processor"
                ],
                "is_async": true,
                "class": "TestDreamProcessor"
              },
              {
                "name": "test_process_analyzing_phase",
                "line": 157,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "dream_processor"
                ],
                "is_async": true,
                "class": "TestDreamProcessor"
              },
              {
                "name": "test_process_configuring_phase",
                "line": 175,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "dream_processor"
                ],
                "is_async": true,
                "class": "TestDreamProcessor"
              },
              {
                "name": "test_process_planning_phase",
                "line": 189,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "dream_processor"
                ],
                "is_async": true,
                "class": "TestDreamProcessor"
              },
              {
                "name": "test_process_exiting_phase",
                "line": 212,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "dream_processor"
                ],
                "is_async": true,
                "class": "TestDreamProcessor"
              },
              {
                "name": "test_cleanup",
                "line": 226,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "dream_processor"
                ],
                "is_async": true,
                "class": "TestDreamProcessor"
              },
              {
                "name": "test_consolidate_recent_memories",
                "line": 237,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "dream_processor"
                ],
                "is_async": true,
                "class": "TestDreamProcessor"
              },
              {
                "name": "test_process_behavioral_insights",
                "line": 264,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "dream_processor"
                ],
                "is_async": true,
                "class": "TestDreamProcessor"
              },
              {
                "name": "test_apply_self_configuration",
                "line": 289,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "dream_processor",
                  "mock_services"
                ],
                "is_async": true,
                "class": "TestDreamProcessor"
              },
              {
                "name": "test_create_system_snapshot",
                "line": 304,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "dream_processor"
                ],
                "is_async": true,
                "class": "TestDreamProcessor"
              },
              {
                "name": "test_minimum_dream_duration",
                "line": 324,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "dream_processor"
                ],
                "is_async": true,
                "class": "TestDreamProcessor"
              },
              {
                "name": "test_maximum_dream_duration",
                "line": 341,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "dream_processor"
                ],
                "is_async": true,
                "class": "TestDreamProcessor"
              },
              {
                "name": "test_error_handling_in_phase",
                "line": 357,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "dream_processor"
                ],
                "is_async": true,
                "class": "TestDreamProcessor"
              },
              {
                "name": "test_pulse_activity_tracking",
                "line": 377,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "dream_processor"
                ],
                "is_async": true,
                "class": "TestDreamProcessor"
              },
              {
                "name": "test_benchmarking_mode",
                "line": 391,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "dream_processor"
                ],
                "is_async": true,
                "class": "TestDreamProcessor"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "mock_services",
            "line": 25,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestDreamProcessor"
          },
          {
            "name": "mock_config",
            "line": 47,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestDreamProcessor"
          },
          {
            "name": "mock_thought_processor",
            "line": 55,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestDreamProcessor"
          },
          {
            "name": "mock_action_dispatcher",
            "line": 65,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestDreamProcessor"
          },
          {
            "name": "dream_processor",
            "line": 70,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self",
              "mock_config",
              "mock_thought_processor",
              "mock_action_dispatcher",
              "mock_services"
            ],
            "is_async": false,
            "class": "TestDreamProcessor"
          },
          {
            "name": "test_get_supported_states",
            "line": 101,
            "decorators": [],
            "args": [
              "self",
              "dream_processor"
            ],
            "is_async": false,
            "class": "TestDreamProcessor"
          },
          {
            "name": "test_can_process_dream_state",
            "line": 107,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "dream_processor"
            ],
            "is_async": true,
            "class": "TestDreamProcessor"
          },
          {
            "name": "test_initialize",
            "line": 113,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "dream_processor"
            ],
            "is_async": true,
            "class": "TestDreamProcessor"
          },
          {
            "name": "test_process_entering_phase",
            "line": 121,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "dream_processor"
            ],
            "is_async": true,
            "class": "TestDreamProcessor"
          },
          {
            "name": "test_process_consolidating_phase",
            "line": 139,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "dream_processor"
            ],
            "is_async": true,
            "class": "TestDreamProcessor"
          },
          {
            "name": "test_process_analyzing_phase",
            "line": 157,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "dream_processor"
            ],
            "is_async": true,
            "class": "TestDreamProcessor"
          },
          {
            "name": "test_process_configuring_phase",
            "line": 175,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "dream_processor"
            ],
            "is_async": true,
            "class": "TestDreamProcessor"
          },
          {
            "name": "test_process_planning_phase",
            "line": 189,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "dream_processor"
            ],
            "is_async": true,
            "class": "TestDreamProcessor"
          },
          {
            "name": "test_process_exiting_phase",
            "line": 212,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "dream_processor"
            ],
            "is_async": true,
            "class": "TestDreamProcessor"
          },
          {
            "name": "test_cleanup",
            "line": 226,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "dream_processor"
            ],
            "is_async": true,
            "class": "TestDreamProcessor"
          },
          {
            "name": "test_consolidate_recent_memories",
            "line": 237,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "dream_processor"
            ],
            "is_async": true,
            "class": "TestDreamProcessor"
          },
          {
            "name": "test_process_behavioral_insights",
            "line": 264,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "dream_processor"
            ],
            "is_async": true,
            "class": "TestDreamProcessor"
          },
          {
            "name": "test_apply_self_configuration",
            "line": 289,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "dream_processor",
              "mock_services"
            ],
            "is_async": true,
            "class": "TestDreamProcessor"
          },
          {
            "name": "test_create_system_snapshot",
            "line": 304,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "dream_processor"
            ],
            "is_async": true,
            "class": "TestDreamProcessor"
          },
          {
            "name": "test_minimum_dream_duration",
            "line": 324,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "dream_processor"
            ],
            "is_async": true,
            "class": "TestDreamProcessor"
          },
          {
            "name": "test_maximum_dream_duration",
            "line": 341,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "dream_processor"
            ],
            "is_async": true,
            "class": "TestDreamProcessor"
          },
          {
            "name": "test_error_handling_in_phase",
            "line": 357,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "dream_processor"
            ],
            "is_async": true,
            "class": "TestDreamProcessor"
          },
          {
            "name": "test_pulse_activity_tracking",
            "line": 377,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "dream_processor"
            ],
            "is_async": true,
            "class": "TestDreamProcessor"
          },
          {
            "name": "test_benchmarking_mode",
            "line": 391,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "dream_processor"
            ],
            "is_async": true,
            "class": "TestDreamProcessor"
          }
        ]
      },
      {
        "file": "tests/ciris_engine/logic/services/infrastructure/test_authentication_service.py",
        "classes": [],
        "functions": [
          {
            "name": "time_service",
            "line": 21,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "temp_db",
            "line": 27,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "auth_service",
            "line": 36,
            "decorators": [
              "fixture"
            ],
            "args": [
              "temp_db",
              "time_service"
            ],
            "is_async": true
          },
          {
            "name": "test_auth_service_lifecycle",
            "line": 49,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "auth_service"
            ],
            "is_async": true
          },
          {
            "name": "test_wa_certificate_creation",
            "line": 57,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "auth_service"
            ],
            "is_async": true
          },
          {
            "name": "test_adapter_observer_creation",
            "line": 83,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "auth_service"
            ],
            "is_async": true
          },
          {
            "name": "test_channel_token_creation",
            "line": 99,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "auth_service"
            ],
            "is_async": true
          },
          {
            "name": "test_gateway_token_creation",
            "line": 123,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "auth_service"
            ],
            "is_async": true
          },
          {
            "name": "test_wa_update",
            "line": 153,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "auth_service"
            ],
            "is_async": true
          },
          {
            "name": "test_wa_revocation",
            "line": 184,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "auth_service"
            ],
            "is_async": true
          },
          {
            "name": "test_password_hashing",
            "line": 211,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "auth_service"
            ],
            "is_async": true
          },
          {
            "name": "test_keypair_generation",
            "line": 228,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "auth_service"
            ],
            "is_async": true
          },
          {
            "name": "test_data_signing",
            "line": 237,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "auth_service"
            ],
            "is_async": true
          },
          {
            "name": "test_auth_service_capabilities",
            "line": 260,
            "decorators": [],
            "args": [
              "auth_service"
            ],
            "is_async": false
          },
          {
            "name": "test_auth_service_status",
            "line": 274,
            "decorators": [],
            "args": [
              "auth_service"
            ],
            "is_async": false
          },
          {
            "name": "test_last_login_update",
            "line": 286,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "auth_service"
            ],
            "is_async": true
          },
          {
            "name": "test_list_all_was",
            "line": 314,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "auth_service"
            ],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/ciris_engine/logic/services/infrastructure/test_resource_monitor.py",
        "classes": [],
        "functions": [
          {
            "name": "time_service",
            "line": 21,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "temp_db",
            "line": 27,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "resource_budget",
            "line": 36,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "signal_bus",
            "line": 42,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "resource_monitor",
            "line": 48,
            "decorators": [
              "fixture"
            ],
            "args": [
              "resource_budget",
              "temp_db",
              "time_service",
              "signal_bus"
            ],
            "is_async": false
          },
          {
            "name": "test_resource_monitor_lifecycle",
            "line": 59,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "resource_monitor"
            ],
            "is_async": true
          },
          {
            "name": "test_resource_monitor_get_snapshot",
            "line": 73,
            "decorators": [],
            "args": [
              "resource_monitor"
            ],
            "is_async": false
          },
          {
            "name": "test_resource_monitor_check_limits",
            "line": 93,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "resource_monitor"
            ],
            "is_async": true
          },
          {
            "name": "test_resource_monitor_status",
            "line": 126,
            "decorators": [],
            "args": [
              "resource_monitor"
            ],
            "is_async": false
          },
          {
            "name": "test_resource_monitor_continuous_monitoring",
            "line": 142,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "resource_monitor"
            ],
            "is_async": true
          },
          {
            "name": "test_resource_monitor_record_tokens",
            "line": 162,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "resource_monitor"
            ],
            "is_async": true
          },
          {
            "name": "test_resource_monitor_check_available",
            "line": 178,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "resource_monitor"
            ],
            "is_async": true
          },
          {
            "name": "test_resource_monitor_signal_bus",
            "line": 197,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "resource_monitor",
              "signal_bus"
            ],
            "is_async": true
          },
          {
            "name": "test_resource_monitor_update_snapshot",
            "line": 231,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "resource_monitor"
            ],
            "is_async": true
          },
          {
            "name": "test_resource_monitor_is_healthy",
            "line": 246,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "resource_monitor"
            ],
            "is_async": true
          },
          {
            "name": "test_resource_monitor_cooldown",
            "line": 260,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "resource_monitor",
              "signal_bus"
            ],
            "is_async": true
          },
          {
            "name": "test_resource_monitor_get_capabilities",
            "line": 294,
            "decorators": [],
            "args": [
              "resource_monitor"
            ],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "tests/ciris_engine/logic/services/infrastructure/test_authentication.py",
        "classes": [
          {
            "name": "TestAuthenticationService",
            "line": 21,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "mock_time_service",
                "line": 25,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestAuthenticationService"
              },
              {
                "name": "mock_secrets_service",
                "line": 34,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestAuthenticationService"
              },
              {
                "name": "auth_service",
                "line": 43,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self",
                  "mock_time_service",
                  "mock_secrets_service"
                ],
                "is_async": false,
                "class": "TestAuthenticationService"
              },
              {
                "name": "test_start_stop",
                "line": 54,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "auth_service"
                ],
                "is_async": true,
                "class": "TestAuthenticationService"
              },
              {
                "name": "test_create_token",
                "line": 65,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "auth_service"
                ],
                "is_async": true,
                "class": "TestAuthenticationService"
              },
              {
                "name": "test_verify_valid_token",
                "line": 83,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "auth_service"
                ],
                "is_async": true,
                "class": "TestAuthenticationService"
              },
              {
                "name": "test_verify_expired_token",
                "line": 103,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "auth_service",
                  "mock_time_service"
                ],
                "is_async": true,
                "class": "TestAuthenticationService"
              },
              {
                "name": "test_verify_invalid_token",
                "line": 124,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "auth_service"
                ],
                "is_async": true,
                "class": "TestAuthenticationService"
              },
              {
                "name": "test_refresh_token",
                "line": 135,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "auth_service"
                ],
                "is_async": true,
                "class": "TestAuthenticationService"
              },
              {
                "name": "test_refresh_invalid_token",
                "line": 154,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "auth_service"
                ],
                "is_async": true,
                "class": "TestAuthenticationService"
              },
              {
                "name": "test_revoke_token",
                "line": 164,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "auth_service"
                ],
                "is_async": true,
                "class": "TestAuthenticationService"
              },
              {
                "name": "test_check_permission_allowed",
                "line": 188,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "auth_service"
                ],
                "is_async": true,
                "class": "TestAuthenticationService"
              },
              {
                "name": "test_check_permission_denied",
                "line": 206,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "auth_service"
                ],
                "is_async": true,
                "class": "TestAuthenticationService"
              },
              {
                "name": "test_check_permission_unauthenticated",
                "line": 224,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "auth_service"
                ],
                "is_async": true,
                "class": "TestAuthenticationService"
              },
              {
                "name": "test_validate_api_key",
                "line": 242,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "auth_service"
                ],
                "is_async": true,
                "class": "TestAuthenticationService"
              },
              {
                "name": "test_validate_invalid_api_key",
                "line": 262,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "auth_service"
                ],
                "is_async": true,
                "class": "TestAuthenticationService"
              },
              {
                "name": "test_create_service_token",
                "line": 272,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "auth_service"
                ],
                "is_async": true,
                "class": "TestAuthenticationService"
              },
              {
                "name": "test_permission_levels",
                "line": 292,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "auth_service"
                ],
                "is_async": true,
                "class": "TestAuthenticationService"
              },
              {
                "name": "test_cleanup_expired_tokens",
                "line": 323,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "auth_service",
                  "mock_time_service"
                ],
                "is_async": true,
                "class": "TestAuthenticationService"
              },
              {
                "name": "test_get_capabilities",
                "line": 348,
                "decorators": [],
                "args": [
                  "self",
                  "auth_service"
                ],
                "is_async": false,
                "class": "TestAuthenticationService"
              },
              {
                "name": "test_get_status",
                "line": 359,
                "decorators": [],
                "args": [
                  "self",
                  "auth_service"
                ],
                "is_async": false,
                "class": "TestAuthenticationService"
              },
              {
                "name": "test_encrypt_token_metadata",
                "line": 375,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "auth_service",
                  "mock_secrets_service"
                ],
                "is_async": true,
                "class": "TestAuthenticationService"
              },
              {
                "name": "test_concurrent_token_creation",
                "line": 393,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "auth_service"
                ],
                "is_async": true,
                "class": "TestAuthenticationService"
              },
              {
                "name": "test_token_with_custom_expiry",
                "line": 414,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "auth_service"
                ],
                "is_async": true,
                "class": "TestAuthenticationService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "mock_time_service",
            "line": 25,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestAuthenticationService"
          },
          {
            "name": "mock_secrets_service",
            "line": 34,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestAuthenticationService"
          },
          {
            "name": "auth_service",
            "line": 43,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self",
              "mock_time_service",
              "mock_secrets_service"
            ],
            "is_async": false,
            "class": "TestAuthenticationService"
          },
          {
            "name": "test_start_stop",
            "line": 54,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "auth_service"
            ],
            "is_async": true,
            "class": "TestAuthenticationService"
          },
          {
            "name": "test_create_token",
            "line": 65,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "auth_service"
            ],
            "is_async": true,
            "class": "TestAuthenticationService"
          },
          {
            "name": "test_verify_valid_token",
            "line": 83,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "auth_service"
            ],
            "is_async": true,
            "class": "TestAuthenticationService"
          },
          {
            "name": "test_verify_expired_token",
            "line": 103,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "auth_service",
              "mock_time_service"
            ],
            "is_async": true,
            "class": "TestAuthenticationService"
          },
          {
            "name": "test_verify_invalid_token",
            "line": 124,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "auth_service"
            ],
            "is_async": true,
            "class": "TestAuthenticationService"
          },
          {
            "name": "test_refresh_token",
            "line": 135,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "auth_service"
            ],
            "is_async": true,
            "class": "TestAuthenticationService"
          },
          {
            "name": "test_refresh_invalid_token",
            "line": 154,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "auth_service"
            ],
            "is_async": true,
            "class": "TestAuthenticationService"
          },
          {
            "name": "test_revoke_token",
            "line": 164,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "auth_service"
            ],
            "is_async": true,
            "class": "TestAuthenticationService"
          },
          {
            "name": "test_check_permission_allowed",
            "line": 188,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "auth_service"
            ],
            "is_async": true,
            "class": "TestAuthenticationService"
          },
          {
            "name": "test_check_permission_denied",
            "line": 206,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "auth_service"
            ],
            "is_async": true,
            "class": "TestAuthenticationService"
          },
          {
            "name": "test_check_permission_unauthenticated",
            "line": 224,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "auth_service"
            ],
            "is_async": true,
            "class": "TestAuthenticationService"
          },
          {
            "name": "test_validate_api_key",
            "line": 242,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "auth_service"
            ],
            "is_async": true,
            "class": "TestAuthenticationService"
          },
          {
            "name": "test_validate_invalid_api_key",
            "line": 262,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "auth_service"
            ],
            "is_async": true,
            "class": "TestAuthenticationService"
          },
          {
            "name": "test_create_service_token",
            "line": 272,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "auth_service"
            ],
            "is_async": true,
            "class": "TestAuthenticationService"
          },
          {
            "name": "test_permission_levels",
            "line": 292,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "auth_service"
            ],
            "is_async": true,
            "class": "TestAuthenticationService"
          },
          {
            "name": "test_cleanup_expired_tokens",
            "line": 323,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "auth_service",
              "mock_time_service"
            ],
            "is_async": true,
            "class": "TestAuthenticationService"
          },
          {
            "name": "test_get_capabilities",
            "line": 348,
            "decorators": [],
            "args": [
              "self",
              "auth_service"
            ],
            "is_async": false,
            "class": "TestAuthenticationService"
          },
          {
            "name": "test_get_status",
            "line": 359,
            "decorators": [],
            "args": [
              "self",
              "auth_service"
            ],
            "is_async": false,
            "class": "TestAuthenticationService"
          },
          {
            "name": "test_encrypt_token_metadata",
            "line": 375,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "auth_service",
              "mock_secrets_service"
            ],
            "is_async": true,
            "class": "TestAuthenticationService"
          },
          {
            "name": "test_concurrent_token_creation",
            "line": 393,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "auth_service"
            ],
            "is_async": true,
            "class": "TestAuthenticationService"
          },
          {
            "name": "test_token_with_custom_expiry",
            "line": 414,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "auth_service"
            ],
            "is_async": true,
            "class": "TestAuthenticationService"
          }
        ]
      },
      {
        "file": "tests/ciris_engine/logic/services/runtime/test_secrets_service.py",
        "classes": [],
        "functions": [
          {
            "name": "time_service",
            "line": 16,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "temp_db",
            "line": 22,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "secrets_service",
            "line": 31,
            "decorators": [
              "fixture"
            ],
            "args": [
              "temp_db",
              "time_service"
            ],
            "is_async": false
          },
          {
            "name": "test_secrets_service_lifecycle",
            "line": 43,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "secrets_service"
            ],
            "is_async": true
          },
          {
            "name": "test_secrets_service_store_and_retrieve",
            "line": 55,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "secrets_service"
            ],
            "is_async": true
          },
          {
            "name": "test_secrets_service_filter_string",
            "line": 91,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "secrets_service"
            ],
            "is_async": true
          },
          {
            "name": "test_secrets_service_list_secrets",
            "line": 114,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "secrets_service"
            ],
            "is_async": true
          },
          {
            "name": "test_secrets_service_delete_secret",
            "line": 129,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "secrets_service"
            ],
            "is_async": true
          },
          {
            "name": "test_secrets_service_reencrypt_all",
            "line": 146,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "secrets_service"
            ],
            "is_async": true
          },
          {
            "name": "test_secrets_service_capabilities",
            "line": 170,
            "decorators": [],
            "args": [
              "secrets_service"
            ],
            "is_async": false
          },
          {
            "name": "test_secrets_service_status",
            "line": 186,
            "decorators": [],
            "args": [
              "secrets_service"
            ],
            "is_async": false
          },
          {
            "name": "test_secrets_service_metadata_tracking",
            "line": 198,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "secrets_service"
            ],
            "is_async": true
          },
          {
            "name": "test_secrets_service_duplicate_detection",
            "line": 217,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "secrets_service"
            ],
            "is_async": true
          },
          {
            "name": "test_secrets_service_invalid_reference",
            "line": 232,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "secrets_service"
            ],
            "is_async": true
          },
          {
            "name": "test_secrets_service_encryption_error_handling",
            "line": 248,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "secrets_service"
            ],
            "is_async": true
          },
          {
            "name": "test_secrets_service_pattern_detection",
            "line": 264,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "secrets_service"
            ],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/ciris_engine/logic/services/runtime/test_llm_service.py",
        "classes": [],
        "functions": [
          {
            "name": "llm_service",
            "line": 15,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "test_llm_service_lifecycle",
            "line": 23,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "llm_service"
            ],
            "is_async": true
          },
          {
            "name": "test_llm_service_call_structured",
            "line": 35,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "llm_service"
            ],
            "is_async": true
          },
          {
            "name": "test_llm_service_retry_logic",
            "line": 64,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "llm_service"
            ],
            "is_async": true
          },
          {
            "name": "test_llm_service_max_retries_exceeded",
            "line": 106,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "llm_service"
            ],
            "is_async": true
          },
          {
            "name": "test_llm_service_capabilities",
            "line": 134,
            "decorators": [],
            "args": [
              "llm_service"
            ],
            "is_async": false
          },
          {
            "name": "test_llm_service_status",
            "line": 144,
            "decorators": [],
            "args": [
              "llm_service"
            ],
            "is_async": false
          },
          {
            "name": "test_llm_service_temperature_override",
            "line": 164,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "llm_service"
            ],
            "is_async": true
          },
          {
            "name": "test_llm_service_model_override",
            "line": 188,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "llm_service"
            ],
            "is_async": true
          },
          {
            "name": "test_llm_service_pydantic_response",
            "line": 213,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "llm_service"
            ],
            "is_async": true
          },
          {
            "name": "test_llm_service_error_handling",
            "line": 242,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "llm_service"
            ],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/ciris_engine/logic/services/governance/test_visibility_service.py",
        "classes": [],
        "functions": [
          {
            "name": "time_service",
            "line": 20,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "temp_db",
            "line": 26,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "visibility_service",
            "line": 36,
            "decorators": [
              "fixture"
            ],
            "args": [
              "time_service",
              "temp_db"
            ],
            "is_async": false
          },
          {
            "name": "create_test_task",
            "line": 53,
            "decorators": [],
            "args": [
              "task_id",
              "status"
            ],
            "is_async": false
          },
          {
            "name": "create_test_thought",
            "line": 69,
            "decorators": [],
            "args": [
              "thought_id",
              "task_id",
              "status",
              "action_type",
              "parent_thought_id"
            ],
            "is_async": false
          },
          {
            "name": "test_visibility_service_lifecycle",
            "line": 102,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "visibility_service"
            ],
            "is_async": true
          },
          {
            "name": "test_visibility_service_capabilities",
            "line": 120,
            "decorators": [],
            "args": [
              "visibility_service"
            ],
            "is_async": false
          },
          {
            "name": "test_visibility_service_status",
            "line": 134,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "visibility_service"
            ],
            "is_async": true
          },
          {
            "name": "test_visibility_empty_state",
            "line": 150,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "visibility_service"
            ],
            "is_async": true
          },
          {
            "name": "test_visibility_with_active_task",
            "line": 167,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "visibility_service"
            ],
            "is_async": true
          },
          {
            "name": "test_visibility_with_active_thoughts",
            "line": 186,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "visibility_service"
            ],
            "is_async": true
          },
          {
            "name": "test_visibility_with_recent_decisions",
            "line": 207,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "visibility_service"
            ],
            "is_async": true
          },
          {
            "name": "test_visibility_reasoning_depth",
            "line": 238,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "visibility_service"
            ],
            "is_async": true
          },
          {
            "name": "test_get_reasoning_trace_no_task",
            "line": 259,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "visibility_service"
            ],
            "is_async": true
          },
          {
            "name": "test_get_reasoning_trace_with_thoughts",
            "line": 276,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "visibility_service"
            ],
            "is_async": true
          },
          {
            "name": "test_get_decision_history_no_task",
            "line": 306,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "visibility_service"
            ],
            "is_async": true
          },
          {
            "name": "test_get_decision_history_with_decisions",
            "line": 325,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "visibility_service"
            ],
            "is_async": true
          },
          {
            "name": "test_explain_action",
            "line": 364,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "visibility_service"
            ],
            "is_async": true
          },
          {
            "name": "test_explain_action_no_thought",
            "line": 380,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "visibility_service"
            ],
            "is_async": true
          },
          {
            "name": "test_explain_action_no_final_action",
            "line": 392,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "visibility_service"
            ],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/ciris_engine/logic/services/governance/test_wise_authority_service.py",
        "classes": [],
        "functions": [
          {
            "name": "time_service",
            "line": 23,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "temp_db",
            "line": 29,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "auth_service",
            "line": 38,
            "decorators": [
              "fixture"
            ],
            "args": [
              "temp_db",
              "time_service"
            ],
            "is_async": true
          },
          {
            "name": "wise_authority_service",
            "line": 61,
            "decorators": [
              "fixture"
            ],
            "args": [
              "auth_service",
              "time_service",
              "temp_db"
            ],
            "is_async": true
          },
          {
            "name": "test_wise_authority_lifecycle",
            "line": 72,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "wise_authority_service"
            ],
            "is_async": true
          },
          {
            "name": "test_check_authorization",
            "line": 87,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "wise_authority_service",
              "auth_service"
            ],
            "is_async": true
          },
          {
            "name": "test_request_approval",
            "line": 121,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "wise_authority_service",
              "time_service",
              "auth_service"
            ],
            "is_async": true
          },
          {
            "name": "test_send_deferral",
            "line": 162,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "wise_authority_service",
              "time_service"
            ],
            "is_async": true
          },
          {
            "name": "test_get_pending_deferrals",
            "line": 185,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "wise_authority_service",
              "time_service"
            ],
            "is_async": true
          },
          {
            "name": "test_resolve_deferral",
            "line": 214,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "wise_authority_service",
              "time_service"
            ],
            "is_async": true
          },
          {
            "name": "test_wise_authority_capabilities",
            "line": 246,
            "decorators": [],
            "args": [
              "wise_authority_service"
            ],
            "is_async": false
          },
          {
            "name": "test_wise_authority_status",
            "line": 266,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "wise_authority_service"
            ],
            "is_async": true
          },
          {
            "name": "test_list_permissions",
            "line": 281,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "wise_authority_service",
              "auth_service"
            ],
            "is_async": true
          },
          {
            "name": "test_fetch_guidance",
            "line": 323,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "wise_authority_service"
            ],
            "is_async": true
          },
          {
            "name": "test_get_guidance",
            "line": 342,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "wise_authority_service"
            ],
            "is_async": true
          },
          {
            "name": "test_grant_revoke_permissions",
            "line": 364,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "wise_authority_service"
            ],
            "is_async": true
          },
          {
            "name": "test_deferral_with_modified_time",
            "line": 386,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "wise_authority_service",
              "time_service"
            ],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/ciris_engine/logic/services/lifecycle/test_time_service.py",
        "classes": [],
        "functions": [
          {
            "name": "test_time_service_lifecycle",
            "line": 13,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_time_service_now",
            "line": 30,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "test_time_service_now_iso",
            "line": 43,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "test_time_service_timestamp",
            "line": 57,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "test_time_service_capabilities",
            "line": 70,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "test_time_service_status",
            "line": 86,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_time_service_consistency",
            "line": 113,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "test_time_service_mocking",
            "line": 134,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/ciris_engine/logic/services/lifecycle/test_shutdown_service.py",
        "classes": [],
        "functions": [
          {
            "name": "test_shutdown_service_lifecycle",
            "line": 12,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_shutdown_service_request_shutdown",
            "line": 30,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_shutdown_service_register_handler",
            "line": 47,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_shutdown_service_async_handler",
            "line": 64,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_shutdown_service_wait_for_shutdown",
            "line": 82,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_shutdown_service_capabilities",
            "line": 102,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "test_shutdown_service_status",
            "line": 119,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_shutdown_service_multiple_handlers",
            "line": 148,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_shutdown_service_thread_safety",
            "line": 173,
            "decorators": [],
            "args": [],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "tests/ciris_engine/logic/services/lifecycle/test_initialization_service.py",
        "classes": [],
        "functions": [
          {
            "name": "time_service",
            "line": 17,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "init_service",
            "line": 23,
            "decorators": [
              "fixture"
            ],
            "args": [
              "time_service"
            ],
            "is_async": false
          },
          {
            "name": "test_initialization_service_lifecycle",
            "line": 29,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "init_service"
            ],
            "is_async": true
          },
          {
            "name": "test_initialization_service_register_step",
            "line": 44,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "init_service"
            ],
            "is_async": true
          },
          {
            "name": "test_initialization_service_initialize",
            "line": 63,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "init_service"
            ],
            "is_async": true
          },
          {
            "name": "test_initialization_service_with_verifier",
            "line": 99,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "init_service"
            ],
            "is_async": true
          },
          {
            "name": "test_initialization_service_failed_verification",
            "line": 127,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "init_service"
            ],
            "is_async": true
          },
          {
            "name": "test_initialization_service_non_critical_failure",
            "line": 153,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "init_service"
            ],
            "is_async": true
          },
          {
            "name": "test_initialization_service_capabilities",
            "line": 176,
            "decorators": [],
            "args": [
              "init_service"
            ],
            "is_async": false
          },
          {
            "name": "test_initialization_service_status",
            "line": 190,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "init_service"
            ],
            "is_async": true
          },
          {
            "name": "test_initialization_service_get_status_details",
            "line": 219,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "init_service"
            ],
            "is_async": true
          },
          {
            "name": "test_initialization_service_timeout",
            "line": 251,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "init_service"
            ],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/ciris_engine/logic/services/graph/test_filter_config_bug.py",
        "classes": [],
        "functions": [
          {
            "name": "time_service",
            "line": 18,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "temp_db",
            "line": 24,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "test_filter_config_bug",
            "line": 33,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "temp_db",
              "time_service"
            ],
            "is_async": true
          },
          {
            "name": "test_old_node_format_compatibility",
            "line": 122,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "temp_db",
              "time_service"
            ],
            "is_async": true
          },
          {
            "name": "main",
            "line": 197,
            "decorators": [],
            "args": [],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/ciris_engine/logic/services/graph/test_config_node_fix.py",
        "classes": [],
        "functions": [
          {
            "name": "time_service",
            "line": 18,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "temp_db",
            "line": 24,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "services",
            "line": 33,
            "decorators": [
              "fixture"
            ],
            "args": [
              "temp_db",
              "time_service"
            ],
            "is_async": true
          },
          {
            "name": "test_no_malformed_config_nodes",
            "line": 106,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "services"
            ],
            "is_async": true
          },
          {
            "name": "test_config_node_required_fields",
            "line": 130,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "services"
            ],
            "is_async": true
          },
          {
            "name": "test_config_node_error_handling",
            "line": 171,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "services"
            ],
            "is_async": true
          },
          {
            "name": "test_filter_service_uses_proper_config",
            "line": 206,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "services"
            ],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/ciris_engine/logic/services/graph/test_incident_service.py",
        "classes": [],
        "functions": [
          {
            "name": "mock_memory_bus",
            "line": 18,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "mock_time_service",
            "line": 35,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "incident_service",
            "line": 44,
            "decorators": [
              "fixture"
            ],
            "args": [
              "mock_memory_bus",
              "mock_time_service"
            ],
            "is_async": false
          },
          {
            "name": "test_incident_service_lifecycle",
            "line": 54,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "incident_service"
            ],
            "is_async": true
          },
          {
            "name": "test_incident_service_process_recent_incidents",
            "line": 66,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "incident_service",
              "mock_memory_bus",
              "mock_time_service"
            ],
            "is_async": true
          },
          {
            "name": "test_incident_service_pattern_detection",
            "line": 149,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "incident_service",
              "mock_memory_bus",
              "mock_time_service"
            ],
            "is_async": true
          },
          {
            "name": "test_incident_service_no_incidents",
            "line": 187,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "incident_service",
              "mock_memory_bus"
            ],
            "is_async": true
          },
          {
            "name": "test_incident_service_time_clusters",
            "line": 202,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "incident_service",
              "mock_memory_bus",
              "mock_time_service"
            ],
            "is_async": true
          },
          {
            "name": "test_incident_service_capabilities",
            "line": 239,
            "decorators": [],
            "args": [
              "incident_service"
            ],
            "is_async": false
          },
          {
            "name": "test_incident_service_status",
            "line": 254,
            "decorators": [],
            "args": [
              "incident_service"
            ],
            "is_async": false
          },
          {
            "name": "test_incident_service_error_handling",
            "line": 264,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "incident_service",
              "mock_memory_bus"
            ],
            "is_async": true
          },
          {
            "name": "test_incident_service_problem_creation",
            "line": 279,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "incident_service",
              "mock_memory_bus",
              "mock_time_service"
            ],
            "is_async": true
          },
          {
            "name": "test_incident_service_recommendations",
            "line": 323,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "incident_service",
              "mock_memory_bus",
              "mock_time_service"
            ],
            "is_async": true
          },
          {
            "name": "test_incident_node_serialization",
            "line": 425,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_problem_node_serialization",
            "line": 487,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          },
          {
            "name": "test_incident_insight_node_serialization",
            "line": 534,
            "decorators": [
              "asyncio"
            ],
            "args": [],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/ciris_engine/logic/services/graph/test_audit_service_unit.py",
        "classes": [
          {
            "name": "TestGraphAuditService",
            "line": 16,
            "decorators": [],
            "bases": [],
            "methods": [
              {
                "name": "mock_time_service",
                "line": 20,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestGraphAuditService"
              },
              {
                "name": "mock_memory_bus",
                "line": 29,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self"
                ],
                "is_async": false,
                "class": "TestGraphAuditService"
              },
              {
                "name": "audit_service",
                "line": 38,
                "decorators": [
                  "fixture"
                ],
                "args": [
                  "self",
                  "mock_time_service",
                  "mock_memory_bus"
                ],
                "is_async": false,
                "class": "TestGraphAuditService"
              },
              {
                "name": "test_start_stop",
                "line": 48,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "audit_service"
                ],
                "is_async": true,
                "class": "TestGraphAuditService"
              },
              {
                "name": "test_audit_event",
                "line": 59,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "audit_service",
                  "mock_memory_bus"
                ],
                "is_async": true,
                "class": "TestGraphAuditService"
              },
              {
                "name": "test_audit_authentication",
                "line": 84,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "audit_service",
                  "mock_memory_bus"
                ],
                "is_async": true,
                "class": "TestGraphAuditService"
              },
              {
                "name": "test_audit_authentication_failure",
                "line": 106,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "audit_service",
                  "mock_memory_bus"
                ],
                "is_async": true,
                "class": "TestGraphAuditService"
              },
              {
                "name": "test_audit_configuration_change",
                "line": 128,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "audit_service",
                  "mock_memory_bus"
                ],
                "is_async": true,
                "class": "TestGraphAuditService"
              },
              {
                "name": "test_audit_data_access",
                "line": 151,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "audit_service",
                  "mock_memory_bus"
                ],
                "is_async": true,
                "class": "TestGraphAuditService"
              },
              {
                "name": "test_audit_error",
                "line": 174,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "audit_service",
                  "mock_memory_bus"
                ],
                "is_async": true,
                "class": "TestGraphAuditService"
              },
              {
                "name": "test_query_audit_log",
                "line": 195,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "audit_service",
                  "mock_memory_bus",
                  "mock_time_service"
                ],
                "is_async": true,
                "class": "TestGraphAuditService"
              },
              {
                "name": "test_query_audit_log_with_filters",
                "line": 236,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "audit_service",
                  "mock_memory_bus"
                ],
                "is_async": true,
                "class": "TestGraphAuditService"
              },
              {
                "name": "test_cleanup_old_entries",
                "line": 258,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "audit_service",
                  "mock_memory_bus",
                  "mock_time_service"
                ],
                "is_async": true,
                "class": "TestGraphAuditService"
              },
              {
                "name": "test_get_audit_statistics",
                "line": 292,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "audit_service",
                  "mock_memory_bus"
                ],
                "is_async": true,
                "class": "TestGraphAuditService"
              },
              {
                "name": "test_get_capabilities",
                "line": 326,
                "decorators": [],
                "args": [
                  "self",
                  "audit_service"
                ],
                "is_async": false,
                "class": "TestGraphAuditService"
              },
              {
                "name": "test_get_status",
                "line": 337,
                "decorators": [],
                "args": [
                  "self",
                  "audit_service"
                ],
                "is_async": false,
                "class": "TestGraphAuditService"
              },
              {
                "name": "test_concurrent_audit_events",
                "line": 350,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "audit_service",
                  "mock_memory_bus"
                ],
                "is_async": true,
                "class": "TestGraphAuditService"
              },
              {
                "name": "test_audit_with_large_details",
                "line": 370,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "audit_service",
                  "mock_memory_bus"
                ],
                "is_async": true,
                "class": "TestGraphAuditService"
              },
              {
                "name": "test_node_type",
                "line": 400,
                "decorators": [
                  "asyncio"
                ],
                "args": [
                  "self",
                  "audit_service"
                ],
                "is_async": true,
                "class": "TestGraphAuditService"
              }
            ]
          }
        ],
        "functions": [],
        "methods": [
          {
            "name": "mock_time_service",
            "line": 20,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestGraphAuditService"
          },
          {
            "name": "mock_memory_bus",
            "line": 29,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self"
            ],
            "is_async": false,
            "class": "TestGraphAuditService"
          },
          {
            "name": "audit_service",
            "line": 38,
            "decorators": [
              "fixture"
            ],
            "args": [
              "self",
              "mock_time_service",
              "mock_memory_bus"
            ],
            "is_async": false,
            "class": "TestGraphAuditService"
          },
          {
            "name": "test_start_stop",
            "line": 48,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "audit_service"
            ],
            "is_async": true,
            "class": "TestGraphAuditService"
          },
          {
            "name": "test_audit_event",
            "line": 59,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "audit_service",
              "mock_memory_bus"
            ],
            "is_async": true,
            "class": "TestGraphAuditService"
          },
          {
            "name": "test_audit_authentication",
            "line": 84,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "audit_service",
              "mock_memory_bus"
            ],
            "is_async": true,
            "class": "TestGraphAuditService"
          },
          {
            "name": "test_audit_authentication_failure",
            "line": 106,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "audit_service",
              "mock_memory_bus"
            ],
            "is_async": true,
            "class": "TestGraphAuditService"
          },
          {
            "name": "test_audit_configuration_change",
            "line": 128,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "audit_service",
              "mock_memory_bus"
            ],
            "is_async": true,
            "class": "TestGraphAuditService"
          },
          {
            "name": "test_audit_data_access",
            "line": 151,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "audit_service",
              "mock_memory_bus"
            ],
            "is_async": true,
            "class": "TestGraphAuditService"
          },
          {
            "name": "test_audit_error",
            "line": 174,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "audit_service",
              "mock_memory_bus"
            ],
            "is_async": true,
            "class": "TestGraphAuditService"
          },
          {
            "name": "test_query_audit_log",
            "line": 195,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "audit_service",
              "mock_memory_bus",
              "mock_time_service"
            ],
            "is_async": true,
            "class": "TestGraphAuditService"
          },
          {
            "name": "test_query_audit_log_with_filters",
            "line": 236,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "audit_service",
              "mock_memory_bus"
            ],
            "is_async": true,
            "class": "TestGraphAuditService"
          },
          {
            "name": "test_cleanup_old_entries",
            "line": 258,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "audit_service",
              "mock_memory_bus",
              "mock_time_service"
            ],
            "is_async": true,
            "class": "TestGraphAuditService"
          },
          {
            "name": "test_get_audit_statistics",
            "line": 292,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "audit_service",
              "mock_memory_bus"
            ],
            "is_async": true,
            "class": "TestGraphAuditService"
          },
          {
            "name": "test_get_capabilities",
            "line": 326,
            "decorators": [],
            "args": [
              "self",
              "audit_service"
            ],
            "is_async": false,
            "class": "TestGraphAuditService"
          },
          {
            "name": "test_get_status",
            "line": 337,
            "decorators": [],
            "args": [
              "self",
              "audit_service"
            ],
            "is_async": false,
            "class": "TestGraphAuditService"
          },
          {
            "name": "test_concurrent_audit_events",
            "line": 350,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "audit_service",
              "mock_memory_bus"
            ],
            "is_async": true,
            "class": "TestGraphAuditService"
          },
          {
            "name": "test_audit_with_large_details",
            "line": 370,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "audit_service",
              "mock_memory_bus"
            ],
            "is_async": true,
            "class": "TestGraphAuditService"
          },
          {
            "name": "test_node_type",
            "line": 400,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "self",
              "audit_service"
            ],
            "is_async": true,
            "class": "TestGraphAuditService"
          }
        ]
      },
      {
        "file": "tests/ciris_engine/logic/services/graph/test_tsdb_consolidation_service.py",
        "classes": [],
        "functions": [
          {
            "name": "mock_memory_bus",
            "line": 16,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "mock_time_service",
            "line": 28,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "tsdb_service",
            "line": 36,
            "decorators": [
              "fixture"
            ],
            "args": [
              "mock_memory_bus",
              "mock_time_service"
            ],
            "is_async": false
          },
          {
            "name": "test_tsdb_service_lifecycle",
            "line": 45,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "tsdb_service"
            ],
            "is_async": true
          },
          {
            "name": "test_tsdb_service_consolidate_period",
            "line": 57,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "tsdb_service",
              "mock_memory_bus"
            ],
            "is_async": true
          },
          {
            "name": "test_tsdb_service_auto_consolidation",
            "line": 119,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "tsdb_service",
              "mock_memory_bus",
              "mock_time_service"
            ],
            "is_async": true
          },
          {
            "name": "test_tsdb_service_cleanup_old_data",
            "line": 148,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "tsdb_service",
              "mock_memory_bus"
            ],
            "is_async": true
          },
          {
            "name": "test_tsdb_service_resource_aggregation",
            "line": 163,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "tsdb_service",
              "mock_memory_bus"
            ],
            "is_async": true
          },
          {
            "name": "test_tsdb_service_capabilities",
            "line": 218,
            "decorators": [],
            "args": [
              "tsdb_service"
            ],
            "is_async": false
          },
          {
            "name": "test_tsdb_service_status",
            "line": 231,
            "decorators": [],
            "args": [
              "tsdb_service"
            ],
            "is_async": false
          },
          {
            "name": "test_tsdb_service_get_summary_for_period",
            "line": 245,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "tsdb_service",
              "mock_memory_bus"
            ],
            "is_async": true
          },
          {
            "name": "test_tsdb_service_action_summary",
            "line": 276,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "tsdb_service",
              "mock_memory_bus"
            ],
            "is_async": true
          },
          {
            "name": "test_tsdb_service_error_handling",
            "line": 333,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "tsdb_service",
              "mock_memory_bus"
            ],
            "is_async": true
          },
          {
            "name": "test_tsdb_service_typed_node_conversion",
            "line": 350,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "tsdb_service"
            ],
            "is_async": true
          },
          {
            "name": "test_tsdb_service_period_already_consolidated",
            "line": 404,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "tsdb_service",
              "mock_memory_bus"
            ],
            "is_async": true
          },
          {
            "name": "test_tsdb_service_node_type",
            "line": 431,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "tsdb_service"
            ],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/ciris_engine/logic/services/graph/test_config_service_bootstrap.py",
        "classes": [],
        "functions": [
          {
            "name": "time_service",
            "line": 25,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "temp_db",
            "line": 31,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "memory_service_factory",
            "line": 40,
            "decorators": [
              "fixture"
            ],
            "args": [
              "temp_db",
              "time_service"
            ],
            "is_async": true
          },
          {
            "name": "test_config_bootstrap_bug_reproduction",
            "line": 86,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "memory_service_factory",
              "time_service",
              "temp_db"
            ],
            "is_async": true
          },
          {
            "name": "test_config_node_serialization_fix",
            "line": 178,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "time_service"
            ],
            "is_async": true
          },
          {
            "name": "test_direct_graph_node_creation",
            "line": 217,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "time_service"
            ],
            "is_async": true
          },
          {
            "name": "test_config_service_with_restart",
            "line": 253,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "memory_service_factory",
              "time_service"
            ],
            "is_async": true
          },
          {
            "name": "main",
            "line": 292,
            "decorators": [],
            "args": [],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/ciris_engine/logic/services/graph/test_config_service.py",
        "classes": [],
        "functions": [
          {
            "name": "time_service",
            "line": 19,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "temp_db",
            "line": 25,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "memory_service",
            "line": 34,
            "decorators": [
              "fixture"
            ],
            "args": [
              "temp_db",
              "time_service"
            ],
            "is_async": true
          },
          {
            "name": "config_service",
            "line": 69,
            "decorators": [
              "fixture"
            ],
            "args": [
              "memory_service",
              "time_service"
            ],
            "is_async": true
          },
          {
            "name": "test_config_service_lifecycle",
            "line": 77,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "config_service"
            ],
            "is_async": true
          },
          {
            "name": "test_config_service_set_and_get",
            "line": 89,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "config_service"
            ],
            "is_async": true
          },
          {
            "name": "test_config_service_get_nonexistent",
            "line": 109,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "config_service"
            ],
            "is_async": true
          },
          {
            "name": "test_config_service_update_config",
            "line": 117,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "config_service"
            ],
            "is_async": true
          },
          {
            "name": "test_config_service_list_configs",
            "line": 149,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "config_service"
            ],
            "is_async": true
          },
          {
            "name": "test_config_service_list_by_prefix",
            "line": 180,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "config_service"
            ],
            "is_async": true
          },
          {
            "name": "test_config_service_delete_config",
            "line": 203,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "config_service"
            ],
            "is_async": true
          },
          {
            "name": "test_config_service_complex_values",
            "line": 219,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "config_service"
            ],
            "is_async": true
          },
          {
            "name": "test_config_service_capabilities",
            "line": 239,
            "decorators": [],
            "args": [
              "config_service"
            ],
            "is_async": false
          },
          {
            "name": "test_config_service_status",
            "line": 254,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "config_service"
            ],
            "is_async": true
          },
          {
            "name": "test_config_service_versioning",
            "line": 269,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "config_service",
              "time_service"
            ],
            "is_async": true
          },
          {
            "name": "test_config_service_metadata_tracking",
            "line": 294,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "config_service",
              "time_service"
            ],
            "is_async": true
          },
          {
            "name": "test_config_service_batch_operations",
            "line": 313,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "config_service"
            ],
            "is_async": true
          },
          {
            "name": "test_config_service_sensitive_config",
            "line": 338,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "config_service"
            ],
            "is_async": true
          },
          {
            "name": "test_config_node_typed_graph_node_compliance",
            "line": 362,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "config_service"
            ],
            "is_async": true
          },
          {
            "name": "test_config_service_no_duplicate_updates",
            "line": 401,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "config_service"
            ],
            "is_async": true
          },
          {
            "name": "test_config_service_path_values",
            "line": 421,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "config_service"
            ],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/ciris_engine/logic/services/graph/test_telemetry_service.py",
        "classes": [],
        "functions": [
          {
            "name": "time_service",
            "line": 29,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "temp_db",
            "line": 35,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "memory_bus",
            "line": 44,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "telemetry_service",
            "line": 69,
            "decorators": [
              "fixture"
            ],
            "args": [
              "memory_bus",
              "time_service"
            ],
            "is_async": false
          },
          {
            "name": "test_telemetry_service_lifecycle",
            "line": 75,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "telemetry_service",
              "memory_bus"
            ],
            "is_async": true
          },
          {
            "name": "test_telemetry_service_record_metric",
            "line": 91,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "telemetry_service",
              "memory_bus"
            ],
            "is_async": true
          },
          {
            "name": "test_telemetry_service_process_snapshot",
            "line": 111,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "telemetry_service",
              "memory_bus"
            ],
            "is_async": true
          },
          {
            "name": "test_telemetry_service_query_metrics",
            "line": 151,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "telemetry_service",
              "memory_bus"
            ],
            "is_async": true
          },
          {
            "name": "test_telemetry_service_aggregation",
            "line": 194,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "telemetry_service",
              "memory_bus"
            ],
            "is_async": true
          },
          {
            "name": "test_telemetry_service_different_metric_types",
            "line": 226,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "telemetry_service",
              "memory_bus"
            ],
            "is_async": true
          },
          {
            "name": "test_telemetry_service_capabilities",
            "line": 253,
            "decorators": [],
            "args": [
              "telemetry_service"
            ],
            "is_async": false
          },
          {
            "name": "test_telemetry_service_status",
            "line": 268,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "telemetry_service",
              "memory_bus"
            ],
            "is_async": true
          },
          {
            "name": "test_telemetry_service_tags_and_metadata",
            "line": 290,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "telemetry_service",
              "memory_bus"
            ],
            "is_async": true
          },
          {
            "name": "test_telemetry_service_performance_metrics",
            "line": 330,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "telemetry_service",
              "memory_bus"
            ],
            "is_async": true
          },
          {
            "name": "test_telemetry_service_error_handling",
            "line": 354,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "telemetry_service",
              "memory_bus"
            ],
            "is_async": true
          },
          {
            "name": "test_telemetry_service_batch_recording",
            "line": 378,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "telemetry_service",
              "memory_bus"
            ],
            "is_async": true
          },
          {
            "name": "test_telemetry_service_resource_usage",
            "line": 400,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "telemetry_service",
              "memory_bus"
            ],
            "is_async": true
          },
          {
            "name": "test_telemetry_service_health_check",
            "line": 430,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "telemetry_service"
            ],
            "is_async": true
          },
          {
            "name": "test_telemetry_service_get_node_type",
            "line": 438,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "telemetry_service"
            ],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/ciris_engine/logic/services/graph/test_memory_service.py",
        "classes": [],
        "functions": [
          {
            "name": "time_service",
            "line": 22,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "secrets_service",
            "line": 28,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "temp_db",
            "line": 40,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "memory_service",
            "line": 49,
            "decorators": [
              "fixture"
            ],
            "args": [
              "temp_db",
              "secrets_service",
              "time_service"
            ],
            "is_async": true
          },
          {
            "name": "test_memory_service_memorize",
            "line": 62,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "memory_service"
            ],
            "is_async": true
          },
          {
            "name": "test_memory_service_recall",
            "line": 84,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "memory_service"
            ],
            "is_async": true
          },
          {
            "name": "test_memory_service_forget",
            "line": 117,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "memory_service"
            ],
            "is_async": true
          },
          {
            "name": "test_memory_service_search",
            "line": 142,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "memory_service"
            ],
            "is_async": true
          },
          {
            "name": "test_memory_service_timeseries",
            "line": 189,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "memory_service"
            ],
            "is_async": true
          },
          {
            "name": "test_memory_service_capabilities",
            "line": 215,
            "decorators": [],
            "args": [
              "memory_service"
            ],
            "is_async": false
          },
          {
            "name": "test_memory_service_status",
            "line": 231,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "memory_service"
            ],
            "is_async": true
          },
          {
            "name": "test_memory_service_secrets_integration",
            "line": 258,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "memory_service",
              "secrets_service"
            ],
            "is_async": true
          },
          {
            "name": "test_memory_service_graph_query",
            "line": 288,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "memory_service"
            ],
            "is_async": true
          }
        ],
        "methods": []
      },
      {
        "file": "tests/ciris_engine/logic/services/graph/test_config_node_bug.py",
        "classes": [],
        "functions": [
          {
            "name": "test_config_node_from_graph_node_with_graphnodeattributes",
            "line": 10,
            "decorators": [],
            "args": [],
            "is_async": false
          },
          {
            "name": "test_config_node_from_graph_node_with_dict",
            "line": 38,
            "decorators": [],
            "args": [],
            "is_async": false
          }
        ],
        "methods": []
      },
      {
        "file": "tests/ciris_engine/logic/services/graph/test_audit_service.py",
        "classes": [],
        "functions": [
          {
            "name": "time_service",
            "line": 22,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "temp_db",
            "line": 28,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "memory_bus",
            "line": 37,
            "decorators": [
              "fixture"
            ],
            "args": [],
            "is_async": false
          },
          {
            "name": "audit_service",
            "line": 60,
            "decorators": [
              "fixture"
            ],
            "args": [
              "memory_bus",
              "temp_db",
              "time_service"
            ],
            "is_async": true
          },
          {
            "name": "test_audit_service_lifecycle",
            "line": 74,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "audit_service"
            ],
            "is_async": true
          },
          {
            "name": "test_audit_service_log_action",
            "line": 83,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "audit_service"
            ],
            "is_async": true
          },
          {
            "name": "test_audit_service_log_event",
            "line": 105,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "audit_service"
            ],
            "is_async": true
          },
          {
            "name": "test_audit_service_get_audit_trail",
            "line": 128,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "audit_service",
              "memory_bus"
            ],
            "is_async": true
          },
          {
            "name": "test_audit_service_query_audit_trail",
            "line": 174,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "audit_service",
              "memory_bus"
            ],
            "is_async": true
          },
          {
            "name": "test_audit_service_verify_integrity",
            "line": 192,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "audit_service"
            ],
            "is_async": true
          },
          {
            "name": "test_audit_service_capabilities",
            "line": 203,
            "decorators": [],
            "args": [
              "audit_service"
            ],
            "is_async": false
          },
          {
            "name": "test_audit_service_status",
            "line": 219,
            "decorators": [],
            "args": [
              "audit_service"
            ],
            "is_async": false
          },
          {
            "name": "test_audit_service_log_conscience_event",
            "line": 231,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "audit_service"
            ],
            "is_async": true
          },
          {
            "name": "test_audit_service_export_data",
            "line": 254,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "audit_service"
            ],
            "is_async": true
          },
          {
            "name": "test_audit_service_error_handling",
            "line": 271,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "audit_service",
              "memory_bus"
            ],
            "is_async": true
          },
          {
            "name": "test_audit_service_cache_management",
            "line": 291,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "audit_service"
            ],
            "is_async": true
          },
          {
            "name": "test_audit_service_get_verification_report",
            "line": 308,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "audit_service"
            ],
            "is_async": true
          },
          {
            "name": "test_audit_service_health_check",
            "line": 320,
            "decorators": [
              "asyncio"
            ],
            "args": [
              "audit_service"
            ],
            "is_async": true
          }
        ],
        "methods": []
      }
    ]
  }
}