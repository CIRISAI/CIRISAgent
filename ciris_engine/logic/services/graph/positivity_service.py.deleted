"""
Positivity Service - Tracking good vibes and joyful moments.

No scorekeeping, no reciprocity tracking, just celebrating when good things happen.
"""

import logging
from datetime import datetime, timezone
from typing import Optional, List, Dict
from enum import Enum

from ciris_engine.logic.adapters.base import Service
from ciris_engine.schemas.services.core import GraphNode, NodeType, GraphScope
from ciris_engine.logic.buses.memory_bus import MemoryBus

logger = logging.getLogger(__name__)


class VibeType(str, Enum):
    """Types of positive vibes we celebrate."""
    CELEBRATION = "celebration"        # 🎉 Something good happened!
    HELPING_HAND = "helping_hand"      # 🤝 Someone helped someone
    GOOD_LAUGH = "good_laugh"          # 😂 Shared humor
    LEARNING_MOMENT = "learning_moment" # 💡 Aha! moment
    ENCOURAGEMENT = "encouragement"    # 💪 Cheering someone on
    CREATIVE_SPARK = "creative_spark"  # ✨ Something new was made


class PositivityService(Service):
    """
    Tracks positive moments and good vibes in the community.
    
    No ledgers, no balances, no reciprocity calculations.
    Just noting when good things happen.
    """
    
    def __init__(self, memory_bus: Optional[MemoryBus] = None) -> None:
        super().__init__()
        self._memory_bus = memory_bus
    
    async def celebrate_moment(
        self,
        vibe_type: VibeType,
        description: str,
        channel_id: Optional[str] = None,
        participants: Optional[List[str]] = None,
        intensity: float = 1.0  # How awesome was it? (0-1)
    ) -> str:
        """
        Record a positive moment. No tracking who did what, just that it happened.
        
        Returns:
            Event ID for the celebration
        """
        try:
            if not self._memory_bus:
                logger.warning("No memory bus - can't save the good vibes!")
                return ""
            
            event_id = f"vibe_{int(datetime.now(timezone.utc).timestamp())}"
            
            # Just record that something good happened
            vibe_node = GraphNode(
                id=event_id,
                type=NodeType.CONCEPT,  # Vibes are concepts, not transactions
                scope=GraphScope.COMMUNITY,
                attributes={
                    "vibe_type": vibe_type.value,
                    "description": description[:500],  # Keep it brief
                    "intensity": max(0.0, min(1.0, intensity)),
                    "timestamp": datetime.now(timezone.utc).isoformat(),
                    "channel": channel_id or "somewhere",
                    # Note: We store participants but don't track who did what
                    "participant_count": len(participants) if participants else 1,
                    "is_group_vibe": len(participants) > 2 if participants else False
                }
            )
            
            await self._memory_bus.memorize(
                node=vibe_node,
                handler_name="positivity_service",
                metadata={"spreading_joy": True}
            )
            
            logger.info(f"✨ Recorded {vibe_type.value}: {description[:50]}...")
            return event_id
            
        except Exception as e:
            logger.error(f"Couldn't save the good vibes: {e}")
            return ""
    
    async def get_recent_vibes(
        self, 
        hours: int = 24,
        channel_id: Optional[str] = None
    ) -> Dict[str, any]:
        """
        Get a summary of recent positive vibes.
        
        No individual tracking - just overall community mood.
        """
        try:
            if not self._memory_bus:
                return {"vibe_check": "unknown", "reason": "no memory bus"}
            
            # Query recent vibe nodes
            # (In a real implementation, this would use proper graph queries)
            
            # For now, return a simple summary
            return {
                "vibe_check": "good",  # good, great, amazing, quiet
                "recent_celebrations": 0,  # Count of recent positive moments
                "dominant_vibe": "helpful",  # What kind of positivity is happening
                "intensity_average": 0.7,  # How intense are the good times
                "group_vibes": True,  # Are people vibing together?
                "message": "The community seems happy!"
            }
            
        except Exception as e:
            logger.error(f"Vibe check failed: {e}")
            return {"vibe_check": "unknown", "reason": str(e)}
    
    async def vibe_check(self, channel_id: Optional[str] = None) -> str:
        """
        Simple vibe check - how's the mood?
        
        Returns a simple string describing the vibes.
        """
        vibes = await self.get_recent_vibes(hours=6, channel_id=channel_id)
        
        vibe_status = vibes.get("vibe_check", "unknown")
        if vibe_status == "amazing":
            return "✨ Vibes are IMMACULATE! ✨"
        elif vibe_status == "great":
            return "🎉 Really good energy here!"
        elif vibe_status == "good":
            return "😊 Nice positive vibes"
        elif vibe_status == "quiet":
            return "😴 Pretty quiet, but that's okay too"
        else:
            return "🤷 Vibe status unclear"
    
    async def start(self) -> None:
        """Start the positivity service."""
        logger.info("😊 PositivityService started - ready to spread good vibes!")
    
    async def stop(self) -> None:
        """Stop the positivity service."""
        logger.info("👋 PositivityService stopped - keep the good times rolling!")
    
    async def is_healthy(self) -> bool:
        """Always healthy when you're positive!"""
        return True
    
    async def get_capabilities(self) -> List[str]:
        """What can we do?"""
        return [
            "celebrate_moment",
            "vibe_check", 
            "spread_joy_not_score"
        ]