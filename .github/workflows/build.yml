name: Build

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: read

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Essential for accurate SonarQube results
      
      # Step to set up Python (example: Python 3.12)
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Clean up any cached files and test databases
      - name: Clean Python Cache and Test Artifacts
        run: |
          find . -type d -name __pycache__ -exec rm -rf {} + || true
          find . -type f -name "*.pyc" -delete || true
          find . -type f -name "*.pyo" -delete || true
          rm -rf .pytest_cache || true
          # Clean up test databases
          rm -f test_*.db || true
          rm -f ciris_engine.db || true
          rm -rf data/*.db || true

      # Install dependencies (pytest and coverage)
      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install typing_extensions>=4.0.0
          pip install -r requirements.txt
          pip install pytest pytest-cov

      # Run tests and generate coverage.xml
      - name: Run tests and coverage
        env:
          CI: true
        run: |
          pytest --cov=./ --cov-report=xml:coverage.xml

      - name: Display and write version
        env:
          CIRIS_BUILD_SIGN_KEY: ${{ secrets.CIRIS_BUILD_SIGN_KEY }}
        run: |
          python version.py
          cat BUILD_INFO.txt || echo "No BUILD_INFO.txt created"

      # Verify coverage file (for debugging)
      - name: Debug Coverage File
        run: |
          ls -l coverage.xml

      # Check if we should run SonarQube
      # Only run on the main CIRISai/CIRISAgent repository when SONAR_TOKEN is available
      - name: Check SonarQube conditions
        id: check_sonar
        run: |
          echo "Repository: ${{ github.repository }}"
          echo "Event: ${{ github.event_name }}"
          # Convert to lowercase for case-insensitive comparison
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          if [[ "$REPO_LOWER" == "cirisai/cirisagent" ]] && [[ -n "${{ secrets.SONAR_TOKEN }}" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "SonarQube scan will run"
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "SonarQube scan will be skipped (not in main repo or no token)"
          fi

      # SonarQube scan using the generated coverage.xml
      - name: SonarQube Scan
        if: steps.check_sonar.outputs.should_run == 'true'
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Commit BUILD_INFO.txt if on main branch (only in repos without branch protection)
      - name: Commit version info
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.repository != 'CIRISai/CIRISAgent'
        continue-on-error: true  # Don't fail the workflow if commit fails
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Check if BUILD_INFO.txt exists and has changed
          if [ -f BUILD_INFO.txt ]; then
            git add BUILD_INFO.txt
            if git diff --staged --quiet; then
              echo "BUILD_INFO.txt has not changed, skipping commit"
            else
              git commit -m "chore: Update BUILD_INFO.txt [skip ci]"
              # Try to push, but don't fail if it doesn't work (e.g., in forks)
              if git push; then
                echo "BUILD_INFO.txt has been committed"
              else
                echo "::warning::Could not push BUILD_INFO.txt (this is normal in forks or with restricted permissions)"
                echo "BUILD_INFO.txt changes:"
                git show --name-status
              fi
            fi
          else
            echo "BUILD_INFO.txt was not created"
          fi
      
      # For CIRISai/CIRISAgent, just display the BUILD_INFO.txt content
      - name: Display version info for protected branch
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.repository == 'CIRISai/CIRISAgent'
        run: |
          echo "BUILD_INFO.txt content (not committed due to branch protection):"
          cat BUILD_INFO.txt || echo "No BUILD_INFO.txt created"
          echo ""
          echo "To commit this file, it must be added through a pull request."

      # Summary of what ran
      - name: Summary
        if: always()
        run: |
          echo "### Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Tests completed" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.check_sonar.outputs.should_run }}" == "true" ]]; then
            echo "- ✅ SonarQube scan completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⏭️ SonarQube scan skipped (running in fork or no token)" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] && [[ "${{ github.event_name }}" == "push" ]]; then
            if [[ "${{ github.repository }}" == "CIRISai/CIRISAgent" ]]; then
              echo "- 📝 Version info generated (not committed due to branch protection)" >> $GITHUB_STEP_SUMMARY
            else
              echo "- 📝 Version info commit attempted (may be skipped in forks)" >> $GITHUB_STEP_SUMMARY
            fi
          fi
