"""Authentication Service - Identity management for Wise Authorities.

This service handles:
- WA identity creation and management
- Token generation and verification
- Certificate lifecycle
- OAuth integration
"""

import logging
from typing import Optional, List
from datetime import datetime, timezone

from ciris_engine.protocols.services.infrastructure.authentication import AuthenticationServiceProtocol
from ciris_engine.protocols.runtime.base import ServiceProtocol
from ciris_engine.logic.adapters.base import Service
from ciris_engine.logic.services.lifecycle.time import TimeService
from ciris_engine.logic.services.governance.authentication import WAAuthService
from ciris_engine.schemas.services.core import ServiceCapabilities, ServiceStatus
from ciris_engine.schemas.services.authority_core import (
    WACertificate, WARole, TokenType
)
from ciris_engine.schemas.services.authority.wise_authority import (
    AuthenticationResult, WAUpdate, TokenVerification
)
from ciris_engine.logic.config.config_manager import get_sqlite_db_full_path
from pathlib import Path

logger = logging.getLogger(__name__)


class AuthenticationService(Service, AuthenticationServiceProtocol, ServiceProtocol):
    """Infrastructure service for WA authentication and identity management."""
    
    def __init__(self, time_service: TimeService, db_path: Optional[str] = None, key_dir: Optional[str] = None):
        """Initialize the authentication service."""
        self.time_service = time_service
        self.db_path = db_path or get_sqlite_db_full_path()
        self.key_dir = key_dir or str(Path.home() / ".ciris")
        
        # The actual authentication implementation
        self.auth_impl = WAAuthService(self.db_path, self.time_service, self.key_dir)
        
        self._started = False
        self._start_time = None
        
    async def start(self) -> None:
        """Start the service."""
        if self._started:
            return
            
        # Bootstrap if needed
        await self.auth_impl.bootstrap_if_needed()
        
        self._started = True
        self._start_time = self.time_service.now()
        logger.info("Authentication Service started")
        
    async def stop(self) -> None:
        """Stop the service."""
        self._started = False
        logger.info("Authentication Service stopped")
        
    def get_capabilities(self) -> ServiceCapabilities:
        """Get service capabilities."""
        return ServiceCapabilities(
            service_name="AuthenticationService",
            actions=[
                "authenticate", "create_token", "verify_token",
                "create_wa", "revoke_wa", "update_wa", "list_was", "get_wa",
                "rotate_keys"
            ],
            version="1.0.0",
            dependencies=["TimeService", "SecretsService"],
            metadata=None
        )
        
    def get_status(self) -> ServiceStatus:
        """Get service status."""
        uptime = 0.0
        if self._start_time:
            uptime = (self.time_service.now() - self._start_time).total_seconds()
            
        return ServiceStatus(
            service_name="AuthenticationService",
            service_type="infrastructure_service",
            is_healthy=self._started,
            uptime_seconds=uptime,
            metrics={
                "wa_count": float(len(self.auth_impl._wa_cache)),
                "tokens_issued": 0.0  # TODO: Track this
            },
            last_error=None,
            last_health_check=self.time_service.now()
        )
    
    # Authentication Protocol Methods
    
    async def authenticate(self, token: str) -> Optional[AuthenticationResult]:
        """Authenticate a WA token and return identity info."""
        try:
            claims = await self.auth_impl.verify_token(token)
            if not claims:
                return None
                
            wa_id = claims.get("wa_id")
            if not wa_id:
                return None
                
            # Update last login
            await self.auth_impl.update_last_login(wa_id)
            
            return AuthenticationResult(
                authenticated=True,
                wa_id=wa_id,
                name=claims.get("name", ""),
                role=claims.get("role", ""),
                expires_at=datetime.fromtimestamp(claims.get("exp", 0), tz=timezone.utc),
                permissions=claims.get("permissions", []),
                metadata={}
            )
        except Exception as e:
            logger.error(f"Authentication failed: {e}")
            return None
    
    async def create_token(self, wa_id: str, token_type: TokenType, ttl: int = 3600) -> str:
        """Create a new authentication token."""
        wa = await self.auth_impl.get_wa(wa_id)
        if not wa:
            raise ValueError(f"WA {wa_id} not found")
            
        # Get appropriate signing key based on token type
        if token_type == TokenType.ACCESS:
            return self.auth_impl.create_access_token(wa, ttl=ttl)
        elif token_type == TokenType.REFRESH:
            return self.auth_impl.create_refresh_token(wa)
        else:
            raise ValueError(f"Unsupported token type: {token_type}")
    
    async def verify_token(self, token: str) -> Optional[TokenVerification]:
        """Verify and decode a token."""
        try:
            claims = self.auth_impl.verify_jwt(token)
            if not claims:
                return None
                
            return TokenVerification(
                valid=True,
                claims=claims,
                expires_at=datetime.fromtimestamp(claims.get("exp", 0), tz=timezone.utc),
                token_type=TokenType(claims.get("type", "access"))
            )
        except Exception as e:
            logger.error(f"Token verification failed: {e}")
            return TokenVerification(
                valid=False,
                claims={},
                expires_at=self.time_service.now(),
                token_type=TokenType.ACCESS,
                error=str(e)
            )
    
    async def create_wa(self, name: str, email: str, scopes: List[str], 
                       role: WARole = WARole.OBSERVER) -> WACertificate:
        """Create a new Wise Authority identity."""
        # Create WA certificate
        wa_cert = WACertificate(
            wa_id=self.auth_impl._generate_wa_id(),
            name=name,
            email=email,
            public_key="",  # Will be set by auth_impl
            role=role,
            permissions=scopes,
            created=self.time_service.now(),
            expires=self.time_service.now().replace(year=self.time_service.now().year + 1),
            active=True,
            metadata={}
        )
        
        # Generate keys and store
        wa_cert = await self.auth_impl._generate_keys(wa_cert)
        await self.auth_impl.create_wa(wa_cert)
        
        return wa_cert
    
    async def revoke_wa(self, wa_id: str, reason: str) -> bool:
        """Revoke a Wise Authority identity."""
        return await self.auth_impl.revoke_wa(wa_id)
    
    async def update_wa(self, wa_id: str, updates: WAUpdate) -> Optional[WACertificate]:
        """Update a Wise Authority identity."""
        wa = await self.auth_impl.get_wa(wa_id)
        if not wa:
            return None
            
        # Apply updates
        if updates.name:
            wa.name = updates.name
        if updates.email:
            wa.email = updates.email
        if updates.permissions:
            wa.permissions = updates.permissions
        if updates.metadata:
            wa.metadata.update(updates.metadata)
            
        # Save updates
        await self.auth_impl.update_wa(wa)
        return wa
    
    async def list_was(self, active_only: bool = True) -> List[WACertificate]:
        """List Wise Authority identities."""
        return await self.auth_impl.list_was(active_only=active_only)
    
    async def get_wa(self, wa_id: str) -> Optional[WACertificate]:
        """Get a specific Wise Authority by ID."""
        return await self.auth_impl.get_wa(wa_id)
    
    async def rotate_keys(self, wa_id: str) -> bool:
        """Rotate cryptographic keys for a WA."""
        wa = await self.auth_impl.get_wa(wa_id)
        if not wa:
            return False
            
        # Generate new keys
        wa = await self.auth_impl._generate_keys(wa)
        await self.auth_impl.update_wa(wa)
        
        logger.info(f"Rotated keys for WA {wa_id}")
        return True