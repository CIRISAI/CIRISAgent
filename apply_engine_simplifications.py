#!/usr/bin/env python3
"""
Agent-in-the-loop automation: Applies engine simplification proposals generated by the toolkit.
"""
import json
import os
from typing import List, Dict

PROPOSALS_PATH = "ciris_mypy_toolkit/reports/engine_simplification_proposals.json"

# Utility to read proposals
def load_proposals(path: str) -> List[Dict]:
    with open(path, 'r') as f:
        return json.load(f)

def apply_proposal_to_file(module_path: str, proposals: List[Dict]):
    # Read file
    with open(module_path, 'r') as f:
        lines = f.readlines()
    # Apply proposals (in reverse line order to avoid shifting lines)
    for prop in sorted(proposals, key=lambda p: -p['line']):
        idx = prop['line'] - 1
        if prop['action'] == 'refactor_type' and prop['to_type']:
            # Replace type annotation in line
            lines[idx] = lines[idx].replace(prop['from_type'], prop['to_type'])
        elif prop['action'] == 'replace_dict' and prop['to_type']:
            # Replace dict() with schema/protocol object
            lines[idx] = lines[idx].replace('dict()', f'{prop["to_type"]}()')
        # If to_type is None, skip (agent/human review required)
    # Write back
    with open(module_path, 'w') as f:
        f.writelines(lines)

def main():
    proposals = load_proposals(PROPOSALS_PATH)
    # Group proposals by module
    by_module = {}
    for prop in proposals:
        if prop['to_type'] is None:
            continue  # skip proposals that require agent/human review
        by_module.setdefault(prop['module'], []).append(prop)
    for module, props in by_module.items():
        if os.path.exists(module):
            apply_proposal_to_file(module, props)
            print(f"Applied {len(props)} simplifications to {module}")
        else:
            print(f"Module not found: {module}")

if __name__ == "__main__":
    main()
