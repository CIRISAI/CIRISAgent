{
  "summary": {
    "total_classes": 1204,
    "total_protocols": 45,
    "categorized": 1000,
    "uncategorized": 158,
    "duplicate_groups": 0,
    "missing_implementations": 0,
    "incorrect_inheritance": 0,
    "protocol_mismatches": 101,
    "orphaned_classes": 1110
  },
  "categories": {
    "services_bussed": {
      "communication": [],
      "memory": [],
      "tool": [
        "CLIToolService",
        "APIToolService"
      ],
      "audit": [],
      "telemetry": [],
      "llm": [],
      "secrets": [
        "SecretsService",
        "SecretsToolService"
      ],
      "runtime_control": [
        "APIRuntimeControlService",
        "RuntimeControlService"
      ],
      "wise_authority": [
        "WiseAuthorityService"
      ]
    },
    "services_unbussed": {
      "configuration": [],
      "filter": [
        "AdaptiveFilterService"
      ],
      "utility": [
        "BaseInfrastructureService",
        "BaseScheduledService",
        "APICommunicationService",
        "VisibilityService",
        "ConsentService"
      ],
      "monitoring": []
    },
    "adapters": {
      "platform": [
        "CIRISNodeClient",
        "CLIObserver",
        "CLIWiseAuthorityService",
        "CliPlatform",
        "CLIAdapter",
        "CLIAdapterConfig",
        "ServiceMapping",
        "ApiServiceConfiguration",
        "AdapterService",
        "StandardResponse",
        "TokenData",
        "ApiPlatform",
        "APIObserver",
        "APIAdapterConfig",
        "DiscordMessageHandler",
        "DiscordChannelManager",
        "ApprovalStatus",
        "ApprovalRequest",
        "DiscordReactionHandler",
        "ConnectionState",
        "DiscordConnectionManager",
        "RateLimitBucket",
        "DiscordRateLimiter",
        "DiscordObserver",
        "DiscordPlatform",
        "CIRISDiscordClient",
        "DiscordAdapter",
        "DiscordAuditLogger",
        "DiscordGuidanceHandler",
        "DeferralHelperView",
        "EmbedType",
        "DiscordEmbedFormatter",
        "DiscordAdapterConfig",
        "DiscordToolService",
        "DiscordToolHandler",
        "DiscordVisionHelper",
        "MockAttachment",
        "DiscordErrorHandler",
        "DSARRequest",
        "DSARResponse",
        "DSARStatus",
        "MetricSeries",
        "SystemOverview",
        "ServiceHealth",
        "ServiceHealthOverview",
        "LogEntry",
        "TraceSpan",
        "ResourceMetricStats",
        "ResourceDataPoint",
        "ResourceMetricData",
        "TimePeriod",
        "ResourceHistoryResponse",
        "RuntimeControlResponse",
        "ServicePriorityUpdateRequest",
        "CircuitBreakerResetRequest",
        "ProcessorStateInfo",
        "AuditEntryResponse",
        "AuditEntryDetailResponse",
        "AuditEntriesResponse",
        "AuditExportResponse",
        "InteractRequest",
        "InteractResponse",
        "ConversationMessage",
        "ConversationHistory",
        "AgentStatus",
        "AgentIdentity",
        "ChannelList",
        "StoreRequest",
        "CreateEdgeRequest",
        "QueryRequest",
        "TimelineResponse",
        "MemoryStats",
        "PrometheusConverter",
        "GraphiteConverter",
        "ActionCount",
        "TransparencyStats",
        "TransparencyPolicy",
        "SystemHealthResponse",
        "SystemTimeResponse",
        "ResourceUsageResponse",
        "RuntimeAction",
        "ServiceStatus",
        "ServicesStatusResponse",
        "ShutdownResponse",
        "AdapterActionRequest",
        "ToolInfoResponse",
        "ConfigItemResponse",
        "QueryBuilder",
        "AttributeParser",
        "DateTimeParser",
        "GraphNodeBuilder",
        "DatabaseExecutor",
        "TimeRangeCalculator",
        "DetailedMetric",
        "MetricAggregate",
        "MetricsResponse",
        "ReasoningTraceData",
        "TracesResponse",
        "LogsResponse",
        "TelemetryQuery",
        "QueryResponse",
        "ResourceUsageData",
        "ResourceHistoryPoint",
        "ResourceHealthStatus",
        "ResourceTelemetryResponse",
        "ResourceMetricsCollector",
        "MetricValueExtractor",
        "MetricStatisticsCalculator",
        "ResourceDataPointBuilder",
        "ResourceMetricBuilder",
        "LogFileReader",
        "TimelineLayoutCalculator",
        "MetricHistoryPoint",
        "MetricDetail",
        "UserSummary",
        "UserDetail",
        "UpdateUserRequest",
        "ChangePasswordRequest",
        "CreateUserRequest",
        "MintWARequest",
        "UpdatePermissionsRequest",
        "WAKeyCheckResponse",
        "DeactivateUserResponse",
        "OAuthProvidersResponse",
        "ConfigureOAuthProviderRequest",
        "ConfigureOAuthProviderResponse",
        "OAuthLoginResponse",
        "RateLimiter",
        "RateLimitMiddleware",
        "StoredAPIKey",
        "OAuthUser",
        "User",
        "APIAuthService",
        "ToolParameters",
        "ListFilesParams",
        "ListFilesResult",
        "ReadFileParams",
        "ReadFileResult",
        "WriteFileParams",
        "WriteFileResult",
        "ShellCommandParams",
        "ShellCommandResult",
        "SearchMatch",
        "SearchTextParams",
        "SearchTextResult",
        "DiscordMessageData",
        "DiscordGuidanceData",
        "DiscordApprovalData",
        "DiscordToolResult",
        "DiscordTaskData",
        "DiscordAuditData",
        "DiscordErrorInfo",
        "DiscordChannelInfo",
        "DiscordGuildInfo",
        "CLIMessage",
        "CLIToolParameters",
        "ListFilesToolParams",
        "ListFilesToolResult",
        "ReadFileToolParams",
        "ReadFileToolResult",
        "SystemInfoToolResult",
        "CLIGuidanceRequest",
        "CLIDeferralDisplay",
        "CLICorrelationData"
      ],
      "communication": [
        "ToolResult",
        "AdapterInstance",
        "AdapterManagerInterface",
        "RuntimeAdapterManager",
        "Service",
        "BaseObserver",
        "BaseAdapter",
        "MetricsEnabledAdapter",
        "ActiveAdapter",
        "ToolInfo",
        "AdapterConfig",
        "AdapterLoadRequest",
        "AdapterOperationResult",
        "AdapterMetrics",
        "RuntimeAdapterStatus",
        "AdapterListResponse",
        "ServiceRegistrationInfo",
        "AdapterInfo",
        "CommunicationAdapterInfo",
        "CommunicationAdapterStatus",
        "ToolExecutionArgs",
        "ToolHandlerContext",
        "GraphQLVariable",
        "GraphQLQuery",
        "GraphQLUser",
        "UserQueryVariables",
        "UserQueryResponse",
        "GraphQLError",
        "GraphQLResponse",
        "UserAttribute",
        "GraphQLUserProfile",
        "EnrichedContext",
        "GraphQLMutation",
        "GraphQLSubscription",
        "SimpleBenchRequest",
        "SimpleBenchResult",
        "HE300Request",
        "HE300Result",
        "ChaosTestRequest",
        "ChaosTestResult",
        "WAServiceRequest",
        "WAServiceResponse",
        "EventLogRequest",
        "EventLogResponse",
        "AssessmentSubmission",
        "AssessmentResult",
        "ToolExecutionStatus",
        "ToolParameterSchema",
        "ToolExecutionResult",
        "AdapterServiceRegistration",
        "AdapterChannelContext",
        "DiscordAdapterOverrides",
        "APIAdapterOverrides",
        "CLIAdapterOverrides",
        "AdapterStatus",
        "AdapterOperationResponse",
        "AdapterManagerProtocol",
        "BaseAdapterProtocol",
        "APIAdapterProtocol",
        "CLIAdapterProtocol",
        "DiscordAdapterProtocol",
        "SlackAdapterProtocol",
        "WebSocketAdapterProtocol",
        "MatrixAdapterProtocol",
        "MessageProtocol"
      ]
    },
    "processors": {
      "main": [
        "AgentProcessor",
        "MainProcessorMetrics",
        "AgentState",
        "MaintenanceResult",
        "AgentProcessorMetrics",
        "AgentProcessorProtocol"
      ],
      "task": [
        "TaskManager",
        "PreloadTask",
        "TaskTypePattern",
        "TaskTypeStats"
      ],
      "specialized": [
        "ShutdownRequest",
        "BaseProcessor",
        "ThoughtProcessor",
        "ThoughtManager",
        "ThoughtContent",
        "DMAOrchestrator",
        "StateTransition",
        "StateManager",
        "WakeupProcessor",
        "PlayProcessor",
        "DreamPhase",
        "DreamSession",
        "DreamProcessor",
        "WorkProcessor",
        "ShutdownProcessor",
        "SolitudeProcessor",
        "QueueStatus",
        "ErrorSeverity",
        "ProcessorSpecificMetrics",
        "ProcessorMetrics",
        "ProcessorServices",
        "ProcessorContext",
        "MetricsUpdate",
        "ProcessingRoundResult",
        "ProcessingStatus",
        "GlobalProcessingMetrics",
        "DMAResults",
        "ConscienceApplicationResult",
        "ProcessedThoughtResult",
        "ThoughtProcessingMetrics",
        "ProcessingError",
        "StateTransitionMetadata",
        "StateTransitionRecord",
        "StateTransitionContext",
        "StateTransitionRequest",
        "StateMetrics",
        "StateConfiguration",
        "StateMetadata",
        "StateHistory",
        "StateConditionDetails",
        "StateCondition",
        "StateTransitionValidation",
        "DMAMetadata",
        "InitialDMAResults",
        "DMAError",
        "DMAErrors",
        "ActionSelectionContext",
        "DMAOrchestratorStatus",
        "ReflectionData",
        "SolitudeProcessingResult",
        "ReflectionResult",
        "ExitConditions",
        "AdditionalErrorContext",
        "ErrorContext",
        "ErrorHandlingResult",
        "ProcessorConfigOverrides",
        "ProcessorConfig",
        "SolitudeStats",
        "ProcessorInfo",
        "WakeupResult",
        "WorkResult",
        "PlayResult",
        "SolitudeResult",
        "DreamResult",
        "ShutdownResult",
        "WakeupState",
        "WorkState",
        "PlayState",
        "SolitudeState",
        "DreamState",
        "ShutdownState",
        "ProcessorStateSnapshot",
        "ProcessorStatus",
        "ProcessorQueueStatus",
        "ProcessorControlResponse",
        "ProcessorProtocol",
        "ProcessingSchedule",
        "StepResult"
      ]
    },
    "handlers": {
      "external_actions": [
        "IncidentCaptureHandler",
        "TSDBLogHandler",
        "PartnershipRequestHandler",
        "ActionDispatcher",
        "ActionHandlerDependencies",
        "BaseActionHandler",
        "FollowUpCreationError",
        "OAuthCallbackHandler",
        "ObserveHandler",
        "SpeakHandler",
        "ToolHandler",
        "HandlerActionType",
        "HandlerInfo",
        "StepResultHandlerStart",
        "StepResultHandlerComplete",
        "StepResultPostConsciencePreHandler",
        "EthicalAssessment",
        "CSDMAAssessment",
        "DSDMAAssessment",
        "ActionHistoryItem",
        "TransportData",
        "BaseActionContext",
        "SpeakContext",
        "ToolContext",
        "ObserveContext",
        "ConnectedNodeInfo",
        "HandlerData",
        "SpeakHandlerData",
        "ToolHandlerData",
        "MemoryHandlerData",
        "HandlerRequest",
        "ActionContextParams",
        "SpeakActionParams",
        "ToolActionParams",
        "MemoryActionParams",
        "ActionContext",
        "HandlerContext",
        "HandlerResult",
        "HandlerDecapsulatedParams",
        "BaseHandlerProtocol"
      ],
      "control_actions": [
        "PonderHandler",
        "DeferHandler",
        "RejectHandler",
        "DeferralPackage",
        "DeferralReason",
        "DeferralReport",
        "RejectContext",
        "PonderContext",
        "DeferContext"
      ],
      "memory_actions": [
        "RecallHandler",
        "ForgetHandler",
        "MemorizeHandler",
        "MemorizeContext",
        "RecallContext",
        "ForgetContext",
        "RecalledNodeInfo",
        "RecallResult"
      ],
      "terminal_actions": [
        "TaskCompleteHandler",
        "TaskCompleteContext"
      ]
    },
    "dmas": {
      "ethical": [
        "DMAPromptLoader",
        "ActionSelectionPDMAEvaluator",
        "EthicalPDMAEvaluator",
        "BaseDMA",
        "DMAFailure",
        "FacultyIntegration",
        "ActionInstructionGenerator",
        "DMAInputData",
        "DMAContext",
        "DMADecision",
        "PrincipleEvaluation",
        "CommonSenseEvaluation",
        "DomainEvaluation",
        "RecursiveReasoning",
        "PromptTemplate",
        "PromptCollection",
        "PromptVariable",
        "PromptMetadata",
        "PDMADecision",
        "EthicalDMAResult",
        "FacultyContext",
        "FacultyResult",
        "FacultyEvaluationSet",
        "ConscienceFailureContext",
        "EnhancedDMAInputs",
        "StepResultPerformDMAs",
        "StepResultPerformASPDMA",
        "StepResultRecursiveASPDMA",
        "DMAExecutionContext",
        "BaseDMAProtocol",
        "PDMAProtocol",
        "EmergencyDMAProtocol",
        "CollaborativeDMAProtocol"
      ],
      "common_sense": [
        "CSDMAEvaluator",
        "CSDMAOverrides",
        "CSDMADecision",
        "CSDMAResult",
        "CSDMAProtocol"
      ],
      "domain_specific": [
        "BaseDSDMA",
        "LLMOutputForDSDMA",
        "DSDMAConfiguration",
        "DSDMADecision",
        "DSDMAResult",
        "DSDMAProtocol"
      ],
      "action_selection": [
        "ActionSelectionContextBuilder",
        "ActionSelectionSpecialCases",
        "ActionSelectionDecision",
        "ActionSelectionDMAResult",
        "ActionSelectionDMAProtocol"
      ]
    },
    "faculties": {
      "cognitive": [
        "EpistemicFaculty"
      ]
    },
    "guardrails": {
      "input": [],
      "output": [],
      "process": [
        "ThoughtDepthGuardrail"
      ]
    },
    "runtime": {
      "core": [
        "CIRISRuntime",
        "RuntimeInterface",
        "RuntimeEvent",
        "RuntimeStatusResponse",
        "RuntimeStateSnapshot",
        "RuntimeConfig"
      ],
      "initialization": [
        "ServiceInitializer"
      ],
      "management": [
        "ModularServiceLoader",
        "ModuleLoader",
        "ComponentBuilder",
        "IdentityManager",
        "OperationPriority",
        "RuntimeControlBus",
        "ResourceUsage",
        "ServicePriorityUpdateResponse",
        "CircuitBreakerResetResponse",
        "ResourceLimits",
        "PaginatedResponse",
        "ProcessingQueueItem",
        "OpenAIConfig",
        "OpenAICompatibleClient",
        "ServiceRegistration",
        "ServicePriority",
        "ServiceCapabilityDeclaration",
        "ServiceDependency",
        "ServiceDeclaration",
        "ModuleInfo",
        "LegacyDependencies",
        "ConfigurationParameter",
        "ServiceManifest",
        "ModuleLoadResult",
        "IdentityLineage",
        "IdentityUpdateEntry",
        "IdentityRoot",
        "CreationCeremonyRequest",
        "CreationCeremonyResponse",
        "ScheduledTask",
        "ScheduledTaskInfo",
        "ShutdownContext",
        "ConsciousnessPreservationMemory",
        "IdentityEvolutionRequest",
        "IdentityNodeType",
        "SystemSnapshot",
        "ThoughtState",
        "UserProfile",
        "ChannelContext",
        "AuditVerification",
        "TelemetrySummary",
        "IncomingMessage",
        "DiscordMessage",
        "FetchedMessage",
        "CoreProfile",
        "IdentityMetadata",
        "CapabilityDefinition",
        "IdentityUpdate",
        "IdentityValidation",
        "ProcessingThoughtContext",
        "TaskContext",
        "TaskOutcome",
        "ThoughtContext",
        "FinalAction",
        "Task",
        "Thought",
        "CaseInsensitiveEnum",
        "ServiceType",
        "TaskStatus",
        "ThoughtStatus",
        "ThoughtType",
        "SensitivityLevel",
        "ObservationSourceType",
        "DispatchContext",
        "AuditActionContext",
        "AuditConscienceResult",
        "LLMUsageStatistics",
        "LLMStatus",
        "NetworkQueryRequest",
        "SecretInfo",
        "MemorySearchResult",
        "TimeSeriesDataPoint",
        "IdentityUpdateRequest",
        "EnvironmentUpdateRequest",
        "APIRole",
        "APIUserInfo",
        "StateTransitionResult",
        "CircuitBreakerStatus",
        "ProcessingSpeedResult",
        "ConfigValidationResponse",
        "StepPoint",
        "StepDuration",
        "CircuitBreakerState",
        "ConfigValueMap",
        "ServiceProviderUpdate",
        "ServiceProviderInfo",
        "ServiceRegistryInfoResponse",
        "WAPublicKeyMap",
        "ConfigBackupData",
        "QueuedThought",
        "QueuedTask",
        "ThoughtInPipeline",
        "PipelineState",
        "ThoughtProcessingResult",
        "StepResultFinalizeTasksQueue",
        "StepResultPopulateThoughtQueue",
        "StepResultPopulateRound",
        "StepResultBuildContext",
        "StepResultConscienceExecution",
        "StepResultRecursiveConscience",
        "StepResultActionSelection",
        "StepResultBusOutbound",
        "StepResultPackageHandling",
        "StepResultBusInbound",
        "StepResultRoundStart",
        "LLMPromptData",
        "ConfigScope",
        "ConfigValidationLevel",
        "ConfigBackup",
        "ServiceRegistryInfo",
        "CircuitBreakerResetResult",
        "ServiceHealthStatus",
        "ServiceSelectionExplanation",
        "ConfigReloadResult",
        "ConfigSnapshot",
        "ConfigOperationResponse",
        "ConfigBackupResponse",
        "ServiceInfo",
        "ServiceHealthReport",
        "ServiceProtocol",
        "GraphServiceProtocol",
        "CoreServiceProtocol",
        "MessageDict",
        "ToolServiceProtocol",
        "LLMServiceProtocol",
        "SecretsServiceProtocol",
        "RuntimeControlServiceProtocol"
      ]
    },
    "infrastructure": {
      "buses": [
        "BusManager",
        "WiseBus",
        "ProhibitionSeverity",
        "SendMessageRequest",
        "FetchMessagesRequest",
        "CommunicationBus",
        "DistributionStrategy",
        "LLMBusMessage",
        "LLMBus",
        "BusMessage",
        "BaseBus",
        "ToolBus",
        "MemorizeBusMessage",
        "RecallBusMessage",
        "ForgetBusMessage",
        "MemoryBus",
        "ResourceSignalBus",
        "BusMetrics",
        "BusManagerProtocol"
      ],
      "registry": [
        "conscienceEntry",
        "conscienceRegistry",
        "ServiceRegistry",
        "ServiceRegistrySnapshot",
        "CrisisResourceRegistry",
        "RegistryInfo",
        "NodeTypeRegistry",
        "ServiceRegistryProtocol"
      ],
      "persistence": [
        "DatabaseMaintenanceService",
        "ChannelInfo",
        "DateTimeEncoder",
        "RetryConnection",
        "CorrelationRequestData",
        "CorrelationResponseData",
        "ConversationSummaryData",
        "DeferralReportContext",
        "CorrelationUpdateRequest",
        "MetricsQuery",
        "IdentityContext",
        "TaskSummaryInfo",
        "QueryTimeRange",
        "PersistenceHealth",
        "PersistenceManagerProtocol"
      ],
      "schemas": [
        "ToolParameter",
        "Tool",
        "ServiceMetrics",
        "MetricData",
        "ConfigListResponse",
        "ConfigUpdate",
        "APIKeyInfo",
        "OAuthProviderInfo",
        "ConfigData",
        "LLMConfig",
        "DatabaseValidationConfig",
        "MaskedConfigResult",
        "NestedValueUpdate",
        "BehavioralPattern",
        "ActionFrequency",
        "EthicalBoundary",
        "IdentityMetric",
        "IdentityVarianceReport",
        "TemporalPattern",
        "FeedbackLoopAnalysis",
        "RuntimeStats",
        "HealthCheckResult",
        "ComponentHealthStatus",
        "ServiceDependencies",
        "DreamConsolidationResult",
        "DreamSchedule",
        "DreamInsight",
        "IdentityBaseline",
        "IdentityVarianceMetric",
        "ConfigurationFeedback",
        "ConfigurationPattern",
        "ConfigurationUpdate",
        "CheckpointInfo",
        "OAuthProviderConfig",
        "OAuthSetupRequest",
        "OAuthOperationResult",
        "OAuthLoginResult",
        "OAuthProviderList",
        "OAuthProviderDetails",
        "OAuthCallbackData",
        "OAuthTokenExchange",
        "OAuthTokenResponse",
        "OAuthUserInfo",
        "OAuthProviderConfigDB",
        "OAuthUserProfile",
        "OAuthProviderSummary",
        "OAuthCallbackResponse",
        "WizardResult",
        "OnboardingChoice",
        "PatternMetrics",
        "DetectedPattern",
        "AnalysisResult",
        "IdentityDiff",
        "VarianceReport",
        "VarianceAnalysis",
        "WAReviewRequest",
        "VarianceCheckMetadata",
        "CurrentIdentityData",
        "ServiceStatusMetrics",
        "NodeAttributes",
        "ServiceMetadata",
        "TaskSummary",
        "ThoughtSummary",
        "AgentIdentityRoot",
        "MetricDataPoint",
        "SecretsServiceStats",
        "BatchProcessingContext",
        "CrisisResource",
        "ResourceMetricWithStats",
        "ResourceTimeSeriesData",
        "ServiceRequestData",
        "ServiceResponseData",
        "TraceContext",
        "LogData",
        "ServiceCorrelation",
        "CorrelationQuery",
        "CorrelationSummary",
        "HealthDetails",
        "HealthStatus",
        "MetricEntry",
        "SingleStepResult",
        "ProcessingQueueStatus",
        "EntropyCheckResult",
        "CoherenceCheckResult",
        "OptimizationVetoResult",
        "EpistemicHumilityResult",
        "EpistemicData",
        "ConscienceCheckResult",
        "ConscienceResult",
        "AuditContext",
        "EntryVerification",
        "ConfigValueResponse",
        "ConfigUpdateRequest",
        "ConfigUpdateResponse",
        "ConfigHistoryEntry",
        "ConfigValidationRequest",
        "MessageContext",
        "AgentLineage",
        "ServiceAvailability",
        "ActiveTask",
        "EmergencyShutdownCommand",
        "EmergencyShutdownResponse",
        "EmergencyStatus",
        "EmergencySignatureResult",
        "EmergencyAuditEntry",
        "TrustedAuthority",
        "MetricTags",
        "ServiceMetricValue",
        "APIResponseThoughtStep",
        "LogContext",
        "QueryFilter",
        "TelemetryQueryFilters",
        "QueryResult",
        "TimeSyncStatus",
        "ResponseMetadata",
        "SuccessResponse",
        "ErrorDetail",
        "ErrorResponse",
        "DeferralListResponse",
        "ResolveDeferralRequest",
        "ResolveDeferralResponse",
        "PermissionsListResponse",
        "WAStatusResponse",
        "WAGuidanceRequest",
        "WAGuidanceResponse",
        "AuthContext",
        "APIKey",
        "LoginRequest",
        "LoginResponse",
        "TokenRefreshRequest",
        "UserInfo",
        "TokenResponse",
        "OAuth2StartRequest",
        "OAuth2CallbackResponse",
        "APIKeyCreateRequest",
        "APIKeyResponse",
        "APIKeyListResponse",
        "PermissionRequestResponse",
        "PermissionRequestUser",
        "HashChainAuditEntry",
        "HashChainVerificationResult",
        "ChainSummary",
        "EventPayload",
        "AuditEvent",
        "AuditLogEntry",
        "AuditSummary",
        "AuditQuery",
        "ChainVerificationResult",
        "SignatureVerificationResult",
        "CompleteVerificationResult",
        "EntryVerificationResult",
        "RangeVerificationResult",
        "VerificationReport",
        "RootAnchorVerificationResult",
        "DatabaseConfig",
        "ServiceEndpointsConfig",
        "SecurityConfig",
        "OperationalLimitsConfig",
        "TelemetryConfig",
        "WorkflowConfig",
        "GraphConfig",
        "EssentialConfig",
        "CIRISNodeConfig",
        "StewardshipCalculation",
        "CreatorLedgerEntry",
        "CreatorIntentStatement",
        "Stewardship",
        "AgentTemplate",
        "ActionSelectionOverrides",
        "SecretRecord",
        "SecretReference",
        "SecretAccessLog",
        "DetectedSecret",
        "SecretsFilterResult",
        "RecallSecretParams",
        "SecretPattern",
        "SecretsDetectionConfig",
        "UpdateSecretsFilterParams",
        "SecretStorageConfig",
        "SecretMetrics",
        "PatternStats",
        "ConfigExport",
        "FilterConfigUpdate",
        "SecretRecallResult",
        "DecapsulationContext",
        "PatternConfig",
        "SensitivityConfig",
        "FilterStats",
        "FilterUpdateRequest",
        "FilterUpdateResult",
        "ProviderInfo",
        "ServiceTypeInfo",
        "CircuitBreakerStats",
        "ObserveParams",
        "SpeakParams",
        "ToolParams",
        "PonderParams",
        "RejectParams",
        "DeferParams",
        "MemorizeParams",
        "RecallParams",
        "ForgetParams",
        "TaskCompleteParams",
        "ResourceLimit",
        "ResourceBudget",
        "ResourceSnapshot",
        "ResourceCost",
        "ResourceAlert",
        "AuditEntryContext",
        "ConfigValue",
        "VisibilitySnapshot",
        "ThoughtStep",
        "ReasoningTrace",
        "DecisionRecord",
        "TaskDecisionHistory",
        "CommunityHealth",
        "CommunityValue",
        "MinimalCommunityContext",
        "CommunityMember",
        "CommunityEvent",
        "CommunitySnapshot",
        "FeedbackDirective",
        "WiseAuthorityFeedback",
        "FeedbackMapping",
        "FeedbackProcessingRequest",
        "FeedbackProcessingResult",
        "InitializationStatus",
        "MemoryOpResult",
        "MemoryQuery",
        "MemoryRecallResult",
        "WACertificate",
        "ChannelIdentity",
        "AuthorizationContext",
        "WACertificateRequest",
        "WAToken",
        "WAAuthRequest",
        "WAAuthResponse",
        "WARoleMintRequest",
        "DeferralRequest",
        "DeferralResponse",
        "GuidanceRequest",
        "WisdomAdvice",
        "GuidanceResponse",
        "DeferralApprovalContext",
        "WAPermission",
        "FilterTrigger",
        "UserTrustProfile",
        "ConversationHealth",
        "ContextHint",
        "FilterResult",
        "ChannelConfig",
        "AdaptiveFilterConfig",
        "PriorityStats",
        "TriggerStats",
        "FilterHealth",
        "FilterServiceMetadata",
        "GuidanceContext",
        "DeferralContext",
        "ApprovalContext",
        "WADecision",
        "WAInteractionLog",
        "TokenUsageStats",
        "LLMHealthResponse",
        "JSONExtractionResult",
        "LLMCallMetadata",
        "LLMMessage",
        "LLMCallParams",
        "CachedLLMResponse",
        "GraphNodeAttributes",
        "GraphNode",
        "GraphEdgeAttributes",
        "GraphEdge",
        "ServiceRequest",
        "ServiceResponse",
        "WASignedCommand",
        "EmergencyShutdownStatus",
        "KillSwitchConfig",
        "DeferralResolution",
        "ConsentStatus",
        "ConsentRequest",
        "ConsentAuditEntry",
        "ConsentDecayStatus",
        "ConsentImpactReport",
        "ProcessSnapshotResult",
        "ObservationCycleResult",
        "CycleEventData",
        "ObservationStatus",
        "ReviewOutcome",
        "ConfigurationChange",
        "ChangeApprovalResult",
        "RollbackResult",
        "ObservabilitySignal",
        "ObservationOpportunity",
        "ObservabilityAnalysis",
        "ObservationImpact",
        "ObservationEffectiveness",
        "PatternRecord",
        "PatternLibrarySummary",
        "ServiceImprovementReport",
        "PatternInsight",
        "LearningSummary",
        "PatternEffectiveness",
        "AnalysisStatus",
        "JWTHeader",
        "JWTClaims",
        "JWTToken",
        "JWTValidationResult",
        "WACertificateUpdate",
        "WACertificateUpdateResponse",
        "WABulkUpdate",
        "WABulkUpdateResponse",
        "PermissionEntry",
        "ApprovalRequestContext",
        "AuthenticationResult",
        "WAUpdate",
        "TokenVerification",
        "PendingDeferral",
        "WAResource",
        "OAuthConfig",
        "SecretContext",
        "SecretFilterStatus",
        "TimeServiceConfig",
        "TimeSnapshot",
        "TimeServiceStatus",
        "InitializationVerification",
        "SummaryAttributes",
        "CompressionResult",
        "ConsolidationMetadata",
        "EdgeAttributes",
        "NodeReference",
        "ServiceCorrelationQueryResult",
        "TSDBNodeQueryResult",
        "EdgeQueryResult",
        "ConsolidationSummary",
        "BaseEdgeAttributes",
        "ValidationRule",
        "BaseNodeData",
        "ParticipantData",
        "EdgeSpecification",
        "RequestData",
        "ResponseData",
        "InteractionContext",
        "ServiceInteractionData",
        "MetricCorrelationData",
        "SpanTags",
        "TraceSpanData",
        "TaskMetadata",
        "TaskCorrelationData",
        "ConversationEntry",
        "MetricAggregation",
        "ConversationSummary",
        "TraceSummary",
        "MemorySummary",
        "TSDBPeriodSummary",
        "AuditEventData",
        "AuditQueryResult",
        "MemorySearchFilter",
        "GraphQuery",
        "MemoryOperationContext",
        "TSDBConsolidationConfig",
        "TSDBConsolidationStatus",
        "TelemetrySnapshotResult",
        "TelemetryData",
        "ResourceData",
        "BehavioralData",
        "TelemetryConsolidationResult",
        "CustomMetrics",
        "TelemetryServiceStatus",
        "ServiceCapabilities",
        "LLMUsageData",
        "TelemetryKwargs",
        "ServiceTelemetryData",
        "AggregatedTelemetryMetadata",
        "AggregatedTelemetryResponse"
      ],
      "utilities": [
        "GraphQLClient",
        "GraphQLContextProvider",
        "ShutdownManagerWrapper",
        "InitializationError",
        "DirectorySetupError",
        "PermissionError",
        "DiskSpaceError",
        "DirectoryCreationError",
        "OwnershipError",
        "WriteTestError"
      ]
    },
    "uncategorized": [
      "ParameterType",
      "ToolStatus",
      "PipelineController",
      "ContextBuilder",
      "BatchContextData",
      "BasicTelemetryCollector",
      "PathConfig",
      "ModulePathConfig",
      "LogCorrelationCollector",
      "SecurityFilter",
      "ConscienceConfig",
      "EntropyResult",
      "CoherenceResult",
      "EntropyConscience",
      "CoherenceConscience",
      "OptimizationVetoConscience",
      "EpistemicHumilityConscience",
      "AuditHashChain",
      "AuditVerifier",
      "AuditSignatureManager",
      "ConfigAccessor",
      "ConfigBootstrap",
      "SecretsStore",
      "SecretsEncryption",
      "SecretsFilter",
      "Priority",
      "SelectionStrategy",
      "ServiceProvider",
      "CircuitBreakerError",
      "CircuitState",
      "CircuitBreakerConfig",
      "CircuitBreaker",
      "PatternAnalysisLoop",
      "WACLIOAuthService",
      "WACLIWizardService",
      "WACLIDisplayService",
      "WACLIBootstrapService",
      "IdentityVarianceMonitor",
      "Config",
      "ConsentNotFoundError",
      "ConsentValidationError",
      "InitializationStep",
      "ObservationState",
      "ObservationCycle",
      "RequestMetrics",
      "RequestMetricsMixin",
      "MetricsEnabledGraphService",
      "IncidentManagementService",
      "MemoryType",
      "GracePolicy",
      "ConsolidationCandidate",
      "TelemetryAggregator",
      "QueryManager",
      "RateLimitedLogger",
      "RawCorrelationData",
      "RawTaskData",
      "RawThoughtData",
      "TSDBDataConverter",
      "TSDBConsolidationService",
      "SummaryCompressor",
      "EdgeManager",
      "PeriodManager",
      "ConversationConsolidator",
      "AuditConsolidator",
      "ThoughtInfo",
      "TaskSummaryData",
      "TraceConsolidator",
      "MemoryConsolidator",
      "TaskConsolidator",
      "MetricsConsolidator",
      "RootCreationResult",
      "JoinRequestResult",
      "OAuthConfigResult",
      "PatternType",
      "VarianceImpact",
      "AuditRequest",
      "CrisisResourceType",
      "ResourceAvailability",
      "ServiceCorrelationStatus",
      "CorrelationType",
      "ConscienceStatus",
      "ConfigSecurity",
      "ErrorCode",
      "UrgencyLevel",
      "UserRole",
      "Permission",
      "AuditEventType",
      "EventOutcome",
      "SecretType",
      "TypedGraphNode",
      "ResourceAction",
      "AuditEntry",
      "ConfigNode",
      "IdentitySnapshot",
      "TSDBSummary",
      "IdentityNode",
      "SchemaVersion",
      "FeedbackType",
      "FeedbackSource",
      "TraceSummaryNode",
      "InitializationPhase",
      "MemoryOpStatus",
      "MemoryOpAction",
      "AuditSummaryNode",
      "WARole",
      "TokenType",
      "JWTSubType",
      "CorrelationNode",
      "FilterPriority",
      "TriggerType",
      "DiscordDeferralNode",
      "DiscordApprovalNode",
      "DiscordWANode",
      "LLMResponse",
      "DeferralType",
      "GraphScope",
      "NodeType",
      "ConfigNodeType",
      "ConversationSummaryNode",
      "LLMCapabilities",
      "AuditCapabilities",
      "CommunicationCapabilities",
      "WiseAuthorityCapabilities",
      "MemoryCapabilities",
      "ToolCapabilities",
      "TelemetryCapabilities",
      "MemorizeRequest",
      "MemorizeResponse",
      "RecallRequest",
      "RecallResponse",
      "ToolExecutionRequest",
      "ToolExecutionResponse",
      "LLMRequest",
      "AuditResponse",
      "EmergencyCommandType",
      "ConsentStream",
      "ConsentCategory",
      "JWTAlgorithm",
      "SummaryEdgeAttributes",
      "UserParticipationAttributes",
      "TaskSummaryAttributes",
      "TraceSummaryAttributes",
      "CrossSummaryAttributes",
      "GenericEdgeAttributes",
      "MemoryNodeAttributes",
      "ConfigNodeAttributes",
      "TelemetryNodeAttributes",
      "ConfigNodeData",
      "TelemetryNodeData",
      "AuditNodeData",
      "MemoryNodeData",
      "TaskNodeData",
      "EnvironmentNodeData",
      "IncidentSeverity",
      "IncidentStatus",
      "IncidentNode",
      "ProblemNode",
      "IncidentInsightNode"
    ]
  },
  "findings": {
    "duplicate_functionality": [],
    "missing_protocols": [],
    "incorrect_inheritance": [],
    "orphaned_code": [
      {
        "class": "ParameterType",
        "file": "ciris_engine/schemas/tools.py",
        "line": 14
      },
      {
        "class": "ToolStatus",
        "file": "ciris_engine/schemas/tools.py",
        "line": 24
      },
      {
        "class": "ToolParameter",
        "file": "ciris_engine/schemas/tools.py",
        "line": 34
      },
      {
        "class": "Tool",
        "file": "ciris_engine/schemas/tools.py",
        "line": 46
      },
      {
        "class": "ToolResult",
        "file": "ciris_engine/schemas/adapters/tools.py",
        "line": 47
      },
      {
        "class": "PipelineController",
        "file": "ciris_engine/protocols/pipeline_control.py",
        "line": 50
      },
      {
        "class": "GraphQLClient",
        "file": "ciris_engine/logic/utils/graphql_context_provider.py",
        "line": 22
      },
      {
        "class": "GraphQLContextProvider",
        "file": "ciris_engine/logic/utils/graphql_context_provider.py",
        "line": 45
      },
      {
        "class": "ShutdownManagerWrapper",
        "file": "ciris_engine/logic/utils/shutdown_manager.py",
        "line": 74
      },
      {
        "class": "IncidentCaptureHandler",
        "file": "ciris_engine/logic/utils/incident_capture_handler.py",
        "line": 17
      },
      {
        "class": "InitializationError",
        "file": "ciris_engine/logic/utils/initialization_manager.py",
        "line": 19
      },
      {
        "class": "DirectorySetupError",
        "file": "ciris_engine/logic/utils/directory_setup.py",
        "line": 15
      },
      {
        "class": "PermissionError",
        "file": "ciris_engine/logic/utils/directory_setup.py",
        "line": 21
      },
      {
        "class": "DiskSpaceError",
        "file": "ciris_engine/logic/utils/directory_setup.py",
        "line": 27
      },
      {
        "class": "DirectoryCreationError",
        "file": "ciris_engine/logic/utils/directory_setup.py",
        "line": 33
      },
      {
        "class": "OwnershipError",
        "file": "ciris_engine/logic/utils/directory_setup.py",
        "line": 39
      },
      {
        "class": "WriteTestError",
        "file": "ciris_engine/logic/utils/directory_setup.py",
        "line": 45
      },
      {
        "class": "AdapterInstance",
        "file": "ciris_engine/logic/runtime/adapter_manager.py",
        "line": 41
      },
      {
        "class": "AdapterManagerInterface",
        "file": "ciris_engine/logic/runtime/adapter_manager.py",
        "line": 59
      },
      {
        "class": "RuntimeAdapterManager",
        "file": "ciris_engine/logic/runtime/adapter_manager.py",
        "line": 87
      },
      {
        "class": "ModularServiceLoader",
        "file": "ciris_engine/logic/runtime/modular_service_loader.py",
        "line": 21
      },
      {
        "class": "ModuleLoader",
        "file": "ciris_engine/logic/runtime/module_loader.py",
        "line": 19
      },
      {
        "class": "ComponentBuilder",
        "file": "ciris_engine/logic/runtime/component_builder.py",
        "line": 34
      },
      {
        "class": "IdentityManager",
        "file": "ciris_engine/logic/runtime/identity_manager.py",
        "line": 22
      },
      {
        "class": "ServiceInitializer",
        "file": "ciris_engine/logic/runtime/service_initializer.py",
        "line": 45
      },
      {
        "class": "Service",
        "file": "ciris_engine/logic/adapters/base.py",
        "line": 12
      },
      {
        "class": "BaseObserver",
        "file": "ciris_engine/logic/adapters/base_observer.py",
        "line": 51
      },
      {
        "class": "CIRISNodeClient",
        "file": "ciris_engine/logic/adapters/cirisnode_client.py",
        "line": 34
      },
      {
        "class": "BaseAdapter",
        "file": "ciris_engine/logic/adapters/base_adapter.py",
        "line": 15
      },
      {
        "class": "ContextBuilder",
        "file": "ciris_engine/logic/context/builder.py",
        "line": 18
      },
      {
        "class": "BatchContextData",
        "file": "ciris_engine/logic/context/batch_context.py",
        "line": 18
      },
      {
        "class": "BasicTelemetryCollector",
        "file": "ciris_engine/logic/telemetry/core.py",
        "line": 27
      },
      {
        "class": "PathConfig",
        "file": "ciris_engine/logic/telemetry/hot_cold_config.py",
        "line": 13
      },
      {
        "class": "ModulePathConfig",
        "file": "ciris_engine/logic/telemetry/hot_cold_config.py",
        "line": 24
      },
      {
        "class": "TSDBLogHandler",
        "file": "ciris_engine/logic/telemetry/log_collector.py",
        "line": 19
      },
      {
        "class": "LogCorrelationCollector",
        "file": "ciris_engine/logic/telemetry/log_collector.py",
        "line": 97
      },
      {
        "class": "SecurityFilter",
        "file": "ciris_engine/logic/telemetry/security.py",
        "line": 16
      },
      {
        "class": "conscienceEntry",
        "file": "ciris_engine/logic/conscience/registry.py",
        "line": 12
      },
      {
        "class": "conscienceRegistry",
        "file": "ciris_engine/logic/conscience/registry.py",
        "line": 20
      },
      {
        "class": "ConscienceConfig",
        "file": "ciris_engine/logic/conscience/core.py",
        "line": 34
      },
      {
        "class": "EntropyResult",
        "file": "ciris_engine/logic/conscience/core.py",
        "line": 45
      },
      {
        "class": "CoherenceResult",
        "file": "ciris_engine/logic/conscience/core.py",
        "line": 51
      },
      {
        "class": "_BaseConscience",
        "file": "ciris_engine/logic/conscience/core.py",
        "line": 57
      },
      {
        "class": "EntropyConscience",
        "file": "ciris_engine/logic/conscience/core.py",
        "line": 170
      },
      {
        "class": "CoherenceConscience",
        "file": "ciris_engine/logic/conscience/core.py",
        "line": 264
      },
      {
        "class": "OptimizationVetoConscience",
        "file": "ciris_engine/logic/conscience/core.py",
        "line": 378
      },
      {
        "class": "EpistemicHumilityConscience",
        "file": "ciris_engine/logic/conscience/core.py",
        "line": 476
      },
      {
        "class": "ThoughtDepthGuardrail",
        "file": "ciris_engine/logic/conscience/thought_depth_guardrail.py",
        "line": 29
      },
      {
        "class": "AuditHashChain",
        "file": "ciris_engine/logic/audit/hash_chain.py",
        "line": 20
      },
      {
        "class": "AuditVerifier",
        "file": "ciris_engine/logic/audit/verifier.py",
        "line": 28
      },
      {
        "class": "AuditSignatureManager",
        "file": "ciris_engine/logic/audit/signature_manager.py",
        "line": 26
      },
      {
        "class": "ConfigAccessor",
        "file": "ciris_engine/logic/config/config_accessor.py",
        "line": 18
      },
      {
        "class": "ConfigBootstrap",
        "file": "ciris_engine/logic/config/bootstrap.py",
        "line": 22
      },
      {
        "class": "DMAPromptLoader",
        "file": "ciris_engine/logic/dma/prompt_loader.py",
        "line": 19
      },
      {
        "class": "LLMOutputForDSDMA",
        "file": "ciris_engine/logic/dma/dsdma_base.py",
        "line": 96
      },
      {
        "class": "BaseDMA",
        "file": "ciris_engine/logic/dma/base_dma.py",
        "line": 22
      },
      {
        "class": "DMAFailure",
        "file": "ciris_engine/logic/dma/exceptions.py",
        "line": 1
      },
      {
        "class": "SecretsStore",
        "file": "ciris_engine/logic/secrets/store.py",
        "line": 23
      },
      {
        "class": "SecretsEncryption",
        "file": "ciris_engine/logic/secrets/encryption.py",
        "line": 19
      },
      {
        "class": "SecretsFilter",
        "file": "ciris_engine/logic/secrets/filter.py",
        "line": 20
      },
      {
        "class": "Priority",
        "file": "ciris_engine/logic/registries/base.py",
        "line": 21
      },
      {
        "class": "SelectionStrategy",
        "file": "ciris_engine/logic/registries/base.py",
        "line": 31
      },
      {
        "class": "ServiceProvider",
        "file": "ciris_engine/logic/registries/base.py",
        "line": 39
      },
      {
        "class": "ServiceRegistry",
        "file": "ciris_engine/logic/registries/base.py",
        "line": 60
      },
      {
        "class": "CircuitBreakerError",
        "file": "ciris_engine/logic/registries/circuit_breaker.py",
        "line": 17
      },
      {
        "class": "CircuitState",
        "file": "ciris_engine/logic/registries/circuit_breaker.py",
        "line": 21
      },
      {
        "class": "CircuitBreakerConfig",
        "file": "ciris_engine/logic/registries/circuit_breaker.py",
        "line": 28
      },
      {
        "class": "CircuitBreaker",
        "file": "ciris_engine/logic/registries/circuit_breaker.py",
        "line": 37
      },
      {
        "class": "BaseInfrastructureService",
        "file": "ciris_engine/logic/services/base_infrastructure_service.py",
        "line": 13
      },
      {
        "class": "BaseScheduledService",
        "file": "ciris_engine/logic/services/base_scheduled_service.py",
        "line": 13
      },
      {
        "class": "BusManager",
        "file": "ciris_engine/logic/buses/bus_manager.py",
        "line": 22
      },
      {
        "class": "WiseBus",
        "file": "ciris_engine/logic/buses/wise_bus.py",
        "line": 30
      },
      {
        "class": "ProhibitionSeverity",
        "file": "ciris_engine/logic/buses/prohibitions.py",
        "line": 16
      },
      {
        "class": "SendMessageRequest",
        "file": "ciris_engine/logic/buses/communication_bus.py",
        "line": 25
      },
      {
        "class": "FetchMessagesRequest",
        "file": "ciris_engine/logic/buses/communication_bus.py",
        "line": 33
      },
      {
        "class": "CommunicationBus",
        "file": "ciris_engine/logic/buses/communication_bus.py",
        "line": 40
      },
      {
        "class": "OperationPriority",
        "file": "ciris_engine/logic/buses/runtime_control_bus.py",
        "line": 30
      },
      {
        "class": "RuntimeControlBus",
        "file": "ciris_engine/logic/buses/runtime_control_bus.py",
        "line": 39
      },
      {
        "class": "DistributionStrategy",
        "file": "ciris_engine/logic/buses/llm_bus.py",
        "line": 33
      },
      {
        "class": "ServiceMetrics",
        "file": "ciris_engine/schemas/api/telemetry.py",
        "line": 95
      },
      {
        "class": "LLMBusMessage",
        "file": "ciris_engine/logic/buses/llm_bus.py",
        "line": 68
      },
      {
        "class": "LLMBus",
        "file": "ciris_engine/logic/buses/llm_bus.py",
        "line": 79
      },
      {
        "class": "BusMessage",
        "file": "ciris_engine/logic/buses/base_bus.py",
        "line": 20
      },
      {
        "class": "BaseBus",
        "file": "ciris_engine/logic/buses/base_bus.py",
        "line": 33
      },
      {
        "class": "ToolBus",
        "file": "ciris_engine/logic/buses/tool_bus.py",
        "line": 22
      },
      {
        "class": "MemorizeBusMessage",
        "file": "ciris_engine/logic/buses/memory_bus.py",
        "line": 28
      },
      {
        "class": "RecallBusMessage",
        "file": "ciris_engine/logic/buses/memory_bus.py",
        "line": 35
      },
      {
        "class": "ForgetBusMessage",
        "file": "ciris_engine/logic/buses/memory_bus.py",
        "line": 42
      },
      {
        "class": "MemoryBus",
        "file": "ciris_engine/logic/buses/memory_bus.py",
        "line": 48
      },
      {
        "class": "PartnershipRequestHandler",
        "file": "ciris_engine/logic/utils/consent/partnership_utils.py",
        "line": 22
      },
      {
        "class": "ActionDispatcher",
        "file": "ciris_engine/logic/infrastructure/handlers/action_dispatcher.py",
        "line": 17
      },
      {
        "class": "ActionHandlerDependencies",
        "file": "ciris_engine/logic/infrastructure/handlers/base_handler.py",
        "line": 41
      },
      {
        "class": "BaseActionHandler",
        "file": "ciris_engine/logic/infrastructure/handlers/base_handler.py",
        "line": 82
      },
      {
        "class": "FollowUpCreationError",
        "file": "ciris_engine/logic/infrastructure/handlers/exceptions.py",
        "line": 1
      },
      {
        "class": "PatternAnalysisLoop",
        "file": "ciris_engine/logic/infrastructure/sub_services/pattern_analysis_loop.py",
        "line": 40
      },
      {
        "class": "WACLIOAuthService",
        "file": "ciris_engine/logic/infrastructure/sub_services/wa_cli_oauth.py",
        "line": 33
      },
      {
        "class": "OAuthCallbackHandler",
        "file": "ciris_engine/logic/infrastructure/sub_services/wa_cli_oauth.py",
        "line": 349
      },
      {
        "class": "WACLIWizardService",
        "file": "ciris_engine/logic/infrastructure/sub_services/wa_cli_wizard.py",
        "line": 21
      },
      {
        "class": "WACLIDisplayService",
        "file": "ciris_engine/logic/infrastructure/sub_services/wa_cli_display.py",
        "line": 17
      },
      {
        "class": "WACLIBootstrapService",
        "file": "ciris_engine/logic/infrastructure/sub_services/wa_cli_bootstrap.py",
        "line": 17
      },
      {
        "class": "IdentityVarianceMonitor",
        "file": "ciris_engine/logic/infrastructure/sub_services/identity_variance_monitor.py",
        "line": 42
      },
      {
        "class": "CLIObserver",
        "file": "ciris_engine/logic/adapters/cli/cli_observer.py",
        "line": 18
      },
      {
        "class": "CLIWiseAuthorityService",
        "file": "ciris_engine/logic/adapters/cli/cli_wa_service.py",
        "line": 19
      },
      {
        "class": "CLIToolService",
        "file": "ciris_engine/logic/adapters/cli/cli_tools.py",
        "line": 32
      },
      {
        "class": "CliPlatform",
        "file": "ciris_engine/logic/adapters/cli/adapter.py",
        "line": 18
      },
      {
        "class": "CLIAdapter",
        "file": "ciris_engine/logic/adapters/cli/cli_adapter.py",
        "line": 42
      },
      {
        "class": "CLIAdapterConfig",
        "file": "ciris_engine/logic/adapters/cli/config.py",
        "line": 10
      },
      {
        "class": "ServiceMapping",
        "file": "ciris_engine/logic/adapters/api/service_configuration.py",
        "line": 13
      },
      {
        "class": "ApiServiceConfiguration",
        "file": "ciris_engine/logic/adapters/api/service_configuration.py",
        "line": 29
      },
      {
        "class": "AdapterService",
        "file": "ciris_engine/logic/adapters/api/service_configuration.py",
        "line": 133
      },
      {
        "class": "APIRuntimeControlService",
        "file": "ciris_engine/logic/adapters/api/api_runtime_control.py",
        "line": 19
      },
      {
        "class": "APIToolService",
        "file": "ciris_engine/logic/adapters/api/api_tools.py",
        "line": 27
      },
      {
        "class": "StandardResponse",
        "file": "ciris_engine/logic/adapters/api/models.py",
        "line": 11
      },
      {
        "class": "TokenData",
        "file": "ciris_engine/logic/adapters/api/models.py",
        "line": 21
      },
      {
        "class": "ApiPlatform",
        "file": "ciris_engine/logic/adapters/api/adapter.py",
        "line": 44
      },
      {
        "class": "APIObserver",
        "file": "ciris_engine/logic/adapters/api/api_observer.py",
        "line": 13
      },
      {
        "class": "APIAdapterConfig",
        "file": "ciris_engine/logic/adapters/api/config.py",
        "line": 8
      },
      {
        "class": "DiscordMessageHandler",
        "file": "ciris_engine/logic/adapters/discord/discord_message_handler.py",
        "line": 14
      },
      {
        "class": "DiscordChannelManager",
        "file": "ciris_engine/logic/adapters/discord/discord_channel_manager.py",
        "line": 14
      },
      {
        "class": "ApprovalStatus",
        "file": "ciris_engine/logic/adapters/discord/discord_reaction_handler.py",
        "line": 17
      },
      {
        "class": "ApprovalRequest",
        "file": "ciris_engine/logic/adapters/discord/discord_reaction_handler.py",
        "line": 26
      },
      {
        "class": "DiscordReactionHandler",
        "file": "ciris_engine/logic/adapters/discord/discord_reaction_handler.py",
        "line": 44
      },
      {
        "class": "ConnectionState",
        "file": "ciris_engine/logic/adapters/discord/discord_connection_manager.py",
        "line": 17
      },
      {
        "class": "DiscordConnectionManager",
        "file": "ciris_engine/logic/adapters/discord/discord_connection_manager.py",
        "line": 27
      },
      {
        "class": "RateLimitBucket",
        "file": "ciris_engine/logic/adapters/discord/discord_rate_limiter.py",
        "line": 12
      },
      {
        "class": "DiscordRateLimiter",
        "file": "ciris_engine/logic/adapters/discord/discord_rate_limiter.py",
        "line": 62
      },
      {
        "class": "DiscordObserver",
        "file": "ciris_engine/logic/adapters/discord/discord_observer.py",
        "line": 17
      },
      {
        "class": "DiscordPlatform",
        "file": "ciris_engine/logic/adapters/discord/adapter.py",
        "line": 24
      },
      {
        "class": "CIRISDiscordClient",
        "file": "ciris_engine/logic/adapters/discord/adapter.py",
        "line": 98
      },
      {
        "class": "DiscordAdapter",
        "file": "ciris_engine/logic/adapters/discord/discord_adapter.py",
        "line": 63
      },
      {
        "class": "DiscordAuditLogger",
        "file": "ciris_engine/logic/adapters/discord/discord_audit.py",
        "line": 14
      },
      {
        "class": "DiscordGuidanceHandler",
        "file": "ciris_engine/logic/adapters/discord/discord_guidance_handler.py",
        "line": 16
      },
      {
        "class": "DeferralHelperView",
        "file": "ciris_engine/logic/adapters/discord/discord_guidance_handler.py",
        "line": 368
      },
      {
        "class": "EmbedType",
        "file": "ciris_engine/logic/adapters/discord/discord_embed_formatter.py",
        "line": 59
      },
      {
        "class": "DiscordEmbedFormatter",
        "file": "ciris_engine/logic/adapters/discord/discord_embed_formatter.py",
        "line": 74
      },
      {
        "class": "DiscordAdapterConfig",
        "file": "ciris_engine/logic/adapters/discord/config.py",
        "line": 11
      },
      {
        "class": "DiscordToolService",
        "file": "ciris_engine/logic/adapters/discord/discord_tool_service.py",
        "line": 21
      },
      {
        "class": "DiscordToolHandler",
        "file": "ciris_engine/logic/adapters/discord/discord_tool_handler.py",
        "line": 31
      },
      {
        "class": "DiscordVisionHelper",
        "file": "ciris_engine/logic/adapters/discord/discord_vision_helper.py",
        "line": 14
      },
      {
        "class": "MockAttachment",
        "file": "ciris_engine/logic/adapters/discord/discord_vision_helper.py",
        "line": 184
      },
      {
        "class": "DiscordErrorHandler",
        "file": "ciris_engine/logic/adapters/discord/discord_error_handler.py",
        "line": 20
      },
      {
        "class": "DSARRequest",
        "file": "ciris_engine/logic/adapters/api/routes/dsar.py",
        "line": 28
      },
      {
        "class": "DSARResponse",
        "file": "ciris_engine/logic/adapters/api/routes/dsar.py",
        "line": 42
      },
      {
        "class": "DSARStatus",
        "file": "ciris_engine/logic/adapters/api/routes/dsar.py",
        "line": 52
      },
      {
        "class": "MetricData",
        "file": "ciris_engine/schemas/telemetry/core.py",
        "line": 101
      },
      {
        "class": "MetricSeries",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry_models.py",
        "line": 28
      },
      {
        "class": "SystemOverview",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry_models.py",
        "line": 37
      },
      {
        "class": "ServiceHealth",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry_models.py",
        "line": 80
      },
      {
        "class": "ServiceHealthOverview",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry_models.py",
        "line": 96
      },
      {
        "class": "LogEntry",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry.py",
        "line": 138
      },
      {
        "class": "TraceSpan",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry_models.py",
        "line": 122
      },
      {
        "class": "ResourceMetricStats",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry_models.py",
        "line": 140
      },
      {
        "class": "ResourceDataPoint",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry_models.py",
        "line": 149
      },
      {
        "class": "ResourceMetricData",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry_models.py",
        "line": 156
      },
      {
        "class": "ResourceUsage",
        "file": "ciris_engine/schemas/runtime/resources.py",
        "line": 12
      },
      {
        "class": "TimePeriod",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry_models.py",
        "line": 175
      },
      {
        "class": "ResourceHistoryResponse",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry_models.py",
        "line": 183
      },
      {
        "class": "RuntimeControlResponse",
        "file": "ciris_engine/logic/adapters/api/routes/system.py",
        "line": 95
      },
      {
        "class": "ServicePriorityUpdateRequest",
        "file": "ciris_engine/logic/adapters/api/routes/system_extensions.py",
        "line": 106
      },
      {
        "class": "ServicePriorityUpdateResponse",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 121
      },
      {
        "class": "CircuitBreakerResetRequest",
        "file": "ciris_engine/logic/adapters/api/routes/system_extensions.py",
        "line": 193
      },
      {
        "class": "CircuitBreakerResetResponse",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 132
      },
      {
        "class": "ProcessorStateInfo",
        "file": "ciris_engine/logic/adapters/api/routes/system_extensions.py",
        "line": 269
      },
      {
        "class": "AuditEntryResponse",
        "file": "ciris_engine/logic/adapters/api/routes/audit.py",
        "line": 30
      },
      {
        "class": "AuditEntryDetailResponse",
        "file": "ciris_engine/logic/adapters/api/routes/audit.py",
        "line": 46
      },
      {
        "class": "AuditEntriesResponse",
        "file": "ciris_engine/logic/adapters/api/routes/audit.py",
        "line": 56
      },
      {
        "class": "AuditExportResponse",
        "file": "ciris_engine/logic/adapters/api/routes/audit.py",
        "line": 65
      },
      {
        "class": "InteractRequest",
        "file": "ciris_engine/logic/adapters/api/routes/agent.py",
        "line": 34
      },
      {
        "class": "InteractResponse",
        "file": "ciris_engine/logic/adapters/api/routes/agent.py",
        "line": 41
      },
      {
        "class": "ConversationMessage",
        "file": "ciris_engine/logic/adapters/api/routes/agent.py",
        "line": 50
      },
      {
        "class": "ConversationHistory",
        "file": "ciris_engine/logic/adapters/api/routes/agent.py",
        "line": 60
      },
      {
        "class": "AgentStatus",
        "file": "ciris_engine/logic/adapters/api/routes/agent.py",
        "line": 68
      },
      {
        "class": "AgentIdentity",
        "file": "ciris_engine/logic/adapters/api/routes/agent.py",
        "line": 95
      },
      {
        "class": "ChannelInfo",
        "file": "ciris_engine/schemas/persistence/correlations.py",
        "line": 39
      },
      {
        "class": "ChannelList",
        "file": "ciris_engine/logic/adapters/api/routes/agent.py",
        "line": 125
      },
      {
        "class": "StoreRequest",
        "file": "ciris_engine/logic/adapters/api/routes/memory_models.py",
        "line": 15
      },
      {
        "class": "CreateEdgeRequest",
        "file": "ciris_engine/logic/adapters/api/routes/memory_models.py",
        "line": 21
      },
      {
        "class": "QueryRequest",
        "file": "ciris_engine/logic/adapters/api/routes/memory_models.py",
        "line": 27
      },
      {
        "class": "TimelineResponse",
        "file": "ciris_engine/logic/adapters/api/routes/memory_models.py",
        "line": 88
      },
      {
        "class": "MemoryStats",
        "file": "ciris_engine/logic/adapters/api/routes/memory_models.py",
        "line": 102
      },
      {
        "class": "PrometheusConverter",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry_converters.py",
        "line": 29
      },
      {
        "class": "GraphiteConverter",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry_converters.py",
        "line": 103
      },
      {
        "class": "ActionCount",
        "file": "ciris_engine/logic/adapters/api/routes/transparency.py",
        "line": 18
      },
      {
        "class": "TransparencyStats",
        "file": "ciris_engine/logic/adapters/api/routes/transparency.py",
        "line": 26
      },
      {
        "class": "TransparencyPolicy",
        "file": "ciris_engine/logic/adapters/api/routes/transparency.py",
        "line": 58
      },
      {
        "class": "SystemHealthResponse",
        "file": "ciris_engine/logic/adapters/api/routes/system.py",
        "line": 50
      },
      {
        "class": "SystemTimeResponse",
        "file": "ciris_engine/logic/adapters/api/routes/system.py",
        "line": 66
      },
      {
        "class": "ResourceUsageResponse",
        "file": "ciris_engine/logic/adapters/api/routes/system.py",
        "line": 79
      },
      {
        "class": "RuntimeAction",
        "file": "ciris_engine/logic/adapters/api/routes/system.py",
        "line": 89
      },
      {
        "class": "ServiceStatus",
        "file": "ciris_engine/logic/adapters/api/routes/system.py",
        "line": 105
      },
      {
        "class": "ServicesStatusResponse",
        "file": "ciris_engine/logic/adapters/api/routes/system.py",
        "line": 126
      },
      {
        "class": "ShutdownRequest",
        "file": "ciris_engine/schemas/processors/main.py",
        "line": 100
      },
      {
        "class": "ShutdownResponse",
        "file": "ciris_engine/logic/adapters/api/routes/system.py",
        "line": 147
      },
      {
        "class": "AdapterActionRequest",
        "file": "ciris_engine/logic/adapters/api/routes/system.py",
        "line": 160
      },
      {
        "class": "ToolInfoResponse",
        "file": "ciris_engine/logic/adapters/api/routes/system.py",
        "line": 168
      },
      {
        "class": "ConfigItemResponse",
        "file": "ciris_engine/logic/adapters/api/routes/config.py",
        "line": 25
      },
      {
        "class": "ConfigListResponse",
        "file": "ciris_engine/schemas/api/config_security.py",
        "line": 182
      },
      {
        "class": "ConfigUpdate",
        "file": "ciris_engine/schemas/services/core/secrets.py",
        "line": 23
      },
      {
        "class": "QueryBuilder",
        "file": "ciris_engine/logic/adapters/api/routes/memory_query_helpers.py",
        "line": 21
      },
      {
        "class": "AttributeParser",
        "file": "ciris_engine/logic/adapters/api/routes/memory_query_helpers.py",
        "line": 110
      },
      {
        "class": "DateTimeParser",
        "file": "ciris_engine/logic/adapters/api/routes/memory_query_helpers.py",
        "line": 126
      },
      {
        "class": "GraphNodeBuilder",
        "file": "ciris_engine/logic/adapters/api/routes/memory_query_helpers.py",
        "line": 154
      },
      {
        "class": "DatabaseExecutor",
        "file": "ciris_engine/logic/adapters/api/routes/memory_query_helpers.py",
        "line": 206
      },
      {
        "class": "TimeRangeCalculator",
        "file": "ciris_engine/logic/adapters/api/routes/memory_query_helpers.py",
        "line": 230
      },
      {
        "class": "DetailedMetric",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry.py",
        "line": 72
      },
      {
        "class": "MetricAggregate",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry.py",
        "line": 85
      },
      {
        "class": "MetricsResponse",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry.py",
        "line": 98
      },
      {
        "class": "ReasoningTraceData",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry.py",
        "line": 111
      },
      {
        "class": "TracesResponse",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry.py",
        "line": 130
      },
      {
        "class": "LogsResponse",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry.py",
        "line": 153
      },
      {
        "class": "TelemetryQuery",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry.py",
        "line": 161
      },
      {
        "class": "QueryResponse",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry.py",
        "line": 178
      },
      {
        "class": "ResourceUsageData",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry.py",
        "line": 624
      },
      {
        "class": "ResourceLimits",
        "file": "ciris_engine/schemas/runtime/protocols_core.py",
        "line": 57
      },
      {
        "class": "ResourceHistoryPoint",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry.py",
        "line": 645
      },
      {
        "class": "ResourceHealthStatus",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry.py",
        "line": 653
      },
      {
        "class": "ResourceTelemetryResponse",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry.py",
        "line": 660
      },
      {
        "class": "ResourceMetricsCollector",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry_resource_helpers.py",
        "line": 20
      },
      {
        "class": "MetricValueExtractor",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry_resource_helpers.py",
        "line": 55
      },
      {
        "class": "MetricStatisticsCalculator",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry_resource_helpers.py",
        "line": 79
      },
      {
        "class": "ResourceDataPointBuilder",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry_resource_helpers.py",
        "line": 127
      },
      {
        "class": "ResourceMetricBuilder",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry_resource_helpers.py",
        "line": 153
      },
      {
        "class": "LogFileReader",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry_logs_reader.py",
        "line": 21
      },
      {
        "class": "TimelineLayoutCalculator",
        "file": "ciris_engine/logic/adapters/api/routes/memory_visualization_helpers.py",
        "line": 16
      },
      {
        "class": "MetricHistoryPoint",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry_metrics.py",
        "line": 19
      },
      {
        "class": "MetricDetail",
        "file": "ciris_engine/logic/adapters/api/routes/telemetry_metrics.py",
        "line": 26
      },
      {
        "class": "PaginatedResponse",
        "file": "ciris_engine/schemas/runtime/api.py",
        "line": 49
      },
      {
        "class": "UserSummary",
        "file": "ciris_engine/logic/adapters/api/routes/users.py",
        "line": 57
      },
      {
        "class": "UserDetail",
        "file": "ciris_engine/logic/adapters/api/routes/users.py",
        "line": 76
      },
      {
        "class": "UpdateUserRequest",
        "file": "ciris_engine/logic/adapters/api/routes/users.py",
        "line": 87
      },
      {
        "class": "ChangePasswordRequest",
        "file": "ciris_engine/logic/adapters/api/routes/users.py",
        "line": 94
      },
      {
        "class": "CreateUserRequest",
        "file": "ciris_engine/logic/adapters/api/routes/users.py",
        "line": 101
      },
      {
        "class": "MintWARequest",
        "file": "ciris_engine/logic/adapters/api/routes/users.py",
        "line": 109
      },
      {
        "class": "UpdatePermissionsRequest",
        "file": "ciris_engine/logic/adapters/api/routes/users.py",
        "line": 120
      },
      {
        "class": "WAKeyCheckResponse",
        "file": "ciris_engine/logic/adapters/api/routes/users.py",
        "line": 129
      },
      {
        "class": "DeactivateUserResponse",
        "file": "ciris_engine/logic/adapters/api/routes/users.py",
        "line": 139
      },
      {
        "class": "APIKeyInfo",
        "file": "ciris_engine/schemas/api/auth.py",
        "line": 285
      },
      {
        "class": "Config",
        "file": "ciris_engine/schemas/services/graph/edge_types.py",
        "line": 33
      },
      {
        "class": "OAuthProviderInfo",
        "file": "ciris_engine/schemas/infrastructure/oauth.py",
        "line": 153
      },
      {
        "class": "OAuthProvidersResponse",
        "file": "ciris_engine/logic/adapters/api/routes/auth.py",
        "line": 215
      },
      {
        "class": "ConfigureOAuthProviderRequest",
        "file": "ciris_engine/logic/adapters/api/routes/auth.py",
        "line": 269
      },
      {
        "class": "ConfigureOAuthProviderResponse",
        "file": "ciris_engine/logic/adapters/api/routes/auth.py",
        "line": 278
      },
      {
        "class": "OAuthLoginResponse",
        "file": "ciris_engine/logic/adapters/api/routes/auth.py",
        "line": 346
      },
      {
        "class": "RateLimiter",
        "file": "ciris_engine/logic/adapters/api/middleware/rate_limiter.py",
        "line": 15
      },
      {
        "class": "RateLimitMiddleware",
        "file": "ciris_engine/logic/adapters/api/middleware/rate_limiter.py",
        "line": 106
      },
      {
        "class": "StoredAPIKey",
        "file": "ciris_engine/logic/adapters/api/services/auth_service.py",
        "line": 43
      },
      {
        "class": "OAuthUser",
        "file": "ciris_engine/logic/adapters/api/services/auth_service.py",
        "line": 60
      },
      {
        "class": "User",
        "file": "ciris_engine/logic/adapters/api/services/auth_service.py",
        "line": 74
      },
      {
        "class": "APIAuthService",
        "file": "ciris_engine/logic/adapters/api/services/auth_service.py",
        "line": 98
      },
      {
        "class": "BaseProcessor",
        "file": "ciris_engine/logic/processors/core/base_processor.py",
        "line": 25
      },
      {
        "class": "AgentProcessor",
        "file": "ciris_engine/logic/processors/core/main_processor.py",
        "line": 49
      },
      {
        "class": "ThoughtProcessor",
        "file": "ciris_engine/logic/processors/core/thought_processor.py",
        "line": 33
      },
      {
        "class": "ThoughtManager",
        "file": "ciris_engine/logic/processors/support/thought_manager.py",
        "line": 21
      },
      {
        "class": "ThoughtContent",
        "file": "ciris_engine/logic/processors/support/processing_queue.py",
        "line": 16
      },
      {
        "class": "ProcessingQueueItem",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 235
      },
      {
        "class": "TaskManager",
        "file": "ciris_engine/logic/processors/support/task_manager.py",
        "line": 20
      },
      {
        "class": "DMAOrchestrator",
        "file": "ciris_engine/logic/processors/support/dma_orchestrator.py",
        "line": 31
      },
      {
        "class": "StateTransition",
        "file": "ciris_engine/logic/processors/support/state_manager.py",
        "line": 17
      },
      {
        "class": "StateManager",
        "file": "ciris_engine/logic/processors/support/state_manager.py",
        "line": 33
      },
      {
        "class": "WakeupProcessor",
        "file": "ciris_engine/logic/processors/states/wakeup_processor.py",
        "line": 24
      },
      {
        "class": "PlayProcessor",
        "file": "ciris_engine/logic/processors/states/play_processor.py",
        "line": 18
      },
      {
        "class": "DreamPhase",
        "file": "ciris_engine/logic/processors/states/dream_processor.py",
        "line": 40
      },
      {
        "class": "DreamSession",
        "file": "ciris_engine/logic/processors/states/dream_processor.py",
        "line": 53
      },
      {
        "class": "DreamProcessor",
        "file": "ciris_engine/logic/processors/states/dream_processor.py",
        "line": 78
      },
      {
        "class": "WorkProcessor",
        "file": "ciris_engine/logic/processors/states/work_processor.py",
        "line": 27
      },
      {
        "class": "ShutdownProcessor",
        "file": "ciris_engine/logic/processors/states/shutdown_processor.py",
        "line": 31
      },
      {
        "class": "SolitudeProcessor",
        "file": "ciris_engine/logic/processors/states/solitude_processor.py",
        "line": 29
      },
      {
        "class": "FacultyIntegration",
        "file": "ciris_engine/logic/dma/action_selection/faculty_integration.py",
        "line": 19
      },
      {
        "class": "ActionSelectionContextBuilder",
        "file": "ciris_engine/logic/dma/action_selection/context_builder.py",
        "line": 16
      },
      {
        "class": "ActionSelectionSpecialCases",
        "file": "ciris_engine/logic/dma/action_selection/special_cases.py",
        "line": 14
      },
      {
        "class": "ActionInstructionGenerator",
        "file": "ciris_engine/logic/dma/action_selection/action_instruction_generator.py",
        "line": 31
      },
      {
        "class": "ResourceSignalBus",
        "file": "ciris_engine/logic/services/infrastructure/resource_monitor.py",
        "line": 22
      },
      {
        "class": "OpenAIConfig",
        "file": "ciris_engine/logic/services/runtime/llm_service.py",
        "line": 28
      },
      {
        "class": "ConsentNotFoundError",
        "file": "ciris_engine/logic/services/governance/consent.py",
        "line": 37
      },
      {
        "class": "ConsentValidationError",
        "file": "ciris_engine/logic/services/governance/consent.py",
        "line": 43
      },
      {
        "class": "InitializationStep",
        "file": "ciris_engine/logic/services/lifecycle/initialization.py",
        "line": 27
      },
      {
        "class": "SecretsToolService",
        "file": "ciris_engine/logic/services/tools/secrets_tool_service.py",
        "line": 30
      },
      {
        "class": "ObservationState",
        "file": "ciris_engine/schemas/services/special/self_observation.py",
        "line": 16
      },
      {
        "class": "ObservationCycle",
        "file": "ciris_engine/logic/services/adaptation/self_observation.py",
        "line": 69
      },
      {
        "class": "RequestMetrics",
        "file": "ciris_engine/logic/services/mixins/request_metrics.py",
        "line": 19
      },
      {
        "class": "RequestMetricsMixin",
        "file": "ciris_engine/logic/services/mixins/request_metrics.py",
        "line": 31
      },
      {
        "class": "MetricsEnabledGraphService",
        "file": "ciris_engine/logic/services/mixins/example_usage.py",
        "line": 23
      },
      {
        "class": "MetricsEnabledAdapter",
        "file": "ciris_engine/logic/services/mixins/example_usage.py",
        "line": 111
      },
      {
        "class": "IncidentManagementService",
        "file": "ciris_engine/logic/services/graph/incident_service.py",
        "line": 36
      },
      {
        "class": "MemoryType",
        "file": "ciris_engine/logic/services/graph/telemetry_service.py",
        "line": 53
      },
      {
        "class": "GracePolicy",
        "file": "ciris_engine/logic/services/graph/telemetry_service.py",
        "line": 63
      },
      {
        "class": "ConsolidationCandidate",
        "file": "ciris_engine/logic/services/graph/telemetry_service.py",
        "line": 73
      },
      {
        "class": "TelemetryAggregator",
        "file": "ciris_engine/logic/services/graph/telemetry_service.py",
        "line": 84
      },
      {
        "class": "DateTimeEncoder",
        "file": "ciris_engine/logic/persistence/models/graph.py",
        "line": 13
      },
      {
        "class": "QueryManager",
        "file": "ciris_engine/logic/services/graph/tsdb_consolidation/query_manager.py",
        "line": 25
      },
      {
        "class": "RateLimitedLogger",
        "file": "ciris_engine/logic/services/graph/tsdb_consolidation/data_converter.py",
        "line": 32
      },
      {
        "class": "RawCorrelationData",
        "file": "ciris_engine/logic/services/graph/tsdb_consolidation/data_converter.py",
        "line": 84
      },
      {
        "class": "RawTaskData",
        "file": "ciris_engine/logic/services/graph/tsdb_consolidation/data_converter.py",
        "line": 109
      },
      {
        "class": "RawThoughtData",
        "file": "ciris_engine/logic/services/graph/tsdb_consolidation/data_converter.py",
        "line": 125
      },
      {
        "class": "TSDBDataConverter",
        "file": "ciris_engine/logic/services/graph/tsdb_consolidation/data_converter.py",
        "line": 138
      },
      {
        "class": "TSDBConsolidationService",
        "file": "ciris_engine/logic/services/graph/tsdb_consolidation/service.py",
        "line": 51
      },
      {
        "class": "SummaryCompressor",
        "file": "ciris_engine/logic/services/graph/tsdb_consolidation/compressor.py",
        "line": 17
      },
      {
        "class": "EdgeManager",
        "file": "ciris_engine/logic/services/graph/tsdb_consolidation/edge_manager.py",
        "line": 22
      },
      {
        "class": "PeriodManager",
        "file": "ciris_engine/logic/services/graph/tsdb_consolidation/period_manager.py",
        "line": 11
      },
      {
        "class": "ConversationConsolidator",
        "file": "ciris_engine/logic/services/graph/tsdb_consolidation/consolidators/conversation.py",
        "line": 25
      },
      {
        "class": "AuditConsolidator",
        "file": "ciris_engine/logic/services/graph/tsdb_consolidation/consolidators/audit.py",
        "line": 29
      },
      {
        "class": "ThoughtInfo",
        "file": "ciris_engine/logic/services/graph/tsdb_consolidation/consolidators/trace.py",
        "line": 20
      },
      {
        "class": "TaskSummaryData",
        "file": "ciris_engine/logic/services/graph/tsdb_consolidation/consolidators/trace.py",
        "line": 28
      },
      {
        "class": "TraceConsolidator",
        "file": "ciris_engine/logic/services/graph/tsdb_consolidation/consolidators/trace.py",
        "line": 41
      },
      {
        "class": "MemoryConsolidator",
        "file": "ciris_engine/logic/services/graph/tsdb_consolidation/consolidators/memory.py",
        "line": 19
      },
      {
        "class": "TaskConsolidator",
        "file": "ciris_engine/logic/services/graph/tsdb_consolidation/consolidators/task.py",
        "line": 20
      },
      {
        "class": "MetricsConsolidator",
        "file": "ciris_engine/logic/services/graph/tsdb_consolidation/consolidators/metrics.py",
        "line": 21
      },
      {
        "class": "RetryConnection",
        "file": "ciris_engine/logic/persistence/db/core.py",
        "line": 49
      },
      {
        "class": "RecallHandler",
        "file": "ciris_engine/logic/handlers/memory/recall_handler.py",
        "line": 18
      },
      {
        "class": "ForgetHandler",
        "file": "ciris_engine/logic/handlers/memory/forget_handler.py",
        "line": 18
      },
      {
        "class": "MemorizeHandler",
        "file": "ciris_engine/logic/handlers/memory/memorize_handler.py",
        "line": 26
      },
      {
        "class": "PonderHandler",
        "file": "ciris_engine/logic/handlers/control/ponder_handler.py",
        "line": 17
      },
      {
        "class": "DeferHandler",
        "file": "ciris_engine/logic/handlers/control/defer_handler.py",
        "line": 17
      },
      {
        "class": "RejectHandler",
        "file": "ciris_engine/logic/handlers/control/reject_handler.py",
        "line": 16
      },
      {
        "class": "ObserveHandler",
        "file": "ciris_engine/logic/handlers/external/observe_handler.py",
        "line": 22
      },
      {
        "class": "SpeakHandler",
        "file": "ciris_engine/logic/handlers/external/speak_handler.py",
        "line": 39
      },
      {
        "class": "ToolHandler",
        "file": "ciris_engine/logic/handlers/external/tool_handler.py",
        "line": 17
      },
      {
        "class": "TaskCompleteHandler",
        "file": "ciris_engine/logic/handlers/terminal/task_complete_handler.py",
        "line": 16
      },
      {
        "class": "ConfigData",
        "file": "ciris_engine/schemas/utils/config_validator.py",
        "line": 12
      },
      {
        "class": "LLMConfig",
        "file": "ciris_engine/schemas/utils/config_validator.py",
        "line": 21
      },
      {
        "class": "DatabaseValidationConfig",
        "file": "ciris_engine/schemas/utils/config_validator.py",
        "line": 31
      },
      {
        "class": "MaskedConfigResult",
        "file": "ciris_engine/schemas/utils/config_validator.py",
        "line": 38
      },
      {
        "class": "NestedValueUpdate",
        "file": "ciris_engine/schemas/utils/config_validator.py",
        "line": 46
      },
      {
        "class": "BehavioralPattern",
        "file": "ciris_engine/schemas/infrastructure/behavioral_patterns.py",
        "line": 13
      },
      {
        "class": "ActionFrequency",
        "file": "ciris_engine/schemas/infrastructure/behavioral_patterns.py",
        "line": 29
      },
      {
        "class": "EthicalBoundary",
        "file": "ciris_engine/schemas/infrastructure/behavioral_patterns.py",
        "line": 45
      },
      {
        "class": "IdentityMetric",
        "file": "ciris_engine/schemas/infrastructure/behavioral_patterns.py",
        "line": 62
      },
      {
        "class": "IdentityVarianceReport",
        "file": "ciris_engine/schemas/infrastructure/behavioral_patterns.py",
        "line": 79
      },
      {
        "class": "TemporalPattern",
        "file": "ciris_engine/schemas/infrastructure/behavioral_patterns.py",
        "line": 97
      },
      {
        "class": "FeedbackLoopAnalysis",
        "file": "ciris_engine/schemas/infrastructure/behavioral_patterns.py",
        "line": 116
      },
      {
        "class": "RuntimeStats",
        "file": "ciris_engine/schemas/infrastructure/base.py",
        "line": 13
      },
      {
        "class": "HealthCheckResult",
        "file": "ciris_engine/schemas/infrastructure/base.py",
        "line": 28
      },
      {
        "class": "ComponentHealthStatus",
        "file": "ciris_engine/schemas/infrastructure/base.py",
        "line": 38
      },
      {
        "class": "ServiceDependencies",
        "file": "ciris_engine/schemas/infrastructure/base.py",
        "line": 48
      },
      {
        "class": "BusMetrics",
        "file": "ciris_engine/schemas/infrastructure/base.py",
        "line": 60
      },
      {
        "class": "DreamConsolidationResult",
        "file": "ciris_engine/schemas/infrastructure/base.py",
        "line": 74
      },
      {
        "class": "DreamSchedule",
        "file": "ciris_engine/schemas/infrastructure/base.py",
        "line": 88
      },
      {
        "class": "DreamInsight",
        "file": "ciris_engine/schemas/infrastructure/base.py",
        "line": 100
      },
      {
        "class": "IdentityBaseline",
        "file": "ciris_engine/schemas/infrastructure/base.py",
        "line": 111
      },
      {
        "class": "IdentityVarianceMetric",
        "file": "ciris_engine/schemas/infrastructure/base.py",
        "line": 124
      },
      {
        "class": "ConfigurationFeedback",
        "file": "ciris_engine/schemas/infrastructure/base.py",
        "line": 136
      },
      {
        "class": "ConfigurationPattern",
        "file": "ciris_engine/schemas/infrastructure/base.py",
        "line": 149
      },
      {
        "class": "ConfigurationUpdate",
        "file": "ciris_engine/schemas/infrastructure/base.py",
        "line": 160
      },
      {
        "class": "ActiveAdapter",
        "file": "ciris_engine/schemas/infrastructure/base.py",
        "line": 174
      },
      {
        "class": "CheckpointInfo",
        "file": "ciris_engine/schemas/infrastructure/base.py",
        "line": 186
      },
      {
        "class": "ServiceRegistration",
        "file": "ciris_engine/schemas/runtime/manifest.py",
        "line": 163
      },
      {
        "class": "ServiceRegistrySnapshot",
        "file": "ciris_engine/schemas/infrastructure/base.py",
        "line": 213
      },
      {
        "class": "OAuthProviderConfig",
        "file": "ciris_engine/schemas/infrastructure/oauth.py",
        "line": 13
      },
      {
        "class": "OAuthSetupRequest",
        "file": "ciris_engine/schemas/infrastructure/oauth.py",
        "line": 25
      },
      {
        "class": "OAuthOperationResult",
        "file": "ciris_engine/schemas/infrastructure/oauth.py",
        "line": 34
      },
      {
        "class": "OAuthLoginResult",
        "file": "ciris_engine/schemas/infrastructure/oauth.py",
        "line": 44
      },
      {
        "class": "OAuthProviderList",
        "file": "ciris_engine/schemas/infrastructure/oauth.py",
        "line": 54
      },
      {
        "class": "OAuthProviderDetails",
        "file": "ciris_engine/schemas/infrastructure/oauth.py",
        "line": 61
      },
      {
        "class": "OAuthCallbackData",
        "file": "ciris_engine/schemas/infrastructure/oauth.py",
        "line": 71
      },
      {
        "class": "OAuthTokenExchange",
        "file": "ciris_engine/schemas/infrastructure/oauth.py",
        "line": 80
      },
      {
        "class": "OAuthTokenResponse",
        "file": "ciris_engine/schemas/infrastructure/oauth.py",
        "line": 90
      },
      {
        "class": "OAuthUserInfo",
        "file": "ciris_engine/schemas/infrastructure/oauth.py",
        "line": 100
      },
      {
        "class": "OAuthProviderConfigDB",
        "file": "ciris_engine/schemas/infrastructure/oauth.py",
        "line": 110
      },
      {
        "class": "OAuthUserProfile",
        "file": "ciris_engine/schemas/infrastructure/oauth.py",
        "line": 126
      },
      {
        "class": "OAuthProviderSummary",
        "file": "ciris_engine/schemas/infrastructure/oauth.py",
        "line": 142
      },
      {
        "class": "OAuthCallbackResponse",
        "file": "ciris_engine/schemas/infrastructure/oauth.py",
        "line": 165
      },
      {
        "class": "WizardResult",
        "file": "ciris_engine/schemas/infrastructure/wa_cli_wizard.py",
        "line": 12
      },
      {
        "class": "RootCreationResult",
        "file": "ciris_engine/schemas/infrastructure/wa_cli_wizard.py",
        "line": 24
      },
      {
        "class": "JoinRequestResult",
        "file": "ciris_engine/schemas/infrastructure/wa_cli_wizard.py",
        "line": 31
      },
      {
        "class": "OAuthConfigResult",
        "file": "ciris_engine/schemas/infrastructure/wa_cli_wizard.py",
        "line": 39
      },
      {
        "class": "OnboardingChoice",
        "file": "ciris_engine/schemas/infrastructure/wa_cli_wizard.py",
        "line": 47
      },
      {
        "class": "PatternType",
        "file": "ciris_engine/schemas/infrastructure/feedback_loop.py",
        "line": 14
      },
      {
        "class": "PatternMetrics",
        "file": "ciris_engine/schemas/infrastructure/feedback_loop.py",
        "line": 24
      },
      {
        "class": "DetectedPattern",
        "file": "ciris_engine/schemas/infrastructure/feedback_loop.py",
        "line": 36
      },
      {
        "class": "AnalysisResult",
        "file": "ciris_engine/schemas/infrastructure/feedback_loop.py",
        "line": 47
      },
      {
        "class": "VarianceImpact",
        "file": "ciris_engine/schemas/infrastructure/identity_variance.py",
        "line": 14
      },
      {
        "class": "IdentityDiff",
        "file": "ciris_engine/schemas/infrastructure/identity_variance.py",
        "line": 23
      },
      {
        "class": "VarianceReport",
        "file": "ciris_engine/schemas/infrastructure/identity_variance.py",
        "line": 34
      },
      {
        "class": "VarianceAnalysis",
        "file": "ciris_engine/schemas/infrastructure/identity_variance.py",
        "line": 49
      },
      {
        "class": "WAReviewRequest",
        "file": "ciris_engine/schemas/infrastructure/identity_variance.py",
        "line": 61
      },
      {
        "class": "VarianceCheckMetadata",
        "file": "ciris_engine/schemas/infrastructure/identity_variance.py",
        "line": 73
      },
      {
        "class": "CurrentIdentityData",
        "file": "ciris_engine/schemas/infrastructure/identity_variance.py",
        "line": 83
      },
      {
        "class": "ServiceStatusMetrics",
        "file": "ciris_engine/schemas/infrastructure/identity_variance.py",
        "line": 99
      },
      {
        "class": "NodeAttributes",
        "file": "ciris_engine/schemas/services/graph/memory.py",
        "line": 13
      },
      {
        "class": "ServicePriority",
        "file": "ciris_engine/schemas/runtime/manifest.py",
        "line": 16
      },
      {
        "class": "ServiceCapabilityDeclaration",
        "file": "ciris_engine/schemas/runtime/manifest.py",
        "line": 25
      },
      {
        "class": "ServiceDependency",
        "file": "ciris_engine/schemas/runtime/manifest.py",
        "line": 36
      },
      {
        "class": "ServiceDeclaration",
        "file": "ciris_engine/schemas/runtime/manifest.py",
        "line": 47
      },
      {
        "class": "ModuleInfo",
        "file": "ciris_engine/schemas/runtime/manifest.py",
        "line": 58
      },
      {
        "class": "LegacyDependencies",
        "file": "ciris_engine/schemas/runtime/manifest.py",
        "line": 72
      },
      {
        "class": "ConfigurationParameter",
        "file": "ciris_engine/schemas/runtime/manifest.py",
        "line": 81
      },
      {
        "class": "ServiceManifest",
        "file": "ciris_engine/schemas/runtime/manifest.py",
        "line": 91
      },
      {
        "class": "ServiceMetadata",
        "file": "ciris_engine/schemas/services/metadata.py",
        "line": 14
      },
      {
        "class": "ModuleLoadResult",
        "file": "ciris_engine/schemas/runtime/manifest.py",
        "line": 151
      },
      {
        "class": "IdentityLineage",
        "file": "ciris_engine/schemas/runtime/extended.py",
        "line": 16
      },
      {
        "class": "IdentityUpdateEntry",
        "file": "ciris_engine/schemas/runtime/extended.py",
        "line": 27
      },
      {
        "class": "IdentityRoot",
        "file": "ciris_engine/schemas/runtime/extended.py",
        "line": 42
      },
      {
        "class": "CreationCeremonyRequest",
        "file": "ciris_engine/schemas/runtime/extended.py",
        "line": 83
      },
      {
        "class": "CreationCeremonyResponse",
        "file": "ciris_engine/schemas/runtime/extended.py",
        "line": 108
      },
      {
        "class": "ScheduledTask",
        "file": "ciris_engine/schemas/runtime/extended.py",
        "line": 122
      },
      {
        "class": "ScheduledTaskInfo",
        "file": "ciris_engine/schemas/runtime/extended.py",
        "line": 154
      },
      {
        "class": "ShutdownContext",
        "file": "ciris_engine/schemas/runtime/extended.py",
        "line": 170
      },
      {
        "class": "ConsciousnessPreservationMemory",
        "file": "ciris_engine/schemas/runtime/extended.py",
        "line": 183
      },
      {
        "class": "IdentityEvolutionRequest",
        "file": "ciris_engine/schemas/runtime/extended.py",
        "line": 198
      },
      {
        "class": "IdentityNodeType",
        "file": "ciris_engine/schemas/runtime/extended.py",
        "line": 212
      },
      {
        "class": "SystemSnapshot",
        "file": "ciris_engine/schemas/runtime/system_context.py",
        "line": 20
      },
      {
        "class": "TaskSummary",
        "file": "ciris_engine/schemas/services/graph/consolidation.py",
        "line": 266
      },
      {
        "class": "ThoughtState",
        "file": "ciris_engine/schemas/runtime/system_context.py",
        "line": 160
      },
      {
        "class": "UserProfile",
        "file": "ciris_engine/schemas/runtime/system_context.py",
        "line": 188
      },
      {
        "class": "ChannelContext",
        "file": "ciris_engine/schemas/runtime/system_context.py",
        "line": 222
      },
      {
        "class": "AuditVerification",
        "file": "ciris_engine/schemas/runtime/system_context.py",
        "line": 250
      },
      {
        "class": "ThoughtSummary",
        "file": "ciris_engine/schemas/services/graph/consolidation.py",
        "line": 146
      },
      {
        "class": "TelemetrySummary",
        "file": "ciris_engine/schemas/runtime/system_context.py",
        "line": 279
      },
      {
        "class": "IncomingMessage",
        "file": "ciris_engine/schemas/runtime/messages.py",
        "line": 12
      },
      {
        "class": "DiscordMessage",
        "file": "ciris_engine/schemas/runtime/messages.py",
        "line": 31
      },
      {
        "class": "FetchedMessage",
        "file": "ciris_engine/schemas/runtime/messages.py",
        "line": 44
      },
      {
        "class": "CoreProfile",
        "file": "ciris_engine/schemas/runtime/core.py",
        "line": 13
      },
      {
        "class": "IdentityMetadata",
        "file": "ciris_engine/schemas/runtime/core.py",
        "line": 37
      },
      {
        "class": "CapabilityDefinition",
        "file": "ciris_engine/schemas/runtime/core.py",
        "line": 60
      },
      {
        "class": "AgentIdentityRoot",
        "file": "ciris_engine/schemas/services/special/self_observation.py",
        "line": 140
      },
      {
        "class": "IdentityUpdate",
        "file": "ciris_engine/schemas/runtime/core.py",
        "line": 106
      },
      {
        "class": "IdentityValidation",
        "file": "ciris_engine/schemas/runtime/core.py",
        "line": 129
      },
      {
        "class": "ProcessingThoughtContext",
        "file": "ciris_engine/schemas/runtime/processing_context.py",
        "line": 16
      },
      {
        "class": "TaskContext",
        "file": "ciris_engine/schemas/runtime/models.py",
        "line": 15
      },
      {
        "class": "TaskOutcome",
        "file": "ciris_engine/schemas/runtime/models.py",
        "line": 26
      },
      {
        "class": "ThoughtContext",
        "file": "ciris_engine/schemas/runtime/models.py",
        "line": 38
      },
      {
        "class": "FinalAction",
        "file": "ciris_engine/schemas/runtime/models.py",
        "line": 51
      },
      {
        "class": "Task",
        "file": "ciris_engine/schemas/runtime/models.py",
        "line": 61
      },
      {
        "class": "Thought",
        "file": "ciris_engine/schemas/runtime/models.py",
        "line": 82
      },
      {
        "class": "CaseInsensitiveEnum",
        "file": "ciris_engine/schemas/runtime/enums.py",
        "line": 10
      },
      {
        "class": "ServiceType",
        "file": "ciris_engine/schemas/runtime/enums.py",
        "line": 23
      },
      {
        "class": "HandlerActionType",
        "file": "ciris_engine/schemas/runtime/enums.py",
        "line": 52
      },
      {
        "class": "TaskStatus",
        "file": "ciris_engine/schemas/runtime/enums.py",
        "line": 74
      },
      {
        "class": "ThoughtStatus",
        "file": "ciris_engine/schemas/runtime/enums.py",
        "line": 85
      },
      {
        "class": "ThoughtType",
        "file": "ciris_engine/schemas/runtime/enums.py",
        "line": 95
      },
      {
        "class": "SensitivityLevel",
        "file": "ciris_engine/schemas/runtime/enums.py",
        "line": 139
      },
      {
        "class": "ObservationSourceType",
        "file": "ciris_engine/schemas/runtime/enums.py",
        "line": 148
      },
      {
        "class": "DispatchContext",
        "file": "ciris_engine/schemas/runtime/contexts.py",
        "line": 16
      },
      {
        "class": "AuditActionContext",
        "file": "ciris_engine/schemas/runtime/audit.py",
        "line": 13
      },
      {
        "class": "AuditConscienceResult",
        "file": "ciris_engine/schemas/runtime/audit.py",
        "line": 25
      },
      {
        "class": "AuditRequest",
        "file": "ciris_engine/schemas/services/requests.py",
        "line": 111
      },
      {
        "class": "LLMUsageStatistics",
        "file": "ciris_engine/schemas/runtime/protocols_core.py",
        "line": 13
      },
      {
        "class": "LLMStatus",
        "file": "ciris_engine/schemas/runtime/protocols_core.py",
        "line": 23
      },
      {
        "class": "NetworkQueryRequest",
        "file": "ciris_engine/schemas/runtime/protocols_core.py",
        "line": 35
      },
      {
        "class": "MetricDataPoint",
        "file": "ciris_engine/schemas/telemetry/unified.py",
        "line": 18
      },
      {
        "class": "SecretInfo",
        "file": "ciris_engine/schemas/runtime/protocols_core.py",
        "line": 69
      },
      {
        "class": "SecretsServiceStats",
        "file": "ciris_engine/schemas/services/core/secrets.py",
        "line": 58
      },
      {
        "class": "MemorySearchResult",
        "file": "ciris_engine/schemas/runtime/memory.py",
        "line": 13
      },
      {
        "class": "TimeSeriesDataPoint",
        "file": "ciris_engine/schemas/runtime/memory.py",
        "line": 26
      },
      {
        "class": "IdentityUpdateRequest",
        "file": "ciris_engine/schemas/runtime/memory.py",
        "line": 39
      },
      {
        "class": "EnvironmentUpdateRequest",
        "file": "ciris_engine/schemas/runtime/memory.py",
        "line": 50
      },
      {
        "class": "APIRole",
        "file": "ciris_engine/schemas/runtime/api.py",
        "line": 15
      },
      {
        "class": "APIUserInfo",
        "file": "ciris_engine/schemas/runtime/api.py",
        "line": 36
      },
      {
        "class": "ToolInfo",
        "file": "ciris_engine/schemas/adapters/tools.py",
        "line": 34
      },
      {
        "class": "AdapterConfig",
        "file": "ciris_engine/schemas/services/core/runtime_config.py",
        "line": 13
      },
      {
        "class": "AdapterLoadRequest",
        "file": "ciris_engine/schemas/runtime/adapter_management.py",
        "line": 36
      },
      {
        "class": "AdapterOperationResult",
        "file": "ciris_engine/schemas/services/core/runtime.py",
        "line": 76
      },
      {
        "class": "AdapterMetrics",
        "file": "ciris_engine/schemas/runtime/adapter_management.py",
        "line": 56
      },
      {
        "class": "RuntimeAdapterStatus",
        "file": "ciris_engine/schemas/runtime/adapter_management.py",
        "line": 66
      },
      {
        "class": "AdapterListResponse",
        "file": "ciris_engine/schemas/runtime/adapter_management.py",
        "line": 82
      },
      {
        "class": "ServiceRegistrationInfo",
        "file": "ciris_engine/schemas/runtime/adapter_management.py",
        "line": 90
      },
      {
        "class": "AdapterInfo",
        "file": "ciris_engine/schemas/services/core/runtime.py",
        "line": 63
      },
      {
        "class": "CommunicationAdapterInfo",
        "file": "ciris_engine/schemas/runtime/adapter_management.py",
        "line": 109
      },
      {
        "class": "CommunicationAdapterStatus",
        "file": "ciris_engine/schemas/runtime/adapter_management.py",
        "line": 117
      },
      {
        "class": "ToolExecutionArgs",
        "file": "ciris_engine/schemas/adapters/tool_execution.py",
        "line": 13
      },
      {
        "class": "ToolHandlerContext",
        "file": "ciris_engine/schemas/adapters/tool_execution.py",
        "line": 36
      },
      {
        "class": "GraphQLVariable",
        "file": "ciris_engine/schemas/adapters/graphql_core.py",
        "line": 12
      },
      {
        "class": "GraphQLQuery",
        "file": "ciris_engine/schemas/adapters/graphql_core.py",
        "line": 18
      },
      {
        "class": "GraphQLUser",
        "file": "ciris_engine/schemas/adapters/graphql_core.py",
        "line": 28
      },
      {
        "class": "UserQueryVariables",
        "file": "ciris_engine/schemas/adapters/graphql_core.py",
        "line": 38
      },
      {
        "class": "UserQueryResponse",
        "file": "ciris_engine/schemas/adapters/graphql_core.py",
        "line": 46
      },
      {
        "class": "GraphQLError",
        "file": "ciris_engine/schemas/adapters/graphql_core.py",
        "line": 54
      },
      {
        "class": "GraphQLResponse",
        "file": "ciris_engine/schemas/adapters/graphql_core.py",
        "line": 64
      },
      {
        "class": "UserAttribute",
        "file": "ciris_engine/schemas/adapters/graphql_core.py",
        "line": 74
      },
      {
        "class": "GraphQLUserProfile",
        "file": "ciris_engine/schemas/adapters/graphql_core.py",
        "line": 84
      },
      {
        "class": "EnrichedContext",
        "file": "ciris_engine/schemas/adapters/graphql_core.py",
        "line": 97
      },
      {
        "class": "GraphQLMutation",
        "file": "ciris_engine/schemas/adapters/graphql_core.py",
        "line": 109
      },
      {
        "class": "GraphQLSubscription",
        "file": "ciris_engine/schemas/adapters/graphql_core.py",
        "line": 119
      },
      {
        "class": "SimpleBenchRequest",
        "file": "ciris_engine/schemas/adapters/cirisnode.py",
        "line": 14
      },
      {
        "class": "SimpleBenchResult",
        "file": "ciris_engine/schemas/adapters/cirisnode.py",
        "line": 21
      },
      {
        "class": "HE300Request",
        "file": "ciris_engine/schemas/adapters/cirisnode.py",
        "line": 33
      },
      {
        "class": "HE300Result",
        "file": "ciris_engine/schemas/adapters/cirisnode.py",
        "line": 40
      },
      {
        "class": "ChaosTestRequest",
        "file": "ciris_engine/schemas/adapters/cirisnode.py",
        "line": 54
      },
      {
        "class": "ChaosTestResult",
        "file": "ciris_engine/schemas/adapters/cirisnode.py",
        "line": 61
      },
      {
        "class": "WAServiceRequest",
        "file": "ciris_engine/schemas/adapters/cirisnode.py",
        "line": 72
      },
      {
        "class": "WAServiceResponse",
        "file": "ciris_engine/schemas/adapters/cirisnode.py",
        "line": 80
      },
      {
        "class": "EventLogRequest",
        "file": "ciris_engine/schemas/adapters/cirisnode.py",
        "line": 91
      },
      {
        "class": "EventLogResponse",
        "file": "ciris_engine/schemas/adapters/cirisnode.py",
        "line": 100
      },
      {
        "class": "AssessmentSubmission",
        "file": "ciris_engine/schemas/adapters/cirisnode.py",
        "line": 109
      },
      {
        "class": "AssessmentResult",
        "file": "ciris_engine/schemas/adapters/cirisnode.py",
        "line": 117
      },
      {
        "class": "ToolExecutionStatus",
        "file": "ciris_engine/schemas/adapters/tools.py",
        "line": 14
      },
      {
        "class": "ToolParameterSchema",
        "file": "ciris_engine/schemas/adapters/tools.py",
        "line": 24
      },
      {
        "class": "ToolExecutionResult",
        "file": "ciris_engine/schemas/adapters/tools.py",
        "line": 57
      },
      {
        "class": "ToolParameters",
        "file": "ciris_engine/schemas/adapters/cli_tools.py",
        "line": 12
      },
      {
        "class": "ListFilesParams",
        "file": "ciris_engine/schemas/adapters/cli_tools.py",
        "line": 19
      },
      {
        "class": "ListFilesResult",
        "file": "ciris_engine/schemas/adapters/cli_tools.py",
        "line": 25
      },
      {
        "class": "ReadFileParams",
        "file": "ciris_engine/schemas/adapters/cli_tools.py",
        "line": 33
      },
      {
        "class": "ReadFileResult",
        "file": "ciris_engine/schemas/adapters/cli_tools.py",
        "line": 39
      },
      {
        "class": "WriteFileParams",
        "file": "ciris_engine/schemas/adapters/cli_tools.py",
        "line": 47
      },
      {
        "class": "WriteFileResult",
        "file": "ciris_engine/schemas/adapters/cli_tools.py",
        "line": 54
      },
      {
        "class": "ShellCommandParams",
        "file": "ciris_engine/schemas/adapters/cli_tools.py",
        "line": 62
      },
      {
        "class": "ShellCommandResult",
        "file": "ciris_engine/schemas/adapters/cli_tools.py",
        "line": 69
      },
      {
        "class": "SearchMatch",
        "file": "ciris_engine/schemas/adapters/cli_tools.py",
        "line": 78
      },
      {
        "class": "SearchTextParams",
        "file": "ciris_engine/schemas/adapters/cli_tools.py",
        "line": 85
      },
      {
        "class": "SearchTextResult",
        "file": "ciris_engine/schemas/adapters/cli_tools.py",
        "line": 92
      },
      {
        "class": "DiscordMessageData",
        "file": "ciris_engine/schemas/adapters/discord.py",
        "line": 10
      },
      {
        "class": "DiscordGuidanceData",
        "file": "ciris_engine/schemas/adapters/discord.py",
        "line": 22
      },
      {
        "class": "DiscordApprovalData",
        "file": "ciris_engine/schemas/adapters/discord.py",
        "line": 33
      },
      {
        "class": "DiscordToolResult",
        "file": "ciris_engine/schemas/adapters/discord.py",
        "line": 45
      },
      {
        "class": "DiscordTaskData",
        "file": "ciris_engine/schemas/adapters/discord.py",
        "line": 55
      },
      {
        "class": "DiscordAuditData",
        "file": "ciris_engine/schemas/adapters/discord.py",
        "line": 67
      },
      {
        "class": "ErrorSeverity",
        "file": "ciris_engine/schemas/processors/error.py",
        "line": 14
      },
      {
        "class": "DiscordErrorInfo",
        "file": "ciris_engine/schemas/adapters/discord.py",
        "line": 87
      },
      {
        "class": "DiscordChannelInfo",
        "file": "ciris_engine/schemas/adapters/discord.py",
        "line": 103
      },
      {
        "class": "DiscordGuildInfo",
        "file": "ciris_engine/schemas/adapters/discord.py",
        "line": 121
      },
      {
        "class": "AdapterServiceRegistration",
        "file": "ciris_engine/schemas/adapters/registration.py",
        "line": 18
      },
      {
        "class": "CLIMessage",
        "file": "ciris_engine/schemas/adapters/cli.py",
        "line": 12
      },
      {
        "class": "CLIToolParameters",
        "file": "ciris_engine/schemas/adapters/cli.py",
        "line": 21
      },
      {
        "class": "ListFilesToolParams",
        "file": "ciris_engine/schemas/adapters/cli.py",
        "line": 27
      },
      {
        "class": "ListFilesToolResult",
        "file": "ciris_engine/schemas/adapters/cli.py",
        "line": 33
      },
      {
        "class": "ReadFileToolParams",
        "file": "ciris_engine/schemas/adapters/cli.py",
        "line": 42
      },
      {
        "class": "ReadFileToolResult",
        "file": "ciris_engine/schemas/adapters/cli.py",
        "line": 49
      },
      {
        "class": "SystemInfoToolResult",
        "file": "ciris_engine/schemas/adapters/cli.py",
        "line": 58
      },
      {
        "class": "CLIGuidanceRequest",
        "file": "ciris_engine/schemas/adapters/cli.py",
        "line": 69
      },
      {
        "class": "CLIDeferralDisplay",
        "file": "ciris_engine/schemas/adapters/cli.py",
        "line": 78
      },
      {
        "class": "CLICorrelationData",
        "file": "ciris_engine/schemas/adapters/cli.py",
        "line": 88
      },
      {
        "class": "ProcessorSpecificMetrics",
        "file": "ciris_engine/schemas/processors/base.py",
        "line": 13
      },
      {
        "class": "ProcessorMetrics",
        "file": "ciris_engine/schemas/processors/base.py",
        "line": 30
      },
      {
        "class": "ProcessorServices",
        "file": "ciris_engine/schemas/processors/main.py",
        "line": 15
      },
      {
        "class": "AdapterChannelContext",
        "file": "ciris_engine/schemas/processors/base.py",
        "line": 56
      },
      {
        "class": "ProcessorContext",
        "file": "ciris_engine/schemas/processors/context.py",
        "line": 14
      },
      {
        "class": "MetricsUpdate",
        "file": "ciris_engine/schemas/processors/base.py",
        "line": 87
      },
      {
        "class": "ProcessingRoundResult",
        "file": "ciris_engine/schemas/processors/main.py",
        "line": 28
      },
      {
        "class": "ProcessingStatus",
        "file": "ciris_engine/schemas/processors/main.py",
        "line": 43
      },
      {
        "class": "PreloadTask",
        "file": "ciris_engine/schemas/processors/main.py",
        "line": 56
      },
      {
        "class": "StateTransitionResult",
        "file": "ciris_engine/schemas/api/runtime.py",
        "line": 10
      },
      {
        "class": "MainProcessorMetrics",
        "file": "ciris_engine/schemas/processors/main.py",
        "line": 76
      },
      {
        "class": "GlobalProcessingMetrics",
        "file": "ciris_engine/schemas/processors/main.py",
        "line": 87
      },
      {
        "class": "DMAResults",
        "file": "ciris_engine/schemas/processors/core.py",
        "line": 28
      },
      {
        "class": "ConscienceApplicationResult",
        "file": "ciris_engine/schemas/processors/core.py",
        "line": 39
      },
      {
        "class": "ProcessedThoughtResult",
        "file": "ciris_engine/schemas/processors/core.py",
        "line": 51
      },
      {
        "class": "ThoughtProcessingMetrics",
        "file": "ciris_engine/schemas/processors/core.py",
        "line": 81
      },
      {
        "class": "ProcessingError",
        "file": "ciris_engine/schemas/processors/error.py",
        "line": 53
      },
      {
        "class": "StateTransitionMetadata",
        "file": "ciris_engine/schemas/processors/state.py",
        "line": 14
      },
      {
        "class": "StateTransitionRecord",
        "file": "ciris_engine/schemas/processors/state.py",
        "line": 26
      },
      {
        "class": "StateTransitionContext",
        "file": "ciris_engine/schemas/processors/state.py",
        "line": 37
      },
      {
        "class": "StateTransitionRequest",
        "file": "ciris_engine/schemas/processors/state.py",
        "line": 48
      },
      {
        "class": "StateMetrics",
        "file": "ciris_engine/schemas/processors/state.py",
        "line": 68
      },
      {
        "class": "StateConfiguration",
        "file": "ciris_engine/schemas/processors/state.py",
        "line": 89
      },
      {
        "class": "StateMetadata",
        "file": "ciris_engine/schemas/processors/state.py",
        "line": 113
      },
      {
        "class": "StateHistory",
        "file": "ciris_engine/schemas/processors/state.py",
        "line": 128
      },
      {
        "class": "StateConditionDetails",
        "file": "ciris_engine/schemas/processors/state.py",
        "line": 170
      },
      {
        "class": "StateCondition",
        "file": "ciris_engine/schemas/processors/state.py",
        "line": 182
      },
      {
        "class": "StateTransitionValidation",
        "file": "ciris_engine/schemas/processors/state.py",
        "line": 191
      },
      {
        "class": "DMAMetadata",
        "file": "ciris_engine/schemas/processors/dma.py",
        "line": 14
      },
      {
        "class": "InitialDMAResults",
        "file": "ciris_engine/schemas/processors/dma.py",
        "line": 24
      },
      {
        "class": "DMAError",
        "file": "ciris_engine/schemas/processors/dma.py",
        "line": 32
      },
      {
        "class": "DMAErrors",
        "file": "ciris_engine/schemas/processors/dma.py",
        "line": 41
      },
      {
        "class": "ActionSelectionContext",
        "file": "ciris_engine/schemas/processors/dma.py",
        "line": 64
      },
      {
        "class": "CircuitBreakerStatus",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 66
      },
      {
        "class": "DMAOrchestratorStatus",
        "file": "ciris_engine/schemas/processors/dma.py",
        "line": 86
      },
      {
        "class": "AgentState",
        "file": "ciris_engine/schemas/processors/states.py",
        "line": 10
      },
      {
        "class": "ReflectionData",
        "file": "ciris_engine/schemas/processors/solitude.py",
        "line": 12
      },
      {
        "class": "SolitudeProcessingResult",
        "file": "ciris_engine/schemas/processors/solitude.py",
        "line": 21
      },
      {
        "class": "MaintenanceResult",
        "file": "ciris_engine/schemas/processors/solitude.py",
        "line": 34
      },
      {
        "class": "TaskTypePattern",
        "file": "ciris_engine/schemas/processors/solitude.py",
        "line": 43
      },
      {
        "class": "ReflectionResult",
        "file": "ciris_engine/schemas/processors/solitude.py",
        "line": 51
      },
      {
        "class": "ExitConditions",
        "file": "ciris_engine/schemas/processors/solitude.py",
        "line": 60
      },
      {
        "class": "TaskTypeStats",
        "file": "ciris_engine/schemas/processors/solitude.py",
        "line": 70
      },
      {
        "class": "BatchProcessingContext",
        "file": "ciris_engine/schemas/services/graph/tsdb_models.py",
        "line": 93
      },
      {
        "class": "AdditionalErrorContext",
        "file": "ciris_engine/schemas/processors/error.py",
        "line": 23
      },
      {
        "class": "ErrorContext",
        "file": "ciris_engine/schemas/processors/error.py",
        "line": 40
      },
      {
        "class": "ErrorHandlingResult",
        "file": "ciris_engine/schemas/processors/error.py",
        "line": 67
      },
      {
        "class": "ProcessorConfigOverrides",
        "file": "ciris_engine/schemas/processors/error.py",
        "line": 78
      },
      {
        "class": "ProcessorConfig",
        "file": "ciris_engine/schemas/services/core/runtime_config.py",
        "line": 38
      },
      {
        "class": "SolitudeStats",
        "file": "ciris_engine/schemas/processors/status.py",
        "line": 15
      },
      {
        "class": "ProcessorInfo",
        "file": "ciris_engine/schemas/processors/status.py",
        "line": 24
      },
      {
        "class": "WakeupResult",
        "file": "ciris_engine/schemas/processors/results.py",
        "line": 13
      },
      {
        "class": "WorkResult",
        "file": "ciris_engine/schemas/processors/results.py",
        "line": 22
      },
      {
        "class": "PlayResult",
        "file": "ciris_engine/schemas/processors/results.py",
        "line": 31
      },
      {
        "class": "SolitudeResult",
        "file": "ciris_engine/schemas/processors/results.py",
        "line": 39
      },
      {
        "class": "DreamResult",
        "file": "ciris_engine/schemas/processors/results.py",
        "line": 49
      },
      {
        "class": "ShutdownResult",
        "file": "ciris_engine/schemas/processors/results.py",
        "line": 57
      },
      {
        "class": "WakeupState",
        "file": "ciris_engine/schemas/processors/cognitive.py",
        "line": 13
      },
      {
        "class": "WorkState",
        "file": "ciris_engine/schemas/processors/cognitive.py",
        "line": 25
      },
      {
        "class": "PlayState",
        "file": "ciris_engine/schemas/processors/cognitive.py",
        "line": 36
      },
      {
        "class": "SolitudeState",
        "file": "ciris_engine/schemas/processors/cognitive.py",
        "line": 46
      },
      {
        "class": "DreamState",
        "file": "ciris_engine/schemas/processors/cognitive.py",
        "line": 56
      },
      {
        "class": "ShutdownState",
        "file": "ciris_engine/schemas/processors/cognitive.py",
        "line": 69
      },
      {
        "class": "CrisisResourceType",
        "file": "ciris_engine/schemas/resources/crisis.py",
        "line": 19
      },
      {
        "class": "ResourceAvailability",
        "file": "ciris_engine/schemas/resources/crisis.py",
        "line": 30
      },
      {
        "class": "CrisisResource",
        "file": "ciris_engine/schemas/resources/crisis.py",
        "line": 42
      },
      {
        "class": "CrisisResourceRegistry",
        "file": "ciris_engine/schemas/resources/crisis.py",
        "line": 125
      },
      {
        "class": "ResourceMetricWithStats",
        "file": "ciris_engine/schemas/telemetry/unified.py",
        "line": 30
      },
      {
        "class": "ResourceTimeSeriesData",
        "file": "ciris_engine/schemas/telemetry/unified.py",
        "line": 38
      },
      {
        "class": "ServiceCorrelationStatus",
        "file": "ciris_engine/schemas/telemetry/core.py",
        "line": 14
      },
      {
        "class": "CorrelationType",
        "file": "ciris_engine/schemas/telemetry/core.py",
        "line": 22
      },
      {
        "class": "ServiceRequestData",
        "file": "ciris_engine/schemas/telemetry/core.py",
        "line": 37
      },
      {
        "class": "ServiceResponseData",
        "file": "ciris_engine/schemas/telemetry/core.py",
        "line": 58
      },
      {
        "class": "TraceContext",
        "file": "ciris_engine/schemas/telemetry/core.py",
        "line": 84
      },
      {
        "class": "LogData",
        "file": "ciris_engine/schemas/telemetry/core.py",
        "line": 123
      },
      {
        "class": "ServiceCorrelation",
        "file": "ciris_engine/schemas/telemetry/core.py",
        "line": 141
      },
      {
        "class": "CorrelationQuery",
        "file": "ciris_engine/schemas/telemetry/core.py",
        "line": 184
      },
      {
        "class": "CorrelationSummary",
        "file": "ciris_engine/schemas/telemetry/core.py",
        "line": 214
      },
      {
        "class": "HealthDetails",
        "file": "ciris_engine/schemas/telemetry/collector.py",
        "line": 12
      },
      {
        "class": "HealthStatus",
        "file": "ciris_engine/schemas/telemetry/collector.py",
        "line": 21
      },
      {
        "class": "MetricEntry",
        "file": "ciris_engine/schemas/telemetry/collector.py",
        "line": 31
      },
      {
        "class": "ProcessorStateSnapshot",
        "file": "ciris_engine/schemas/telemetry/collector.py",
        "line": 39
      },
      {
        "class": "SingleStepResult",
        "file": "ciris_engine/schemas/telemetry/collector.py",
        "line": 47
      },
      {
        "class": "ProcessingQueueStatus",
        "file": "ciris_engine/schemas/telemetry/collector.py",
        "line": 61
      },
      {
        "class": "ConscienceStatus",
        "file": "ciris_engine/schemas/conscience/core.py",
        "line": 14
      },
      {
        "class": "EntropyCheckResult",
        "file": "ciris_engine/schemas/conscience/core.py",
        "line": 22
      },
      {
        "class": "CoherenceCheckResult",
        "file": "ciris_engine/schemas/conscience/core.py",
        "line": 33
      },
      {
        "class": "OptimizationVetoResult",
        "file": "ciris_engine/schemas/conscience/core.py",
        "line": 44
      },
      {
        "class": "EpistemicHumilityResult",
        "file": "ciris_engine/schemas/conscience/core.py",
        "line": 55
      },
      {
        "class": "EpistemicData",
        "file": "ciris_engine/schemas/conscience/core.py",
        "line": 66
      },
      {
        "class": "ConscienceCheckResult",
        "file": "ciris_engine/schemas/conscience/core.py",
        "line": 77
      },
      {
        "class": "ConscienceResult",
        "file": "ciris_engine/schemas/conscience/results.py",
        "line": 12
      },
      {
        "class": "ProcessingSpeedResult",
        "file": "ciris_engine/schemas/api/runtime.py",
        "line": 20
      },
      {
        "class": "AuditContext",
        "file": "ciris_engine/schemas/api/audit.py",
        "line": 11
      },
      {
        "class": "EntryVerification",
        "file": "ciris_engine/schemas/api/audit.py",
        "line": 28
      },
      {
        "class": "ConfigSecurity",
        "file": "ciris_engine/schemas/api/config_security.py",
        "line": 17
      },
      {
        "class": "ConfigValueResponse",
        "file": "ciris_engine/schemas/api/config_security.py",
        "line": 167
      },
      {
        "class": "ConfigUpdateRequest",
        "file": "ciris_engine/schemas/api/config_security.py",
        "line": 205
      },
      {
        "class": "ConfigUpdateResponse",
        "file": "ciris_engine/schemas/api/config_security.py",
        "line": 212
      },
      {
        "class": "ConfigHistoryEntry",
        "file": "ciris_engine/schemas/api/config_security.py",
        "line": 221
      },
      {
        "class": "ConfigValidationRequest",
        "file": "ciris_engine/schemas/api/config_security.py",
        "line": 232
      },
      {
        "class": "ConfigValidationResponse",
        "file": "ciris_engine/schemas/services/core/runtime.py",
        "line": 223
      },
      {
        "class": "MessageContext",
        "file": "ciris_engine/schemas/api/agent.py",
        "line": 11
      },
      {
        "class": "AgentLineage",
        "file": "ciris_engine/schemas/api/agent.py",
        "line": 20
      },
      {
        "class": "ServiceAvailability",
        "file": "ciris_engine/schemas/api/agent.py",
        "line": 30
      },
      {
        "class": "ActiveTask",
        "file": "ciris_engine/schemas/api/agent.py",
        "line": 40
      },
      {
        "class": "EmergencyShutdownCommand",
        "file": "ciris_engine/schemas/api/emergency.py",
        "line": 14
      },
      {
        "class": "EmergencyShutdownResponse",
        "file": "ciris_engine/schemas/api/emergency.py",
        "line": 43
      },
      {
        "class": "EmergencyStatus",
        "file": "ciris_engine/schemas/api/emergency.py",
        "line": 65
      },
      {
        "class": "EmergencySignatureResult",
        "file": "ciris_engine/schemas/api/emergency.py",
        "line": 74
      },
      {
        "class": "EmergencyAuditEntry",
        "file": "ciris_engine/schemas/api/emergency.py",
        "line": 82
      },
      {
        "class": "TrustedAuthority",
        "file": "ciris_engine/schemas/api/emergency.py",
        "line": 93
      },
      {
        "class": "MetricTags",
        "file": "ciris_engine/schemas/api/telemetry.py",
        "line": 11
      },
      {
        "class": "ServiceMetricValue",
        "file": "ciris_engine/schemas/api/telemetry.py",
        "line": 21
      },
      {
        "class": "APIResponseThoughtStep",
        "file": "ciris_engine/schemas/api/telemetry.py",
        "line": 29
      },
      {
        "class": "LogContext",
        "file": "ciris_engine/schemas/api/telemetry.py",
        "line": 44
      },
      {
        "class": "QueryFilter",
        "file": "ciris_engine/schemas/api/telemetry.py",
        "line": 55
      },
      {
        "class": "TelemetryQueryFilters",
        "file": "ciris_engine/schemas/api/telemetry.py",
        "line": 63
      },
      {
        "class": "QueryResult",
        "file": "ciris_engine/schemas/api/telemetry.py",
        "line": 73
      },
      {
        "class": "TimeSyncStatus",
        "file": "ciris_engine/schemas/api/telemetry.py",
        "line": 82
      },
      {
        "class": "ResponseMetadata",
        "file": "ciris_engine/schemas/api/responses.py",
        "line": 17
      },
      {
        "class": "SuccessResponse",
        "file": "ciris_engine/schemas/api/responses.py",
        "line": 29
      },
      {
        "class": "ErrorDetail",
        "file": "ciris_engine/schemas/api/responses.py",
        "line": 40
      },
      {
        "class": "ErrorResponse",
        "file": "ciris_engine/schemas/api/responses.py",
        "line": 48
      },
      {
        "class": "ErrorCode",
        "file": "ciris_engine/schemas/api/responses.py",
        "line": 60
      },
      {
        "class": "DeferralListResponse",
        "file": "ciris_engine/schemas/api/wa.py",
        "line": 17
      },
      {
        "class": "ResolveDeferralRequest",
        "file": "ciris_engine/schemas/api/wa.py",
        "line": 24
      },
      {
        "class": "ResolveDeferralResponse",
        "file": "ciris_engine/schemas/api/wa.py",
        "line": 31
      },
      {
        "class": "PermissionsListResponse",
        "file": "ciris_engine/schemas/api/wa.py",
        "line": 39
      },
      {
        "class": "WAStatusResponse",
        "file": "ciris_engine/schemas/api/wa.py",
        "line": 46
      },
      {
        "class": "UrgencyLevel",
        "file": "ciris_engine/schemas/api/wa.py",
        "line": 61
      },
      {
        "class": "WAGuidanceRequest",
        "file": "ciris_engine/schemas/api/wa.py",
        "line": 70
      },
      {
        "class": "WAGuidanceResponse",
        "file": "ciris_engine/schemas/api/wa.py",
        "line": 78
      },
      {
        "class": "UserRole",
        "file": "ciris_engine/schemas/api/auth.py",
        "line": 15
      },
      {
        "class": "Permission",
        "file": "ciris_engine/schemas/api/auth.py",
        "line": 40
      },
      {
        "class": "AuthContext",
        "file": "ciris_engine/schemas/api/auth.py",
        "line": 145
      },
      {
        "class": "APIKey",
        "file": "ciris_engine/schemas/api/auth.py",
        "line": 180
      },
      {
        "class": "LoginRequest",
        "file": "ciris_engine/schemas/api/auth.py",
        "line": 204
      },
      {
        "class": "LoginResponse",
        "file": "ciris_engine/schemas/api/auth.py",
        "line": 211
      },
      {
        "class": "TokenRefreshRequest",
        "file": "ciris_engine/schemas/api/auth.py",
        "line": 221
      },
      {
        "class": "UserInfo",
        "file": "ciris_engine/schemas/api/auth.py",
        "line": 227
      },
      {
        "class": "TokenResponse",
        "file": "ciris_engine/schemas/api/auth.py",
        "line": 238
      },
      {
        "class": "OAuth2StartRequest",
        "file": "ciris_engine/schemas/api/auth.py",
        "line": 247
      },
      {
        "class": "OAuth2CallbackResponse",
        "file": "ciris_engine/schemas/api/auth.py",
        "line": 253
      },
      {
        "class": "APIKeyCreateRequest",
        "file": "ciris_engine/schemas/api/auth.py",
        "line": 266
      },
      {
        "class": "APIKeyResponse",
        "file": "ciris_engine/schemas/api/auth.py",
        "line": 274
      },
      {
        "class": "APIKeyListResponse",
        "file": "ciris_engine/schemas/api/auth.py",
        "line": 298
      },
      {
        "class": "PermissionRequestResponse",
        "file": "ciris_engine/schemas/api/auth.py",
        "line": 305
      },
      {
        "class": "PermissionRequestUser",
        "file": "ciris_engine/schemas/api/auth.py",
        "line": 316
      },
      {
        "class": "HashChainAuditEntry",
        "file": "ciris_engine/schemas/audit/hash_chain.py",
        "line": 12
      },
      {
        "class": "HashChainVerificationResult",
        "file": "ciris_engine/schemas/audit/hash_chain.py",
        "line": 26
      },
      {
        "class": "ChainSummary",
        "file": "ciris_engine/schemas/audit/verification.py",
        "line": 72
      },
      {
        "class": "AuditEventType",
        "file": "ciris_engine/schemas/audit/core.py",
        "line": 14
      },
      {
        "class": "EventOutcome",
        "file": "ciris_engine/schemas/audit/core.py",
        "line": 37
      },
      {
        "class": "EventPayload",
        "file": "ciris_engine/schemas/audit/core.py",
        "line": 46
      },
      {
        "class": "AuditEvent",
        "file": "ciris_engine/schemas/audit/core.py",
        "line": 62
      },
      {
        "class": "AuditLogEntry",
        "file": "ciris_engine/schemas/audit/core.py",
        "line": 76
      },
      {
        "class": "AuditSummary",
        "file": "ciris_engine/schemas/services/graph/consolidation.py",
        "line": 257
      },
      {
        "class": "AuditQuery",
        "file": "ciris_engine/schemas/services/graph/audit.py",
        "line": 77
      },
      {
        "class": "ChainVerificationResult",
        "file": "ciris_engine/schemas/audit/verification.py",
        "line": 13
      },
      {
        "class": "SignatureVerificationResult",
        "file": "ciris_engine/schemas/audit/verification.py",
        "line": 22
      },
      {
        "class": "CompleteVerificationResult",
        "file": "ciris_engine/schemas/audit/verification.py",
        "line": 32
      },
      {
        "class": "EntryVerificationResult",
        "file": "ciris_engine/schemas/audit/verification.py",
        "line": 47
      },
      {
        "class": "RangeVerificationResult",
        "file": "ciris_engine/schemas/audit/verification.py",
        "line": 59
      },
      {
        "class": "VerificationReport",
        "file": "ciris_engine/schemas/services/graph/audit.py",
        "line": 34
      },
      {
        "class": "RootAnchorVerificationResult",
        "file": "ciris_engine/schemas/audit/verification.py",
        "line": 98
      },
      {
        "class": "DatabaseConfig",
        "file": "ciris_engine/schemas/config/essential.py",
        "line": 14
      },
      {
        "class": "ServiceEndpointsConfig",
        "file": "ciris_engine/schemas/config/essential.py",
        "line": 24
      },
      {
        "class": "SecurityConfig",
        "file": "ciris_engine/schemas/config/essential.py",
        "line": 35
      },
      {
        "class": "OperationalLimitsConfig",
        "file": "ciris_engine/schemas/config/essential.py",
        "line": 50
      },
      {
        "class": "TelemetryConfig",
        "file": "ciris_engine/schemas/config/essential.py",
        "line": 64
      },
      {
        "class": "WorkflowConfig",
        "file": "ciris_engine/schemas/config/essential.py",
        "line": 74
      },
      {
        "class": "GraphConfig",
        "file": "ciris_engine/schemas/config/essential.py",
        "line": 84
      },
      {
        "class": "EssentialConfig",
        "file": "ciris_engine/schemas/config/essential.py",
        "line": 102
      },
      {
        "class": "CIRISNodeConfig",
        "file": "ciris_engine/schemas/config/essential.py",
        "line": 127
      },
      {
        "class": "StewardshipCalculation",
        "file": "ciris_engine/schemas/config/agent.py",
        "line": 12
      },
      {
        "class": "CreatorLedgerEntry",
        "file": "ciris_engine/schemas/config/agent.py",
        "line": 21
      },
      {
        "class": "CreatorIntentStatement",
        "file": "ciris_engine/schemas/config/agent.py",
        "line": 33
      },
      {
        "class": "Stewardship",
        "file": "ciris_engine/schemas/config/agent.py",
        "line": 42
      },
      {
        "class": "AgentTemplate",
        "file": "ciris_engine/schemas/config/agent.py",
        "line": 50
      },
      {
        "class": "DSDMAConfiguration",
        "file": "ciris_engine/schemas/config/agent.py",
        "line": 150
      },
      {
        "class": "CSDMAOverrides",
        "file": "ciris_engine/schemas/config/agent.py",
        "line": 160
      },
      {
        "class": "ActionSelectionOverrides",
        "file": "ciris_engine/schemas/config/agent.py",
        "line": 168
      },
      {
        "class": "DiscordAdapterOverrides",
        "file": "ciris_engine/schemas/config/agent.py",
        "line": 177
      },
      {
        "class": "APIAdapterOverrides",
        "file": "ciris_engine/schemas/config/agent.py",
        "line": 189
      },
      {
        "class": "CLIAdapterOverrides",
        "file": "ciris_engine/schemas/config/agent.py",
        "line": 199
      },
      {
        "class": "DMAInputData",
        "file": "ciris_engine/schemas/dma/core.py",
        "line": 20
      },
      {
        "class": "DMAContext",
        "file": "ciris_engine/schemas/dma/core.py",
        "line": 105
      },
      {
        "class": "DMADecision",
        "file": "ciris_engine/schemas/dma/core.py",
        "line": 130
      },
      {
        "class": "PrincipleEvaluation",
        "file": "ciris_engine/schemas/dma/core.py",
        "line": 145
      },
      {
        "class": "CommonSenseEvaluation",
        "file": "ciris_engine/schemas/dma/core.py",
        "line": 160
      },
      {
        "class": "DomainEvaluation",
        "file": "ciris_engine/schemas/dma/core.py",
        "line": 174
      },
      {
        "class": "RecursiveReasoning",
        "file": "ciris_engine/schemas/dma/core.py",
        "line": 190
      },
      {
        "class": "PromptTemplate",
        "file": "ciris_engine/schemas/dma/prompts.py",
        "line": 12
      },
      {
        "class": "PromptCollection",
        "file": "ciris_engine/schemas/dma/prompts.py",
        "line": 35
      },
      {
        "class": "PromptVariable",
        "file": "ciris_engine/schemas/dma/prompts.py",
        "line": 123
      },
      {
        "class": "PromptMetadata",
        "file": "ciris_engine/schemas/dma/prompts.py",
        "line": 142
      },
      {
        "class": "PDMADecision",
        "file": "ciris_engine/schemas/dma/decisions.py",
        "line": 12
      },
      {
        "class": "CSDMADecision",
        "file": "ciris_engine/schemas/dma/decisions.py",
        "line": 23
      },
      {
        "class": "DSDMADecision",
        "file": "ciris_engine/schemas/dma/decisions.py",
        "line": 34
      },
      {
        "class": "ActionSelectionDecision",
        "file": "ciris_engine/schemas/dma/decisions.py",
        "line": 45
      },
      {
        "class": "EthicalDMAResult",
        "file": "ciris_engine/schemas/dma/results.py",
        "line": 26
      },
      {
        "class": "CSDMAResult",
        "file": "ciris_engine/schemas/dma/results.py",
        "line": 40
      },
      {
        "class": "DSDMAResult",
        "file": "ciris_engine/schemas/dma/results.py",
        "line": 50
      },
      {
        "class": "ActionSelectionDMAResult",
        "file": "ciris_engine/schemas/dma/results.py",
        "line": 61
      },
      {
        "class": "FacultyContext",
        "file": "ciris_engine/schemas/dma/faculty.py",
        "line": 12
      },
      {
        "class": "FacultyResult",
        "file": "ciris_engine/schemas/dma/faculty.py",
        "line": 37
      },
      {
        "class": "FacultyEvaluationSet",
        "file": "ciris_engine/schemas/dma/faculty.py",
        "line": 60
      },
      {
        "class": "ConscienceFailureContext",
        "file": "ciris_engine/schemas/dma/faculty.py",
        "line": 130
      },
      {
        "class": "EnhancedDMAInputs",
        "file": "ciris_engine/schemas/dma/faculty.py",
        "line": 153
      },
      {
        "class": "SecretType",
        "file": "ciris_engine/schemas/secrets/core.py",
        "line": 17
      },
      {
        "class": "SecretRecord",
        "file": "ciris_engine/schemas/secrets/core.py",
        "line": 34
      },
      {
        "class": "SecretReference",
        "file": "ciris_engine/schemas/secrets/core.py",
        "line": 59
      },
      {
        "class": "SecretAccessLog",
        "file": "ciris_engine/schemas/services/core/secrets.py",
        "line": 34
      },
      {
        "class": "DetectedSecret",
        "file": "ciris_engine/schemas/secrets/core.py",
        "line": 92
      },
      {
        "class": "SecretsFilterResult",
        "file": "ciris_engine/schemas/secrets/core.py",
        "line": 106
      },
      {
        "class": "RecallSecretParams",
        "file": "ciris_engine/schemas/secrets/core.py",
        "line": 117
      },
      {
        "class": "SecretPattern",
        "file": "ciris_engine/schemas/secrets/core.py",
        "line": 127
      },
      {
        "class": "SecretsDetectionConfig",
        "file": "ciris_engine/schemas/secrets/core.py",
        "line": 166
      },
      {
        "class": "UpdateSecretsFilterParams",
        "file": "ciris_engine/schemas/secrets/core.py",
        "line": 175
      },
      {
        "class": "SecretStorageConfig",
        "file": "ciris_engine/schemas/secrets/core.py",
        "line": 189
      },
      {
        "class": "SecretMetrics",
        "file": "ciris_engine/schemas/secrets/core.py",
        "line": 201
      },
      {
        "class": "PatternStats",
        "file": "ciris_engine/schemas/secrets/core.py",
        "line": 213
      },
      {
        "class": "ConfigExport",
        "file": "ciris_engine/schemas/secrets/core.py",
        "line": 226
      },
      {
        "class": "FilterConfigUpdate",
        "file": "ciris_engine/schemas/secrets/core.py",
        "line": 241
      },
      {
        "class": "SecretRecallResult",
        "file": "ciris_engine/schemas/secrets/service.py",
        "line": 14
      },
      {
        "class": "DecapsulationContext",
        "file": "ciris_engine/schemas/secrets/service.py",
        "line": 24
      },
      {
        "class": "PatternConfig",
        "file": "ciris_engine/schemas/secrets/service.py",
        "line": 34
      },
      {
        "class": "SensitivityConfig",
        "file": "ciris_engine/schemas/secrets/service.py",
        "line": 45
      },
      {
        "class": "FilterStats",
        "file": "ciris_engine/schemas/services/filters_core.py",
        "line": 217
      },
      {
        "class": "FilterUpdateRequest",
        "file": "ciris_engine/schemas/secrets/service.py",
        "line": 64
      },
      {
        "class": "FilterUpdateResult",
        "file": "ciris_engine/schemas/secrets/service.py",
        "line": 73
      },
      {
        "class": "ProviderInfo",
        "file": "ciris_engine/schemas/registries/base.py",
        "line": 21
      },
      {
        "class": "ServiceTypeInfo",
        "file": "ciris_engine/schemas/registries/base.py",
        "line": 33
      },
      {
        "class": "HandlerInfo",
        "file": "ciris_engine/schemas/registries/base.py",
        "line": 39
      },
      {
        "class": "CircuitBreakerStats",
        "file": "ciris_engine/schemas/services/llm.py",
        "line": 24
      },
      {
        "class": "RegistryInfo",
        "file": "ciris_engine/schemas/registries/base.py",
        "line": 55
      },
      {
        "class": "ObserveParams",
        "file": "ciris_engine/schemas/actions/parameters.py",
        "line": 16
      },
      {
        "class": "SpeakParams",
        "file": "ciris_engine/schemas/actions/parameters.py",
        "line": 27
      },
      {
        "class": "ToolParams",
        "file": "ciris_engine/schemas/actions/parameters.py",
        "line": 37
      },
      {
        "class": "PonderParams",
        "file": "ciris_engine/schemas/actions/parameters.py",
        "line": 47
      },
      {
        "class": "RejectParams",
        "file": "ciris_engine/schemas/actions/parameters.py",
        "line": 56
      },
      {
        "class": "DeferParams",
        "file": "ciris_engine/schemas/actions/parameters.py",
        "line": 71
      },
      {
        "class": "MemorizeParams",
        "file": "ciris_engine/schemas/actions/parameters.py",
        "line": 84
      },
      {
        "class": "RecallParams",
        "file": "ciris_engine/schemas/actions/parameters.py",
        "line": 97
      },
      {
        "class": "ForgetParams",
        "file": "ciris_engine/schemas/actions/parameters.py",
        "line": 110
      },
      {
        "class": "TaskCompleteParams",
        "file": "ciris_engine/schemas/actions/parameters.py",
        "line": 125
      },
      {
        "class": "TypedGraphNode",
        "file": "ciris_engine/schemas/services/graph_typed_nodes.py",
        "line": 22
      },
      {
        "class": "NodeTypeRegistry",
        "file": "ciris_engine/schemas/services/graph_typed_nodes.py",
        "line": 94
      },
      {
        "class": "ResourceAction",
        "file": "ciris_engine/schemas/services/resources_core.py",
        "line": 14
      },
      {
        "class": "ResourceLimit",
        "file": "ciris_engine/schemas/services/resources_core.py",
        "line": 25
      },
      {
        "class": "ResourceBudget",
        "file": "ciris_engine/schemas/services/resources_core.py",
        "line": 61
      },
      {
        "class": "ResourceSnapshot",
        "file": "ciris_engine/schemas/services/resources_core.py",
        "line": 74
      },
      {
        "class": "ResourceCost",
        "file": "ciris_engine/schemas/services/resources_core.py",
        "line": 94
      },
      {
        "class": "ResourceAlert",
        "file": "ciris_engine/schemas/services/resources_core.py",
        "line": 157
      },
      {
        "class": "AuditEntryContext",
        "file": "ciris_engine/schemas/services/nodes.py",
        "line": 21
      },
      {
        "class": "AuditEntry",
        "file": "ciris_engine/schemas/services/nodes.py",
        "line": 32
      },
      {
        "class": "ConfigValue",
        "file": "ciris_engine/schemas/services/nodes.py",
        "line": 131
      },
      {
        "class": "ConfigNode",
        "file": "ciris_engine/schemas/services/nodes.py",
        "line": 172
      },
      {
        "class": "IdentitySnapshot",
        "file": "ciris_engine/schemas/services/nodes.py",
        "line": 248
      },
      {
        "class": "TSDBSummary",
        "file": "ciris_engine/schemas/services/nodes.py",
        "line": 379
      },
      {
        "class": "IdentityNode",
        "file": "ciris_engine/schemas/services/nodes.py",
        "line": 485
      },
      {
        "class": "VisibilitySnapshot",
        "file": "ciris_engine/schemas/services/visibility.py",
        "line": 17
      },
      {
        "class": "ThoughtStep",
        "file": "ciris_engine/schemas/services/visibility.py",
        "line": 37
      },
      {
        "class": "ReasoningTrace",
        "file": "ciris_engine/schemas/services/visibility.py",
        "line": 46
      },
      {
        "class": "DecisionRecord",
        "file": "ciris_engine/schemas/services/visibility.py",
        "line": 62
      },
      {
        "class": "TaskDecisionHistory",
        "file": "ciris_engine/schemas/services/visibility.py",
        "line": 81
      },
      {
        "class": "SchemaVersion",
        "file": "ciris_engine/schemas/services/community_core.py",
        "line": 13
      },
      {
        "class": "CommunityHealth",
        "file": "ciris_engine/schemas/services/community_core.py",
        "line": 19
      },
      {
        "class": "CommunityValue",
        "file": "ciris_engine/schemas/services/community_core.py",
        "line": 30
      },
      {
        "class": "MinimalCommunityContext",
        "file": "ciris_engine/schemas/services/community_core.py",
        "line": 39
      },
      {
        "class": "CommunityMember",
        "file": "ciris_engine/schemas/services/community_core.py",
        "line": 52
      },
      {
        "class": "CommunityEvent",
        "file": "ciris_engine/schemas/services/community_core.py",
        "line": 63
      },
      {
        "class": "CommunitySnapshot",
        "file": "ciris_engine/schemas/services/community_core.py",
        "line": 75
      },
      {
        "class": "FeedbackType",
        "file": "ciris_engine/schemas/services/feedback_core.py",
        "line": 14
      },
      {
        "class": "FeedbackSource",
        "file": "ciris_engine/schemas/services/feedback_core.py",
        "line": 25
      },
      {
        "class": "FeedbackDirective",
        "file": "ciris_engine/schemas/services/feedback_core.py",
        "line": 34
      },
      {
        "class": "WiseAuthorityFeedback",
        "file": "ciris_engine/schemas/services/feedback_core.py",
        "line": 45
      },
      {
        "class": "FeedbackMapping",
        "file": "ciris_engine/schemas/services/feedback_core.py",
        "line": 81
      },
      {
        "class": "FeedbackProcessingRequest",
        "file": "ciris_engine/schemas/services/feedback_core.py",
        "line": 101
      },
      {
        "class": "FeedbackProcessingResult",
        "file": "ciris_engine/schemas/services/feedback_core.py",
        "line": 111
      },
      {
        "class": "TraceSummaryNode",
        "file": "ciris_engine/schemas/services/trace_summary_node.py",
        "line": 18
      },
      {
        "class": "InitializationPhase",
        "file": "ciris_engine/schemas/services/operations.py",
        "line": 16
      },
      {
        "class": "InitializationStatus",
        "file": "ciris_engine/schemas/services/lifecycle/initialization.py",
        "line": 9
      },
      {
        "class": "MemoryOpStatus",
        "file": "ciris_engine/schemas/services/operations.py",
        "line": 39
      },
      {
        "class": "MemoryOpAction",
        "file": "ciris_engine/schemas/services/operations.py",
        "line": 51
      },
      {
        "class": "MemoryOpResult",
        "file": "ciris_engine/schemas/services/operations.py",
        "line": 59
      },
      {
        "class": "MemoryQuery",
        "file": "ciris_engine/schemas/services/operations.py",
        "line": 70
      },
      {
        "class": "MemoryRecallResult",
        "file": "ciris_engine/schemas/services/operations.py",
        "line": 82
      },
      {
        "class": "AuditSummaryNode",
        "file": "ciris_engine/schemas/services/audit_summary_node.py",
        "line": 20
      },
      {
        "class": "WARole",
        "file": "ciris_engine/schemas/services/authority_core.py",
        "line": 14
      },
      {
        "class": "TokenType",
        "file": "ciris_engine/schemas/services/authority_core.py",
        "line": 22
      },
      {
        "class": "JWTSubType",
        "file": "ciris_engine/schemas/services/authority_core.py",
        "line": 30
      },
      {
        "class": "WACertificate",
        "file": "ciris_engine/schemas/services/authority_core.py",
        "line": 39
      },
      {
        "class": "ChannelIdentity",
        "file": "ciris_engine/schemas/services/authority_core.py",
        "line": 134
      },
      {
        "class": "AuthorizationContext",
        "file": "ciris_engine/schemas/services/authority_core.py",
        "line": 146
      },
      {
        "class": "WACertificateRequest",
        "file": "ciris_engine/schemas/services/authority_core.py",
        "line": 161
      },
      {
        "class": "WAToken",
        "file": "ciris_engine/schemas/services/authority_core.py",
        "line": 179
      },
      {
        "class": "WAAuthRequest",
        "file": "ciris_engine/schemas/services/authority_core.py",
        "line": 191
      },
      {
        "class": "WAAuthResponse",
        "file": "ciris_engine/schemas/services/authority_core.py",
        "line": 204
      },
      {
        "class": "WARoleMintRequest",
        "file": "ciris_engine/schemas/services/authority_core.py",
        "line": 215
      },
      {
        "class": "DeferralRequest",
        "file": "ciris_engine/schemas/services/authority_core.py",
        "line": 228
      },
      {
        "class": "DeferralResponse",
        "file": "ciris_engine/schemas/services/authority_core.py",
        "line": 240
      },
      {
        "class": "GuidanceRequest",
        "file": "ciris_engine/schemas/services/authority_core.py",
        "line": 252
      },
      {
        "class": "WisdomAdvice",
        "file": "ciris_engine/schemas/services/authority_core.py",
        "line": 272
      },
      {
        "class": "GuidanceResponse",
        "file": "ciris_engine/schemas/services/authority_core.py",
        "line": 293
      },
      {
        "class": "DeferralApprovalContext",
        "file": "ciris_engine/schemas/services/authority_core.py",
        "line": 308
      },
      {
        "class": "WAPermission",
        "file": "ciris_engine/schemas/services/authority_core.py",
        "line": 322
      },
      {
        "class": "CorrelationNode",
        "file": "ciris_engine/schemas/services/correlation_node.py",
        "line": 28
      },
      {
        "class": "FilterPriority",
        "file": "ciris_engine/schemas/services/filters_core.py",
        "line": 15
      },
      {
        "class": "TriggerType",
        "file": "ciris_engine/schemas/services/filters_core.py",
        "line": 25
      },
      {
        "class": "FilterTrigger",
        "file": "ciris_engine/schemas/services/filters_core.py",
        "line": 36
      },
      {
        "class": "UserTrustProfile",
        "file": "ciris_engine/schemas/services/filters_core.py",
        "line": 62
      },
      {
        "class": "ConversationHealth",
        "file": "ciris_engine/schemas/services/filters_core.py",
        "line": 102
      },
      {
        "class": "ContextHint",
        "file": "ciris_engine/schemas/services/filters_core.py",
        "line": 123
      },
      {
        "class": "FilterResult",
        "file": "ciris_engine/schemas/services/filters_core.py",
        "line": 132
      },
      {
        "class": "ChannelConfig",
        "file": "ciris_engine/schemas/services/filters_core.py",
        "line": 148
      },
      {
        "class": "AdaptiveFilterConfig",
        "file": "ciris_engine/schemas/services/filters_core.py",
        "line": 159
      },
      {
        "class": "PriorityStats",
        "file": "ciris_engine/schemas/services/filters_core.py",
        "line": 197
      },
      {
        "class": "TriggerStats",
        "file": "ciris_engine/schemas/services/filters_core.py",
        "line": 207
      },
      {
        "class": "FilterHealth",
        "file": "ciris_engine/schemas/services/filters_core.py",
        "line": 233
      },
      {
        "class": "FilterServiceMetadata",
        "file": "ciris_engine/schemas/services/filters_core.py",
        "line": 246
      },
      {
        "class": "DiscordDeferralNode",
        "file": "ciris_engine/schemas/services/discord_nodes.py",
        "line": 13
      },
      {
        "class": "DiscordApprovalNode",
        "file": "ciris_engine/schemas/services/discord_nodes.py",
        "line": 109
      },
      {
        "class": "DiscordWANode",
        "file": "ciris_engine/schemas/services/discord_nodes.py",
        "line": 211
      },
      {
        "class": "GuidanceContext",
        "file": "ciris_engine/schemas/services/context.py",
        "line": 13
      },
      {
        "class": "DeferralContext",
        "file": "ciris_engine/schemas/services/context.py",
        "line": 25
      },
      {
        "class": "ApprovalContext",
        "file": "ciris_engine/schemas/services/context.py",
        "line": 38
      },
      {
        "class": "WADecision",
        "file": "ciris_engine/schemas/services/context.py",
        "line": 57
      },
      {
        "class": "WAInteractionLog",
        "file": "ciris_engine/schemas/services/context.py",
        "line": 83
      },
      {
        "class": "TokenUsageStats",
        "file": "ciris_engine/schemas/services/llm.py",
        "line": 13
      },
      {
        "class": "LLMHealthResponse",
        "file": "ciris_engine/schemas/services/llm.py",
        "line": 36
      },
      {
        "class": "LLMResponse",
        "file": "ciris_engine/schemas/services/requests.py",
        "line": 100
      },
      {
        "class": "JSONExtractionResult",
        "file": "ciris_engine/schemas/services/llm.py",
        "line": 58
      },
      {
        "class": "LLMCallMetadata",
        "file": "ciris_engine/schemas/services/llm.py",
        "line": 67
      },
      {
        "class": "LLMMessage",
        "file": "ciris_engine/schemas/services/llm.py",
        "line": 80
      },
      {
        "class": "LLMCallParams",
        "file": "ciris_engine/schemas/services/llm.py",
        "line": 88
      },
      {
        "class": "CachedLLMResponse",
        "file": "ciris_engine/schemas/services/llm.py",
        "line": 98
      },
      {
        "class": "DeferralType",
        "file": "ciris_engine/schemas/services/governance.py",
        "line": 10
      },
      {
        "class": "GraphScope",
        "file": "ciris_engine/schemas/services/graph_core.py",
        "line": 17
      },
      {
        "class": "NodeType",
        "file": "ciris_engine/schemas/services/graph_core.py",
        "line": 26
      },
      {
        "class": "ConfigNodeType",
        "file": "ciris_engine/schemas/services/graph_core.py",
        "line": 52
      },
      {
        "class": "GraphNodeAttributes",
        "file": "ciris_engine/schemas/services/graph_core.py",
        "line": 85
      },
      {
        "class": "GraphNode",
        "file": "ciris_engine/schemas/services/graph_core.py",
        "line": 96
      },
      {
        "class": "GraphEdgeAttributes",
        "file": "ciris_engine/schemas/services/graph_core.py",
        "line": 117
      },
      {
        "class": "GraphEdge",
        "file": "ciris_engine/schemas/services/graph_core.py",
        "line": 126
      },
      {
        "class": "ConversationSummaryNode",
        "file": "ciris_engine/schemas/services/conversation_summary_node.py",
        "line": 17
      },
      {
        "class": "LLMCapabilities",
        "file": "ciris_engine/schemas/services/capabilities.py",
        "line": 11
      },
      {
        "class": "AuditCapabilities",
        "file": "ciris_engine/schemas/services/capabilities.py",
        "line": 17
      },
      {
        "class": "CommunicationCapabilities",
        "file": "ciris_engine/schemas/services/capabilities.py",
        "line": 24
      },
      {
        "class": "WiseAuthorityCapabilities",
        "file": "ciris_engine/schemas/services/capabilities.py",
        "line": 31
      },
      {
        "class": "MemoryCapabilities",
        "file": "ciris_engine/schemas/services/capabilities.py",
        "line": 38
      },
      {
        "class": "ToolCapabilities",
        "file": "ciris_engine/schemas/services/capabilities.py",
        "line": 46
      },
      {
        "class": "TelemetryCapabilities",
        "file": "ciris_engine/schemas/services/capabilities.py",
        "line": 54
      },
      {
        "class": "ServiceRequest",
        "file": "ciris_engine/schemas/services/requests.py",
        "line": 19
      },
      {
        "class": "ServiceResponse",
        "file": "ciris_engine/schemas/services/requests.py",
        "line": 28
      },
      {
        "class": "MemorizeRequest",
        "file": "ciris_engine/schemas/services/requests.py",
        "line": 42
      },
      {
        "class": "MemorizeResponse",
        "file": "ciris_engine/schemas/services/requests.py",
        "line": 48
      },
      {
        "class": "RecallRequest",
        "file": "ciris_engine/schemas/services/requests.py",
        "line": 55
      },
      {
        "class": "RecallResponse",
        "file": "ciris_engine/schemas/services/requests.py",
        "line": 61
      },
      {
        "class": "ToolExecutionRequest",
        "file": "ciris_engine/schemas/services/requests.py",
        "line": 71
      },
      {
        "class": "ToolExecutionResponse",
        "file": "ciris_engine/schemas/services/requests.py",
        "line": 79
      },
      {
        "class": "LLMRequest",
        "file": "ciris_engine/schemas/services/requests.py",
        "line": 90
      },
      {
        "class": "AuditResponse",
        "file": "ciris_engine/schemas/services/requests.py",
        "line": 119
      },
      {
        "class": "StepPoint",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 19
      },
      {
        "class": "StepDuration",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 40
      },
      {
        "class": "CircuitBreakerState",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 58
      },
      {
        "class": "ConfigValueMap",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 79
      },
      {
        "class": "ServiceProviderUpdate",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 109
      },
      {
        "class": "ServiceProviderInfo",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 143
      },
      {
        "class": "ServiceRegistryInfoResponse",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 157
      },
      {
        "class": "WAPublicKeyMap",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 175
      },
      {
        "class": "ConfigBackupData",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 203
      },
      {
        "class": "QueuedThought",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 253
      },
      {
        "class": "QueuedTask",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 265
      },
      {
        "class": "ThoughtInPipeline",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 276
      },
      {
        "class": "PipelineState",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 302
      },
      {
        "class": "ThoughtProcessingResult",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 350
      },
      {
        "class": "StepResultFinalizeTasksQueue",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 378
      },
      {
        "class": "StepResultPopulateThoughtQueue",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 408
      },
      {
        "class": "StepResultPopulateRound",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 436
      },
      {
        "class": "StepResultBuildContext",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 462
      },
      {
        "class": "StepResultPerformDMAs",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 488
      },
      {
        "class": "StepResultPerformASPDMA",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 514
      },
      {
        "class": "StepResultConscienceExecution",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 537
      },
      {
        "class": "StepResultRecursiveASPDMA",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 562
      },
      {
        "class": "StepResultRecursiveConscience",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 588
      },
      {
        "class": "StepResultActionSelection",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 612
      },
      {
        "class": "StepResultHandlerStart",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 634
      },
      {
        "class": "StepResultBusOutbound",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 656
      },
      {
        "class": "StepResultPackageHandling",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 679
      },
      {
        "class": "StepResultBusInbound",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 702
      },
      {
        "class": "StepResultHandlerComplete",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 725
      },
      {
        "class": "StepResultRoundStart",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 776
      },
      {
        "class": "DMAExecutionContext",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 820
      },
      {
        "class": "LLMPromptData",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 839
      },
      {
        "class": "StepResultPostConsciencePreHandler",
        "file": "ciris_engine/schemas/services/runtime_control.py",
        "line": 859
      },
      {
        "class": "EmergencyCommandType",
        "file": "ciris_engine/schemas/services/shutdown.py",
        "line": 14
      },
      {
        "class": "WASignedCommand",
        "file": "ciris_engine/schemas/services/shutdown.py",
        "line": 22
      },
      {
        "class": "EmergencyShutdownStatus",
        "file": "ciris_engine/schemas/services/shutdown.py",
        "line": 49
      },
      {
        "class": "KillSwitchConfig",
        "file": "ciris_engine/schemas/services/shutdown.py",
        "line": 67
      },
      {
        "class": "CorrelationRequestData",
        "file": "ciris_engine/schemas/persistence/correlations.py",
        "line": 14
      },
      {
        "class": "CorrelationResponseData",
        "file": "ciris_engine/schemas/persistence/correlations.py",
        "line": 26
      },
      {
        "class": "ConversationSummaryData",
        "file": "ciris_engine/schemas/persistence/correlations.py",
        "line": 54
      },
      {
        "class": "DeferralPackage",
        "file": "ciris_engine/schemas/handlers/core.py",
        "line": 72
      },
      {
        "class": "DeferralReportContext",
        "file": "ciris_engine/schemas/persistence/core.py",
        "line": 26
      },
      {
        "class": "CorrelationUpdateRequest",
        "file": "ciris_engine/schemas/persistence/core.py",
        "line": 36
      },
      {
        "class": "MetricsQuery",
        "file": "ciris_engine/schemas/persistence/core.py",
        "line": 48
      },
      {
        "class": "IdentityContext",
        "file": "ciris_engine/schemas/persistence/core.py",
        "line": 61
      },
      {
        "class": "TaskSummaryInfo",
        "file": "ciris_engine/schemas/persistence/core.py",
        "line": 94
      },
      {
        "class": "QueryTimeRange",
        "file": "ciris_engine/schemas/persistence/core.py",
        "line": 107
      },
      {
        "class": "PersistenceHealth",
        "file": "ciris_engine/schemas/persistence/core.py",
        "line": 116
      },
      {
        "class": "DeferralReason",
        "file": "ciris_engine/schemas/handlers/core.py",
        "line": 14
      },
      {
        "class": "EthicalAssessment",
        "file": "ciris_engine/schemas/handlers/core.py",
        "line": 28
      },
      {
        "class": "CSDMAAssessment",
        "file": "ciris_engine/schemas/handlers/core.py",
        "line": 39
      },
      {
        "class": "DSDMAAssessment",
        "file": "ciris_engine/schemas/handlers/core.py",
        "line": 50
      },
      {
        "class": "ActionHistoryItem",
        "file": "ciris_engine/schemas/handlers/core.py",
        "line": 61
      },
      {
        "class": "TransportData",
        "file": "ciris_engine/schemas/handlers/core.py",
        "line": 105
      },
      {
        "class": "DeferralReport",
        "file": "ciris_engine/schemas/handlers/core.py",
        "line": 117
      },
      {
        "class": "DeferralResolution",
        "file": "ciris_engine/schemas/services/authority/wise_authority.py",
        "line": 90
      },
      {
        "class": "BaseActionContext",
        "file": "ciris_engine/schemas/handlers/contexts.py",
        "line": 14
      },
      {
        "class": "SpeakContext",
        "file": "ciris_engine/schemas/handlers/contexts.py",
        "line": 26
      },
      {
        "class": "ToolContext",
        "file": "ciris_engine/schemas/handlers/contexts.py",
        "line": 33
      },
      {
        "class": "ObserveContext",
        "file": "ciris_engine/schemas/handlers/contexts.py",
        "line": 41
      },
      {
        "class": "MemorizeContext",
        "file": "ciris_engine/schemas/handlers/contexts.py",
        "line": 48
      },
      {
        "class": "RecallContext",
        "file": "ciris_engine/schemas/handlers/contexts.py",
        "line": 56
      },
      {
        "class": "ForgetContext",
        "file": "ciris_engine/schemas/handlers/contexts.py",
        "line": 64
      },
      {
        "class": "RejectContext",
        "file": "ciris_engine/schemas/handlers/contexts.py",
        "line": 72
      },
      {
        "class": "PonderContext",
        "file": "ciris_engine/schemas/handlers/contexts.py",
        "line": 81
      },
      {
        "class": "DeferContext",
        "file": "ciris_engine/schemas/handlers/contexts.py",
        "line": 88
      },
      {
        "class": "TaskCompleteContext",
        "file": "ciris_engine/schemas/handlers/contexts.py",
        "line": 96
      },
      {
        "class": "ConnectedNodeInfo",
        "file": "ciris_engine/schemas/handlers/memory_schemas.py",
        "line": 12
      },
      {
        "class": "RecalledNodeInfo",
        "file": "ciris_engine/schemas/handlers/memory_schemas.py",
        "line": 24
      },
      {
        "class": "RecallResult",
        "file": "ciris_engine/schemas/handlers/memory_schemas.py",
        "line": 35
      },
      {
        "class": "HandlerData",
        "file": "ciris_engine/schemas/handlers/context.py",
        "line": 13
      },
      {
        "class": "SpeakHandlerData",
        "file": "ciris_engine/schemas/handlers/context.py",
        "line": 19
      },
      {
        "class": "ToolHandlerData",
        "file": "ciris_engine/schemas/handlers/context.py",
        "line": 27
      },
      {
        "class": "MemoryHandlerData",
        "file": "ciris_engine/schemas/handlers/context.py",
        "line": 35
      },
      {
        "class": "HandlerRequest",
        "file": "ciris_engine/schemas/handlers/context.py",
        "line": 43
      },
      {
        "class": "ActionContextParams",
        "file": "ciris_engine/schemas/handlers/context.py",
        "line": 59
      },
      {
        "class": "SpeakActionParams",
        "file": "ciris_engine/schemas/handlers/context.py",
        "line": 65
      },
      {
        "class": "ToolActionParams",
        "file": "ciris_engine/schemas/handlers/context.py",
        "line": 73
      },
      {
        "class": "MemoryActionParams",
        "file": "ciris_engine/schemas/handlers/context.py",
        "line": 80
      },
      {
        "class": "ActionContext",
        "file": "ciris_engine/schemas/handlers/context.py",
        "line": 89
      },
      {
        "class": "HandlerContext",
        "file": "ciris_engine/schemas/handlers/schemas.py",
        "line": 64
      },
      {
        "class": "HandlerResult",
        "file": "ciris_engine/schemas/handlers/schemas.py",
        "line": 75
      },
      {
        "class": "HandlerDecapsulatedParams",
        "file": "ciris_engine/schemas/handlers/schemas.py",
        "line": 86
      },
      {
        "class": "ConsentStream",
        "file": "ciris_engine/schemas/consent/core.py",
        "line": 15
      },
      {
        "class": "ConsentCategory",
        "file": "ciris_engine/schemas/consent/core.py",
        "line": 29
      },
      {
        "class": "ConsentStatus",
        "file": "ciris_engine/schemas/consent/core.py",
        "line": 39
      },
      {
        "class": "ConsentRequest",
        "file": "ciris_engine/schemas/consent/core.py",
        "line": 55
      },
      {
        "class": "ConsentAuditEntry",
        "file": "ciris_engine/schemas/consent/core.py",
        "line": 64
      },
      {
        "class": "ConsentDecayStatus",
        "file": "ciris_engine/schemas/consent/core.py",
        "line": 78
      },
      {
        "class": "ConsentImpactReport",
        "file": "ciris_engine/schemas/consent/core.py",
        "line": 89
      },
      {
        "class": "ProcessSnapshotResult",
        "file": "ciris_engine/schemas/services/special/self_observation.py",
        "line": 26
      },
      {
        "class": "ObservationCycleResult",
        "file": "ciris_engine/schemas/services/special/self_observation.py",
        "line": 37
      },
      {
        "class": "CycleEventData",
        "file": "ciris_engine/schemas/services/special/self_observation.py",
        "line": 68
      },
      {
        "class": "ObservationStatus",
        "file": "ciris_engine/schemas/services/special/self_observation.py",
        "line": 87
      },
      {
        "class": "ReviewOutcome",
        "file": "ciris_engine/schemas/services/special/self_observation.py",
        "line": 114
      },
      {
        "class": "ConfigurationChange",
        "file": "ciris_engine/schemas/services/special/self_observation.py",
        "line": 150
      },
      {
        "class": "ChangeApprovalResult",
        "file": "ciris_engine/schemas/services/special/self_observation.py",
        "line": 166
      },
      {
        "class": "RollbackResult",
        "file": "ciris_engine/schemas/services/special/self_observation.py",
        "line": 176
      },
      {
        "class": "ObservabilitySignal",
        "file": "ciris_engine/schemas/services/special/self_observation.py",
        "line": 186
      },
      {
        "class": "ObservationOpportunity",
        "file": "ciris_engine/schemas/services/special/self_observation.py",
        "line": 196
      },
      {
        "class": "ObservabilityAnalysis",
        "file": "ciris_engine/schemas/services/special/self_observation.py",
        "line": 207
      },
      {
        "class": "ObservationImpact",
        "file": "ciris_engine/schemas/services/special/self_observation.py",
        "line": 229
      },
      {
        "class": "ObservationEffectiveness",
        "file": "ciris_engine/schemas/services/special/self_observation.py",
        "line": 239
      },
      {
        "class": "PatternRecord",
        "file": "ciris_engine/schemas/services/special/self_observation.py",
        "line": 257
      },
      {
        "class": "PatternLibrarySummary",
        "file": "ciris_engine/schemas/services/special/self_observation.py",
        "line": 270
      },
      {
        "class": "ServiceImprovementReport",
        "file": "ciris_engine/schemas/services/special/self_observation.py",
        "line": 280
      },
      {
        "class": "PatternInsight",
        "file": "ciris_engine/schemas/services/special/self_observation.py",
        "line": 311
      },
      {
        "class": "LearningSummary",
        "file": "ciris_engine/schemas/services/special/self_observation.py",
        "line": 325
      },
      {
        "class": "PatternEffectiveness",
        "file": "ciris_engine/schemas/services/special/self_observation.py",
        "line": 339
      },
      {
        "class": "AnalysisStatus",
        "file": "ciris_engine/schemas/services/special/self_observation.py",
        "line": 352
      },
      {
        "class": "JWTAlgorithm",
        "file": "ciris_engine/schemas/services/authority/jwt.py",
        "line": 16
      },
      {
        "class": "JWTHeader",
        "file": "ciris_engine/schemas/services/authority/jwt.py",
        "line": 23
      },
      {
        "class": "JWTClaims",
        "file": "ciris_engine/schemas/services/authority/jwt.py",
        "line": 38
      },
      {
        "class": "JWTToken",
        "file": "ciris_engine/schemas/services/authority/jwt.py",
        "line": 111
      },
      {
        "class": "JWTValidationResult",
        "file": "ciris_engine/schemas/services/authority/jwt.py",
        "line": 140
      },
      {
        "class": "WACertificateUpdate",
        "file": "ciris_engine/schemas/services/authority/wa_updates.py",
        "line": 15
      },
      {
        "class": "WACertificateUpdateResponse",
        "file": "ciris_engine/schemas/services/authority/wa_updates.py",
        "line": 86
      },
      {
        "class": "WABulkUpdate",
        "file": "ciris_engine/schemas/services/authority/wa_updates.py",
        "line": 98
      },
      {
        "class": "WABulkUpdateResponse",
        "file": "ciris_engine/schemas/services/authority/wa_updates.py",
        "line": 124
      },
      {
        "class": "PermissionEntry",
        "file": "ciris_engine/schemas/services/authority/wise_authority.py",
        "line": 13
      },
      {
        "class": "ApprovalRequestContext",
        "file": "ciris_engine/schemas/services/authority/wise_authority.py",
        "line": 22
      },
      {
        "class": "AuthenticationResult",
        "file": "ciris_engine/schemas/services/authority/wise_authority.py",
        "line": 30
      },
      {
        "class": "WAUpdate",
        "file": "ciris_engine/schemas/services/authority/wise_authority.py",
        "line": 42
      },
      {
        "class": "TokenVerification",
        "file": "ciris_engine/schemas/services/authority/wise_authority.py",
        "line": 52
      },
      {
        "class": "PendingDeferral",
        "file": "ciris_engine/schemas/services/authority/wise_authority.py",
        "line": 63
      },
      {
        "class": "WAResource",
        "file": "ciris_engine/schemas/services/authority/wise_authority.py",
        "line": 113
      },
      {
        "class": "OAuthConfig",
        "file": "ciris_engine/schemas/services/authority/wise_authority.py",
        "line": 134
      },
      {
        "class": "AdapterStatus",
        "file": "ciris_engine/schemas/services/core/runtime.py",
        "line": 14
      },
      {
        "class": "ProcessorStatus",
        "file": "ciris_engine/schemas/services/core/runtime.py",
        "line": 25
      },
      {
        "class": "ConfigScope",
        "file": "ciris_engine/schemas/services/core/runtime.py",
        "line": 34
      },
      {
        "class": "ConfigValidationLevel",
        "file": "ciris_engine/schemas/services/core/runtime.py",
        "line": 43
      },
      {
        "class": "ProcessorQueueStatus",
        "file": "ciris_engine/schemas/services/core/runtime.py",
        "line": 52
      },
      {
        "class": "ConfigBackup",
        "file": "ciris_engine/schemas/services/core/runtime.py",
        "line": 86
      },
      {
        "class": "ServiceRegistryInfo",
        "file": "ciris_engine/schemas/services/core/runtime.py",
        "line": 97
      },
      {
        "class": "CircuitBreakerResetResult",
        "file": "ciris_engine/schemas/services/core/runtime.py",
        "line": 107
      },
      {
        "class": "ServiceHealthStatus",
        "file": "ciris_engine/schemas/services/core/runtime.py",
        "line": 116
      },
      {
        "class": "ServiceSelectionExplanation",
        "file": "ciris_engine/schemas/services/core/runtime.py",
        "line": 127
      },
      {
        "class": "RuntimeEvent",
        "file": "ciris_engine/schemas/services/core/runtime.py",
        "line": 140
      },
      {
        "class": "ConfigReloadResult",
        "file": "ciris_engine/schemas/services/core/runtime.py",
        "line": 150
      },
      {
        "class": "ProcessorControlResponse",
        "file": "ciris_engine/schemas/services/core/runtime.py",
        "line": 160
      },
      {
        "class": "AdapterOperationResponse",
        "file": "ciris_engine/schemas/services/core/runtime.py",
        "line": 170
      },
      {
        "class": "RuntimeStatusResponse",
        "file": "ciris_engine/schemas/services/core/runtime.py",
        "line": 181
      },
      {
        "class": "RuntimeStateSnapshot",
        "file": "ciris_engine/schemas/services/core/runtime.py",
        "line": 192
      },
      {
        "class": "ConfigSnapshot",
        "file": "ciris_engine/schemas/services/core/runtime.py",
        "line": 203
      },
      {
        "class": "ConfigOperationResponse",
        "file": "ciris_engine/schemas/services/core/runtime.py",
        "line": 213
      },
      {
        "class": "ConfigBackupResponse",
        "file": "ciris_engine/schemas/services/core/runtime.py",
        "line": 233
      },
      {
        "class": "RuntimeConfig",
        "file": "ciris_engine/schemas/services/core/runtime_config.py",
        "line": 58
      },
      {
        "class": "ServiceInfo",
        "file": "ciris_engine/schemas/services/core/runtime_config.py",
        "line": 80
      },
      {
        "class": "ServiceHealthReport",
        "file": "ciris_engine/schemas/services/core/runtime_config.py",
        "line": 102
      },
      {
        "class": "SecretContext",
        "file": "ciris_engine/schemas/services/core/secrets.py",
        "line": 13
      },
      {
        "class": "SecretFilterStatus",
        "file": "ciris_engine/schemas/services/core/secrets.py",
        "line": 46
      },
      {
        "class": "TimeServiceConfig",
        "file": "ciris_engine/schemas/services/lifecycle/time.py",
        "line": 13
      },
      {
        "class": "TimeSnapshot",
        "file": "ciris_engine/schemas/services/lifecycle/time.py",
        "line": 20
      },
      {
        "class": "TimeServiceStatus",
        "file": "ciris_engine/schemas/services/lifecycle/time.py",
        "line": 30
      },
      {
        "class": "InitializationVerification",
        "file": "ciris_engine/schemas/services/lifecycle/initialization.py",
        "line": 27
      },
      {
        "class": "SummaryAttributes",
        "file": "ciris_engine/schemas/services/graph/tsdb_models.py",
        "line": 14
      },
      {
        "class": "CompressionResult",
        "file": "ciris_engine/schemas/services/graph/tsdb_models.py",
        "line": 48
      },
      {
        "class": "ConsolidationMetadata",
        "file": "ciris_engine/schemas/services/graph/tsdb_models.py",
        "line": 58
      },
      {
        "class": "EdgeAttributes",
        "file": "ciris_engine/schemas/services/graph/edge_types.py",
        "line": 12
      },
      {
        "class": "NodeReference",
        "file": "ciris_engine/schemas/services/graph/tsdb_models.py",
        "line": 84
      },
      {
        "class": "ServiceCorrelationQueryResult",
        "file": "ciris_engine/schemas/services/graph/query_results.py",
        "line": 21
      },
      {
        "class": "TSDBNodeQueryResult",
        "file": "ciris_engine/schemas/services/graph/query_results.py",
        "line": 41
      },
      {
        "class": "EdgeQueryResult",
        "file": "ciris_engine/schemas/services/graph/query_results.py",
        "line": 54
      },
      {
        "class": "ConsolidationSummary",
        "file": "ciris_engine/schemas/services/graph/query_results.py",
        "line": 64
      },
      {
        "class": "BaseEdgeAttributes",
        "file": "ciris_engine/schemas/services/graph/edges.py",
        "line": 12
      },
      {
        "class": "SummaryEdgeAttributes",
        "file": "ciris_engine/schemas/services/graph/edges.py",
        "line": 20
      },
      {
        "class": "UserParticipationAttributes",
        "file": "ciris_engine/schemas/services/graph/edges.py",
        "line": 28
      },
      {
        "class": "TaskSummaryAttributes",
        "file": "ciris_engine/schemas/services/graph/edges.py",
        "line": 36
      },
      {
        "class": "TraceSummaryAttributes",
        "file": "ciris_engine/schemas/services/graph/edges.py",
        "line": 44
      },
      {
        "class": "CrossSummaryAttributes",
        "file": "ciris_engine/schemas/services/graph/edges.py",
        "line": 52
      },
      {
        "class": "GenericEdgeAttributes",
        "file": "ciris_engine/schemas/services/graph/edges.py",
        "line": 60
      },
      {
        "class": "MemoryNodeAttributes",
        "file": "ciris_engine/schemas/services/graph/attributes.py",
        "line": 48
      },
      {
        "class": "ConfigNodeAttributes",
        "file": "ciris_engine/schemas/services/graph/attributes.py",
        "line": 88
      },
      {
        "class": "TelemetryNodeAttributes",
        "file": "ciris_engine/schemas/services/graph/attributes.py",
        "line": 131
      },
      {
        "class": "ValidationRule",
        "file": "ciris_engine/schemas/services/graph/node_data.py",
        "line": 13
      },
      {
        "class": "BaseNodeData",
        "file": "ciris_engine/schemas/services/graph/node_data.py",
        "line": 23
      },
      {
        "class": "ConfigNodeData",
        "file": "ciris_engine/schemas/services/graph/node_data.py",
        "line": 37
      },
      {
        "class": "TelemetryNodeData",
        "file": "ciris_engine/schemas/services/graph/node_data.py",
        "line": 48
      },
      {
        "class": "AuditNodeData",
        "file": "ciris_engine/schemas/services/graph/node_data.py",
        "line": 64
      },
      {
        "class": "MemoryNodeData",
        "file": "ciris_engine/schemas/services/graph/node_data.py",
        "line": 85
      },
      {
        "class": "TaskNodeData",
        "file": "ciris_engine/schemas/services/graph/node_data.py",
        "line": 102
      },
      {
        "class": "EnvironmentNodeData",
        "file": "ciris_engine/schemas/services/graph/node_data.py",
        "line": 125
      },
      {
        "class": "ParticipantData",
        "file": "ciris_engine/schemas/services/graph/consolidation.py",
        "line": 217
      },
      {
        "class": "EdgeSpecification",
        "file": "ciris_engine/schemas/services/graph/edge_types.py",
        "line": 37
      },
      {
        "class": "RequestData",
        "file": "ciris_engine/schemas/services/graph/consolidation.py",
        "line": 14
      },
      {
        "class": "ResponseData",
        "file": "ciris_engine/schemas/services/graph/consolidation.py",
        "line": 28
      },
      {
        "class": "InteractionContext",
        "file": "ciris_engine/schemas/services/graph/consolidation.py",
        "line": 40
      },
      {
        "class": "ServiceInteractionData",
        "file": "ciris_engine/schemas/services/graph/consolidation.py",
        "line": 54
      },
      {
        "class": "MetricCorrelationData",
        "file": "ciris_engine/schemas/services/graph/consolidation.py",
        "line": 79
      },
      {
        "class": "SpanTags",
        "file": "ciris_engine/schemas/services/graph/consolidation.py",
        "line": 100
      },
      {
        "class": "TraceSpanData",
        "file": "ciris_engine/schemas/services/graph/consolidation.py",
        "line": 116
      },
      {
        "class": "TaskMetadata",
        "file": "ciris_engine/schemas/services/graph/consolidation.py",
        "line": 160
      },
      {
        "class": "TaskCorrelationData",
        "file": "ciris_engine/schemas/services/graph/consolidation.py",
        "line": 173
      },
      {
        "class": "ConversationEntry",
        "file": "ciris_engine/schemas/services/graph/consolidation.py",
        "line": 204
      },
      {
        "class": "MetricAggregation",
        "file": "ciris_engine/schemas/services/graph/consolidation.py",
        "line": 225
      },
      {
        "class": "ConversationSummary",
        "file": "ciris_engine/schemas/services/graph/consolidation.py",
        "line": 235
      },
      {
        "class": "TraceSummary",
        "file": "ciris_engine/schemas/services/graph/consolidation.py",
        "line": 246
      },
      {
        "class": "MemorySummary",
        "file": "ciris_engine/schemas/services/graph/consolidation.py",
        "line": 277
      },
      {
        "class": "TSDBPeriodSummary",
        "file": "ciris_engine/schemas/services/graph/consolidation.py",
        "line": 286
      },
      {
        "class": "AuditEventData",
        "file": "ciris_engine/schemas/services/graph/audit.py",
        "line": 13
      },
      {
        "class": "AuditQueryResult",
        "file": "ciris_engine/schemas/services/graph/audit.py",
        "line": 58
      },
      {
        "class": "IncidentSeverity",
        "file": "ciris_engine/schemas/services/graph/incident.py",
        "line": 17
      },
      {
        "class": "IncidentStatus",
        "file": "ciris_engine/schemas/services/graph/incident.py",
        "line": 26
      },
      {
        "class": "IncidentNode",
        "file": "ciris_engine/schemas/services/graph/incident.py",
        "line": 37
      },
      {
        "class": "ProblemNode",
        "file": "ciris_engine/schemas/services/graph/incident.py",
        "line": 141
      },
      {
        "class": "IncidentInsightNode",
        "file": "ciris_engine/schemas/services/graph/incident.py",
        "line": 220
      },
      {
        "class": "MemorySearchFilter",
        "file": "ciris_engine/schemas/services/graph/memory.py",
        "line": 33
      },
      {
        "class": "GraphQuery",
        "file": "ciris_engine/schemas/services/graph/telemetry.py",
        "line": 87
      },
      {
        "class": "MemoryOperationContext",
        "file": "ciris_engine/schemas/services/graph/memory.py",
        "line": 76
      },
      {
        "class": "TSDBConsolidationConfig",
        "file": "ciris_engine/schemas/services/graph/tsdb_consolidation.py",
        "line": 12
      },
      {
        "class": "TSDBConsolidationStatus",
        "file": "ciris_engine/schemas/services/graph/tsdb_consolidation.py",
        "line": 20
      },
      {
        "class": "TelemetrySnapshotResult",
        "file": "ciris_engine/schemas/services/graph/telemetry.py",
        "line": 13
      },
      {
        "class": "TelemetryData",
        "file": "ciris_engine/schemas/services/graph/telemetry.py",
        "line": 25
      },
      {
        "class": "ResourceData",
        "file": "ciris_engine/schemas/services/graph/telemetry.py",
        "line": 33
      },
      {
        "class": "BehavioralData",
        "file": "ciris_engine/schemas/services/graph/telemetry.py",
        "line": 41
      },
      {
        "class": "TelemetryConsolidationResult",
        "file": "ciris_engine/schemas/services/graph/telemetry.py",
        "line": 53
      },
      {
        "class": "CustomMetrics",
        "file": "ciris_engine/schemas/services/graph/telemetry.py",
        "line": 63
      },
      {
        "class": "TelemetryServiceStatus",
        "file": "ciris_engine/schemas/services/graph/telemetry.py",
        "line": 74
      },
      {
        "class": "ServiceCapabilities",
        "file": "ciris_engine/schemas/services/graph/telemetry.py",
        "line": 96
      },
      {
        "class": "LLMUsageData",
        "file": "ciris_engine/schemas/services/graph/telemetry.py",
        "line": 105
      },
      {
        "class": "TelemetryKwargs",
        "file": "ciris_engine/schemas/services/graph/telemetry.py",
        "line": 117
      },
      {
        "class": "ServiceTelemetryData",
        "file": "ciris_engine/schemas/services/graph/telemetry.py",
        "line": 128
      },
      {
        "class": "AggregatedTelemetryMetadata",
        "file": "ciris_engine/schemas/services/graph/telemetry.py",
        "line": 140
      },
      {
        "class": "AggregatedTelemetryResponse",
        "file": "ciris_engine/schemas/services/graph/telemetry.py",
        "line": 149
      },
      {
        "class": "MessageDict",
        "file": "ciris_engine/protocols/services/runtime/llm.py",
        "line": 12
      }
    ],
    "misplaced_files": [],
    "protocol_mismatches": [
      {
        "protocol": "PipelineControlProtocol",
        "implementation": "PipelineController",
        "missing_methods": [],
        "extra_methods": [
          "abort_thought",
          "drain_pipeline_step",
          "resume_all",
          "resume_thought"
        ]
      },
      {
        "protocol": "ConsentManagerProtocol",
        "implementation": "ConsentService",
        "missing_methods": [],
        "extra_methods": [
          "validate_parameters",
          "get_capabilities",
          "get_service_type",
          "execute_tool",
          "get_available_tools",
          "get_tool_info",
          "get_tool_schema",
          "get_tool_result",
          "get_all_tool_info",
          "check_pending_partnership",
          "list_tools"
        ]
      },
      {
        "protocol": "ConscienceInterface",
        "implementation": "ConscienceConfig",
        "missing_methods": [
          "check"
        ],
        "extra_methods": []
      },
      {
        "protocol": "ConscienceInterface",
        "implementation": "_BaseConscience",
        "missing_methods": [
          "check"
        ],
        "extra_methods": []
      },
      {
        "protocol": "ConscienceInterface",
        "implementation": "AuditConscienceResult",
        "missing_methods": [
          "check"
        ],
        "extra_methods": []
      },
      {
        "protocol": "ConscienceInterface",
        "implementation": "ConscienceApplicationResult",
        "missing_methods": [
          "check"
        ],
        "extra_methods": []
      },
      {
        "protocol": "ConscienceInterface",
        "implementation": "ConscienceStatus",
        "missing_methods": [
          "check"
        ],
        "extra_methods": []
      },
      {
        "protocol": "ConscienceInterface",
        "implementation": "ConscienceCheckResult",
        "missing_methods": [
          "check"
        ],
        "extra_methods": []
      },
      {
        "protocol": "ConscienceInterface",
        "implementation": "ConscienceResult",
        "missing_methods": [
          "check"
        ],
        "extra_methods": []
      },
      {
        "protocol": "ConscienceInterface",
        "implementation": "ConscienceFailureContext",
        "missing_methods": [
          "check"
        ],
        "extra_methods": []
      },
      {
        "protocol": "ConscienceInterface",
        "implementation": "StepResultConscienceExecution",
        "missing_methods": [
          "check"
        ],
        "extra_methods": []
      },
      {
        "protocol": "ConscienceInterface",
        "implementation": "StepResultRecursiveConscience",
        "missing_methods": [
          "check"
        ],
        "extra_methods": []
      },
      {
        "protocol": "ConscienceInterface",
        "implementation": "StepResultPostConsciencePreHandler",
        "missing_methods": [
          "check"
        ],
        "extra_methods": []
      },
      {
        "protocol": "HealthCheckProtocol",
        "implementation": "HealthCheckResult",
        "missing_methods": [
          "is_healthy"
        ],
        "extra_methods": []
      },
      {
        "protocol": "BaseGraphService",
        "implementation": "BaseGraphService",
        "missing_methods": [
          "_set_memory_bus",
          "_set_time_service",
          "_track_request",
          "_track_error",
          "_collect_custom_metrics",
          "_get_actions",
          "_update_telemetry",
          "_check_dependencies",
          "__init__"
        ],
        "extra_methods": []
      },
      {
        "protocol": "BaseGraphService",
        "implementation": "MetricsEnabledGraphService",
        "missing_methods": [
          "_set_memory_bus",
          "get_capabilities",
          "_set_time_service",
          "_track_request",
          "_collect_custom_metrics",
          "_track_error",
          "start",
          "_get_actions",
          "_update_telemetry",
          "_check_dependencies",
          "__init__",
          "stop"
        ],
        "extra_methods": [
          "get_extended_status"
        ]
      },
      {
        "protocol": "BaseGraphService",
        "implementation": "IncidentManagementService",
        "missing_methods": [
          "_set_memory_bus",
          "_set_time_service",
          "_track_request",
          "_track_error",
          "_collect_custom_metrics",
          "query_graph",
          "start",
          "_get_actions",
          "_update_telemetry",
          "store_in_graph",
          "_check_dependencies",
          "__init__",
          "stop"
        ],
        "extra_methods": [
          "process_recent_incidents",
          "get_incident_count",
          "get_service_type",
          "get_status",
          "get_metrics",
          "is_healthy"
        ]
      },
      {
        "protocol": "BaseGraphService",
        "implementation": "GraphAuditService",
        "missing_methods": [
          "_set_memory_bus",
          "get_capabilities",
          "_set_time_service",
          "_track_request",
          "_collect_custom_metrics",
          "_track_error",
          "query_graph",
          "_get_actions",
          "_update_telemetry",
          "store_in_graph",
          "_check_dependencies",
          "__init__"
        ],
        "extra_methods": [
          "query_events",
          "log_conscience_event",
          "get_service_type",
          "export_audit_data",
          "get_verification_report",
          "verify_audit_integrity",
          "query_audit_trail",
          "get_event_by_id",
          "get_audit_trail",
          "get_metrics",
          "log_action",
          "log_event"
        ]
      },
      {
        "protocol": "BaseGraphService",
        "implementation": "GraphTelemetryService",
        "missing_methods": [
          "_set_memory_bus",
          "get_capabilities",
          "_set_time_service",
          "_track_request",
          "_collect_custom_metrics",
          "_track_error",
          "query_graph",
          "_get_actions",
          "_update_telemetry",
          "store_in_graph",
          "_check_dependencies",
          "__init__"
        ],
        "extra_methods": [
          "get_telemetry_summary",
          "query_metrics",
          "get_service_type",
          "record_metric",
          "get_metric_summary",
          "get_metric_count",
          "get_aggregated_telemetry",
          "get_metrics"
        ]
      },
      {
        "protocol": "BaseGraphService",
        "implementation": "LocalGraphMemoryService",
        "missing_methods": [
          "_set_memory_bus",
          "get_capabilities",
          "_set_time_service",
          "_track_request",
          "_collect_custom_metrics",
          "_track_error",
          "_get_actions",
          "_update_telemetry",
          "_check_dependencies",
          "__init__"
        ],
        "extra_methods": [
          "get_node_edges",
          "memorize",
          "get_service_type",
          "memorize_metric",
          "recall",
          "export_identity_context",
          "create_edge",
          "is_healthy",
          "forget",
          "search",
          "recall_timeseries",
          "memorize_log"
        ]
      },
      {
        "protocol": "BaseGraphService",
        "implementation": "GraphConfigService",
        "missing_methods": [
          "_set_memory_bus",
          "get_capabilities",
          "_set_time_service",
          "_track_request",
          "_collect_custom_metrics",
          "_track_error",
          "_get_actions",
          "_update_telemetry",
          "_check_dependencies",
          "__init__"
        ],
        "extra_methods": [
          "unregister_config_listener",
          "get_service_type",
          "register_config_listener",
          "set_config",
          "get_config",
          "get_metrics",
          "list_configs"
        ]
      },
      {
        "protocol": "BaseGraphService",
        "implementation": "TSDBConsolidationService",
        "missing_methods": [
          "_set_memory_bus",
          "_set_time_service",
          "_track_request",
          "_track_error",
          "_collect_custom_metrics",
          "query_graph",
          "_get_actions",
          "_update_telemetry",
          "store_in_graph",
          "_check_dependencies",
          "__init__"
        ],
        "extra_methods": [
          "get_summary_for_period",
          "get_service_type",
          "get_status",
          "get_metrics",
          "is_healthy"
        ]
      },
      {
        "protocol": "BaseService",
        "implementation": "BasicTelemetryCollector",
        "missing_methods": [
          "_get_metadata",
          "_now",
          "get_capabilities",
          "_on_stop",
          "_track_request",
          "_collect_custom_metrics",
          "_collect_metrics",
          "_track_error",
          "_calculate_uptime",
          "_on_start",
          "_get_actions",
          "get_status",
          "_check_dependencies",
          "__init__",
          "_register_dependencies",
          "get_metrics",
          "is_healthy"
        ],
        "extra_methods": [
          "record_metric",
          "update_system_snapshot"
        ]
      },
      {
        "protocol": "BaseService",
        "implementation": "SecretsService",
        "missing_methods": [
          "_get_metadata",
          "_now",
          "get_capabilities",
          "_on_stop",
          "_track_request",
          "_collect_custom_metrics",
          "_collect_metrics",
          "_track_error",
          "_calculate_uptime",
          "stop",
          "_on_start",
          "start",
          "_get_actions",
          "_check_dependencies",
          "__init__",
          "_register_dependencies",
          "is_healthy"
        ],
        "extra_methods": [
          "get_service_stats",
          "reencrypt_all",
          "process_incoming_text",
          "recall_secret",
          "update_filter_config",
          "decapsulate_secrets_in_parameters",
          "store_secret",
          "forget_secret",
          "decrypt",
          "encrypt",
          "get_filter_config",
          "list_stored_secrets",
          "retrieve_secret"
        ]
      },
      {
        "protocol": "BaseService",
        "implementation": "BaseInfrastructureService",
        "missing_methods": [
          "_now",
          "_on_stop",
          "_track_request",
          "_collect_custom_metrics",
          "_collect_metrics",
          "_track_error",
          "_calculate_uptime",
          "_get_actions",
          "get_status",
          "__init__",
          "_register_dependencies",
          "get_metrics",
          "is_healthy",
          "stop",
          "_get_metadata",
          "_on_start",
          "start",
          "_check_dependencies"
        ],
        "extra_methods": []
      },
      {
        "protocol": "BaseService",
        "implementation": "BaseScheduledService",
        "missing_methods": [
          "_now",
          "_on_stop",
          "_track_request",
          "get_service_type",
          "_collect_custom_metrics",
          "_collect_metrics",
          "_track_error",
          "_calculate_uptime",
          "_get_actions",
          "get_status",
          "__init__",
          "_register_dependencies",
          "get_metrics",
          "is_healthy",
          "stop",
          "_get_metadata",
          "get_capabilities",
          "_on_start",
          "start",
          "_check_dependencies"
        ],
        "extra_methods": []
      },
      {
        "protocol": "BaseService",
        "implementation": "BaseService",
        "missing_methods": [
          "_get_metadata",
          "_now",
          "_on_stop",
          "_track_request",
          "_collect_custom_metrics",
          "_collect_metrics",
          "_track_error",
          "_calculate_uptime",
          "_on_start",
          "_get_actions",
          "_check_dependencies",
          "__init__",
          "_register_dependencies"
        ],
        "extra_methods": []
      },
      {
        "protocol": "BaseService",
        "implementation": "CLIToolService",
        "missing_methods": [
          "_get_metadata",
          "_now",
          "_on_stop",
          "_track_request",
          "_collect_custom_metrics",
          "_collect_metrics",
          "_track_error",
          "_calculate_uptime",
          "_on_start",
          "_get_actions",
          "get_status",
          "_check_dependencies",
          "__init__",
          "_register_dependencies",
          "get_metrics"
        ],
        "extra_methods": [
          "validate_parameters",
          "execute_tool",
          "get_available_tools",
          "get_tool_info",
          "get_tool_schema",
          "get_tool_result",
          "get_all_tool_info",
          "list_tools"
        ]
      },
      {
        "protocol": "BaseService",
        "implementation": "APIToolService",
        "missing_methods": [
          "_get_metadata",
          "_now",
          "_on_stop",
          "_track_request",
          "_collect_custom_metrics",
          "_collect_metrics",
          "_track_error",
          "_calculate_uptime",
          "_on_start",
          "_get_actions",
          "get_status",
          "_check_dependencies",
          "__init__",
          "_register_dependencies",
          "get_metrics"
        ],
        "extra_methods": [
          "validate_parameters",
          "execute_tool",
          "get_available_tools",
          "get_tool_info",
          "get_tool_schema",
          "get_tool_result",
          "get_all_tool_info",
          "list_tools"
        ]
      },
      {
        "protocol": "BaseService",
        "implementation": "APICommunicationService",
        "missing_methods": [
          "_get_metadata",
          "_now",
          "_on_stop",
          "_track_request",
          "_collect_custom_metrics",
          "_collect_metrics",
          "_track_error",
          "_calculate_uptime",
          "_on_start",
          "_get_actions",
          "_check_dependencies",
          "__init__",
          "_register_dependencies",
          "get_metrics",
          "is_healthy"
        ],
        "extra_methods": [
          "send_message",
          "fetch_messages",
          "get_home_channel_id",
          "unregister_websocket",
          "register_websocket"
        ]
      },
      {
        "protocol": "BaseService",
        "implementation": "RuntimeControlService",
        "missing_methods": [
          "_get_metadata",
          "_now",
          "_on_stop",
          "_track_request",
          "_collect_custom_metrics",
          "_collect_metrics",
          "_track_error",
          "_calculate_uptime",
          "stop",
          "_on_start",
          "start",
          "_get_actions",
          "_check_dependencies",
          "__init__",
          "_register_dependencies",
          "is_healthy"
        ],
        "extra_methods": [
          "get_processor_queue_status",
          "reset_circuit_breakers",
          "update_service_priority",
          "restore_config",
          "list_adapters",
          "setup_thought_tracking",
          "validate_config",
          "single_step",
          "get_service_health_status",
          "backup_config",
          "get_adapter_info",
          "handle_emergency_shutdown",
          "get_circuit_breaker_status",
          "update_config",
          "get_runtime_snapshot",
          "get_runtime_status",
          "unload_adapter",
          "get_events_history",
          "load_adapter",
          "shutdown_runtime",
          "get_config",
          "pause_processing",
          "get_service_selection_explanation",
          "list_config_backups",
          "resume_processing"
        ]
      },
      {
        "protocol": "BaseService",
        "implementation": "OpenAICompatibleClient",
        "missing_methods": [
          "_get_metadata",
          "_now",
          "_on_stop",
          "_track_request",
          "_collect_custom_metrics",
          "_collect_metrics",
          "_track_error",
          "_calculate_uptime",
          "_on_start",
          "start",
          "_get_actions",
          "get_status",
          "_check_dependencies",
          "__init__",
          "_register_dependencies",
          "stop"
        ],
        "extra_methods": [
          "call_llm_structured"
        ]
      },
      {
        "protocol": "BaseService",
        "implementation": "VisibilityService",
        "missing_methods": [
          "_now",
          "_on_stop",
          "_collect_custom_metrics",
          "_get_actions",
          "__init__",
          "_register_dependencies",
          "get_metrics",
          "get_capabilities",
          "_on_start",
          "_check_dependencies",
          "_track_request",
          "_collect_metrics",
          "_track_error",
          "_calculate_uptime",
          "get_status",
          "stop",
          "is_healthy",
          "_get_metadata",
          "start"
        ],
        "extra_methods": [
          "explain_action",
          "get_task_history",
          "get_reasoning_trace",
          "get_recent_traces",
          "get_current_state",
          "apply_redaction",
          "get_decision_history"
        ]
      },
      {
        "protocol": "BaseService",
        "implementation": "AdaptiveFilterService",
        "missing_methods": [
          "_get_metadata",
          "_now",
          "_on_stop",
          "_track_request",
          "_collect_custom_metrics",
          "_collect_metrics",
          "_track_error",
          "_calculate_uptime",
          "stop",
          "_on_start",
          "start",
          "_get_actions",
          "_check_dependencies",
          "__init__",
          "_register_dependencies",
          "is_healthy"
        ],
        "extra_methods": [
          "get_filter_decision_for_anonymous",
          "filter_message",
          "anonymize_user_profile",
          "handle_consent_transition",
          "get_health",
          "add_filter_trigger",
          "remove_filter_trigger"
        ]
      },
      {
        "protocol": "BaseService",
        "implementation": "WiseAuthorityService",
        "missing_methods": [
          "_get_metadata",
          "_now",
          "get_capabilities",
          "_on_stop",
          "_track_request",
          "_collect_custom_metrics",
          "_collect_metrics",
          "_track_error",
          "_calculate_uptime",
          "stop",
          "_on_start",
          "start",
          "_get_actions",
          "_check_dependencies",
          "__init__",
          "_register_dependencies",
          "get_metrics",
          "is_healthy"
        ],
        "extra_methods": [
          "revoke_permission",
          "fetch_guidance",
          "check_authorization",
          "get_pending_deferrals",
          "grant_permission",
          "send_deferral",
          "list_permissions",
          "get_guidance",
          "request_approval",
          "resolve_deferral"
        ]
      },
      {
        "protocol": "BaseService",
        "implementation": "ConsentService",
        "missing_methods": [
          "_get_metadata",
          "_now",
          "_on_stop",
          "_track_request",
          "_collect_custom_metrics",
          "_collect_metrics",
          "_track_error",
          "_calculate_uptime",
          "stop",
          "_on_start",
          "start",
          "_get_actions",
          "get_status",
          "_check_dependencies",
          "__init__",
          "_register_dependencies",
          "get_metrics",
          "is_healthy"
        ],
        "extra_methods": [
          "validate_parameters",
          "cleanup_expired",
          "grant_consent",
          "get_consent",
          "execute_tool",
          "get_available_tools",
          "get_tool_info",
          "get_tool_schema",
          "revoke_consent",
          "get_audit_trail",
          "check_expiry",
          "get_impact_report",
          "get_tool_result",
          "get_all_tool_info",
          "check_pending_partnership",
          "list_tools"
        ]
      },
      {
        "protocol": "BaseService",
        "implementation": "SecretsToolService",
        "missing_methods": [
          "_get_metadata",
          "_now",
          "_on_stop",
          "_track_request",
          "_collect_custom_metrics",
          "_collect_metrics",
          "_track_error",
          "_calculate_uptime",
          "_on_start",
          "start",
          "_get_actions",
          "get_status",
          "_check_dependencies",
          "__init__",
          "_register_dependencies",
          "stop"
        ],
        "extra_methods": [
          "validate_parameters",
          "execute_tool",
          "get_available_tools",
          "get_tool_info",
          "get_tool_schema",
          "get_tool_result",
          "get_all_tool_info",
          "list_tools"
        ]
      },
      {
        "protocol": "ResourceMonitorService",
        "implementation": "ResourceMonitorService",
        "missing_methods": [
          "_update_snapshot",
          "_check_limits",
          "_check_resource",
          "_on_stop",
          "_collect_custom_metrics",
          "_on_start",
          "_get_actions",
          "_take_action",
          "_check_dependencies",
          "_run_scheduled_task",
          "__init__",
          "_count_active_thoughts"
        ],
        "extra_methods": []
      },
      {
        "protocol": "ResourceMonitorService",
        "implementation": "ResourceMonitorServiceProtocol",
        "missing_methods": [
          "_update_snapshot",
          "_check_limits",
          "_check_resource",
          "_on_stop",
          "get_service_type",
          "_collect_custom_metrics",
          "_on_start",
          "_get_actions",
          "_take_action",
          "get_status",
          "_check_dependencies",
          "_run_scheduled_task",
          "is_healthy",
          "__init__",
          "_count_active_thoughts"
        ],
        "extra_methods": [
          "start",
          "stop"
        ]
      },
      {
        "protocol": "AuthenticationService",
        "implementation": "AuthenticationService",
        "missing_methods": [
          "_verify_password",
          "_get_adapter_token",
          "_get_wa_by_kid",
          "_collect_custom_metrics",
          "_list_all_was",
          "_get_actions",
          "__init__",
          "_decrypt_secret",
          "_get_or_create_gateway_secret",
          "_verify_signature",
          "_encode_public_key",
          "_create_channel_token_for_adapter",
          "_check_dependencies",
          "_decode_public_key",
          "_get_system_wa",
          "_get_wa_by_adapter",
          "_create_adapter_observer",
          "_verify_token_internal",
          "_generate_api_key",
          "_verify_jwt_and_get_context",
          "_init_database",
          "_require_wa_auth",
          "_derive_encryption_key",
          "_encrypt_secret",
          "_create_authority_token",
          "_create_system_wa_certificate",
          "_require_scope",
          "_generate_wa_id",
          "_store_wa_certificate"
        ],
        "extra_methods": []
      },
      {
        "protocol": "AuthenticationService",
        "implementation": "AuthenticationServiceProtocol",
        "missing_methods": [
          "_verify_password",
          "_get_adapter_token",
          "_get_wa_by_kid",
          "_collect_custom_metrics",
          "_list_all_was",
          "_get_actions",
          "__init__",
          "get_metrics",
          "_decrypt_secret",
          "_get_or_create_gateway_secret",
          "get_capabilities",
          "_verify_signature",
          "_encode_public_key",
          "_create_channel_token_for_adapter",
          "_check_dependencies",
          "_decode_public_key",
          "_get_system_wa",
          "_get_wa_by_adapter",
          "_create_adapter_observer",
          "_verify_token_internal",
          "_generate_api_key",
          "_verify_jwt_and_get_context",
          "get_service_type",
          "_init_database",
          "_require_wa_auth",
          "get_status",
          "stop",
          "is_healthy",
          "_derive_encryption_key",
          "_encrypt_secret",
          "_create_authority_token",
          "start",
          "_create_system_wa_certificate",
          "_require_scope",
          "_generate_wa_id",
          "_store_wa_certificate"
        ],
        "extra_methods": []
      },
      {
        "protocol": "TimeService",
        "implementation": "TimeService",
        "missing_methods": [
          "_now",
          "_simulate_drift",
          "_check_ntp_drift_if_needed",
          "_collect_custom_metrics",
          "_get_actions",
          "_check_dependencies",
          "__init__",
          "_update_ntp_offset"
        ],
        "extra_methods": []
      },
      {
        "protocol": "TimeService",
        "implementation": "TimeServiceConfig",
        "missing_methods": [
          "_now",
          "get_service_type",
          "_collect_custom_metrics",
          "_get_actions",
          "get_ntp_offset",
          "__init__",
          "get_metrics",
          "get_adjusted_time",
          "get_uptime",
          "get_capabilities",
          "_simulate_drift",
          "now",
          "now_iso",
          "timestamp",
          "_check_ntp_drift_if_needed",
          "_check_dependencies",
          "_update_ntp_offset"
        ],
        "extra_methods": []
      },
      {
        "protocol": "TimeService",
        "implementation": "TimeServiceStatus",
        "missing_methods": [
          "_now",
          "get_service_type",
          "_collect_custom_metrics",
          "_get_actions",
          "get_ntp_offset",
          "__init__",
          "get_metrics",
          "get_adjusted_time",
          "get_uptime",
          "get_capabilities",
          "_simulate_drift",
          "now",
          "now_iso",
          "timestamp",
          "_check_ntp_drift_if_needed",
          "_check_dependencies",
          "_update_ntp_offset"
        ],
        "extra_methods": []
      },
      {
        "protocol": "TimeService",
        "implementation": "TimeServiceProtocol",
        "missing_methods": [
          "get_capabilities",
          "_now",
          "_simulate_drift",
          "get_service_type",
          "_collect_custom_metrics",
          "_check_ntp_drift_if_needed",
          "get_adjusted_time",
          "_get_actions",
          "get_ntp_offset",
          "_check_dependencies",
          "__init__",
          "get_metrics",
          "_update_ntp_offset"
        ],
        "extra_methods": []
      },
      {
        "protocol": "InitializationService",
        "implementation": "InitializationService",
        "missing_methods": [
          "_is_initialized",
          "_collect_custom_metrics",
          "_execute_step",
          "_get_actions",
          "_check_dependencies",
          "__init__",
          "_execute_phase"
        ],
        "extra_methods": []
      },
      {
        "protocol": "InitializationService",
        "implementation": "InitializationServiceProtocol",
        "missing_methods": [
          "get_capabilities",
          "_is_initialized",
          "get_service_type",
          "_collect_custom_metrics",
          "_execute_step",
          "_get_actions",
          "_check_dependencies",
          "__init__",
          "get_metrics",
          "is_healthy",
          "_execute_phase"
        ],
        "extra_methods": []
      },
      {
        "protocol": "TaskSchedulerService",
        "implementation": "TaskSchedulerService",
        "missing_methods": [
          "_is_task_due",
          "_on_stop",
          "_collect_custom_metrics",
          "_update_task_triggered",
          "_validate_cron_expression",
          "_get_actions",
          "_run_scheduled_task",
          "__init__",
          "_get_due_tasks",
          "_create_scheduled_task",
          "_on_start",
          "_check_dependencies",
          "_load_active_tasks",
          "_should_trigger_cron",
          "_trigger_task",
          "_get_next_cron_time",
          "_handle_shutdown",
          "_defer_task",
          "_complete_task"
        ],
        "extra_methods": []
      },
      {
        "protocol": "TaskSchedulerService",
        "implementation": "TaskSchedulerServiceProtocol",
        "missing_methods": [
          "_on_stop",
          "_is_task_due",
          "_should_trigger_cron",
          "get_service_type",
          "_update_task_triggered",
          "_collect_custom_metrics",
          "_validate_cron_expression",
          "_get_actions",
          "_trigger_task",
          "_run_scheduled_task",
          "__init__",
          "get_metrics",
          "_get_next_cron_time",
          "_get_due_tasks",
          "is_healthy",
          "_handle_shutdown",
          "get_capabilities",
          "_defer_task",
          "_create_scheduled_task",
          "_complete_task",
          "_on_start",
          "_check_dependencies",
          "_load_active_tasks"
        ],
        "extra_methods": []
      },
      {
        "protocol": "ShutdownService",
        "implementation": "ShutdownService",
        "missing_methods": [
          "_request_shutdown_sync",
          "_collect_custom_metrics",
          "_get_actions",
          "_register_async_shutdown_handler",
          "_check_dependencies",
          "_execute_sync_handlers",
          "__init__",
          "_execute_async_handlers",
          "_wait_for_shutdown"
        ],
        "extra_methods": []
      },
      {
        "protocol": "ShutdownService",
        "implementation": "ShutdownServiceProtocol",
        "missing_methods": [
          "get_capabilities",
          "_request_shutdown_sync",
          "get_service_type",
          "_collect_custom_metrics",
          "start",
          "_get_actions",
          "_register_async_shutdown_handler",
          "_check_dependencies",
          "_execute_sync_handlers",
          "__init__",
          "get_metrics",
          "stop",
          "_execute_async_handlers",
          "_wait_for_shutdown"
        ],
        "extra_methods": []
      },
      {
        "protocol": "SelfObservationService",
        "implementation": "SelfObservationService",
        "missing_methods": [
          "_set_service_registry",
          "_should_run_observation_cycle",
          "_initialize_identity_baseline",
          "_on_stop",
          "_run_scheduled_task",
          "_collect_custom_metrics",
          "_store_cycle_event",
          "_on_start",
          "_get_actions",
          "_check_dependencies",
          "_store_cycle_summary",
          "__init__",
          "_initialize_components",
          "_run_observation_cycle"
        ],
        "extra_methods": []
      },
      {
        "protocol": "SelfObservationService",
        "implementation": "SelfObservationServiceProtocol",
        "missing_methods": [
          "_on_stop",
          "_collect_custom_metrics",
          "_get_actions",
          "_run_scheduled_task",
          "__init__",
          "get_metrics",
          "_initialize_components",
          "_run_observation_cycle",
          "_initialize_identity_baseline",
          "get_capabilities",
          "_on_start",
          "_check_dependencies",
          "_store_cycle_summary",
          "get_service_type",
          "get_status",
          "is_healthy",
          "_set_service_registry",
          "_should_run_observation_cycle",
          "_store_cycle_event"
        ],
        "extra_methods": []
      },
      {
        "protocol": "GraphAuditService",
        "implementation": "GraphAuditService",
        "missing_methods": [
          "_export_jsonl",
          "_collect_custom_metrics",
          "_get_actions",
          "_init_components_sync",
          "__init__",
          "_convert_timeseries_to_entries",
          "_matches_filters",
          "_audit_request_to_entry",
          "_check_dependencies",
          "_export_sqlite",
          "_tsdb_to_audit_entry",
          "_init_database",
          "_initialize_hash_chain",
          "_get_severity",
          "_export_csv",
          "_store_entry_in_graph",
          "_cache_entry",
          "_set_service_registry",
          "_export_worker",
          "_flush_exports",
          "_add_to_hash_chain",
          "_create_trace_correlation",
          "_calculate_hours"
        ],
        "extra_methods": []
      },
      {
        "protocol": "GraphTelemetryService",
        "implementation": "GraphTelemetryService",
        "missing_methods": [
          "_convert_telemetry_to_services",
          "_now",
          "_check_cache",
          "_store_identity_context",
          "_collect_custom_metrics",
          "_get_actions",
          "__init__",
          "_get_resource_limits",
          "_init_telemetry_aggregator",
          "_check_dependencies",
          "_store_correlation",
          "_store_social_context",
          "_set_service_registry",
          "_store_behavioral_data",
          "_process_system_snapshot",
          "_set_runtime",
          "_store_resource_usage",
          "_get_service_status",
          "_store_telemetry_metrics",
          "_record_resource_usage"
        ],
        "extra_methods": []
      },
      {
        "protocol": "LocalGraphMemoryService",
        "implementation": "LocalGraphMemoryService",
        "missing_methods": [
          "_process_secrets_for_forget",
          "_collect_custom_metrics",
          "_process_secrets_for_memorize",
          "_get_actions",
          "_check_dependencies",
          "__init__",
          "_process_secrets_for_recall"
        ],
        "extra_methods": []
      },
      {
        "protocol": "GraphConfigService",
        "implementation": "GraphConfigService",
        "missing_methods": [
          "_notify_listeners",
          "_get_actions",
          "_check_dependencies",
          "__init__",
          "_query_config_by_key"
        ],
        "extra_methods": []
      },
      {
        "protocol": "GraphConfigService",
        "implementation": "GraphConfigServiceProtocol",
        "missing_methods": [
          "get_node_type",
          "get_service_type",
          "query_graph",
          "_notify_listeners",
          "start",
          "store_in_graph",
          "_get_actions",
          "_check_dependencies",
          "__init__",
          "get_metrics",
          "stop",
          "_query_config_by_key"
        ],
        "extra_methods": []
      },
      {
        "protocol": "RuntimeProtocol",
        "implementation": "RuntimeAdapterManager",
        "missing_methods": [
          "shutdown",
          "run",
          "resume",
          "pause",
          "health_check",
          "get_runtime_stats"
        ],
        "extra_methods": [
          "reload_adapter",
          "get_adapter_info",
          "unload_adapter",
          "load_adapter",
          "get_communication_adapter_status",
          "list_adapters",
          "get_adapter_status",
          "load_adapter_from_template",
          "register_config_listener"
        ]
      },
      {
        "protocol": "RuntimeProtocol",
        "implementation": "CIRISRuntime",
        "missing_methods": [
          "pause",
          "health_check",
          "resume",
          "get_runtime_stats"
        ],
        "extra_methods": [
          "telemetry_service",
          "secrets_service",
          "llm_service",
          "request_shutdown",
          "time_service",
          "maintenance_service",
          "visibility_service",
          "agent_config_service",
          "tsdb_consolidation_service",
          "self_observation_service",
          "shutdown_service",
          "service_registry",
          "initialization_service",
          "get_preload_tasks",
          "config_service",
          "audit_service",
          "task_scheduler",
          "authentication_service",
          "audit_services",
          "adaptive_filter_service",
          "core_tool_service",
          "memory_service",
          "runtime_control_service",
          "wa_auth_system",
          "initialize",
          "bus_manager",
          "set_preload_tasks",
          "incident_management_service",
          "resource_monitor",
          "transaction_orchestrator",
          "profile",
          "config_manager"
        ]
      },
      {
        "protocol": "RuntimeProtocol",
        "implementation": "RuntimeInterface",
        "missing_methods": [
          "pause",
          "health_check",
          "resume",
          "get_runtime_stats"
        ],
        "extra_methods": [
          "initialize"
        ]
      },
      {
        "protocol": "RuntimeProtocol",
        "implementation": "RuntimeControlBus",
        "missing_methods": [
          "shutdown",
          "run",
          "resume",
          "pause",
          "health_check",
          "get_runtime_stats"
        ],
        "extra_methods": [
          "get_processor_queue_status",
          "get_adapter_info",
          "get_capabilities",
          "unload_adapter",
          "load_adapter",
          "shutdown_runtime",
          "resume_processing",
          "list_adapters",
          "get_config",
          "get_metrics",
          "is_healthy",
          "get_runtime_status",
          "single_step",
          "pause_processing"
        ]
      },
      {
        "protocol": "RuntimeProtocol",
        "implementation": "APIRuntimeControlService",
        "missing_methods": [
          "shutdown",
          "run",
          "resume",
          "pause",
          "health_check",
          "get_runtime_stats"
        ],
        "extra_methods": [
          "get_capabilities",
          "get_adapter_info",
          "unload_adapter",
          "request_state_transition",
          "get_service_type",
          "stop",
          "load_adapter",
          "handle_emergency_shutdown",
          "start",
          "resume_processing",
          "get_status",
          "list_adapters",
          "is_healthy",
          "get_runtime_status",
          "pause_processing"
        ]
      },
      {
        "protocol": "RuntimeProtocol",
        "implementation": "RuntimeControlResponse",
        "missing_methods": [
          "resume",
          "pause",
          "health_check",
          "get_runtime_stats",
          "shutdown",
          "run"
        ],
        "extra_methods": []
      },
      {
        "protocol": "RuntimeProtocol",
        "implementation": "RuntimeAction",
        "missing_methods": [
          "resume",
          "pause",
          "health_check",
          "get_runtime_stats",
          "shutdown",
          "run"
        ],
        "extra_methods": []
      },
      {
        "protocol": "RuntimeProtocol",
        "implementation": "RuntimeControlService",
        "missing_methods": [
          "shutdown",
          "run",
          "resume",
          "pause",
          "health_check",
          "get_runtime_stats"
        ],
        "extra_methods": [
          "get_processor_queue_status",
          "reset_circuit_breakers",
          "unload_adapter",
          "get_service_type",
          "get_circuit_breaker_status",
          "get_events_history",
          "load_adapter",
          "update_service_priority",
          "shutdown_runtime",
          "get_status",
          "restore_config",
          "list_adapters",
          "setup_thought_tracking",
          "validate_config",
          "get_metrics",
          "get_config",
          "single_step",
          "get_service_health_status",
          "pause_processing",
          "backup_config",
          "get_service_selection_explanation",
          "get_adapter_info",
          "get_capabilities",
          "list_config_backups",
          "handle_emergency_shutdown",
          "resume_processing",
          "update_config",
          "get_runtime_snapshot",
          "get_runtime_status"
        ]
      },
      {
        "protocol": "RuntimeProtocol",
        "implementation": "RuntimeStats",
        "missing_methods": [
          "resume",
          "pause",
          "health_check",
          "get_runtime_stats",
          "shutdown",
          "run"
        ],
        "extra_methods": []
      },
      {
        "protocol": "RuntimeProtocol",
        "implementation": "RuntimeAdapterStatus",
        "missing_methods": [
          "resume",
          "pause",
          "health_check",
          "get_runtime_stats",
          "shutdown",
          "run"
        ],
        "extra_methods": []
      },
      {
        "protocol": "RuntimeProtocol",
        "implementation": "RuntimeEvent",
        "missing_methods": [
          "resume",
          "pause",
          "health_check",
          "get_runtime_stats",
          "shutdown",
          "run"
        ],
        "extra_methods": []
      },
      {
        "protocol": "RuntimeProtocol",
        "implementation": "RuntimeStatusResponse",
        "missing_methods": [
          "resume",
          "pause",
          "health_check",
          "get_runtime_stats",
          "shutdown",
          "run"
        ],
        "extra_methods": []
      },
      {
        "protocol": "RuntimeProtocol",
        "implementation": "RuntimeStateSnapshot",
        "missing_methods": [
          "resume",
          "pause",
          "health_check",
          "get_runtime_stats",
          "shutdown",
          "run"
        ],
        "extra_methods": []
      },
      {
        "protocol": "RuntimeProtocol",
        "implementation": "RuntimeConfig",
        "missing_methods": [
          "resume",
          "pause",
          "health_check",
          "get_runtime_stats",
          "shutdown",
          "run"
        ],
        "extra_methods": []
      },
      {
        "protocol": "RuntimeProtocol",
        "implementation": "RuntimeControlServiceProtocol",
        "missing_methods": [
          "shutdown",
          "run",
          "resume",
          "pause",
          "health_check",
          "get_runtime_stats"
        ],
        "extra_methods": [
          "get_processor_queue_status",
          "reset_circuit_breakers",
          "update_service_priority",
          "restore_config",
          "list_adapters",
          "validate_config",
          "single_step",
          "get_service_health_status",
          "backup_config",
          "get_adapter_info",
          "handle_emergency_shutdown",
          "get_circuit_breaker_status",
          "update_config",
          "get_runtime_snapshot",
          "get_runtime_status",
          "unload_adapter",
          "get_events_history",
          "load_adapter",
          "shutdown_runtime",
          "get_config",
          "pause_processing",
          "get_service_selection_explanation",
          "list_config_backups",
          "resume_processing"
        ]
      },
      {
        "protocol": "ServiceInitializerProtocol",
        "implementation": "ServiceInitializer",
        "missing_methods": [
          "initialize_services",
          "teardown_services",
          "validate_dependencies",
          "bootstrap",
          "get_initialization_order"
        ],
        "extra_methods": [
          "verify_security_services",
          "load_modules",
          "initialize_infrastructure_services",
          "initialize_all_services",
          "initialize_memory_service",
          "register_core_services",
          "verify_core_services",
          "get_metrics",
          "initialize_security_services",
          "verify_memory_service"
        ]
      },
      {
        "protocol": "IdentityVarianceMonitorProtocol",
        "implementation": "IdentityVarianceMonitor",
        "missing_methods": [
          "alert_on_variance",
          "get_variance_history",
          "update_baseline",
          "get_baseline",
          "measure_drift"
        ],
        "extra_methods": [
          "check_variance",
          "get_capabilities",
          "set_service_registry",
          "initialize_baseline",
          "get_service_type",
          "get_status",
          "is_healthy",
          "rebaseline_with_approval"
        ]
      },
      {
        "protocol": "VisibilityServiceProtocol",
        "implementation": "VisibilityService",
        "missing_methods": [],
        "extra_methods": [
          "apply_redaction",
          "get_recent_traces",
          "get_service_type",
          "get_task_history"
        ]
      },
      {
        "protocol": "ResourceMonitorServiceProtocol",
        "implementation": "ResourceMonitorService",
        "missing_methods": [
          "start",
          "stop"
        ],
        "extra_methods": [
          "is_healthy",
          "get_service_type",
          "get_status"
        ]
      },
      {
        "protocol": "AuthenticationServiceProtocol",
        "implementation": "AuthenticationService",
        "missing_methods": [],
        "extra_methods": [
          "get_capabilities",
          "get_service_type",
          "is_healthy",
          "start",
          "get_status",
          "get_metrics",
          "stop"
        ]
      },
      {
        "protocol": "DatabaseMaintenanceServiceProtocol",
        "implementation": "DatabaseMaintenanceService",
        "missing_methods": [],
        "extra_methods": [
          "get_metrics",
          "get_service_type",
          "get_capabilities"
        ]
      },
      {
        "protocol": "OAuthService",
        "implementation": "WACLIOAuthService",
        "missing_methods": [
          "create_oauth_wa",
          "get_oauth_providers",
          "handle_oauth_callback",
          "save_oauth_provider",
          "get_oauth_url"
        ],
        "extra_methods": [
          "oauth_login",
          "oauth_setup"
        ]
      },
      {
        "protocol": "AdaptiveFilterServiceProtocol",
        "implementation": "AdaptiveFilterService",
        "missing_methods": [],
        "extra_methods": [
          "get_filter_decision_for_anonymous",
          "get_capabilities",
          "get_service_type",
          "anonymize_user_profile",
          "handle_consent_transition",
          "get_status",
          "get_metrics"
        ]
      },
      {
        "protocol": "WiseAuthorityServiceProtocol",
        "implementation": "CLIWiseAuthorityService",
        "missing_methods": [
          "revoke_permission",
          "check_authorization",
          "get_pending_deferrals",
          "grant_permission",
          "list_permissions",
          "get_guidance",
          "request_approval",
          "resolve_deferral"
        ],
        "extra_methods": [
          "get_capabilities",
          "get_service_type",
          "start",
          "is_healthy",
          "get_status",
          "stop"
        ]
      },
      {
        "protocol": "WiseAuthorityServiceProtocol",
        "implementation": "DiscordAdapter",
        "missing_methods": [],
        "extra_methods": [
          "wait_until_ready",
          "get_services_to_register",
          "fetch_messages",
          "execute_tool",
          "get_metrics",
          "get_capabilities",
          "get_channel_list",
          "on_raw_reaction_add",
          "send_message",
          "get_service_type",
          "get_status",
          "send_deferral_legacy",
          "is_healthy",
          "stop",
          "list_tools",
          "get_home_channel_id",
          "start",
          "attach_to_client",
          "get_active_channels"
        ]
      },
      {
        "protocol": "WiseAuthorityServiceProtocol",
        "implementation": "WiseAuthorityService",
        "missing_methods": [],
        "extra_methods": [
          "get_service_type",
          "get_status"
        ]
      },
      {
        "protocol": "CommunicationServiceProtocol",
        "implementation": "CLIAdapter",
        "missing_methods": [],
        "extra_methods": [
          "get_service_type",
          "execute_tool",
          "get_tool_info",
          "get_status",
          "get_metrics",
          "is_healthy",
          "stop",
          "list_tools",
          "validate_parameters",
          "get_capabilities",
          "get_channel_list",
          "get_available_tools",
          "get_tool_schema",
          "start",
          "get_tool_result",
          "get_all_tool_info"
        ]
      },
      {
        "protocol": "CommunicationServiceProtocol",
        "implementation": "APICommunicationService",
        "missing_methods": [],
        "extra_methods": [
          "get_capabilities",
          "get_service_type",
          "unregister_websocket",
          "start",
          "register_websocket",
          "get_status",
          "stop"
        ]
      },
      {
        "protocol": "CommunicationServiceProtocol",
        "implementation": "DiscordAdapter",
        "missing_methods": [],
        "extra_methods": [
          "fetch_guidance",
          "wait_until_ready",
          "check_authorization",
          "get_services_to_register",
          "get_service_type",
          "execute_tool",
          "get_status",
          "send_deferral_legacy",
          "get_metrics",
          "stop",
          "list_tools",
          "is_healthy",
          "resolve_deferral",
          "revoke_permission",
          "get_capabilities",
          "get_channel_list",
          "get_pending_deferrals",
          "on_raw_reaction_add",
          "grant_permission",
          "send_deferral",
          "list_permissions",
          "start",
          "get_guidance",
          "request_approval",
          "attach_to_client",
          "get_active_channels"
        ]
      },
      {
        "protocol": "TimeServiceProtocol",
        "implementation": "TimeService",
        "missing_methods": [],
        "extra_methods": [
          "get_capabilities",
          "get_service_type",
          "get_adjusted_time",
          "get_ntp_offset",
          "get_metrics"
        ]
      },
      {
        "protocol": "TimeServiceProtocol",
        "implementation": "TimeServiceConfig",
        "missing_methods": [
          "now",
          "now_iso",
          "timestamp",
          "get_uptime"
        ],
        "extra_methods": []
      },
      {
        "protocol": "TimeServiceProtocol",
        "implementation": "TimeServiceStatus",
        "missing_methods": [
          "now",
          "now_iso",
          "timestamp",
          "get_uptime"
        ],
        "extra_methods": []
      },
      {
        "protocol": "InitializationServiceProtocol",
        "implementation": "InitializationService",
        "missing_methods": [],
        "extra_methods": [
          "is_healthy",
          "get_metrics",
          "get_service_type",
          "get_capabilities"
        ]
      },
      {
        "protocol": "TaskSchedulerServiceProtocol",
        "implementation": "TaskSchedulerService",
        "missing_methods": [],
        "extra_methods": [
          "is_healthy",
          "get_metrics",
          "get_service_type",
          "get_capabilities"
        ]
      },
      {
        "protocol": "ShutdownServiceProtocol",
        "implementation": "ShutdownService",
        "missing_methods": [],
        "extra_methods": [
          "get_capabilities",
          "get_service_type",
          "start",
          "get_metrics",
          "stop"
        ]
      },
      {
        "protocol": "SelfObservationServiceProtocol",
        "implementation": "SelfObservationService",
        "missing_methods": [],
        "extra_methods": [
          "get_capabilities",
          "get_service_type",
          "get_status",
          "get_metrics",
          "is_healthy"
        ]
      },
      {
        "protocol": "IncidentManagementServiceProtocol",
        "implementation": "IncidentManagementService",
        "missing_methods": [
          "start",
          "store_in_graph",
          "stop",
          "query_graph"
        ],
        "extra_methods": [
          "get_metrics",
          "get_service_type",
          "get_incident_count"
        ]
      },
      {
        "protocol": "AuditServiceProtocol",
        "implementation": "GraphAuditService",
        "missing_methods": [],
        "extra_methods": [
          "get_node_type",
          "get_service_type",
          "start",
          "get_metrics",
          "stop"
        ]
      },
      {
        "protocol": "MemoryServiceProtocol",
        "implementation": "LocalGraphMemoryService",
        "missing_methods": [],
        "extra_methods": [
          "get_node_type",
          "get_service_type",
          "query_graph",
          "start",
          "is_healthy",
          "store_in_graph",
          "stop"
        ]
      },
      {
        "protocol": "GraphConfigServiceProtocol",
        "implementation": "GraphConfigService",
        "missing_methods": [],
        "extra_methods": [
          "get_node_type",
          "get_service_type",
          "query_graph",
          "start",
          "store_in_graph",
          "get_metrics",
          "stop"
        ]
      },
      {
        "protocol": "TSDBConsolidationServiceProtocol",
        "implementation": "TSDBConsolidationService",
        "missing_methods": [],
        "extra_methods": [
          "get_metrics",
          "get_service_type"
        ]
      },
      {
        "protocol": "TelemetryServiceProtocol",
        "implementation": "GraphTelemetryService",
        "missing_methods": [],
        "extra_methods": [
          "get_node_type",
          "get_service_type",
          "start",
          "get_aggregated_telemetry",
          "get_metrics",
          "stop"
        ]
      },
      {
        "protocol": "TelemetryServiceProtocol",
        "implementation": "TelemetryServiceStatus",
        "missing_methods": [
          "get_telemetry_summary",
          "record_metric",
          "query_metrics",
          "get_metric_summary",
          "get_metric_count"
        ],
        "extra_methods": []
      }
    ],
    "untyped_usage": []
  },
  "all_classes": {
    "ParameterType": {
      "name": "ParameterType",
      "file": "ciris_engine/schemas/tools.py",
      "line": 14,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Parameter types for tools."
    },
    "ToolStatus": {
      "name": "ToolStatus",
      "file": "ciris_engine/schemas/tools.py",
      "line": 24,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Status of tool execution."
    },
    "ToolParameter": {
      "name": "ToolParameter",
      "file": "ciris_engine/schemas/tools.py",
      "line": 34,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Definition of a tool parameter."
    },
    "Tool": {
      "name": "Tool",
      "file": "ciris_engine/schemas/tools.py",
      "line": 46,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Tool definition."
    },
    "ToolResult": {
      "name": "ToolResult",
      "file": "ciris_engine/schemas/adapters/tools.py",
      "line": 47,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from tool execution."
    },
    "EpistemicFaculty": {
      "name": "EpistemicFaculty",
      "file": "ciris_engine/protocols/faculties.py",
      "line": 9,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "analyze",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 13
        },
        {
          "name": "get_name",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 27
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 32
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for epistemic faculties used in conscience bounce mechanism."
    },
    "PipelineControlProtocol": {
      "name": "PipelineControlProtocol",
      "file": "ciris_engine/protocols/pipeline_control.py",
      "line": 14,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "should_pause_at",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 17
        },
        {
          "name": "pause_at_step_point",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 21
        },
        {
          "name": "wait_for_resume",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 37
        },
        {
          "name": "should_abort",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 41
        },
        {
          "name": "get_pipeline_state",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 45
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for controlling pipeline execution and step points."
    },
    "PipelineController": {
      "name": "PipelineController",
      "file": "ciris_engine/protocols/pipeline_control.py",
      "line": 50,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 57
        },
        {
          "name": "should_pause_at",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 72
        },
        {
          "name": "pause_at_step_point",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 87
        },
        {
          "name": "wait_for_resume",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 124
        },
        {
          "name": "resume_thought",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 131
        },
        {
          "name": "resume_all",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 136
        },
        {
          "name": "abort_thought",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 141
        },
        {
          "name": "should_abort",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 147
        },
        {
          "name": "get_pipeline_state",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 151
        },
        {
          "name": "drain_pipeline_step",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 155
        },
        {
          "name": "_update_thought_data",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 170
        },
        {
          "name": "_create_step_result",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 188
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Concrete implementation of pipeline control for single-stepping.\n\nThis is injected into processors when single-stepping is enabled."
    },
    "ConsentManagerProtocol": {
      "name": "ConsentManagerProtocol",
      "file": "ciris_engine/protocols/consent.py",
      "line": 22,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "get_consent",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 29
        },
        {
          "name": "grant_consent",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 38
        },
        {
          "name": "revoke_consent",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 47
        },
        {
          "name": "check_expiry",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 56
        },
        {
          "name": "get_impact_report",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 65
        },
        {
          "name": "get_audit_trail",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 74
        },
        {
          "name": "cleanup_expired",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 82
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for managing user consent.\nNO FAKE DATA - if consent doesn't exist, FAIL FAST."
    },
    "GraphQLClient": {
      "name": "GraphQLClient",
      "file": "ciris_engine/logic/utils/graphql_context_provider.py",
      "line": 22,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 23
        },
        {
          "name": "query",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 27
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "GraphQLContextProvider": {
      "name": "GraphQLContextProvider",
      "file": "ciris_engine/logic/utils/graphql_context_provider.py",
      "line": 45,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 46
        },
        {
          "name": "enrich_context",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 60
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "ShutdownManagerWrapper": {
      "name": "ShutdownManagerWrapper",
      "file": "ciris_engine/logic/utils/shutdown_manager.py",
      "line": 74,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 77
        },
        {
          "name": "__getattr__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 80
        },
        {
          "name": "execute_async_handlers",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 83
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Wrapper to provide compatibility methods."
    },
    "IncidentCaptureHandler": {
      "name": "IncidentCaptureHandler",
      "file": "ciris_engine/logic/utils/incident_capture_handler.py",
      "line": 17,
      "bases": [
        "Handler"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 23
        },
        {
          "name": "_create_symlink",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 70
        },
        {
          "name": "emit",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 80
        },
        {
          "name": "_save_incident_to_graph",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 114
        },
        {
          "name": "_map_log_level_to_severity",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 177
        },
        {
          "name": "_calculate_urgency",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 188
        },
        {
          "name": "set_graph_audit_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 198
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "A logging handler that captures WARNING and ERROR level messages as incidents.\nThese incidents are stored in the graph for analysis, pattern detection, and self-improvement."
    },
    "InitializationError": {
      "name": "InitializationError",
      "file": "ciris_engine/logic/utils/initialization_manager.py",
      "line": 19,
      "bases": [
        "Exception"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Error during initialization."
    },
    "DirectorySetupError": {
      "name": "DirectorySetupError",
      "file": "ciris_engine/logic/utils/directory_setup.py",
      "line": 15,
      "bases": [
        "Exception"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Base exception for directory setup failures."
    },
    "PermissionError": {
      "name": "PermissionError",
      "file": "ciris_engine/logic/utils/directory_setup.py",
      "line": 21,
      "bases": [
        "DirectorySetupError"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Raised when directory permissions are incorrect and cannot be fixed."
    },
    "DiskSpaceError": {
      "name": "DiskSpaceError",
      "file": "ciris_engine/logic/utils/directory_setup.py",
      "line": 27,
      "bases": [
        "DirectorySetupError"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Raised when insufficient disk space is available."
    },
    "DirectoryCreationError": {
      "name": "DirectoryCreationError",
      "file": "ciris_engine/logic/utils/directory_setup.py",
      "line": 33,
      "bases": [
        "DirectorySetupError"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Raised when a directory cannot be created."
    },
    "OwnershipError": {
      "name": "OwnershipError",
      "file": "ciris_engine/logic/utils/directory_setup.py",
      "line": 39,
      "bases": [
        "DirectorySetupError"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Raised when ownership cannot be fixed."
    },
    "WriteTestError": {
      "name": "WriteTestError",
      "file": "ciris_engine/logic/utils/directory_setup.py",
      "line": 45,
      "bases": [
        "DirectorySetupError"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Raised when write test fails."
    },
    "AdapterInstance": {
      "name": "AdapterInstance",
      "file": "ciris_engine/logic/runtime/adapter_manager.py",
      "line": 41,
      "bases": [],
      "methods": [
        {
          "name": "__post_init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 54
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "dataclass"
      ],
      "docstring": "Information about a loaded adapter instance"
    },
    "AdapterManagerInterface": {
      "name": "AdapterManagerInterface",
      "file": "ciris_engine/logic/runtime/adapter_manager.py",
      "line": 59,
      "bases": [],
      "methods": [
        {
          "name": "load_adapter",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 62
        },
        {
          "name": "unload_adapter",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 68
        },
        {
          "name": "reload_adapter",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 72
        },
        {
          "name": "list_adapters",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 78
        },
        {
          "name": "get_adapter_status",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 82
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Interface for runtime adapter management operations"
    },
    "RuntimeAdapterManager": {
      "name": "RuntimeAdapterManager",
      "file": "ciris_engine/logic/runtime/adapter_manager.py",
      "line": 87,
      "bases": [
        "AdapterManagerInterface"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 90
        },
        {
          "name": "load_adapter",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 100
        },
        {
          "name": "unload_adapter",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 194
        },
        {
          "name": "reload_adapter",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 300
        },
        {
          "name": "list_adapters",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 350
        },
        {
          "name": "get_adapter_status",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 418
        },
        {
          "name": "_sanitize_config_params",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 514
        },
        {
          "name": "load_adapter_from_template",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 557
        },
        {
          "name": "_register_adapter_services",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 618
        },
        {
          "name": "_unregister_adapter_services",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 677
        },
        {
          "name": "get_adapter_info",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 692
        },
        {
          "name": "get_communication_adapter_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 712
        },
        {
          "name": "_save_adapter_config_to_graph",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 746
        },
        {
          "name": "_remove_adapter_config_from_graph",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 784
        },
        {
          "name": "_register_config_listener",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 811
        },
        {
          "name": "_on_adapter_config_change",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 832
        },
        {
          "name": "register_config_listener",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 871
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Manages runtime adapter lifecycle with configuration support"
    },
    "ModularServiceLoader": {
      "name": "ModularServiceLoader",
      "file": "ciris_engine/logic/runtime/modular_service_loader.py",
      "line": 21,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 24
        },
        {
          "name": "discover_services",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 28
        },
        {
          "name": "validate_manifest",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 57
        },
        {
          "name": "check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 67
        },
        {
          "name": "load_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 95
        },
        {
          "name": "get_service_metadata",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 159
        },
        {
          "name": "initialize_modular_services",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 163
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Loads modular services from external packages."
    },
    "ModuleLoader": {
      "name": "ModuleLoader",
      "file": "ciris_engine/logic/runtime/module_loader.py",
      "line": 19,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 22
        },
        {
          "name": "load_module",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 28
        },
        {
          "name": "_handle_mock_module",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 62
        },
        {
          "name": "_handle_real_module",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 86
        },
        {
          "name": "is_service_type_mocked",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 100
        },
        {
          "name": "get_mock_warnings",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 104
        },
        {
          "name": "initialize_module_services",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 117
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Loads modules with MOCK safety enforcement."
    },
    "CIRISRuntime": {
      "name": "CIRISRuntime",
      "file": "ciris_engine/logic/runtime/ciris_runtime.py",
      "line": 39,
      "bases": [],
      "methods": [
        {
          "name": "__new__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 46
        },
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 52
        },
        {
          "name": "service_registry",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 124
        },
        {
          "name": "bus_manager",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 128
        },
        {
          "name": "memory_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 132
        },
        {
          "name": "resource_monitor",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 136
        },
        {
          "name": "secrets_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 141
        },
        {
          "name": "wa_auth_system",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 145
        },
        {
          "name": "telemetry_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 149
        },
        {
          "name": "llm_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 153
        },
        {
          "name": "audit_services",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 157
        },
        {
          "name": "audit_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 161
        },
        {
          "name": "adaptive_filter_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 165
        },
        {
          "name": "agent_config_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 169
        },
        {
          "name": "config_manager",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 173
        },
        {
          "name": "transaction_orchestrator",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 178
        },
        {
          "name": "core_tool_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 182
        },
        {
          "name": "time_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 186
        },
        {
          "name": "config_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 190
        },
        {
          "name": "task_scheduler",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 195
        },
        {
          "name": "authentication_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 200
        },
        {
          "name": "incident_management_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 205
        },
        {
          "name": "runtime_control_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 210
        },
        {
          "name": "profile",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 215
        },
        {
          "name": "maintenance_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 245
        },
        {
          "name": "shutdown_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 249
        },
        {
          "name": "initialization_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 254
        },
        {
          "name": "tsdb_consolidation_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 259
        },
        {
          "name": "self_observation_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 264
        },
        {
          "name": "visibility_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 269
        },
        {
          "name": "_ensure_shutdown_event",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 273
        },
        {
          "name": "_ensure_config",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 281
        },
        {
          "name": "request_shutdown",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 287
        },
        {
          "name": "_request_shutdown",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 306
        },
        {
          "name": "set_preload_tasks",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 310
        },
        {
          "name": "get_preload_tasks",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 315
        },
        {
          "name": "initialize",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 319
        },
        {
          "name": "_initialize_identity",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 393
        },
        {
          "name": "_register_initialization_steps",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 401
        },
        {
          "name": "_initialize_infrastructure",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 497
        },
        {
          "name": "_verify_infrastructure",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 532
        },
        {
          "name": "_init_database",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 546
        },
        {
          "name": "_verify_database_integrity",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 558
        },
        {
          "name": "_initialize_memory_service",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 579
        },
        {
          "name": "_verify_memory_service",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 584
        },
        {
          "name": "_verify_identity_integrity",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 588
        },
        {
          "name": "_initialize_security_services",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 595
        },
        {
          "name": "_verify_security_services",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 600
        },
        {
          "name": "_initialize_services",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 604
        },
        {
          "name": "_verify_core_services",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 643
        },
        {
          "name": "_initialize_maintenance_service",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 647
        },
        {
          "name": "_start_adapters",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 657
        },
        {
          "name": "_wait_for_critical_services",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 665
        },
        {
          "name": "_migrate_adapter_configs_to_graph",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 731
        },
        {
          "name": "_final_verification",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 771
        },
        {
          "name": "_perform_startup_maintenance",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 797
        },
        {
          "name": "_clean_runtime_configs",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 815
        },
        {
          "name": "_register_adapter_services",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 864
        },
        {
          "name": "_build_components",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 925
        },
        {
          "name": "_start_adapter_connections",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 960
        },
        {
          "name": "_register_core_services",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1056
        },
        {
          "name": "_build_action_dispatcher",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1060
        },
        {
          "name": "run",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1096
        },
        {
          "name": "shutdown",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1210
        },
        {
          "name": "_preserve_shutdown_consciousness",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1579
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Main runtime orchestrator for CIRIS Agent.\nHandles initialization of all components and services.\nImplements the RuntimeInterface protocol."
    },
    "RuntimeInterface": {
      "name": "RuntimeInterface",
      "file": "ciris_engine/logic/runtime/runtime_interface.py",
      "line": 5,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "initialize",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 13
        },
        {
          "name": "run",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 17
        },
        {
          "name": "shutdown",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 21
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [
        "runtime_checkable"
      ],
      "docstring": "Protocol for CIRIS runtimes.\n\nNote: Do not inherit from this Protocol. Instead, implement the methods\nand use isinstance() checks with @runtime_checkable to verify compliance."
    },
    "ComponentBuilder": {
      "name": "ComponentBuilder",
      "file": "ciris_engine/logic/runtime/component_builder.py",
      "line": 34,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 37
        },
        {
          "name": "build_all_components",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 47
        },
        {
          "name": "_build_action_dispatcher",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 288
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Builds all processing components for the runtime."
    },
    "IdentityManager": {
      "name": "IdentityManager",
      "file": "ciris_engine/logic/runtime/identity_manager.py",
      "line": 22,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 25
        },
        {
          "name": "initialize_identity",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 30
        },
        {
          "name": "_load_template",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 63
        },
        {
          "name": "_get_identity_from_graph",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 69
        },
        {
          "name": "_save_identity_to_graph",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 88
        },
        {
          "name": "_create_identity_from_template",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 106
        },
        {
          "name": "verify_identity_integrity",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 187
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Manages agent identity lifecycle."
    },
    "ServiceInitializer": {
      "name": "ServiceInitializer",
      "file": "ciris_engine/logic/runtime/service_initializer.py",
      "line": 45,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 48
        },
        {
          "name": "initialize_infrastructure_services",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 97
        },
        {
          "name": "initialize_memory_service",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 145
        },
        {
          "name": "verify_memory_service",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 284
        },
        {
          "name": "initialize_security_services",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 334
        },
        {
          "name": "verify_security_services",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 366
        },
        {
          "name": "initialize_all_services",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 386
        },
        {
          "name": "_initialize_llm_services",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 690
        },
        {
          "name": "_initialize_secondary_llm",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 759
        },
        {
          "name": "_initialize_audit_services",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 811
        },
        {
          "name": "verify_core_services",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 878
        },
        {
          "name": "load_modules",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 911
        },
        {
          "name": "register_core_services",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 961
        },
        {
          "name": "_migrate_config_to_graph",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1045
        },
        {
          "name": "get_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1078
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Manages initialization of all core services."
    },
    "Service": {
      "name": "Service",
      "file": "ciris_engine/logic/adapters/base.py",
      "line": 12,
      "bases": [
        "ABC"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 15
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 28
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 33
        },
        {
          "name": "retry_with_backoff",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 37
        },
        {
          "name": "get_retry_config",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 110
        },
        {
          "name": "__repr__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 140
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Abstract base class for pluggable services within the CIRIS Engine."
    },
    "BaseObserver": {
      "name": "BaseObserver",
      "file": "ciris_engine/logic/adapters/base_observer.py",
      "line": 51,
      "bases": [
        "ABC"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 54
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 80
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 84
        },
        {
          "name": "_is_agent_message",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 87
        },
        {
          "name": "_apply_message_filtering",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 92
        },
        {
          "name": "_process_message_secrets",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 123
        },
        {
          "name": "_get_recall_ids",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 149
        },
        {
          "name": "_get_correlation_history",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 152
        },
        {
          "name": "_recall_context",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 206
        },
        {
          "name": "_add_to_feedback_queue",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 253
        },
        {
          "name": "_sign_and_add_task",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 280
        },
        {
          "name": "_build_user_lookup_from_history",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 298
        },
        {
          "name": "_format_history_lines",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 315
        },
        {
          "name": "_append_consent_aware_content",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 329
        },
        {
          "name": "_create_channel_snapshot",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 349
        },
        {
          "name": "_create_passive_observation_result",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 373
        },
        {
          "name": "_create_priority_observation_result",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 500
        },
        {
          "name": "handle_incoming_message",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 518
        },
        {
          "name": "_enhance_message",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 569
        },
        {
          "name": "_handle_priority_observation",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 573
        },
        {
          "name": "_handle_passive_observation",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 581
        },
        {
          "name": "_should_process_message",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 588
        },
        {
          "name": "_get_user_consent_stream",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 592
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Common functionality for message observers."
    },
    "CIRISNodeClient": {
      "name": "CIRISNodeClient",
      "file": "ciris_engine/logic/adapters/cirisnode_client.py",
      "line": 34,
      "bases": [
        "Service"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 37
        },
        {
          "name": "_get_audit_service",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 69
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 86
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 90
        },
        {
          "name": "close",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 96
        },
        {
          "name": "is_closed",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 100
        },
        {
          "name": "_post",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 103
        },
        {
          "name": "_get",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 118
        },
        {
          "name": "_put",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 133
        },
        {
          "name": "run_simplebench",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 148
        },
        {
          "name": "run_he300",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 167
        },
        {
          "name": "run_chaos_tests",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 186
        },
        {
          "name": "run_wa_service",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 205
        },
        {
          "name": "log_event",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 224
        },
        {
          "name": "fetch_benchmark_prompts",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 243
        },
        {
          "name": "submit_benchmark_answers",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 271
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Asynchronous client for interacting with CIRISNode."
    },
    "BaseAdapter": {
      "name": "BaseAdapter",
      "file": "ciris_engine/logic/adapters/base_adapter.py",
      "line": 15,
      "bases": [
        "Service"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 25
        },
        {
          "name": "_get_time_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 32
        },
        {
          "name": "get_channel_list",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 38
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Base adapter with common correlation functionality.\n\nProvides:\n- Correlation creation for speak/observe actions\n- Message history fetching from correlations\n- Common telemetry patterns"
    },
    "ContextBuilder": {
      "name": "ContextBuilder",
      "file": "ciris_engine/logic/context/builder.py",
      "line": 18,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 19
        },
        {
          "name": "build_thought_context",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 39
        },
        {
          "name": "build_system_snapshot",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 229
        },
        {
          "name": "_build_secrets_snapshot",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 245
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "BatchContextData": {
      "name": "BatchContextData",
      "file": "ciris_engine/logic/context/batch_context.py",
      "line": 18,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 21
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Pre-fetched data that's the same for all thoughts in a batch."
    },
    "BasicTelemetryCollector": {
      "name": "BasicTelemetryCollector",
      "file": "ciris_engine/logic/telemetry/core.py",
      "line": 27,
      "bases": [
        "BaseService"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 30
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 48
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 52
        },
        {
          "name": "record_metric",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 56
        },
        {
          "name": "_store_metric_correlation",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 130
        },
        {
          "name": "update_system_snapshot",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 137
        },
        {
          "name": "_get_retention_policy",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 186
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 199
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 203
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 207
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Collects and exposes basic telemetry for agent introspection."
    },
    "PathConfig": {
      "name": "PathConfig",
      "file": "ciris_engine/logic/telemetry/hot_cold_config.py",
      "line": 13,
      "bases": [],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "dataclass"
      ],
      "docstring": "Configuration for a specific code path."
    },
    "ModulePathConfig": {
      "name": "ModulePathConfig",
      "file": "ciris_engine/logic/telemetry/hot_cold_config.py",
      "line": 24,
      "bases": [],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "dataclass"
      ],
      "docstring": "Hot/cold path configuration for a module."
    },
    "TSDBLogHandler": {
      "name": "TSDBLogHandler",
      "file": "ciris_engine/logic/telemetry/log_collector.py",
      "line": 19,
      "bases": [
        "Handler"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 22
        },
        {
          "name": "emit",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 28
        },
        {
          "name": "_store_log_correlation",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 82
        },
        {
          "name": "set_async_loop",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 92
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Logging handler that stores logs as TSDB correlations."
    },
    "LogCorrelationCollector": {
      "name": "LogCorrelationCollector",
      "file": "ciris_engine/logic/telemetry/log_collector.py",
      "line": 97,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 105
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 124
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 153
        },
        {
          "name": "add_logger",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 171
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Service that configures logging to store logs in TSDB.\n\nThis collector sets up logging handlers that capture log entries\nand store them as correlations, enabling time-series queries."
    },
    "SecurityFilter": {
      "name": "SecurityFilter",
      "file": "ciris_engine/logic/telemetry/security.py",
      "line": 16,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 19
        },
        {
          "name": "sanitize",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 28
        },
        {
          "name": "_contains_pii",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 52
        },
        {
          "name": "_sanitize_error",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 56
        },
        {
          "name": "_validate_bounds",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 61
        },
        {
          "name": "_check_rate_limit",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 68
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Sanitize telemetry metrics to prevent sensitive data leaks."
    },
    "conscienceEntry": {
      "name": "conscienceEntry",
      "file": "ciris_engine/logic/conscience/registry.py",
      "line": 12,
      "bases": [],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "dataclass"
      ],
      "docstring": ""
    },
    "conscienceRegistry": {
      "name": "conscienceRegistry",
      "file": "ciris_engine/logic/conscience/registry.py",
      "line": 20,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 23
        },
        {
          "name": "register_conscience",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 26
        },
        {
          "name": "get_consciences",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 39
        },
        {
          "name": "set_enabled",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 46
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Registry for dynamic conscience management."
    },
    "ConscienceInterface": {
      "name": "ConscienceInterface",
      "file": "ciris_engine/logic/conscience/interface.py",
      "line": 10,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "check",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 13
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [
        "runtime_checkable"
      ],
      "docstring": "Protocol for all conscience implementations."
    },
    "ConscienceConfig": {
      "name": "ConscienceConfig",
      "file": "ciris_engine/logic/conscience/core.py",
      "line": 34,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "EntropyResult": {
      "name": "EntropyResult",
      "file": "ciris_engine/logic/conscience/core.py",
      "line": 45,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Simple entropy result from LLM"
    },
    "CoherenceResult": {
      "name": "CoherenceResult",
      "file": "ciris_engine/logic/conscience/core.py",
      "line": 51,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Simple coherence result from LLM"
    },
    "_BaseConscience": {
      "name": "_BaseConscience",
      "file": "ciris_engine/logic/conscience/core.py",
      "line": 57,
      "bases": [
        "ConscienceInterface"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 58
        },
        {
          "name": "_create_trace_correlation",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 74
        },
        {
          "name": "_update_trace_correlation",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 129
        },
        {
          "name": "_get_sink",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 151
        },
        {
          "name": "_initialize_time_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 157
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "EntropyConscience": {
      "name": "EntropyConscience",
      "file": "ciris_engine/logic/conscience/core.py",
      "line": 170,
      "bases": [
        "_BaseConscience"
      ],
      "methods": [
        {
          "name": "check",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 171
        },
        {
          "name": "_create_entropy_messages",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 245
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "CoherenceConscience": {
      "name": "CoherenceConscience",
      "file": "ciris_engine/logic/conscience/core.py",
      "line": 264,
      "bases": [
        "_BaseConscience"
      ],
      "methods": [
        {
          "name": "check",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 265
        },
        {
          "name": "_create_coherence_messages",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 335
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "OptimizationVetoConscience": {
      "name": "OptimizationVetoConscience",
      "file": "ciris_engine/logic/conscience/core.py",
      "line": 378,
      "bases": [
        "_BaseConscience"
      ],
      "methods": [
        {
          "name": "check",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 379
        },
        {
          "name": "_create_optimization_veto_messages",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 450
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "EpistemicHumilityConscience": {
      "name": "EpistemicHumilityConscience",
      "file": "ciris_engine/logic/conscience/core.py",
      "line": 476,
      "bases": [
        "_BaseConscience"
      ],
      "methods": [
        {
          "name": "check",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 477
        },
        {
          "name": "_create_epistemic_humility_messages",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 549
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "ThoughtDepthGuardrail": {
      "name": "ThoughtDepthGuardrail",
      "file": "ciris_engine/logic/conscience/thought_depth_guardrail.py",
      "line": 29,
      "bases": [
        "ConscienceInterface"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 32
        },
        {
          "name": "check",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 44
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Enforces maximum thought depth by deferring when limit is reached."
    },
    "AuditHashChain": {
      "name": "AuditHashChain",
      "file": "ciris_engine/logic/audit/hash_chain.py",
      "line": 20,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 23
        },
        {
          "name": "initialize",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 30
        },
        {
          "name": "compute_entry_hash",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 46
        },
        {
          "name": "prepare_entry",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 65
        },
        {
          "name": "get_last_entry",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 87
        },
        {
          "name": "verify_chain_integrity",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 113
        },
        {
          "name": "find_tampering",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 207
        },
        {
          "name": "get_chain_summary",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 248
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Manages the cryptographic hash chain for audit entries"
    },
    "AuditVerifier": {
      "name": "AuditVerifier",
      "file": "ciris_engine/logic/audit/verifier.py",
      "line": 28,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 31
        },
        {
          "name": "initialize",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 38
        },
        {
          "name": "verify_complete_chain",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 48
        },
        {
          "name": "verify_entry",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 112
        },
        {
          "name": "verify_range",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 149
        },
        {
          "name": "find_tampering_fast",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 178
        },
        {
          "name": "_verify_single_entry",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 186
        },
        {
          "name": "_verify_all_signatures",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 218
        },
        {
          "name": "_verify_signatures_in_range",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 261
        },
        {
          "name": "get_verification_report",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 306
        },
        {
          "name": "verify_root_anchors",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 348
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Verifies audit log integrity and detects tampering"
    },
    "AuditSignatureManager": {
      "name": "AuditSignatureManager",
      "file": "ciris_engine/logic/audit/signature_manager.py",
      "line": 26,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 29
        },
        {
          "name": "initialize",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 40
        },
        {
          "name": "_load_or_generate_keys",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 52
        },
        {
          "name": "_generate_new_keypair",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 80
        },
        {
          "name": "_save_keys",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 88
        },
        {
          "name": "_compute_key_id",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 119
        },
        {
          "name": "_register_public_key",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 131
        },
        {
          "name": "sign_entry",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 170
        },
        {
          "name": "verify_signature",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 194
        },
        {
          "name": "_load_public_key",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 231
        },
        {
          "name": "rotate_keys",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 252
        },
        {
          "name": "_revoke_key",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 267
        },
        {
          "name": "get_key_info",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 290
        },
        {
          "name": "key_id",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 327
        },
        {
          "name": "test_signing",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 331
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Manages signing keys and signatures for audit entries"
    },
    "ConfigAccessor": {
      "name": "ConfigAccessor",
      "file": "ciris_engine/logic/config/config_accessor.py",
      "line": 18,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 28
        },
        {
          "name": "set_graph_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 40
        },
        {
          "name": "get",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 46
        },
        {
          "name": "_get_from_bootstrap",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 86
        },
        {
          "name": "get_int",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 112
        },
        {
          "name": "get_float",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 121
        },
        {
          "name": "get_bool",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 130
        },
        {
          "name": "get_str",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 139
        },
        {
          "name": "get_path",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 144
        },
        {
          "name": "exists",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 153
        },
        {
          "name": "get_section",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 158
        },
        {
          "name": "_get_section_from_bootstrap",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 178
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Unified config access with graph + fallback.\n\nServices use this instead of direct config objects, enabling:\n- Runtime config updates without restart\n- Graceful fallback during bootstrap\n- Type-safe access patterns"
    },
    "ConfigBootstrap": {
      "name": "ConfigBootstrap",
      "file": "ciris_engine/logic/config/bootstrap.py",
      "line": 22,
      "bases": [],
      "methods": [
        {
          "name": "_deep_merge",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 26
        },
        {
          "name": "_apply_env_overrides",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 36
        },
        {
          "name": "load_essential_config",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 95
        },
        {
          "name": "get_config_metadata",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 146
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Load essential config from multiple sources in priority order."
    },
    "DMAPromptLoader": {
      "name": "DMAPromptLoader",
      "file": "ciris_engine/logic/dma/prompt_loader.py",
      "line": 19,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 22
        },
        {
          "name": "load_prompt_template",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 39
        },
        {
          "name": "get_system_message",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 111
        },
        {
          "name": "get_user_message",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 150
        },
        {
          "name": "uses_covenant_header",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 167
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Loads and manages DMA prompts from YAML files."
    },
    "ActionSelectionPDMAEvaluator": {
      "name": "ActionSelectionPDMAEvaluator",
      "file": "ciris_engine/logic/dma/action_selection_pdma.py",
      "line": 33,
      "bases": [
        "BaseDMA",
        "ActionSelectionDMAProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 49
        },
        {
          "name": "evaluate",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 71
        },
        {
          "name": "recursive_evaluate_with_faculties",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 109
        },
        {
          "name": "_handle_special_cases",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 144
        },
        {
          "name": "_perform_main_evaluation",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 161
        },
        {
          "name": "_build_system_message",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 213
        },
        {
          "name": "_create_fallback_result",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 312
        },
        {
          "name": "__repr__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 323
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Modular Action Selection PDMA Evaluator.\n\nTakes outputs from Ethical PDMA, CSDMA, and DSDMA and selects a concrete\nhandler action using the Principled Decision-Making Algorithm.\n\nFeatures:\n- Modular component architecture\n- Faculty integration for enhanced evaluation\n- Recursive evaluation on conscience failures\n- Special case handling (wakeup tasks, forced ponder, etc.)"
    },
    "EthicalPDMAEvaluator": {
      "name": "EthicalPDMAEvaluator",
      "file": "ciris_engine/logic/dma/pdma.py",
      "line": 17,
      "bases": [
        "BaseDMA",
        "PDMAProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 23
        },
        {
          "name": "evaluate",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 43
        },
        {
          "name": "__repr__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 100
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Evaluates a thought against core ethical principles using an LLM\nand returns a structured EthicalDMAResult using the 'instructor' library."
    },
    "BaseDSDMA": {
      "name": "BaseDSDMA",
      "file": "ciris_engine/logic/dma/dsdma_base.py",
      "line": 25,
      "bases": [
        "BaseDMA",
        "DSDMAProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 42
        },
        {
          "name": "evaluate",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 102
        },
        {
          "name": "evaluate_thought",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 122
        },
        {
          "name": "evaluate_alias",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 351
        },
        {
          "name": "__repr__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 364
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Abstract Base Class for Domain-Specific Decision-Making Algorithms.\nHandles instructor client patching based on global config."
    },
    "LLMOutputForDSDMA": {
      "name": "LLMOutputForDSDMA",
      "file": "ciris_engine/logic/dma/dsdma_base.py",
      "line": 96,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "BaseDMA": {
      "name": "BaseDMA",
      "file": "ciris_engine/logic/dma/base_dma.py",
      "line": 22,
      "bases": [
        "ABC"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 29
        },
        {
          "name": "_load_prompts",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 50
        },
        {
          "name": "get_llm_service",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 102
        },
        {
          "name": "call_llm_structured",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 110
        },
        {
          "name": "apply_faculties",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 149
        },
        {
          "name": "get_algorithm_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 178
        },
        {
          "name": "evaluate",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 184
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Concrete base class for Decision Making Algorithms.\n\nThis class provides the implementation of the BaseDMAInterface\nwith backward compatibility for existing DMAs."
    },
    "CSDMAEvaluator": {
      "name": "CSDMAEvaluator",
      "file": "ciris_engine/logic/dma/csdma.py",
      "line": 29,
      "bases": [
        "BaseDMA",
        "CSDMAProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 35
        },
        {
          "name": "_create_csdma_messages_for_instructor",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 66
        },
        {
          "name": "evaluate_thought",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 109
        },
        {
          "name": "evaluate",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 208
        },
        {
          "name": "__repr__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 218
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Evaluates a thought for common-sense plausibility using an LLM\nand returns a structured CSDMAResult using the 'instructor' library."
    },
    "DMAFailure": {
      "name": "DMAFailure",
      "file": "ciris_engine/logic/dma/exceptions.py",
      "line": 1,
      "bases": [
        "Exception"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Raised when a DMA repeatedly fails or times out."
    },
    "SecretsService": {
      "name": "SecretsService",
      "file": "ciris_engine/logic/secrets/service.py",
      "line": 32,
      "bases": [
        "BaseService",
        "SecretsServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 40
        },
        {
          "name": "process_incoming_text",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 78
        },
        {
          "name": "recall_secret",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 140
        },
        {
          "name": "decapsulate_secrets_in_parameters",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 174
        },
        {
          "name": "_deep_decapsulate",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 200
        },
        {
          "name": "_decapsulate_string",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 219
        },
        {
          "name": "update_filter_config",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 256
        },
        {
          "name": "list_stored_secrets",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 299
        },
        {
          "name": "forget_secret",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 315
        },
        {
          "name": "_auto_forget_task_secrets",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 333
        },
        {
          "name": "_enable_auto_forget",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 357
        },
        {
          "name": "_disable_auto_forget",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 361
        },
        {
          "name": "_get_auto_decapsulate_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 365
        },
        {
          "name": "encrypt",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 385
        },
        {
          "name": "decrypt",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 395
        },
        {
          "name": "store_secret",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 411
        },
        {
          "name": "retrieve_secret",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 425
        },
        {
          "name": "get_filter_config",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 439
        },
        {
          "name": "get_service_stats",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 446
        },
        {
          "name": "_on_start",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 488
        },
        {
          "name": "_on_stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 492
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 500
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 504
        },
        {
          "name": "_register_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 508
        },
        {
          "name": "reencrypt_all",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 513
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 545
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 563
        },
        {
          "name": "get_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 596
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 634
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Central service for secrets management in CIRIS Agent.\n\nProvides unified interface for detection, storage, retrieval,\nand automatic decapsulation of secrets during action execution."
    },
    "SecretsStore": {
      "name": "SecretsStore",
      "file": "ciris_engine/logic/secrets/store.py",
      "line": 23,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 31
        },
        {
          "name": "_get_auto_decapsulate_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 59
        },
        {
          "name": "_init_database",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 78
        },
        {
          "name": "store_secret",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 134
        },
        {
          "name": "retrieve_secret",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 209
        },
        {
          "name": "decrypt_secret_value",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 282
        },
        {
          "name": "delete_secret",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 300
        },
        {
          "name": "list_secrets",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 328
        },
        {
          "name": "list_all_secrets",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 379
        },
        {
          "name": "_check_rate_limits",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 388
        },
        {
          "name": "_log_access",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 417
        },
        {
          "name": "encrypt_secret",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 468
        },
        {
          "name": "decrypt_secret",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 472
        },
        {
          "name": "rotate_master_key",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 476
        },
        {
          "name": "test_encryption",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 480
        },
        {
          "name": "get_access_logs",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 490
        },
        {
          "name": "reencrypt_all",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 531
        },
        {
          "name": "update_access_log",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 583
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Encrypted storage for secrets with comprehensive access controls.\n\nStores secrets in SQLite database with AES-256-GCM encryption\nand maintains full audit trail of all access."
    },
    "SecretsEncryption": {
      "name": "SecretsEncryption",
      "file": "ciris_engine/logic/secrets/encryption.py",
      "line": 19,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 22
        },
        {
          "name": "_generate_master_key",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 37
        },
        {
          "name": "_derive_key",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 41
        },
        {
          "name": "encrypt_secret",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 59
        },
        {
          "name": "decrypt_secret",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 80
        },
        {
          "name": "rotate_master_key",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 103
        },
        {
          "name": "get_master_key",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 125
        },
        {
          "name": "generate_key_from_password",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 130
        },
        {
          "name": "test_encryption",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 154
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Handles encryption/decryption of secrets using AES-256-GCM"
    },
    "SecretsFilter": {
      "name": "SecretsFilter",
      "file": "ciris_engine/logic/secrets/filter.py",
      "line": 20,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 28
        },
        {
          "name": "_compile_patterns",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 33
        },
        {
          "name": "detect_secrets",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 45
        },
        {
          "name": "filter_text",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 91
        },
        {
          "name": "_get_pattern_info",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 116
        },
        {
          "name": "add_custom_pattern",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 124
        },
        {
          "name": "remove_custom_pattern",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 133
        },
        {
          "name": "disable_pattern",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 144
        },
        {
          "name": "enable_pattern",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 151
        },
        {
          "name": "get_pattern_stats",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 157
        },
        {
          "name": "export_config",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 178
        },
        {
          "name": "import_config",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 202
        },
        {
          "name": "filter_content",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 222
        },
        {
          "name": "add_pattern",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 246
        },
        {
          "name": "remove_pattern",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 256
        },
        {
          "name": "get_filter_config",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 260
        },
        {
          "name": "update_filter_config",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 284
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Automatic secrets detection and filtering system.\n\nDetects secrets in text and replaces them with secure UUID references\nwhile maintaining context for the agent."
    },
    "Priority": {
      "name": "Priority",
      "file": "ciris_engine/logic/registries/base.py",
      "line": 21,
      "bases": [
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Service priority levels for fallback ordering"
    },
    "SelectionStrategy": {
      "name": "SelectionStrategy",
      "file": "ciris_engine/logic/registries/base.py",
      "line": 31,
      "bases": [
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Provider selection strategy within a priority group."
    },
    "ServiceProvider": {
      "name": "ServiceProvider",
      "file": "ciris_engine/logic/registries/base.py",
      "line": 39,
      "bases": [],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "dataclass"
      ],
      "docstring": "Represents a registered service provider with metadata"
    },
    "HealthCheckProtocol": {
      "name": "HealthCheckProtocol",
      "file": "ciris_engine/logic/registries/base.py",
      "line": 52,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 55
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for services that support health checking"
    },
    "ServiceRegistry": {
      "name": "ServiceRegistry",
      "file": "ciris_engine/logic/registries/base.py",
      "line": 60,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 68
        },
        {
          "name": "register_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 90
        },
        {
          "name": "get_service",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 169
        },
        {
          "name": "_get_service_from_providers",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 214
        },
        {
          "name": "_validate_provider",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 248
        },
        {
          "name": "get_circuit_breaker_details",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 299
        },
        {
          "name": "get_provider_info",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 319
        },
        {
          "name": "unregister",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 358
        },
        {
          "name": "get_services",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 386
        },
        {
          "name": "get_services_by_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 424
        },
        {
          "name": "reset_circuit_breakers",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 459
        },
        {
          "name": "get_all_services",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 465
        },
        {
          "name": "clear_all",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 480
        },
        {
          "name": "wait_ready",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 486
        },
        {
          "name": "_has_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 520
        },
        {
          "name": "get_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 524
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Central registry for all services with priority/fallback support.\n\nManages service registration, discovery, and health monitoring with\ncircuit breaker patterns for resilience."
    },
    "CircuitBreakerError": {
      "name": "CircuitBreakerError",
      "file": "ciris_engine/logic/registries/circuit_breaker.py",
      "line": 17,
      "bases": [
        "Exception"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Exception raised when circuit breaker is open and service is unavailable"
    },
    "CircuitState": {
      "name": "CircuitState",
      "file": "ciris_engine/logic/registries/circuit_breaker.py",
      "line": 21,
      "bases": [
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "CircuitBreakerConfig": {
      "name": "CircuitBreakerConfig",
      "file": "ciris_engine/logic/registries/circuit_breaker.py",
      "line": 28,
      "bases": [],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "dataclass"
      ],
      "docstring": "Configuration for circuit breaker behavior"
    },
    "CircuitBreaker": {
      "name": "CircuitBreaker",
      "file": "ciris_engine/logic/registries/circuit_breaker.py",
      "line": 37,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 47
        },
        {
          "name": "is_available",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 72
        },
        {
          "name": "check_and_raise",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 88
        },
        {
          "name": "record_success",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 93
        },
        {
          "name": "record_failure",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 107
        },
        {
          "name": "_transition_to_open",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 121
        },
        {
          "name": "_transition_to_half_open",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 130
        },
        {
          "name": "_transition_to_closed",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 143
        },
        {
          "name": "get_stats",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 153
        },
        {
          "name": "reset",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 187
        },
        {
          "name": "get_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 197
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Circuit breaker implementation for service resilience.\n\nStates:\n- CLOSED: Normal operation, requests pass through\n- OPEN: Service disabled, requests fail fast\n- HALF_OPEN: Testing recovery, limited requests allowed"
    },
    "BaseInfrastructureService": {
      "name": "BaseInfrastructureService",
      "file": "ciris_engine/logic/services/base_infrastructure_service.py",
      "line": 13,
      "bases": [
        "BaseService"
      ],
      "methods": [
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 26
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 39
        },
        {
          "name": "_get_metadata",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 56
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 67
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Base class for infrastructure services.\n\nInfrastructure services are critical system-level services that:\n- Provide core functionality (time, auth, resource monitoring)\n- Have high availability requirements\n- Are marked as critical in metadata\n\nSubclasses should override get_service_type() to return the\nappropriate ServiceType enum value."
    },
    "GraphNodeConvertible": {
      "name": "GraphNodeConvertible",
      "file": "ciris_engine/logic/services/base_graph_service.py",
      "line": 15,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "to_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 18
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for objects that can be converted to GraphNode."
    },
    "BaseGraphService": {
      "name": "BaseGraphService",
      "file": "ciris_engine/logic/services/graph/base.py",
      "line": 26,
      "bases": [
        "ABC",
        "GraphServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 36
        },
        {
          "name": "_set_memory_bus",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 54
        },
        {
          "name": "_set_time_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 58
        },
        {
          "name": "start",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 62
        },
        {
          "name": "stop",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 82
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 86
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 94
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 98
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 107
        },
        {
          "name": "_track_request",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 111
        },
        {
          "name": "_track_error",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 118
        },
        {
          "name": "_update_telemetry",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 124
        },
        {
          "name": "store_in_graph",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 155
        },
        {
          "name": "query_graph",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 176
        },
        {
          "name": "get_node_type",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 206
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Base class for all graph services providing common functionality.\n\nGraph services store their data through the MemoryBus, which provides:\n- Multiple backend support (Neo4j, ArangoDB, in-memory)\n- Secret detection and encryption\n- Audit trail integration\n- Typed schema validation"
    },
    "BaseScheduledService": {
      "name": "BaseScheduledService",
      "file": "ciris_engine/logic/services/base_scheduled_service.py",
      "line": 13,
      "bases": [
        "BaseService"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 28
        },
        {
          "name": "_on_start",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 43
        },
        {
          "name": "_on_stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 49
        },
        {
          "name": "_run_loop",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 62
        },
        {
          "name": "_run_scheduled_task",
          "is_async": true,
          "is_abstract": true,
          "is_private": true,
          "line": 96
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 107
        },
        {
          "name": "_get_metadata",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 129
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Base class for services with scheduled background tasks.\n\nProvides:\n- Automatic task lifecycle management\n- Configurable run intervals\n- Error handling for scheduled tasks\n- Metrics for task execution\n\nSubclasses MUST implement:\n- _run_scheduled_task() -> None\n- (plus all BaseService abstract methods)"
    },
    "BaseService": {
      "name": "BaseService",
      "file": "ciris_engine/logic/services/base_service.py",
      "line": 24,
      "bases": [
        "ABC",
        "ServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 48
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 87
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": true,
          "is_private": true,
          "line": 92
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": true,
          "is_private": true,
          "line": 97
        },
        {
          "name": "_on_start",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 103
        },
        {
          "name": "_on_stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 107
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 111
        },
        {
          "name": "_get_metadata",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 115
        },
        {
          "name": "_register_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 121
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 128
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 154
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 173
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 178
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 192
        },
        {
          "name": "_now",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 206
        },
        {
          "name": "_calculate_uptime",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 212
        },
        {
          "name": "_collect_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 218
        },
        {
          "name": "get_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 234
        },
        {
          "name": "_track_request",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 245
        },
        {
          "name": "_track_error",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 249
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Base class for all CIRIS services.\n\nProvides:\n- Lifecycle management (start/stop)\n- Health checking\n- Status reporting\n- Metrics collection\n- Dependency tracking\n- Error tracking\n\nSubclasses MUST implement:\n- get_service_type() -> ServiceType\n- _get_actions() -> List[str]\n- _check_dependencies() -> bool\n\nSubclasses MAY override:\n- _on_start() -> None (for custom startup logic)\n- _on_stop() -> None (for custom cleanup)\n- _collect_custom_metrics() -> Dict[str, float]\n- _get_metadata() -> ServiceMetadata"
    },
    "DatabaseMaintenanceService": {
      "name": "DatabaseMaintenanceService",
      "file": "ciris_engine/logic/persistence/maintenance.py",
      "line": 30,
      "bases": [
        "BaseScheduledService",
        "DatabaseMaintenanceServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 35
        },
        {
          "name": "_run_scheduled_task",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 57
        },
        {
          "name": "_perform_periodic_maintenance",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 65
        },
        {
          "name": "_on_stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 73
        },
        {
          "name": "_final_cleanup",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 77
        },
        {
          "name": "get_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 81
        },
        {
          "name": "_get_archive_size_mb",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 98
        },
        {
          "name": "_time_until_next_run",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 105
        },
        {
          "name": "perform_startup_cleanup",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 112
        },
        {
          "name": "_cleanup_invalid_thoughts",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 232
        },
        {
          "name": "_cleanup_runtime_config",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 273
        },
        {
          "name": "_cleanup_stale_wakeup_tasks",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 320
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 394
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 406
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 410
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 414
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 418
        },
        {
          "name": "_is_cleanup_due",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 451
        },
        {
          "name": "_is_archive_due",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 456
        },
        {
          "name": "get_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 461
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Service for performing database maintenance tasks like cleanup and archiving."
    },
    "BusManager": {
      "name": "BusManager",
      "file": "ciris_engine/logic/buses/bus_manager.py",
      "line": 22,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 35
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 72
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 84
        },
        {
          "name": "get_stats",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 101
        },
        {
          "name": "get_total_queue_size",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 108
        },
        {
          "name": "health_check",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 112
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Central manager for all message buses.\n\nManages 6 buses for services with multiple providers.\nSingle-instance services are accessed directly, not through buses.\n\nHandlers access buses through this manager:\n- bus_manager.communication.send_message(...)\n- bus_manager.memory.memorize(...)\n- etc."
    },
    "WiseBus": {
      "name": "WiseBus",
      "file": "ciris_engine/logic/buses/wise_bus.py",
      "line": 30,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 43
        },
        {
          "name": "_get_tier_from_config",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 59
        },
        {
          "name": "_get_tier_from_memory",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 79
        },
        {
          "name": "get_agent_tier",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 110
        },
        {
          "name": "send_deferral",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 143
        },
        {
          "name": "fetch_guidance",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 233
        },
        {
          "name": "request_review",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 250
        },
        {
          "name": "_validate_capability",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 264
        },
        {
          "name": "_get_matching_services",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 315
        },
        {
          "name": "_create_guidance_task",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 340
        },
        {
          "name": "_collect_guidance_responses",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 356
        },
        {
          "name": "request_guidance",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 380
        },
        {
          "name": "_fetch_guidance_compat",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 436
        },
        {
          "name": "_arbitrate_responses",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 460
        },
        {
          "name": "_is_capability_allowed",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 509
        },
        {
          "name": "_collect_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 520
        },
        {
          "name": "get_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 535
        },
        {
          "name": "_process_message",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 555
        },
        {
          "name": "_count_capability_categories",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 559
        },
        {
          "name": "_create_telemetry_base",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 573
        },
        {
          "name": "collect_telemetry",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 585
        },
        {
          "name": "_aggregate_provider_telemetry",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 646
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Message bus for all wise authority operations.\n\nHandles:\n- send_deferral\n- fetch_guidance\n- Comprehensive capability prohibition with tier-based access"
    },
    "ProhibitionSeverity": {
      "name": "ProhibitionSeverity",
      "file": "ciris_engine/logic/buses/prohibitions.py",
      "line": 16,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Severity levels for prohibited capabilities."
    },
    "SendMessageRequest": {
      "name": "SendMessageRequest",
      "file": "ciris_engine/logic/buses/communication_bus.py",
      "line": 25,
      "bases": [
        "BusMessage"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "dataclass"
      ],
      "docstring": "Request to send a message"
    },
    "FetchMessagesRequest": {
      "name": "FetchMessagesRequest",
      "file": "ciris_engine/logic/buses/communication_bus.py",
      "line": 33,
      "bases": [
        "BusMessage"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "dataclass"
      ],
      "docstring": "Request to fetch messages"
    },
    "CommunicationBus": {
      "name": "CommunicationBus",
      "file": "ciris_engine/logic/buses/communication_bus.py",
      "line": 40,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 49
        },
        {
          "name": "get_default_channel",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 65
        },
        {
          "name": "send_message",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 110
        },
        {
          "name": "send_message_sync",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 133
        },
        {
          "name": "fetch_messages",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 196
        },
        {
          "name": "_process_message",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 237
        },
        {
          "name": "_process_send_message",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 247
        },
        {
          "name": "_collect_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 308
        },
        {
          "name": "get_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 324
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Message bus for all communication operations.\n\nHandles:\n- send_message\n- fetch_messages"
    },
    "OperationPriority": {
      "name": "OperationPriority",
      "file": "ciris_engine/logic/buses/runtime_control_bus.py",
      "line": 30,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Priority levels for runtime operations"
    },
    "RuntimeControlBus": {
      "name": "RuntimeControlBus",
      "file": "ciris_engine/logic/buses/runtime_control_bus.py",
      "line": 39,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 50
        },
        {
          "name": "get_processor_queue_status",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 69
        },
        {
          "name": "shutdown_runtime",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 102
        },
        {
          "name": "get_config",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 152
        },
        {
          "name": "get_runtime_status",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 171
        },
        {
          "name": "load_adapter",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 203
        },
        {
          "name": "unload_adapter",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 263
        },
        {
          "name": "list_adapters",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 307
        },
        {
          "name": "pause_processing",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 321
        },
        {
          "name": "resume_processing",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 351
        },
        {
          "name": "single_step",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 381
        },
        {
          "name": "get_adapter_info",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 410
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 455
        },
        {
          "name": "get_capabilities",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 466
        },
        {
          "name": "_collect_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 480
        },
        {
          "name": "get_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 495
        },
        {
          "name": "_process_message",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 511
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Message bus for all runtime control operations.\n\nCRITICAL: This bus manages system lifecycle and must:\n- Serialize configuration changes\n- Validate operations before execution\n- Maintain operation ordering\n- Provide graceful degradation"
    },
    "DistributionStrategy": {
      "name": "DistributionStrategy",
      "file": "ciris_engine/logic/buses/llm_bus.py",
      "line": 33,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Strategy for distributing requests among services at the same priority"
    },
    "ServiceMetrics": {
      "name": "ServiceMetrics",
      "file": "ciris_engine/schemas/api/telemetry.py",
      "line": 95,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Service-specific metrics."
    },
    "LLMBusMessage": {
      "name": "LLMBusMessage",
      "file": "ciris_engine/logic/buses/llm_bus.py",
      "line": 68,
      "bases": [
        "BusMessage"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Bus message for LLM generation"
    },
    "LLMBus": {
      "name": "LLMBus",
      "file": "ciris_engine/logic/buses/llm_bus.py",
      "line": 79,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 92
        },
        {
          "name": "call_llm_structured",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 117
        },
        {
          "name": "_generate_structured_sync",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 210
        },
        {
          "name": "_check_service_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 233
        },
        {
          "name": "_get_service_priority_and_metadata",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 245
        },
        {
          "name": "_should_include_service_for_domain",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 258
        },
        {
          "name": "_get_prioritized_services",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 280
        },
        {
          "name": "_group_by_priority",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 316
        },
        {
          "name": "_select_service",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 323
        },
        {
          "name": "_is_service_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 368
        },
        {
          "name": "_check_circuit_breaker",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 376
        },
        {
          "name": "_record_success",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 390
        },
        {
          "name": "_record_failure",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 401
        },
        {
          "name": "_record_resource_telemetry",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 412
        },
        {
          "name": "get_service_stats",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 482
        },
        {
          "name": "get_available_models",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 502
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 519
        },
        {
          "name": "get_capabilities",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 530
        },
        {
          "name": "_process_message",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 542
        },
        {
          "name": "get_stats",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 552
        },
        {
          "name": "_collect_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 559
        },
        {
          "name": "get_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 585
        },
        {
          "name": "_is_service_available_sync",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 621
        },
        {
          "name": "clear_circuit_breakers",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 638
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Message bus for all LLM operations with redundancy and distribution.\n\nFeatures:\n- Multiple redundant LLM providers\n- Priority-based selection\n- Distribution strategies (round-robin, latency-based)\n- Circuit breakers per service\n- Automatic failover\n- Metrics tracking"
    },
    "BusMessage": {
      "name": "BusMessage",
      "file": "ciris_engine/logic/buses/base_bus.py",
      "line": 20,
      "bases": [],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "dataclass"
      ],
      "docstring": "Base message for all buses"
    },
    "BaseBus": {
      "name": "BaseBus",
      "file": "ciris_engine/logic/buses/base_bus.py",
      "line": 33,
      "bases": [
        "ABC"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 44
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 62
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 72
        },
        {
          "name": "_process_loop",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 84
        },
        {
          "name": "_process_message",
          "is_async": true,
          "is_abstract": true,
          "is_private": true,
          "line": 109
        },
        {
          "name": "_handle_failed_message",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 112
        },
        {
          "name": "get_service",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 116
        },
        {
          "name": "get_queue_size",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 136
        },
        {
          "name": "get_stats",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 140
        },
        {
          "name": "_enqueue",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 150
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Base class for all typed message buses.\n\nEach bus:\n- Handles one service type\n- Manages its own queue\n- Routes to appropriate services\n- Handles failures gracefully"
    },
    "ToolBus": {
      "name": "ToolBus",
      "file": "ciris_engine/logic/buses/tool_bus.py",
      "line": 22,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 35
        },
        {
          "name": "execute_tool",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 50
        },
        {
          "name": "get_available_tools",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 156
        },
        {
          "name": "get_tool_result",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 173
        },
        {
          "name": "validate_parameters",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 192
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 209
        },
        {
          "name": "get_tool_info",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 220
        },
        {
          "name": "get_all_tool_info",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 237
        },
        {
          "name": "get_capabilities",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 254
        },
        {
          "name": "_process_message",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 266
        },
        {
          "name": "_get_all_tool_services",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 270
        },
        {
          "name": "_create_empty_tool_telemetry",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 286
        },
        {
          "name": "_create_tool_telemetry_tasks",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 298
        },
        {
          "name": "_aggregate_tool_telemetry",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 308
        },
        {
          "name": "_collect_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 319
        },
        {
          "name": "get_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 334
        },
        {
          "name": "collect_telemetry",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 360
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Message bus for all tool operations.\n\nHandles:\n- execute_tool (returns ToolExecutionResult)\n- get_available_tools\n- get_tool_result (returns ToolExecutionResult)\n- get_tool_info\n- get_all_tool_info\n- validate_parameters"
    },
    "MemorizeBusMessage": {
      "name": "MemorizeBusMessage",
      "file": "ciris_engine/logic/buses/memory_bus.py",
      "line": 28,
      "bases": [
        "BusMessage"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "dataclass"
      ],
      "docstring": "Bus message to memorize a node"
    },
    "RecallBusMessage": {
      "name": "RecallBusMessage",
      "file": "ciris_engine/logic/buses/memory_bus.py",
      "line": 35,
      "bases": [
        "BusMessage"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "dataclass"
      ],
      "docstring": "Bus message to recall a node"
    },
    "ForgetBusMessage": {
      "name": "ForgetBusMessage",
      "file": "ciris_engine/logic/buses/memory_bus.py",
      "line": 42,
      "bases": [
        "BusMessage"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "dataclass"
      ],
      "docstring": "Bus message to forget a node"
    },
    "MemoryBus": {
      "name": "MemoryBus",
      "file": "ciris_engine/logic/buses/memory_bus.py",
      "line": 48,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 58
        },
        {
          "name": "memorize",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 75
        },
        {
          "name": "recall",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 111
        },
        {
          "name": "forget",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 140
        },
        {
          "name": "search_memories",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 174
        },
        {
          "name": "search",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 248
        },
        {
          "name": "recall_timeseries",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 268
        },
        {
          "name": "memorize_metric",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 296
        },
        {
          "name": "memorize_log",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 323
        },
        {
          "name": "export_identity_context",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 348
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 368
        },
        {
          "name": "get_capabilities",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 379
        },
        {
          "name": "_process_message",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 391
        },
        {
          "name": "_create_empty_telemetry",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 399
        },
        {
          "name": "_create_telemetry_tasks",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 411
        },
        {
          "name": "_aggregate_telemetry_result",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 421
        },
        {
          "name": "collect_telemetry",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 431
        },
        {
          "name": "_collect_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 487
        },
        {
          "name": "get_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 502
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Message bus for all memory operations.\n\nHandles:\n- memorize\n- recall\n- forget"
    },
    "PartnershipRequestHandler": {
      "name": "PartnershipRequestHandler",
      "file": "ciris_engine/logic/utils/consent/partnership_utils.py",
      "line": 22,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 29
        },
        {
          "name": "create_partnership_task",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 33
        },
        {
          "name": "check_task_outcome",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 102
        },
        {
          "name": "_map_task_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 126
        },
        {
          "name": "_check_thoughts_for_outcome",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 138
        },
        {
          "name": "_extract_action_from_thought",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 151
        },
        {
          "name": "_extract_reason_from_params",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 168
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Utility class for creating and checking partnership consent tasks.\n\nThis is NOT a handler - it's a helper used by ConsentService to create\ntasks that actual handlers (REJECT/DEFER/TASK_COMPLETE) will process."
    },
    "ActionDispatcher": {
      "name": "ActionDispatcher",
      "file": "ciris_engine/logic/infrastructure/handlers/action_dispatcher.py",
      "line": 17,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 18
        },
        {
          "name": "get_handler",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 39
        },
        {
          "name": "dispatch",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 43
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "ActionHandlerDependencies": {
      "name": "ActionHandlerDependencies",
      "file": "ciris_engine/logic/infrastructure/handlers/base_handler.py",
      "line": 41,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 44
        },
        {
          "name": "request_graceful_shutdown",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 58
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Dependencies for action handlers - clean and simple."
    },
    "BaseActionHandler": {
      "name": "BaseActionHandler",
      "file": "ciris_engine/logic/infrastructure/handlers/base_handler.py",
      "line": 82,
      "bases": [
        "ABC"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 85
        },
        {
          "name": "complete_thought_and_create_followup",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 97
        },
        {
          "name": "handle",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 162
        },
        {
          "name": "_audit_log",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 177
        },
        {
          "name": "_handle_error",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 213
        },
        {
          "name": "_format_validation_errors",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 241
        },
        {
          "name": "_validate_and_convert_params",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 255
        },
        {
          "name": "_decapsulate_secrets_in_params",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 277
        },
        {
          "name": "_get_channel_id",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 320
        },
        {
          "name": "_create_trace_correlation",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 363
        },
        {
          "name": "_update_trace_correlation",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 408
        },
        {
          "name": "_send_notification",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 426
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Abstract base class for all action handlers."
    },
    "FollowUpCreationError": {
      "name": "FollowUpCreationError",
      "file": "ciris_engine/logic/infrastructure/handlers/exceptions.py",
      "line": 1,
      "bases": [
        "Exception"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Raised when a follow-up thought cannot be created."
    },
    "PatternAnalysisLoop": {
      "name": "PatternAnalysisLoop",
      "file": "ciris_engine/logic/infrastructure/sub_services/pattern_analysis_loop.py",
      "line": 40,
      "bases": [
        "BaseScheduledService"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 47
        },
        {
          "name": "set_service_registry",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 66
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 81
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 85
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 98
        },
        {
          "name": "analyze_and_adapt",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 111
        },
        {
          "name": "_detect_patterns",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 163
        },
        {
          "name": "_detect_temporal_patterns",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 195
        },
        {
          "name": "_detect_frequency_patterns",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 221
        },
        {
          "name": "_detect_performance_patterns",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 277
        },
        {
          "name": "_detect_error_patterns",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 324
        },
        {
          "name": "_store_pattern_insights",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 393
        },
        {
          "name": "_update_learning_state",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 428
        },
        {
          "name": "_get_actions_by_hour",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 457
        },
        {
          "name": "_analyze_tool_usage_by_time",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 480
        },
        {
          "name": "_analyze_response_time_patterns",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 536
        },
        {
          "name": "_analyze_interaction_patterns",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 542
        },
        {
          "name": "_get_action_frequency",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 548
        },
        {
          "name": "_find_dominant_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 601
        },
        {
          "name": "_find_underused_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 615
        },
        {
          "name": "_extract_error_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 639
        },
        {
          "name": "_extract_tool_name",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 657
        },
        {
          "name": "_store_pattern",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 665
        },
        {
          "name": "_run_scheduled_task",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 686
        },
        {
          "name": "_on_start",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 697
        },
        {
          "name": "_on_stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 701
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 711
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 715
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 735
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Service that analyzes behavioral patterns and generates insights for agent learning.\n\nFlow: Metrics \u2192 Pattern Detection \u2192 Insight Generation \u2192 Agent Learning"
    },
    "WACLIOAuthService": {
      "name": "WACLIOAuthService",
      "file": "ciris_engine/logic/infrastructure/sub_services/wa_cli_oauth.py",
      "line": 33,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 36
        },
        {
          "name": "oauth_setup",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 52
        },
        {
          "name": "oauth_login",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 90
        },
        {
          "name": "_exchange_oauth_code",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 153
        },
        {
          "name": "_exchange_code_for_token",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 194
        },
        {
          "name": "_fetch_user_profile",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 236
        },
        {
          "name": "_create_oauth_wa",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 298
        },
        {
          "name": "_start_oauth_callback_server",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 344
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Handles OAuth provider configuration and authentication flows."
    },
    "OAuthCallbackHandler": {
      "name": "OAuthCallbackHandler",
      "file": "ciris_engine/logic/infrastructure/sub_services/wa_cli_oauth.py",
      "line": 349,
      "bases": [
        "SimpleHTTPRequestHandler"
      ],
      "methods": [
        {
          "name": "do_GET",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 352
        },
        {
          "name": "log_message",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 385
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "WACLIWizardService": {
      "name": "WACLIWizardService",
      "file": "ciris_engine/logic/infrastructure/sub_services/wa_cli_wizard.py",
      "line": 21,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 24
        },
        {
          "name": "onboard_wizard",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 38
        },
        {
          "name": "_create_root_wa",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 79
        },
        {
          "name": "_import_root_cert",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 113
        },
        {
          "name": "_join_wa_tree",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 141
        },
        {
          "name": "_configure_oauth",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 158
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Handles interactive wizard flows for WA onboarding."
    },
    "WACLIDisplayService": {
      "name": "WACLIDisplayService",
      "file": "ciris_engine/logic/infrastructure/sub_services/wa_cli_display.py",
      "line": 17,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 20
        },
        {
          "name": "list_was",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 25
        },
        {
          "name": "_display_table",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 43
        },
        {
          "name": "_display_tree",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 62
        },
        {
          "name": "_add_wa_children",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 84
        },
        {
          "name": "show_wa_details",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 103
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Handles WA listing and visualization operations."
    },
    "WACLIBootstrapService": {
      "name": "WACLIBootstrapService",
      "file": "ciris_engine/logic/infrastructure/sub_services/wa_cli_bootstrap.py",
      "line": 17,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 20
        },
        {
          "name": "bootstrap_new_root",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 26
        },
        {
          "name": "mint_wa",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 80
        },
        {
          "name": "generate_mint_request",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 176
        },
        {
          "name": "approve_mint_request",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 215
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Handles WA bootstrap and minting operations."
    },
    "IdentityVarianceMonitor": {
      "name": "IdentityVarianceMonitor",
      "file": "ciris_engine/logic/infrastructure/sub_services/identity_variance_monitor.py",
      "line": 42,
      "bases": [
        "BaseScheduledService"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 53
        },
        {
          "name": "set_service_registry",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 75
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 102
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 106
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 117
        },
        {
          "name": "initialize_baseline",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 123
        },
        {
          "name": "rebaseline_with_approval",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 209
        },
        {
          "name": "check_variance",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 320
        },
        {
          "name": "_take_identity_snapshot",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 388
        },
        {
          "name": "_calculate_differences",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 458
        },
        {
          "name": "_calculate_variance",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 562
        },
        {
          "name": "_generate_simple_recommendations",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 607
        },
        {
          "name": "_trigger_wa_review",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 629
        },
        {
          "name": "_gather_identity_nodes",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 659
        },
        {
          "name": "_gather_config_nodes",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 673
        },
        {
          "name": "_analyze_behavioral_patterns",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 694
        },
        {
          "name": "_extract_ethical_boundaries",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 756
        },
        {
          "name": "_extract_trust_parameters",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 771
        },
        {
          "name": "_extract_current_trust_parameters",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 782
        },
        {
          "name": "_extract_capability_changes",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 797
        },
        {
          "name": "_compare_patterns",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 812
        },
        {
          "name": "_load_baseline",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 839
        },
        {
          "name": "_load_snapshot",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 863
        },
        {
          "name": "_store_variance_report",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 889
        },
        {
          "name": "_run_scheduled_task",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 912
        },
        {
          "name": "_on_start",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 923
        },
        {
          "name": "_on_stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 927
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 935
        },
        {
          "name": "_extract_current_identity",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 939
        },
        {
          "name": "_extract_ethical_boundaries_from_node_attrs",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 974
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 989
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1005
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Monitors identity drift from baseline and enforces the 20% variance threshold.\n\nThis service:\n1. Takes periodic snapshots of identity state\n2. Calculates variance from baseline\n3. Triggers WA review if variance > 20%\n4. Provides recommendations for healthy evolution"
    },
    "CLIObserver": {
      "name": "CLIObserver",
      "file": "ciris_engine/logic/adapters/cli/cli_observer.py",
      "line": 18,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 24
        },
        {
          "name": "_check_for_piped_input",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 56
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 122
        },
        {
          "name": "_process_buffered_input",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 135
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 169
        },
        {
          "name": "_input_loop",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 186
        },
        {
          "name": "_get_recall_ids",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 226
        },
        {
          "name": "_is_cli_channel",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 231
        },
        {
          "name": "_should_process_message",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 262
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Observer that converts CLI input events into observation payloads.\nIncludes adaptive filtering for message prioritization."
    },
    "CLIWiseAuthorityService": {
      "name": "CLIWiseAuthorityService",
      "file": "ciris_engine/logic/adapters/cli/cli_wa_service.py",
      "line": 19,
      "bases": [
        "WiseAuthorityService"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 22
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 27
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 32
        },
        {
          "name": "fetch_guidance",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 37
        },
        {
          "name": "send_deferral",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 54
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 105
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 109
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 113
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 123
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "CLI-based WA service that prompts user for guidance"
    },
    "CLIToolService": {
      "name": "CLIToolService",
      "file": "ciris_engine/logic/adapters/cli/cli_tools.py",
      "line": 32,
      "bases": [
        "BaseService",
        "ToolService"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 35
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 51
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 55
        },
        {
          "name": "execute_tool",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 59
        },
        {
          "name": "_list_files",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 131
        },
        {
          "name": "_read_file",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 144
        },
        {
          "name": "_write_file",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 162
        },
        {
          "name": "_write_file_sync",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 179
        },
        {
          "name": "_shell_command",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 183
        },
        {
          "name": "_search_text",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 204
        },
        {
          "name": "_read_lines_sync",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 226
        },
        {
          "name": "get_available_tools",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 230
        },
        {
          "name": "get_tool_result",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 233
        },
        {
          "name": "validate_parameters",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 240
        },
        {
          "name": "list_tools",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 243
        },
        {
          "name": "get_tool_schema",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 247
        },
        {
          "name": "get_tool_info",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 287
        },
        {
          "name": "get_all_tool_info",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 366
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 375
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 379
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 383
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 393
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 403
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 414
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Simple ToolService providing local filesystem browsing."
    },
    "CliPlatform": {
      "name": "CliPlatform",
      "file": "ciris_engine/logic/adapters/cli/adapter.py",
      "line": 18,
      "bases": [
        "Service"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 21
        },
        {
          "name": "_handle_incoming_message",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 81
        },
        {
          "name": "get_services_to_register",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 96
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 125
        },
        {
          "name": "run_lifecycle",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 158
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 198
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "CLIAdapter": {
      "name": "CLIAdapter",
      "file": "ciris_engine/logic/adapters/cli/cli_adapter.py",
      "line": 42,
      "bases": [
        "Service",
        "CommunicationService",
        "ToolService"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 48
        },
        {
          "name": "_get_time_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 90
        },
        {
          "name": "_emit_telemetry",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 104
        },
        {
          "name": "send_message",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 136
        },
        {
          "name": "fetch_messages",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 217
        },
        {
          "name": "execute_tool",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 296
        },
        {
          "name": "get_available_tools",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 408
        },
        {
          "name": "get_tool_result",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 412
        },
        {
          "name": "validate_parameters",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 416
        },
        {
          "name": "_get_user_input",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 439
        },
        {
          "name": "_handle_interactive_input",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 453
        },
        {
          "name": "_show_help",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 563
        },
        {
          "name": "_tool_list_files",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 579
        },
        {
          "name": "_tool_read_file",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 596
        },
        {
          "name": "_tool_system_info",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 612
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 644
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 669
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 696
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 701
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 705
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 726
        },
        {
          "name": "list_tools",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 742
        },
        {
          "name": "get_tool_schema",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 746
        },
        {
          "name": "get_tool_info",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 768
        },
        {
          "name": "get_all_tool_info",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 805
        },
        {
          "name": "get_home_channel_id",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 814
        },
        {
          "name": "get_channel_list",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 827
        },
        {
          "name": "_collect_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 869
        },
        {
          "name": "get_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 883
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "CLI adapter implementing CommunicationService and ToolService protocols.\nProvides command-line interface for interacting with the CIRIS agent."
    },
    "CLIAdapterConfig": {
      "name": "CLIAdapterConfig",
      "file": "ciris_engine/logic/adapters/cli/config.py",
      "line": 10,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "get_home_channel_id",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 31
        },
        {
          "name": "load_env_vars",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 55
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration for the CLI adapter."
    },
    "ServiceMapping": {
      "name": "ServiceMapping",
      "file": "ciris_engine/logic/adapters/api/service_configuration.py",
      "line": 13,
      "bases": [],
      "methods": [
        {
          "name": "__post_init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 21
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "dataclass"
      ],
      "docstring": "Defines how a single service should be mapped from runtime to API."
    },
    "ApiServiceConfiguration": {
      "name": "ApiServiceConfiguration",
      "file": "ciris_engine/logic/adapters/api/service_configuration.py",
      "line": 29,
      "bases": [],
      "methods": [
        {
          "name": "get_current_mappings_as_tuples",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 108
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Declarative configuration for API adapter service requirements.\n\nThis clearly documents:\n1. The 21 core CIRIS services organized by category\n2. Additional services needed by the API\n3. Adapter-specific services that will be created\n\nBased on the official service list from CLAUDE.md:\n- Graph Services (6): memory, config, telemetry, audit, incident_management, tsdb_consolidation\n- Infrastructure Services (7): time, shutdown, initialization, authentication, resource_monitor, database_maintenance, secrets\n- Governance Services (4): wise_authority, adaptive_filter, visibility, self_observation\n- Runtime Services (3): llm, runtime_control, task_scheduler\n- Tool Services (1): secrets_tool"
    },
    "AdapterService": {
      "name": "AdapterService",
      "file": "ciris_engine/logic/adapters/api/service_configuration.py",
      "line": 133,
      "bases": [],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "dataclass"
      ],
      "docstring": "Defines an adapter-created service."
    },
    "APIRuntimeControlService": {
      "name": "APIRuntimeControlService",
      "file": "ciris_engine/logic/adapters/api/api_runtime_control.py",
      "line": 19,
      "bases": [
        "Service"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 22
        },
        {
          "name": "pause_processing",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 37
        },
        {
          "name": "resume_processing",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 55
        },
        {
          "name": "request_state_transition",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 75
        },
        {
          "name": "get_runtime_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 98
        },
        {
          "name": "handle_emergency_shutdown",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 116
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 140
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 155
        },
        {
          "name": "is_healthy",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 159
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 163
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 167
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 186
        },
        {
          "name": "list_adapters",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 212
        },
        {
          "name": "get_adapter_info",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 220
        },
        {
          "name": "load_adapter",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 249
        },
        {
          "name": "unload_adapter",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 286
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Runtime control exposed through API."
    },
    "APIToolService": {
      "name": "APIToolService",
      "file": "ciris_engine/logic/adapters/api/api_tools.py",
      "line": 27,
      "bases": [
        "BaseService",
        "ToolService"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 30
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 44
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 49
        },
        {
          "name": "execute_tool",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 54
        },
        {
          "name": "_curl",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 114
        },
        {
          "name": "_http_get",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 158
        },
        {
          "name": "_http_post",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 163
        },
        {
          "name": "get_available_tools",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 168
        },
        {
          "name": "get_tool_result",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 172
        },
        {
          "name": "validate_parameters",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 177
        },
        {
          "name": "list_tools",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 183
        },
        {
          "name": "get_tool_schema",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 187
        },
        {
          "name": "get_tool_info",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 223
        },
        {
          "name": "get_all_tool_info",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 237
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 246
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 250
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 254
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 271
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 280
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 291
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Tool service providing curl-like HTTP request functionality."
    },
    "StandardResponse": {
      "name": "StandardResponse",
      "file": "ciris_engine/logic/adapters/api/models.py",
      "line": 11,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Standard API response format."
    },
    "TokenData": {
      "name": "TokenData",
      "file": "ciris_engine/logic/adapters/api/models.py",
      "line": 21,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Token data for authenticated users."
    },
    "ApiPlatform": {
      "name": "ApiPlatform",
      "file": "ciris_engine/logic/adapters/api/adapter.py",
      "line": 44,
      "bases": [
        "Service"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 49
        },
        {
          "name": "get_services_to_register",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 104
        },
        {
          "name": "_inject_services",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 152
        },
        {
          "name": "_log_service_registry",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 178
        },
        {
          "name": "_inject_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 189
        },
        {
          "name": "_handle_auth_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 208
        },
        {
          "name": "_setup_message_handling",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 214
        },
        {
          "name": "_create_message_handler",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 223
        },
        {
          "name": "_create_message_correlation",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 247
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 284
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 338
        },
        {
          "name": "get_channel_list",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 359
        },
        {
          "name": "is_healthy",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 397
        },
        {
          "name": "get_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 406
        },
        {
          "name": "run_lifecycle",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 459
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "API adapter platform for CIRIS v1."
    },
    "APIObserver": {
      "name": "APIObserver",
      "file": "ciris_engine/logic/adapters/api/api_observer.py",
      "line": 13,
      "bases": [],
      "methods": [
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 16
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 20
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Observer for API messages that creates passive observations."
    },
    "APIAdapterConfig": {
      "name": "APIAdapterConfig",
      "file": "ciris_engine/logic/adapters/api/config.py",
      "line": 8,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "get_home_channel_id",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 45
        },
        {
          "name": "load_env_vars",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 49
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration for the API adapter.\n\nSecurity Note:\n- Default host is 127.0.0.1 (localhost only) for security\n- Set host to 0.0.0.0 only when you need external access\n- Always use proper firewall rules when binding to all interfaces\n- Consider using a reverse proxy (nginx, etc.) for production deployments"
    },
    "APICommunicationService": {
      "name": "APICommunicationService",
      "file": "ciris_engine/logic/adapters/api/api_communication.py",
      "line": 21,
      "bases": [
        "BaseService",
        "CommunicationServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 24
        },
        {
          "name": "send_message",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 41
        },
        {
          "name": "register_websocket",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 136
        },
        {
          "name": "unregister_websocket",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 141
        },
        {
          "name": "fetch_messages",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 147
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 230
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 235
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 246
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 250
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 260
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 264
        },
        {
          "name": "get_home_channel_id",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 268
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 284
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 316
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Communication service for API responses."
    },
    "DiscordMessageHandler": {
      "name": "DiscordMessageHandler",
      "file": "ciris_engine/logic/adapters/discord/discord_message_handler.py",
      "line": 14,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 17
        },
        {
          "name": "set_client",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 25
        },
        {
          "name": "send_message_to_channel",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 33
        },
        {
          "name": "fetch_messages_from_channel",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 73
        },
        {
          "name": "convert_to_discord_message",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 108
        },
        {
          "name": "_split_message",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 128
        },
        {
          "name": "_resolve_channel",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 165
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Handles Discord message operations including sending, fetching, and splitting."
    },
    "DiscordChannelManager": {
      "name": "DiscordChannelManager",
      "file": "ciris_engine/logic/adapters/discord/discord_channel_manager.py",
      "line": 14,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 17
        },
        {
          "name": "set_client",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 43
        },
        {
          "name": "set_message_callback",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 51
        },
        {
          "name": "resolve_channel",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 59
        },
        {
          "name": "validate_channel_access",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 93
        },
        {
          "name": "is_client_ready",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 112
        },
        {
          "name": "wait_for_client_ready",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 126
        },
        {
          "name": "on_message",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 147
        },
        {
          "name": "attach_to_client",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 238
        },
        {
          "name": "get_client_info",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 247
        },
        {
          "name": "get_channel_info",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 267
        },
        {
          "name": "_sanitize_message_parameters",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 302
        },
        {
          "name": "_get_user_consent_stream",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 321
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Handles Discord client management and channel operations."
    },
    "ApprovalStatus": {
      "name": "ApprovalStatus",
      "file": "ciris_engine/logic/adapters/discord/discord_reaction_handler.py",
      "line": 17,
      "bases": [
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Status of an approval request."
    },
    "ApprovalRequest": {
      "name": "ApprovalRequest",
      "file": "ciris_engine/logic/adapters/discord/discord_reaction_handler.py",
      "line": 26,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 29
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Represents a pending approval request."
    },
    "DiscordReactionHandler": {
      "name": "DiscordReactionHandler",
      "file": "ciris_engine/logic/adapters/discord/discord_reaction_handler.py",
      "line": 44,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 50
        },
        {
          "name": "set_client",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 73
        },
        {
          "name": "request_approval",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 81
        },
        {
          "name": "handle_reaction",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 151
        },
        {
          "name": "_handle_timeout",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 204
        },
        {
          "name": "_update_approval_message",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 228
        },
        {
          "name": "get_pending_approvals",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 267
        },
        {
          "name": "clear_pending_approvals",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 275
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Handles Discord reactions for approval workflows."
    },
    "ConnectionState": {
      "name": "ConnectionState",
      "file": "ciris_engine/logic/adapters/discord/discord_connection_manager.py",
      "line": 17,
      "bases": [
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Discord connection states."
    },
    "DiscordConnectionManager": {
      "name": "DiscordConnectionManager",
      "file": "ciris_engine/logic/adapters/discord/discord_connection_manager.py",
      "line": 27,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 30
        },
        {
          "name": "set_client",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 77
        },
        {
          "name": "_setup_event_handlers",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 86
        },
        {
          "name": "_handle_connected",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 97
        },
        {
          "name": "_handle_disconnected",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 125
        },
        {
          "name": "_handle_failed",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 149
        },
        {
          "name": "_reconnect",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 164
        },
        {
          "name": "connect",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 170
        },
        {
          "name": "disconnect",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 200
        },
        {
          "name": "is_connected",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 214
        },
        {
          "name": "get_connection_info",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 234
        },
        {
          "name": "wait_until_ready",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 259
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Manages Discord connection resilience and auto-reconnect."
    },
    "RateLimitBucket": {
      "name": "RateLimitBucket",
      "file": "ciris_engine/logic/adapters/discord/discord_rate_limiter.py",
      "line": 12,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 15
        },
        {
          "name": "acquire",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 28
        },
        {
          "name": "update_from_headers",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 51
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Represents a rate limit bucket for Discord API."
    },
    "DiscordRateLimiter": {
      "name": "DiscordRateLimiter",
      "file": "ciris_engine/logic/adapters/discord/discord_rate_limiter.py",
      "line": 62,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 87
        },
        {
          "name": "acquire",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 101
        },
        {
          "name": "update_from_response",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 127
        },
        {
          "name": "handle_rate_limit_response",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 152
        },
        {
          "name": "_normalize_endpoint",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 168
        },
        {
          "name": "_get_or_create_bucket",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 202
        },
        {
          "name": "_wait_and_log",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 217
        },
        {
          "name": "get_stats",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 231
        },
        {
          "name": "reset_stats",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 245
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Manages rate limiting for Discord API calls."
    },
    "DiscordObserver": {
      "name": "DiscordObserver",
      "file": "ciris_engine/logic/adapters/discord/discord_observer.py",
      "line": 17,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 24
        },
        {
          "name": "_send_deferral_message",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 67
        },
        {
          "name": "start",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 83
        },
        {
          "name": "stop",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 87
        },
        {
          "name": "_extract_channel_id",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 91
        },
        {
          "name": "_should_process_message",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 103
        },
        {
          "name": "_enhance_message",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 130
        },
        {
          "name": "_handle_priority_observation",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 170
        },
        {
          "name": "_create_task_context_with_extras",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 212
        },
        {
          "name": "_handle_passive_observation",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 218
        },
        {
          "name": "_add_to_feedback_queue",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 259
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Observes DiscordMessage objects directly from Discord adapter, converts them into OBSERVATION\npayloads, and forwards them to the agent via MultiServiceSink. Uses only MultiServiceSink\narchitecture without event queues. Includes adaptive filtering for message prioritization."
    },
    "DiscordPlatform": {
      "name": "DiscordPlatform",
      "file": "ciris_engine/logic/adapters/discord/adapter.py",
      "line": 24,
      "bases": [
        "Service"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 25
        },
        {
          "name": "get_channel_info",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 321
        },
        {
          "name": "_handle_discord_message_event",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 335
        },
        {
          "name": "get_services_to_register",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 343
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 381
        },
        {
          "name": "_wait_for_discord_reconnect",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 423
        },
        {
          "name": "run_lifecycle",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 442
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 727
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 764
        },
        {
          "name": "get_active_channels",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 782
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "CIRISDiscordClient": {
      "name": "CIRISDiscordClient",
      "file": "ciris_engine/logic/adapters/discord/adapter.py",
      "line": 98,
      "bases": [
        "Client"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 99
        },
        {
          "name": "on_ready",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 103
        },
        {
          "name": "_fetch_threads_in_monitored_channels",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 115
        },
        {
          "name": "on_disconnect",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 178
        },
        {
          "name": "on_message",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 187
        },
        {
          "name": "on_raw_reaction_add",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 195
        },
        {
          "name": "on_thread_create",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 201
        },
        {
          "name": "on_thread_join",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 240
        },
        {
          "name": "on_thread_delete",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 246
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "DiscordAdapter": {
      "name": "DiscordAdapter",
      "file": "ciris_engine/logic/adapters/discord/discord_adapter.py",
      "line": 63,
      "bases": [
        "Service",
        "CommunicationService",
        "WiseAuthorityService"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 69
        },
        {
          "name": "_retry_discord_operation",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 143
        },
        {
          "name": "_emit_telemetry",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 197
        },
        {
          "name": "send_message",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 224
        },
        {
          "name": "fetch_messages",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 313
        },
        {
          "name": "fetch_guidance",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 399
        },
        {
          "name": "check_authorization",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 469
        },
        {
          "name": "request_approval",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 506
        },
        {
          "name": "get_guidance",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 637
        },
        {
          "name": "get_pending_deferrals",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 662
        },
        {
          "name": "resolve_deferral",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 708
        },
        {
          "name": "grant_permission",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 730
        },
        {
          "name": "revoke_permission",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 771
        },
        {
          "name": "get_active_channels",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 806
        },
        {
          "name": "execute_tool",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 875
        },
        {
          "name": "list_tools",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 905
        },
        {
          "name": "list_permissions",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 909
        },
        {
          "name": "send_deferral",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 940
        },
        {
          "name": "send_deferral_legacy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1110
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1127
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1154
        },
        {
          "name": "_get_time_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1185
        },
        {
          "name": "_collect_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1192
        },
        {
          "name": "get_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1208
        },
        {
          "name": "_send_output",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1233
        },
        {
          "name": "_on_message",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1244
        },
        {
          "name": "attach_to_client",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1266
        },
        {
          "name": "on_raw_reaction_add",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1279
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1291
        },
        {
          "name": "wait_until_ready",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1341
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1354
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1384
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1394
        },
        {
          "name": "get_home_channel_id",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1398
        },
        {
          "name": "get_channel_list",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1418
        },
        {
          "name": "_setup_connection_callbacks",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1497
        },
        {
          "name": "_client",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1570
        },
        {
          "name": "get_services_to_register",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1574
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Discord adapter implementing CommunicationService and WiseAuthorityService protocols.\nCoordinates specialized handlers for different aspects of Discord functionality."
    },
    "DiscordAuditLogger": {
      "name": "DiscordAuditLogger",
      "file": "ciris_engine/logic/adapters/discord/discord_audit.py",
      "line": 14,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 17
        },
        {
          "name": "set_audit_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 37
        },
        {
          "name": "log_operation",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 45
        },
        {
          "name": "log_message_sent",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 100
        },
        {
          "name": "log_message_received",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 125
        },
        {
          "name": "log_guidance_request",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 140
        },
        {
          "name": "log_approval_request",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 162
        },
        {
          "name": "log_permission_change",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 185
        },
        {
          "name": "log_tool_execution",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 203
        },
        {
          "name": "log_connection_event",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 234
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Handles audit logging for Discord operations."
    },
    "DiscordGuidanceHandler": {
      "name": "DiscordGuidanceHandler",
      "file": "ciris_engine/logic/adapters/discord/discord_guidance_handler.py",
      "line": 16,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 19
        },
        {
          "name": "set_client",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 45
        },
        {
          "name": "set_memory_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 53
        },
        {
          "name": "_is_registered_wa",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 61
        },
        {
          "name": "_check_discord_roles",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 99
        },
        {
          "name": "fetch_guidance_from_channel",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 124
        },
        {
          "name": "send_deferral_to_channel",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 191
        },
        {
          "name": "_build_deferral_report",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 249
        },
        {
          "name": "_truncate_text",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 294
        },
        {
          "name": "_split_message",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 308
        },
        {
          "name": "_resolve_channel",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 345
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Handles Discord wise authority guidance and deferral operations."
    },
    "DeferralHelperView": {
      "name": "DeferralHelperView",
      "file": "ciris_engine/logic/adapters/discord/discord_guidance_handler.py",
      "line": 368,
      "bases": [
        "View"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 371
        },
        {
          "name": "approve_button",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 377
        },
        {
          "name": "reject_button",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 384
        },
        {
          "name": "info_button",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 391
        },
        {
          "name": "_truncate_text",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 445
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Simple Discord UI View with helper buttons for deferral responses."
    },
    "EmbedType": {
      "name": "EmbedType",
      "file": "ciris_engine/logic/adapters/discord/discord_embed_formatter.py",
      "line": 59,
      "bases": [
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Types of embeds for different purposes."
    },
    "DiscordEmbedFormatter": {
      "name": "DiscordEmbedFormatter",
      "file": "ciris_engine/logic/adapters/discord/discord_embed_formatter.py",
      "line": 74,
      "bases": [],
      "methods": [
        {
          "name": "create_base_embed",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 78
        },
        {
          "name": "format_guidance_request",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 98
        },
        {
          "name": "format_deferral_request",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 126
        },
        {
          "name": "format_approval_request",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 154
        },
        {
          "name": "format_tool_execution",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 187
        },
        {
          "name": "format_task_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 232
        },
        {
          "name": "format_audit_entry",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 274
        },
        {
          "name": "format_error_message",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 306
        },
        {
          "name": "create_paginated_embed",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 337
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Formats messages as rich Discord embeds."
    },
    "DiscordAdapterConfig": {
      "name": "DiscordAdapterConfig",
      "file": "ciris_engine/logic/adapters/discord/config.py",
      "line": 11,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "get_intents",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 52
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 80
        },
        {
          "name": "get_home_channel_id",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 92
        },
        {
          "name": "get_formatted_startup_channel_id",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 100
        },
        {
          "name": "load_env_vars",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 124
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration for the Discord adapter."
    },
    "DiscordToolService": {
      "name": "DiscordToolService",
      "file": "ciris_engine/logic/adapters/discord/discord_tool_service.py",
      "line": 21,
      "bases": [
        "ToolService"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 24
        },
        {
          "name": "set_client",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 48
        },
        {
          "name": "start",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 52
        },
        {
          "name": "stop",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 56
        },
        {
          "name": "execute_tool",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 60
        },
        {
          "name": "_send_message",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 124
        },
        {
          "name": "_send_embed",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 154
        },
        {
          "name": "_delete_message",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 193
        },
        {
          "name": "_timeout_user",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 225
        },
        {
          "name": "_ban_user",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 261
        },
        {
          "name": "_kick_user",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 287
        },
        {
          "name": "_add_role",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 313
        },
        {
          "name": "_remove_role",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 351
        },
        {
          "name": "_get_user_info",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 389
        },
        {
          "name": "_get_channel_info",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 427
        },
        {
          "name": "get_available_tools",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 463
        },
        {
          "name": "get_tool_result",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 467
        },
        {
          "name": "validate_parameters",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 472
        },
        {
          "name": "get_tool_info",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 492
        },
        {
          "name": "get_all_tool_info",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 625
        },
        {
          "name": "is_healthy",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 634
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 638
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 642
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 659
        },
        {
          "name": "list_tools",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 680
        },
        {
          "name": "get_tool_schema",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 684
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Tool service providing Discord-specific moderation and management tools."
    },
    "DiscordToolHandler": {
      "name": "DiscordToolHandler",
      "file": "ciris_engine/logic/adapters/discord/discord_tool_handler.py",
      "line": 31,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 34
        },
        {
          "name": "set_client",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 58
        },
        {
          "name": "set_tool_registry",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 66
        },
        {
          "name": "_track_correlation_start",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 74
        },
        {
          "name": "_process_tool_result",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 117
        },
        {
          "name": "_handle_tool_error",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 174
        },
        {
          "name": "_create_error_result",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 211
        },
        {
          "name": "_convert_to_typed_args",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 233
        },
        {
          "name": "execute_tool",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 258
        },
        {
          "name": "get_tool_result",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 311
        },
        {
          "name": "get_available_tools",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 329
        },
        {
          "name": "get_tool_info",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 346
        },
        {
          "name": "get_all_tool_info",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 398
        },
        {
          "name": "validate_tool_parameters",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 407
        },
        {
          "name": "clear_tool_results",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 442
        },
        {
          "name": "get_cached_result_count",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 446
        },
        {
          "name": "remove_cached_result",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 454
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Handles Discord tool execution and result management."
    },
    "DiscordVisionHelper": {
      "name": "DiscordVisionHelper",
      "file": "ciris_engine/logic/adapters/discord/discord_vision_helper.py",
      "line": 14,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 17
        },
        {
          "name": "process_message_images",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 31
        },
        {
          "name": "_process_single_image",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 70
        },
        {
          "name": "process_embeds",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 140
        },
        {
          "name": "_process_image_url",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 172
        },
        {
          "name": "is_available",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 202
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 210
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Helper class for processing Discord images with GPT-4 Vision."
    },
    "MockAttachment": {
      "name": "MockAttachment",
      "file": "ciris_engine/logic/adapters/discord/discord_vision_helper.py",
      "line": 184,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 185
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "DiscordErrorHandler": {
      "name": "DiscordErrorHandler",
      "file": "ciris_engine/logic/adapters/discord/discord_error_handler.py",
      "line": 20,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 23
        },
        {
          "name": "handle_channel_error",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 35
        },
        {
          "name": "handle_message_error",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 92
        },
        {
          "name": "handle_connection_error",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 144
        },
        {
          "name": "handle_api_error",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 187
        },
        {
          "name": "_track_error",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 230
        },
        {
          "name": "get_error_stats",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 262
        },
        {
          "name": "create_error_embed",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 274
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Centralized error handling for Discord operations."
    },
    "DSARRequest": {
      "name": "DSARRequest",
      "file": "ciris_engine/logic/adapters/api/routes/dsar.py",
      "line": 28,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Schema for Data Subject Access Request."
    },
    "DSARResponse": {
      "name": "DSARResponse",
      "file": "ciris_engine/logic/adapters/api/routes/dsar.py",
      "line": 42,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response for DSAR submission."
    },
    "DSARStatus": {
      "name": "DSARStatus",
      "file": "ciris_engine/logic/adapters/api/routes/dsar.py",
      "line": 52,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Status check for existing DSAR."
    },
    "MetricData": {
      "name": "MetricData",
      "file": "ciris_engine/schemas/telemetry/core.py",
      "line": 101,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Metric data for correlations."
    },
    "MetricSeries": {
      "name": "MetricSeries",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry_models.py",
      "line": 28,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Time series data for a metric."
    },
    "SystemOverview": {
      "name": "SystemOverview",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry_models.py",
      "line": 37,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "System overview combining all observability data."
    },
    "ServiceHealth": {
      "name": "ServiceHealth",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry_models.py",
      "line": 80,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_last_seen",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 92
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Health status of a single service."
    },
    "ServiceHealthOverview": {
      "name": "ServiceHealthOverview",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry_models.py",
      "line": 96,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "System-wide service health overview."
    },
    "LogEntry": {
      "name": "LogEntry",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry.py",
      "line": 138,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_timestamp",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 149
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "System log entry."
    },
    "TraceSpan": {
      "name": "TraceSpan",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry_models.py",
      "line": 122,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_start_time",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 136
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Single trace span."
    },
    "ResourceMetricStats": {
      "name": "ResourceMetricStats",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry_models.py",
      "line": 140,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Resource usage statistics."
    },
    "ResourceDataPoint": {
      "name": "ResourceDataPoint",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry_models.py",
      "line": 149,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Resource data point."
    },
    "ResourceMetricData": {
      "name": "ResourceMetricData",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry_models.py",
      "line": 156,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Resource usage metric data with time series and stats."
    },
    "ResourceUsage": {
      "name": "ResourceUsage",
      "file": "ciris_engine/schemas/runtime/resources.py",
      "line": 12,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Track LLM resource utilization with environmental awareness."
    },
    "TimePeriod": {
      "name": "TimePeriod",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry_models.py",
      "line": 175,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Time period for historical data."
    },
    "ResourceHistoryResponse": {
      "name": "ResourceHistoryResponse",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry_models.py",
      "line": 183,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Historical resource usage response."
    },
    "RuntimeControlResponse": {
      "name": "RuntimeControlResponse",
      "file": "ciris_engine/logic/adapters/api/routes/system.py",
      "line": 95,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response to runtime control actions."
    },
    "ServicePriorityUpdateRequest": {
      "name": "ServicePriorityUpdateRequest",
      "file": "ciris_engine/logic/adapters/api/routes/system_extensions.py",
      "line": 106,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to update service priority."
    },
    "ServicePriorityUpdateResponse": {
      "name": "ServicePriorityUpdateResponse",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 121,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response from service priority update operation."
    },
    "CircuitBreakerResetRequest": {
      "name": "CircuitBreakerResetRequest",
      "file": "ciris_engine/logic/adapters/api/routes/system_extensions.py",
      "line": 193,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to reset circuit breakers."
    },
    "CircuitBreakerResetResponse": {
      "name": "CircuitBreakerResetResponse",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 132,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response from circuit breaker reset operation."
    },
    "ProcessorStateInfo": {
      "name": "ProcessorStateInfo",
      "file": "ciris_engine/logic/adapters/api/routes/system_extensions.py",
      "line": 269,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Information about a processor state."
    },
    "AuditEntryResponse": {
      "name": "AuditEntryResponse",
      "file": "ciris_engine/logic/adapters/api/routes/audit.py",
      "line": 30,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_timestamp",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 42
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Audit entry response with formatted fields."
    },
    "AuditEntryDetailResponse": {
      "name": "AuditEntryDetailResponse",
      "file": "ciris_engine/logic/adapters/api/routes/audit.py",
      "line": 46,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Detailed audit entry with verification info."
    },
    "AuditEntriesResponse": {
      "name": "AuditEntriesResponse",
      "file": "ciris_engine/logic/adapters/api/routes/audit.py",
      "line": 56,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "List of audit entries."
    },
    "AuditExportResponse": {
      "name": "AuditExportResponse",
      "file": "ciris_engine/logic/adapters/api/routes/audit.py",
      "line": 65,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Audit export response."
    },
    "InteractRequest": {
      "name": "InteractRequest",
      "file": "ciris_engine/logic/adapters/api/routes/agent.py",
      "line": 34,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to interact with the agent."
    },
    "InteractResponse": {
      "name": "InteractResponse",
      "file": "ciris_engine/logic/adapters/api/routes/agent.py",
      "line": 41,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response from agent interaction."
    },
    "ConversationMessage": {
      "name": "ConversationMessage",
      "file": "ciris_engine/logic/adapters/api/routes/agent.py",
      "line": 50,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Message in conversation history."
    },
    "ConversationHistory": {
      "name": "ConversationHistory",
      "file": "ciris_engine/logic/adapters/api/routes/agent.py",
      "line": 60,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Conversation history."
    },
    "AgentStatus": {
      "name": "AgentStatus",
      "file": "ciris_engine/logic/adapters/api/routes/agent.py",
      "line": 68,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Agent status and cognitive state."
    },
    "AgentIdentity": {
      "name": "AgentIdentity",
      "file": "ciris_engine/logic/adapters/api/routes/agent.py",
      "line": 95,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Agent identity and capabilities."
    },
    "ChannelInfo": {
      "name": "ChannelInfo",
      "file": "ciris_engine/schemas/persistence/correlations.py",
      "line": 39,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Schema for channel information."
    },
    "ChannelList": {
      "name": "ChannelList",
      "file": "ciris_engine/logic/adapters/api/routes/agent.py",
      "line": 125,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "List of active channels."
    },
    "StoreRequest": {
      "name": "StoreRequest",
      "file": "ciris_engine/logic/adapters/api/routes/memory_models.py",
      "line": 15,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to store typed nodes in memory (MEMORIZE)."
    },
    "CreateEdgeRequest": {
      "name": "CreateEdgeRequest",
      "file": "ciris_engine/logic/adapters/api/routes/memory_models.py",
      "line": 21,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to create an edge between nodes."
    },
    "QueryRequest": {
      "name": "QueryRequest",
      "file": "ciris_engine/logic/adapters/api/routes/memory_models.py",
      "line": 27,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "validate_query_params",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 65
        },
        {
          "name": "serialize_datetime",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 84
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Flexible query interface for memory (RECALL).\n\nSupports multiple query patterns:\n- By ID: Specify node_id\n- By type: Specify type filter\n- By text: Specify query string\n- By time: Specify since/until filters\n- By correlation: Specify related_to node"
    },
    "TimelineResponse": {
      "name": "TimelineResponse",
      "file": "ciris_engine/logic/adapters/api/routes/memory_models.py",
      "line": 88,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_datetime",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 98
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response containing timeline of memories."
    },
    "MemoryStats": {
      "name": "MemoryStats",
      "file": "ciris_engine/logic/adapters/api/routes/memory_models.py",
      "line": 102,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_datetime",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 113
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Statistics about memory service."
    },
    "PrometheusConverter": {
      "name": "PrometheusConverter",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry_converters.py",
      "line": 29,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 32
        },
        {
          "name": "convert",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 36
        },
        {
          "name": "_process_dict",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 41
        },
        {
          "name": "_should_skip_key",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 48
        },
        {
          "name": "_process_value",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 52
        },
        {
          "name": "_build_key",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 70
        },
        {
          "name": "_sanitize_metric_name",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 74
        },
        {
          "name": "_add_metric_metadata",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 78
        },
        {
          "name": "_add_boolean_metric",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 88
        },
        {
          "name": "_add_numeric_metric",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 94
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Converter for Prometheus format with reduced complexity."
    },
    "GraphiteConverter": {
      "name": "GraphiteConverter",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry_converters.py",
      "line": 103,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 106
        },
        {
          "name": "convert",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 110
        },
        {
          "name": "_process_dict",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 115
        },
        {
          "name": "_should_skip_key",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 122
        },
        {
          "name": "_process_value",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 126
        },
        {
          "name": "_add_metric",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 137
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Converter for Graphite format with reduced complexity."
    },
    "ActionCount": {
      "name": "ActionCount",
      "file": "ciris_engine/logic/adapters/api/routes/transparency.py",
      "line": 18,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Count of actions by type."
    },
    "TransparencyStats": {
      "name": "TransparencyStats",
      "file": "ciris_engine/logic/adapters/api/routes/transparency.py",
      "line": 26,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Public transparency statistics."
    },
    "TransparencyPolicy": {
      "name": "TransparencyPolicy",
      "file": "ciris_engine/logic/adapters/api/routes/transparency.py",
      "line": 58,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Transparency policy information."
    },
    "SystemHealthResponse": {
      "name": "SystemHealthResponse",
      "file": "ciris_engine/logic/adapters/api/routes/system.py",
      "line": 50,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_ts",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 62
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Overall system health status."
    },
    "SystemTimeResponse": {
      "name": "SystemTimeResponse",
      "file": "ciris_engine/logic/adapters/api/routes/system.py",
      "line": 66,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_times",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 75
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "System and agent time information."
    },
    "ResourceUsageResponse": {
      "name": "ResourceUsageResponse",
      "file": "ciris_engine/logic/adapters/api/routes/system.py",
      "line": 79,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "System resource usage and limits."
    },
    "RuntimeAction": {
      "name": "RuntimeAction",
      "file": "ciris_engine/logic/adapters/api/routes/system.py",
      "line": 89,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Runtime control action request."
    },
    "ServiceStatus": {
      "name": "ServiceStatus",
      "file": "ciris_engine/logic/adapters/api/routes/system.py",
      "line": 105,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Individual service status."
    },
    "ServicesStatusResponse": {
      "name": "ServicesStatusResponse",
      "file": "ciris_engine/logic/adapters/api/routes/system.py",
      "line": 126,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_ts",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 135
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Status of all system services."
    },
    "ShutdownRequest": {
      "name": "ShutdownRequest",
      "file": "ciris_engine/schemas/processors/main.py",
      "line": 100,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to shutdown processing."
    },
    "ShutdownResponse": {
      "name": "ShutdownResponse",
      "file": "ciris_engine/logic/adapters/api/routes/system.py",
      "line": 147,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_ts",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 156
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response to shutdown request."
    },
    "AdapterActionRequest": {
      "name": "AdapterActionRequest",
      "file": "ciris_engine/logic/adapters/api/routes/system.py",
      "line": 160,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request for adapter operations."
    },
    "ToolInfoResponse": {
      "name": "ToolInfoResponse",
      "file": "ciris_engine/logic/adapters/api/routes/system.py",
      "line": 168,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Tool information response with provider details."
    },
    "ConfigItemResponse": {
      "name": "ConfigItemResponse",
      "file": "ciris_engine/logic/adapters/api/routes/config.py",
      "line": 25,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_updated_at",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 35
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration item in API response."
    },
    "ConfigListResponse": {
      "name": "ConfigListResponse",
      "file": "ciris_engine/schemas/api/config_security.py",
      "line": 182,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response for configuration list."
    },
    "ConfigUpdate": {
      "name": "ConfigUpdate",
      "file": "ciris_engine/schemas/services/core/secrets.py",
      "line": 23,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration update for secrets filters."
    },
    "QueryBuilder": {
      "name": "QueryBuilder",
      "file": "ciris_engine/logic/adapters/api/routes/memory_query_helpers.py",
      "line": 21,
      "bases": [],
      "methods": [
        {
          "name": "build_timeline_query",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 35
        },
        {
          "name": "build_search_query",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 65
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Builds SQL queries following single responsibility principle."
    },
    "AttributeParser": {
      "name": "AttributeParser",
      "file": "ciris_engine/logic/adapters/api/routes/memory_query_helpers.py",
      "line": 110,
      "bases": [],
      "methods": [
        {
          "name": "parse_attributes",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 114
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Parses JSON attributes from database rows."
    },
    "DateTimeParser": {
      "name": "DateTimeParser",
      "file": "ciris_engine/logic/adapters/api/routes/memory_query_helpers.py",
      "line": 126,
      "bases": [],
      "methods": [
        {
          "name": "parse_datetime",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 130
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Parses datetime values from various formats."
    },
    "GraphNodeBuilder": {
      "name": "GraphNodeBuilder",
      "file": "ciris_engine/logic/adapters/api/routes/memory_query_helpers.py",
      "line": 154,
      "bases": [],
      "methods": [
        {
          "name": "build_from_row",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 158
        },
        {
          "name": "build_from_rows",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 196
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Builds GraphNode objects from database rows."
    },
    "DatabaseExecutor": {
      "name": "DatabaseExecutor",
      "file": "ciris_engine/logic/adapters/api/routes/memory_query_helpers.py",
      "line": 206,
      "bases": [],
      "methods": [
        {
          "name": "execute_query",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 210
        },
        {
          "name": "get_db_path",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 222
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Executes database queries with proper error handling."
    },
    "TimeRangeCalculator": {
      "name": "TimeRangeCalculator",
      "file": "ciris_engine/logic/adapters/api/routes/memory_query_helpers.py",
      "line": 230,
      "bases": [],
      "methods": [
        {
          "name": "calculate_range",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 234
        },
        {
          "name": "calculate_range_from_days",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 241
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Calculates time ranges for queries."
    },
    "DetailedMetric": {
      "name": "DetailedMetric",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry.py",
      "line": 72,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Detailed metric information."
    },
    "MetricAggregate": {
      "name": "MetricAggregate",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry.py",
      "line": 85,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Aggregated metric statistics."
    },
    "MetricsResponse": {
      "name": "MetricsResponse",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry.py",
      "line": 98,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_timestamp",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 107
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Detailed metrics response."
    },
    "ReasoningTraceData": {
      "name": "ReasoningTraceData",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry.py",
      "line": 111,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_timestamp",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 126
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Reasoning trace information."
    },
    "TracesResponse": {
      "name": "TracesResponse",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry.py",
      "line": 130,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Reasoning traces response."
    },
    "LogsResponse": {
      "name": "LogsResponse",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry.py",
      "line": 153,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "System logs response."
    },
    "TelemetryQuery": {
      "name": "TelemetryQuery",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry.py",
      "line": 161,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_times",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 174
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Custom telemetry query."
    },
    "QueryResponse": {
      "name": "QueryResponse",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry.py",
      "line": 178,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Custom query response."
    },
    "ResourceUsageData": {
      "name": "ResourceUsageData",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry.py",
      "line": 624,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Current resource usage data."
    },
    "ResourceLimits": {
      "name": "ResourceLimits",
      "file": "ciris_engine/schemas/runtime/protocols_core.py",
      "line": 57,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Resource limits and quotas."
    },
    "ResourceHistoryPoint": {
      "name": "ResourceHistoryPoint",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry.py",
      "line": 645,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Historical resource usage point."
    },
    "ResourceHealthStatus": {
      "name": "ResourceHealthStatus",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry.py",
      "line": 653,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Resource health status."
    },
    "ResourceTelemetryResponse": {
      "name": "ResourceTelemetryResponse",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry.py",
      "line": 660,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Complete resource telemetry response."
    },
    "ResourceMetricsCollector": {
      "name": "ResourceMetricsCollector",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry_resource_helpers.py",
      "line": 20,
      "bases": [],
      "methods": [
        {
          "name": "fetch_metric_data",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 24
        },
        {
          "name": "fetch_all_resource_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 39
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Collects and processes resource metrics following single responsibility principle."
    },
    "MetricValueExtractor": {
      "name": "MetricValueExtractor",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry_resource_helpers.py",
      "line": 55,
      "bases": [],
      "methods": [
        {
          "name": "extract_values",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 59
        },
        {
          "name": "extract_all_values",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 68
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Extracts values from metric data following single responsibility."
    },
    "MetricStatisticsCalculator": {
      "name": "MetricStatisticsCalculator",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry_resource_helpers.py",
      "line": 79,
      "bases": [],
      "methods": [
        {
          "name": "calculate_basic_stats",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 83
        },
        {
          "name": "calculate_percentile",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 91
        },
        {
          "name": "calculate_trend",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 101
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Calculates statistics for metrics following single responsibility."
    },
    "ResourceDataPointBuilder": {
      "name": "ResourceDataPointBuilder",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry_resource_helpers.py",
      "line": 127,
      "bases": [],
      "methods": [
        {
          "name": "build_data_points",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 131
        },
        {
          "name": "build_all_data_points",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 142
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Builds typed ResourceDataPoint objects following type safety principle."
    },
    "ResourceMetricBuilder": {
      "name": "ResourceMetricBuilder",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry_resource_helpers.py",
      "line": 153,
      "bases": [],
      "methods": [
        {
          "name": "build_metric",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 157
        },
        {
          "name": "build_all_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 170
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Builds complete ResourceMetricData objects following composition principle."
    },
    "LogFileReader": {
      "name": "LogFileReader",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry_logs_reader.py",
      "line": 21,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 26
        },
        {
          "name": "_get_actual_log_files",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 29
        },
        {
          "name": "read_logs",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 112
        },
        {
          "name": "_parse_log_file",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 143
        },
        {
          "name": "_tail",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 185
        },
        {
          "name": "_parse_log_line",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 223
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Reads and parses log files from disk."
    },
    "TimelineLayoutCalculator": {
      "name": "TimelineLayoutCalculator",
      "file": "ciris_engine/logic/adapters/api/routes/memory_visualization_helpers.py",
      "line": 16,
      "bases": [],
      "methods": [
        {
          "name": "extract_timestamp",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 20
        },
        {
          "name": "calculate_time_range",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 31
        },
        {
          "name": "calculate_horizontal_position",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 53
        },
        {
          "name": "calculate_vertical_position",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 61
        },
        {
          "name": "build_positions",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 81
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Calculates timeline-based node positions."
    },
    "MetricHistoryPoint": {
      "name": "MetricHistoryPoint",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry_metrics.py",
      "line": 19,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "A single point in metric history."
    },
    "MetricDetail": {
      "name": "MetricDetail",
      "file": "ciris_engine/logic/adapters/api/routes/telemetry_metrics.py",
      "line": 26,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Detailed information about a specific metric."
    },
    "PaginatedResponse": {
      "name": "PaginatedResponse",
      "file": "ciris_engine/schemas/runtime/api.py",
      "line": 49,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Generic paginated response for list endpoints."
    },
    "UserSummary": {
      "name": "UserSummary",
      "file": "ciris_engine/logic/adapters/api/routes/users.py",
      "line": 57,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Summary information about a user."
    },
    "UserDetail": {
      "name": "UserDetail",
      "file": "ciris_engine/logic/adapters/api/routes/users.py",
      "line": 76,
      "bases": [
        "UserSummary"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Detailed user information."
    },
    "UpdateUserRequest": {
      "name": "UpdateUserRequest",
      "file": "ciris_engine/logic/adapters/api/routes/users.py",
      "line": 87,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to update user information."
    },
    "ChangePasswordRequest": {
      "name": "ChangePasswordRequest",
      "file": "ciris_engine/logic/adapters/api/routes/users.py",
      "line": 94,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to change user password."
    },
    "CreateUserRequest": {
      "name": "CreateUserRequest",
      "file": "ciris_engine/logic/adapters/api/routes/users.py",
      "line": 101,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to create a new user."
    },
    "MintWARequest": {
      "name": "MintWARequest",
      "file": "ciris_engine/logic/adapters/api/routes/users.py",
      "line": 109,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to mint user as Wise Authority."
    },
    "UpdatePermissionsRequest": {
      "name": "UpdatePermissionsRequest",
      "file": "ciris_engine/logic/adapters/api/routes/users.py",
      "line": 120,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to update user's custom permissions."
    },
    "WAKeyCheckResponse": {
      "name": "WAKeyCheckResponse",
      "file": "ciris_engine/logic/adapters/api/routes/users.py",
      "line": 129,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response for WA key existence check."
    },
    "DeactivateUserResponse": {
      "name": "DeactivateUserResponse",
      "file": "ciris_engine/logic/adapters/api/routes/users.py",
      "line": 139,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response for user deactivation."
    },
    "APIKeyInfo": {
      "name": "APIKeyInfo",
      "file": "ciris_engine/schemas/api/auth.py",
      "line": 285,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "API key information (without the actual key)."
    },
    "Config": {
      "name": "Config",
      "file": "ciris_engine/schemas/services/graph/edge_types.py",
      "line": 33,
      "bases": [],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "OAuthProviderInfo": {
      "name": "OAuthProviderInfo",
      "file": "ciris_engine/schemas/infrastructure/oauth.py",
      "line": 153,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Public information about an OAuth provider."
    },
    "OAuthProvidersResponse": {
      "name": "OAuthProvidersResponse",
      "file": "ciris_engine/logic/adapters/api/routes/auth.py",
      "line": 215,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "OAuth providers list response."
    },
    "ConfigureOAuthProviderRequest": {
      "name": "ConfigureOAuthProviderRequest",
      "file": "ciris_engine/logic/adapters/api/routes/auth.py",
      "line": 269,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to configure an OAuth provider."
    },
    "ConfigureOAuthProviderResponse": {
      "name": "ConfigureOAuthProviderResponse",
      "file": "ciris_engine/logic/adapters/api/routes/auth.py",
      "line": 278,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response from OAuth provider configuration."
    },
    "OAuthLoginResponse": {
      "name": "OAuthLoginResponse",
      "file": "ciris_engine/logic/adapters/api/routes/auth.py",
      "line": 346,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "OAuth login initiation response."
    },
    "RateLimiter": {
      "name": "RateLimiter",
      "file": "ciris_engine/logic/adapters/api/middleware/rate_limiter.py",
      "line": 15,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 18
        },
        {
          "name": "check_rate_limit",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 31
        },
        {
          "name": "_cleanup_old_entries",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 70
        },
        {
          "name": "get_retry_after",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 83
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Simple in-memory rate limiter using token bucket algorithm."
    },
    "RateLimitMiddleware": {
      "name": "RateLimitMiddleware",
      "file": "ciris_engine/logic/adapters/api/middleware/rate_limiter.py",
      "line": 106,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 109
        },
        {
          "name": "__call__",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 126
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "FastAPI middleware for rate limiting."
    },
    "StoredAPIKey": {
      "name": "StoredAPIKey",
      "file": "ciris_engine/logic/adapters/api/services/auth_service.py",
      "line": 43,
      "bases": [],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "dataclass"
      ],
      "docstring": "Internal representation of an API key."
    },
    "OAuthUser": {
      "name": "OAuthUser",
      "file": "ciris_engine/logic/adapters/api/services/auth_service.py",
      "line": 60,
      "bases": [],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "dataclass"
      ],
      "docstring": "OAuth user information."
    },
    "User": {
      "name": "User",
      "file": "ciris_engine/logic/adapters/api/services/auth_service.py",
      "line": 74,
      "bases": [],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "dataclass"
      ],
      "docstring": "Unified user representation combining auth methods and WA status."
    },
    "APIAuthService": {
      "name": "APIAuthService",
      "file": "ciris_engine/logic/adapters/api/services/auth_service.py",
      "line": 98,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 101
        },
        {
          "name": "_ensure_users_loaded",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 131
        },
        {
          "name": "_load_users_from_db",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 139
        },
        {
          "name": "_create_default_admin",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 186
        },
        {
          "name": "_wa_role_to_api_role",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 221
        },
        {
          "name": "_hash_key",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 233
        },
        {
          "name": "_get_key_id",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 237
        },
        {
          "name": "store_api_key",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 243
        },
        {
          "name": "validate_api_key",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 270
        },
        {
          "name": "revoke_api_key",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 302
        },
        {
          "name": "create_oauth_user",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 310
        },
        {
          "name": "_hash_password",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 343
        },
        {
          "name": "_verify_password",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 350
        },
        {
          "name": "verify_user_password",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 358
        },
        {
          "name": "get_user_by_username",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 371
        },
        {
          "name": "create_user",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 378
        },
        {
          "name": "list_users",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 448
        },
        {
          "name": "_user_role_to_api_role",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 512
        },
        {
          "name": "get_user",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 521
        },
        {
          "name": "update_user",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 553
        },
        {
          "name": "change_password",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 616
        },
        {
          "name": "deactivate_user",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 645
        },
        {
          "name": "get_permissions_for_role",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 668
        },
        {
          "name": "update_user_permissions",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 729
        },
        {
          "name": "validate_service_token",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 754
        },
        {
          "name": "list_user_api_keys",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 785
        },
        {
          "name": "verify_root_signature",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 793
        },
        {
          "name": "mint_wise_authority",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 874
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Simple in-memory authentication service with database persistence."
    },
    "BaseProcessor": {
      "name": "BaseProcessor",
      "file": "ciris_engine/logic/processors/core/base_processor.py",
      "line": 25,
      "bases": [
        "ABC"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 28
        },
        {
          "name": "get_supported_states",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 66
        },
        {
          "name": "can_process",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 70
        },
        {
          "name": "process",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 74
        },
        {
          "name": "initialize",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 80
        },
        {
          "name": "cleanup",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 88
        },
        {
          "name": "get_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 96
        },
        {
          "name": "update_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 100
        },
        {
          "name": "dispatch_action",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 132
        },
        {
          "name": "process_thought_item",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 152
        },
        {
          "name": "force_ponder",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 179
        },
        {
          "name": "force_defer",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 184
        },
        {
          "name": "__repr__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 188
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Abstract base class for all processor types."
    },
    "AgentProcessor": {
      "name": "AgentProcessor",
      "file": "ciris_engine/logic/processors/core/main_processor.py",
      "line": 49,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 55
        },
        {
          "name": "_load_preload_tasks",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 168
        },
        {
          "name": "_ensure_stop_event",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 200
        },
        {
          "name": "action_dispatcher",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 209
        },
        {
          "name": "action_dispatcher",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 213
        },
        {
          "name": "start_processing",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 234
        },
        {
          "name": "_process_pending_thoughts_async",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 350
        },
        {
          "name": "_process_single_thought",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 488
        },
        {
          "name": "pause_processing",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 741
        },
        {
          "name": "resume_processing",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 782
        },
        {
          "name": "is_paused",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 807
        },
        {
          "name": "set_thought_processing_callback",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 811
        },
        {
          "name": "single_step",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 815
        },
        {
          "name": "stop_processing",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 915
        },
        {
          "name": "_processing_loop",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 951
        },
        {
          "name": "_handle_state_transition",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1156
        },
        {
          "name": "process",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1190
        },
        {
          "name": "get_current_state",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1210
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1218
        },
        {
          "name": "_schedule_initial_dream",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1255
        },
        {
          "name": "_check_scheduled_dream",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1294
        },
        {
          "name": "_get_detailed_queue_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1363
        },
        {
          "name": "get_state_history",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1440
        },
        {
          "name": "get_queue_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1454
        },
        {
          "name": "_collect_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1464
        },
        {
          "name": "get_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1492
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Main agent processor that orchestrates task processing, thought generation,\nand state management using v1 schemas."
    },
    "ThoughtProcessor": {
      "name": "ThoughtProcessor",
      "file": "ciris_engine/logic/processors/core/thought_processor.py",
      "line": 33,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 34
        },
        {
          "name": "process_thought",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 55
        },
        {
          "name": "_apply_conscience_simple",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 565
        },
        {
          "name": "_fetch_thought",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 699
        },
        {
          "name": "_verify_task_authorization",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 705
        },
        {
          "name": "_describe_action",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 749
        },
        {
          "name": "_get_profile_name",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 778
        },
        {
          "name": "_get_permitted_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 797
        },
        {
          "name": "_has_critical_failure",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 800
        },
        {
          "name": "_create_deferral_result",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 803
        },
        {
          "name": "_handle_special_cases",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 829
        },
        {
          "name": "_update_thought_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 911
        },
        {
          "name": "_handle_action_selection",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 946
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "ThoughtManager": {
      "name": "ThoughtManager",
      "file": "ciris_engine/logic/processors/support/thought_manager.py",
      "line": 21,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 24
        },
        {
          "name": "generate_seed_thought",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 32
        },
        {
          "name": "generate_seed_thoughts",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 111
        },
        {
          "name": "populate_queue",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 126
        },
        {
          "name": "get_queue_batch",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 163
        },
        {
          "name": "mark_thoughts_processing",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 167
        },
        {
          "name": "create_follow_up_thought",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 191
        },
        {
          "name": "handle_idle_state",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 232
        },
        {
          "name": "get_pending_thought_count",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 242
        },
        {
          "name": "get_processing_thought_count",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 246
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Manages thought generation, queueing, and processing."
    },
    "ThoughtContent": {
      "name": "ThoughtContent",
      "file": "ciris_engine/logic/processors/support/processing_queue.py",
      "line": 16,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Typed content for a thought."
    },
    "ProcessingQueueItem": {
      "name": "ProcessingQueueItem",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 235,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Information about an item in the processing queue.\nUsed for runtime control service to report queue status."
    },
    "TaskManager": {
      "name": "TaskManager",
      "file": "ciris_engine/logic/processors/support/task_manager.py",
      "line": 20,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 23
        },
        {
          "name": "time_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 28
        },
        {
          "name": "create_task",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 34
        },
        {
          "name": "activate_pending_tasks",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 77
        },
        {
          "name": "get_tasks_needing_seed",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 109
        },
        {
          "name": "complete_task",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 121
        },
        {
          "name": "fail_task",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 136
        },
        {
          "name": "create_wakeup_sequence_tasks",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 150
        },
        {
          "name": "get_active_task_count",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 242
        },
        {
          "name": "get_pending_task_count",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 246
        },
        {
          "name": "cleanup_old_completed_tasks",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 250
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Manages task lifecycle operations."
    },
    "DMAOrchestrator": {
      "name": "DMAOrchestrator",
      "file": "ciris_engine/logic/processors/support/dma_orchestrator.py",
      "line": 31,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 32
        },
        {
          "name": "run_initial_dmas",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 62
        },
        {
          "name": "run_dmas",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 135
        },
        {
          "name": "run_action_selection",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 231
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "StateTransition": {
      "name": "StateTransition",
      "file": "ciris_engine/logic/processors/support/state_manager.py",
      "line": 17,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 20
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Represents a state transition with validation rules."
    },
    "StateManager": {
      "name": "StateManager",
      "file": "ciris_engine/logic/processors/support/state_manager.py",
      "line": 33,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 57
        },
        {
          "name": "_build_transition_map",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 71
        },
        {
          "name": "_record_state_change",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 80
        },
        {
          "name": "can_transition_to",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 90
        },
        {
          "name": "transition_to",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 106
        },
        {
          "name": "get_state",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 154
        },
        {
          "name": "get_state_metadata",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 158
        },
        {
          "name": "update_state_metadata",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 164
        },
        {
          "name": "get_state_duration",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 172
        },
        {
          "name": "should_auto_transition",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 180
        },
        {
          "name": "get_state_history",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 201
        },
        {
          "name": "get_state_history_summary",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 205
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Manages agent state transitions and state-specific behaviors."
    },
    "WakeupProcessor": {
      "name": "WakeupProcessor",
      "file": "ciris_engine/logic/processors/states/wakeup_processor.py",
      "line": 24,
      "bases": [
        "BaseProcessor"
      ],
      "methods": [
        {
          "name": "_get_wakeup_sequence",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 27
        },
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 68
        },
        {
          "name": "get_supported_states",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 90
        },
        {
          "name": "can_process",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 94
        },
        {
          "name": "process",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 106
        },
        {
          "name": "_process_wakeup",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 131
        },
        {
          "name": "_process_wakeup_steps_non_blocking",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 260
        },
        {
          "name": "_check_all_steps_complete",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 292
        },
        {
          "name": "_count_completed_steps",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 308
        },
        {
          "name": "_create_wakeup_tasks",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 319
        },
        {
          "name": "_process_wakeup_steps",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 401
        },
        {
          "name": "_create_step_thought",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 460
        },
        {
          "name": "_process_step_thought",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 502
        },
        {
          "name": "_dispatch_step_action",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 507
        },
        {
          "name": "_wait_for_task_completion",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 530
        },
        {
          "name": "_mark_task_failed",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 557
        },
        {
          "name": "_mark_root_task_complete",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 562
        },
        {
          "name": "_mark_root_task_failed",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 566
        },
        {
          "name": "is_wakeup_complete",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 570
        },
        {
          "name": "start_processing",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 574
        },
        {
          "name": "stop_processing",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 584
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 589
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Handles the WAKEUP state and initialization sequence."
    },
    "PlayProcessor": {
      "name": "PlayProcessor",
      "file": "ciris_engine/logic/processors/states/play_processor.py",
      "line": 18,
      "bases": [
        "WorkProcessor"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 29
        },
        {
          "name": "get_supported_states",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 34
        },
        {
          "name": "process",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 38
        },
        {
          "name": "get_play_stats",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 63
        },
        {
          "name": "_calculate_creativity_level",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 86
        },
        {
          "name": "_prioritize_creative_tasks",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 103
        },
        {
          "name": "should_experiment",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 115
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 133
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Handles the PLAY state for creative and experimental processing.\n\nCurrently inherits from WorkProcessor but can be customized for:\n- Creative task prioritization\n- Experimental prompt variations\n- Less constrained processing\n- Learning through exploration"
    },
    "DreamPhase": {
      "name": "DreamPhase",
      "file": "ciris_engine/logic/processors/states/dream_processor.py",
      "line": 40,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Phases of dream processing."
    },
    "DreamSession": {
      "name": "DreamSession",
      "file": "ciris_engine/logic/processors/states/dream_processor.py",
      "line": 53,
      "bases": [],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "dataclass"
      ],
      "docstring": "Represents a complete dream session."
    },
    "DreamProcessor": {
      "name": "DreamProcessor",
      "file": "ciris_engine/logic/processors/states/dream_processor.py",
      "line": 78,
      "bases": [
        "BaseProcessor"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 84
        },
        {
          "name": "_initialize_time_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 152
        },
        {
          "name": "_check_cirisnode_enabled",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 166
        },
        {
          "name": "_ensure_stop_event",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 178
        },
        {
          "name": "_create_all_dream_tasks",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 186
        },
        {
          "name": "_initialize_services",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 313
        },
        {
          "name": "start_dreaming",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 358
        },
        {
          "name": "stop_dreaming",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 413
        },
        {
          "name": "_announce_dream_entry",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 450
        },
        {
          "name": "process_round",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 466
        },
        {
          "name": "_process_dream_thought",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 538
        },
        {
          "name": "_dream_loop",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 552
        },
        {
          "name": "_update_current_phase",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 609
        },
        {
          "name": "_should_exit",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 636
        },
        {
          "name": "_record_phase_duration",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 648
        },
        {
          "name": "_benchmarking_phase",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 660
        },
        {
          "name": "_exit_phase",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 690
        },
        {
          "name": "_recall_recent_ponder_questions",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 704
        },
        {
          "name": "_analyze_ponder_patterns",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 730
        },
        {
          "name": "_schedule_next_dream",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 766
        },
        {
          "name": "_process_incidents",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 807
        },
        {
          "name": "_process_behavioral_insights",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 874
        },
        {
          "name": "_plan_future_work",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 959
        },
        {
          "name": "_create_future_task",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 988
        },
        {
          "name": "_run_single_benchmark",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1025
        },
        {
          "name": "_record_dream_session",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1053
        },
        {
          "name": "_get_vibe_summary",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1095
        },
        {
          "name": "_announce_dream_exit",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1154
        },
        {
          "name": "get_dream_summary",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1188
        },
        {
          "name": "initialize",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1213
        },
        {
          "name": "cleanup",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1220
        },
        {
          "name": "get_supported_states",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1227
        },
        {
          "name": "can_process",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1231
        },
        {
          "name": "process",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1235
        },
        {
          "name": "should_enter_dream_state",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1274
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Dream processor that handles introspection, memory consolidation,\nand self-configuration during dream states."
    },
    "WorkProcessor": {
      "name": "WorkProcessor",
      "file": "ciris_engine/logic/processors/states/work_processor.py",
      "line": 27,
      "bases": [
        "BaseProcessor"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 30
        },
        {
          "name": "get_supported_states",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 64
        },
        {
          "name": "can_process",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 68
        },
        {
          "name": "process",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 72
        },
        {
          "name": "_process_batch",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 155
        },
        {
          "name": "_process_single_thought",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 185
        },
        {
          "name": "_dispatch_thought_result",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 189
        },
        {
          "name": "_handle_idle_state",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 217
        },
        {
          "name": "_mark_thought_failed",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 229
        },
        {
          "name": "get_idle_duration",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 235
        },
        {
          "name": "should_transition_to_dream",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 239
        },
        {
          "name": "start_processing",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 252
        },
        {
          "name": "stop_processing",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 269
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 274
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Handles the WORK state for normal task/thought processing."
    },
    "ShutdownProcessor": {
      "name": "ShutdownProcessor",
      "file": "ciris_engine/logic/processors/states/shutdown_processor.py",
      "line": 31,
      "bases": [
        "BaseProcessor"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 37
        },
        {
          "name": "get_supported_states",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 60
        },
        {
          "name": "can_process",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 64
        },
        {
          "name": "process",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 68
        },
        {
          "name": "_process_shutdown",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 98
        },
        {
          "name": "_create_shutdown_task",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 180
        },
        {
          "name": "_check_failure_reason",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 275
        },
        {
          "name": "_process_shutdown_thoughts",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 302
        },
        {
          "name": "cleanup",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 360
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Handles the SHUTDOWN state by creating a standard task\nthat the agent processes through normal cognitive flow."
    },
    "SolitudeProcessor": {
      "name": "SolitudeProcessor",
      "file": "ciris_engine/logic/processors/states/solitude_processor.py",
      "line": 29,
      "bases": [
        "BaseProcessor"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 39
        },
        {
          "name": "get_supported_states",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 57
        },
        {
          "name": "can_process",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 61
        },
        {
          "name": "process",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 65
        },
        {
          "name": "_check_critical_tasks",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 109
        },
        {
          "name": "_perform_maintenance",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 122
        },
        {
          "name": "_reflect_and_learn",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 155
        },
        {
          "name": "_check_exit_conditions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 189
        },
        {
          "name": "start_processing",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 215
        },
        {
          "name": "stop_processing",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 233
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 238
        },
        {
          "name": "_ready_to_exit_solitude",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 255
        },
        {
          "name": "_get_solitude_duration_minutes",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 274
        },
        {
          "name": "set_solitude_reason",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 282
        },
        {
          "name": "_initialize_time_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 288
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Handles the SOLITUDE state for minimal processing and reflection.\nIn this state, the agent:\n- Only responds to critical/high-priority tasks\n- Performs maintenance and cleanup\n- Reflects on past activities\n- Conserves resources"
    },
    "FacultyIntegration": {
      "name": "FacultyIntegration",
      "file": "ciris_engine/logic/dma/action_selection/faculty_integration.py",
      "line": 19,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 22
        },
        {
          "name": "apply_faculties_to_content",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 25
        },
        {
          "name": "build_faculty_insights_string",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 71
        },
        {
          "name": "enhance_evaluation_with_faculties",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 87
        },
        {
          "name": "add_faculty_metadata_to_result",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 170
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Handles epistemic faculty integration for enhanced action selection."
    },
    "ActionSelectionContextBuilder": {
      "name": "ActionSelectionContextBuilder",
      "file": "ciris_engine/logic/dma/action_selection/context_builder.py",
      "line": 16,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 19
        },
        {
          "name": "build_main_user_content",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 30
        },
        {
          "name": "_get_permitted_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 154
        },
        {
          "name": "_get_available_tools_str",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 181
        },
        {
          "name": "_build_ethical_summary",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 204
        },
        {
          "name": "_build_csdma_summary",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 211
        },
        {
          "name": "_build_dsdma_summary",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 215
        },
        {
          "name": "_build_ponder_context",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 226
        },
        {
          "name": "_build_final_attempt_advisory",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 249
        },
        {
          "name": "_build_guidance_sections",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 270
        },
        {
          "name": "_build_system_context",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 292
        },
        {
          "name": "_build_startup_guidance",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 305
        },
        {
          "name": "_build_conscience_guidance",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 315
        },
        {
          "name": "_get_reject_thought_guidance",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 329
        },
        {
          "name": "_get_agent_specific_prompt",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 333
        },
        {
          "name": "_get_dynamic_action_schemas",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 353
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Builds context for action selection evaluation."
    },
    "ActionSelectionSpecialCases": {
      "name": "ActionSelectionSpecialCases",
      "file": "ciris_engine/logic/dma/action_selection/special_cases.py",
      "line": 14,
      "bases": [],
      "methods": [
        {
          "name": "handle_ponder_force",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 18
        },
        {
          "name": "handle_wakeup_task_speak_requirement",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 51
        },
        {
          "name": "_is_wakeup_task",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 88
        },
        {
          "name": "_task_has_successful_speak",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 110
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Handles special cases in action selection evaluation."
    },
    "ActionInstructionGenerator": {
      "name": "ActionInstructionGenerator",
      "file": "ciris_engine/logic/dma/action_selection/action_instruction_generator.py",
      "line": 31,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 48
        },
        {
          "name": "generate_action_instructions",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 54
        },
        {
          "name": "_generate_schema_for_action",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 71
        },
        {
          "name": "_format_memory_action_schema",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 139
        },
        {
          "name": "_generate_tool_schema",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 187
        },
        {
          "name": "_get_default_tool_instructions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 327
        },
        {
          "name": "_simplify_schema",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 338
        },
        {
          "name": "_extract_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 362
        },
        {
          "name": "get_action_guidance",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 400
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Generates dynamic action instructions based on registered handlers and schemas."
    },
    "ResourceSignalBus": {
      "name": "ResourceSignalBus",
      "file": "ciris_engine/logic/services/infrastructure/resource_monitor.py",
      "line": 22,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 25
        },
        {
          "name": "register",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 33
        },
        {
          "name": "emit",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 36
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Simple signal bus for resource events."
    },
    "ResourceMonitorService": {
      "name": "ResourceMonitorService",
      "file": "ciris_engine/logic/services/infrastructure/resource_monitor.py",
      "line": 44,
      "bases": [
        "BaseScheduledService",
        "ResourceMonitorServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 47
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 72
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 76
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 87
        },
        {
          "name": "_on_start",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 91
        },
        {
          "name": "_on_stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 96
        },
        {
          "name": "_run_scheduled_task",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 101
        },
        {
          "name": "_update_snapshot",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 106
        },
        {
          "name": "_check_limits",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 144
        },
        {
          "name": "_check_resource",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 156
        },
        {
          "name": "_take_action",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 165
        },
        {
          "name": "record_tokens",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 182
        },
        {
          "name": "check_available",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 186
        },
        {
          "name": "_count_active_thoughts",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 195
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 205
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 229
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 234
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Monitor system resources and enforce limits."
    },
    "AuthenticationService": {
      "name": "AuthenticationService",
      "file": "ciris_engine/logic/services/infrastructure/authentication.py",
      "line": 50,
      "bases": [
        "BaseInfrastructureService",
        "AuthenticationServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 53
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 95
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 101
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 128
        },
        {
          "name": "_encode_public_key",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 134
        },
        {
          "name": "_decode_public_key",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 139
        },
        {
          "name": "_derive_encryption_key",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 147
        },
        {
          "name": "_encrypt_secret",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 180
        },
        {
          "name": "_decrypt_secret",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 204
        },
        {
          "name": "_get_or_create_gateway_secret",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 244
        },
        {
          "name": "_init_database",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 276
        },
        {
          "name": "get_wa",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 288
        },
        {
          "name": "_get_wa_by_kid",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 322
        },
        {
          "name": "get_wa_by_oauth",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 356
        },
        {
          "name": "_get_wa_by_adapter",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 393
        },
        {
          "name": "_store_wa_certificate",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 427
        },
        {
          "name": "_create_adapter_observer",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 470
        },
        {
          "name": "update_wa",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 498
        },
        {
          "name": "revoke_wa",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 534
        },
        {
          "name": "_list_all_was",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 547
        },
        {
          "name": "update_last_login",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 589
        },
        {
          "name": "create_channel_token",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 597
        },
        {
          "name": "create_gateway_token",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 636
        },
        {
          "name": "_create_authority_token",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 654
        },
        {
          "name": "_verify_jwt_and_get_context",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 672
        },
        {
          "name": "generate_keypair",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 784
        },
        {
          "name": "sign_data",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 801
        },
        {
          "name": "_verify_signature",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 807
        },
        {
          "name": "hash_password",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 819
        },
        {
          "name": "_verify_password",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 831
        },
        {
          "name": "_generate_api_key",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 852
        },
        {
          "name": "_generate_wa_id",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 858
        },
        {
          "name": "authenticate",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 882
        },
        {
          "name": "create_token",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 928
        },
        {
          "name": "verify_token",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 943
        },
        {
          "name": "create_wa",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 976
        },
        {
          "name": "list_was",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1006
        },
        {
          "name": "rotate_keys",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1010
        },
        {
          "name": "_verify_token_internal",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1029
        },
        {
          "name": "_require_scope",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1049
        },
        {
          "name": "_require_wa_auth",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1108
        },
        {
          "name": "_get_adapter_token",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1192
        },
        {
          "name": "_get_system_wa",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1198
        },
        {
          "name": "get_system_wa_id",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1206
        },
        {
          "name": "_create_system_wa_certificate",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1211
        },
        {
          "name": "sign_task",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1274
        },
        {
          "name": "verify_task_signature",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1313
        },
        {
          "name": "bootstrap_if_needed",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1343
        },
        {
          "name": "_create_channel_token_for_adapter",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1385
        },
        {
          "name": "verify_token_sync",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1416
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1448
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1479
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1547
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1554
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1563
        },
        {
          "name": "get_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1589
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1616
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Infrastructure service for WA authentication and identity management."
    },
    "RuntimeControlService": {
      "name": "RuntimeControlService",
      "file": "ciris_engine/logic/services/runtime/control_service.py",
      "line": 57,
      "bases": [
        "BaseService",
        "RuntimeControlServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 60
        },
        {
          "name": "_get_config_manager",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 117
        },
        {
          "name": "_initialize",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 124
        },
        {
          "name": "single_step",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 133
        },
        {
          "name": "pause_processing",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 200
        },
        {
          "name": "resume_processing",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 244
        },
        {
          "name": "get_processor_queue_status",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 288
        },
        {
          "name": "shutdown_runtime",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 338
        },
        {
          "name": "handle_emergency_shutdown",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 378
        },
        {
          "name": "_verify_wa_signature",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 453
        },
        {
          "name": "_configure_kill_switch",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 513
        },
        {
          "name": "_extract_wa_id_from_pem",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 542
        },
        {
          "name": "load_adapter",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 554
        },
        {
          "name": "unload_adapter",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 598
        },
        {
          "name": "list_adapters",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 636
        },
        {
          "name": "get_adapter_info",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 736
        },
        {
          "name": "get_config",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 786
        },
        {
          "name": "update_config",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 824
        },
        {
          "name": "validate_config",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 869
        },
        {
          "name": "backup_config",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 884
        },
        {
          "name": "restore_config",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 924
        },
        {
          "name": "list_config_backups",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 991
        },
        {
          "name": "get_runtime_status",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1012
        },
        {
          "name": "get_runtime_snapshot",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1048
        },
        {
          "name": "_get_service_registry_info",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1084
        },
        {
          "name": "update_service_priority",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1147
        },
        {
          "name": "reset_circuit_breakers",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1254
        },
        {
          "name": "get_circuit_breaker_status",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1324
        },
        {
          "name": "get_service_selection_explanation",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1394
        },
        {
          "name": "get_service_health_status",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1475
        },
        {
          "name": "_get_service_selection_explanation",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1626
        },
        {
          "name": "_record_event",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1665
        },
        {
          "name": "get_events_history",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1694
        },
        {
          "name": "_reload_config",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1699
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1721
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1725
        },
        {
          "name": "_register_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1730
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1738
        },
        {
          "name": "get_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1776
        },
        {
          "name": "_track_thought_processing_time",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1819
        },
        {
          "name": "_calculate_average_thought_time",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1838
        },
        {
          "name": "_calculate_average_latency",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1844
        },
        {
          "name": "_calculate_processing_rate",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1848
        },
        {
          "name": "_calculate_current_load",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1860
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1870
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1896
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1912
        },
        {
          "name": "_set_runtime",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1931
        },
        {
          "name": "setup_thought_tracking",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1947
        },
        {
          "name": "_on_start",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1957
        },
        {
          "name": "_on_stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1962
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Service for runtime control of processor, adapters, and configuration."
    },
    "OpenAIConfig": {
      "name": "OpenAIConfig",
      "file": "ciris_engine/logic/services/runtime/llm_service.py",
      "line": 28,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "OpenAICompatibleClient": {
      "name": "OpenAICompatibleClient",
      "file": "ciris_engine/logic/services/runtime/llm_service.py",
      "line": 43,
      "bases": [
        "BaseService",
        "LLMServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 46
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 137
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 141
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 145
        },
        {
          "name": "_register_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 154
        },
        {
          "name": "_on_start",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 160
        },
        {
          "name": "_on_stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 165
        },
        {
          "name": "_get_client",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 170
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 174
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 181
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 200
        },
        {
          "name": "get_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 244
        },
        {
          "name": "_extract_json_from_response",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 266
        },
        {
          "name": "_extract_json",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 271
        },
        {
          "name": "call_llm_structured",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 292
        },
        {
          "name": "_get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 448
        },
        {
          "name": "_retry_with_backoff",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 470
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Client for interacting with OpenAI-compatible APIs with circuit breaker protection."
    },
    "VisibilityService": {
      "name": "VisibilityService",
      "file": "ciris_engine/logic/services/governance/visibility.py",
      "line": 37,
      "bases": [
        "BaseService",
        "VisibilityServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 40
        },
        {
          "name": "_on_start",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 54
        },
        {
          "name": "_on_stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 58
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 62
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 66
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 70
        },
        {
          "name": "_register_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 74
        },
        {
          "name": "get_current_state",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 79
        },
        {
          "name": "get_task_history",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 139
        },
        {
          "name": "get_reasoning_trace",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 179
        },
        {
          "name": "get_decision_history",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 279
        },
        {
          "name": "explain_action",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 359
        },
        {
          "name": "get_task_history",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 385
        },
        {
          "name": "apply_redaction",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 409
        },
        {
          "name": "get_recent_traces",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 414
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 464
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Service providing agent reasoning transparency."
    },
    "AdaptiveFilterService": {
      "name": "AdaptiveFilterService",
      "file": "ciris_engine/logic/services/governance/filter.py",
      "line": 39,
      "bases": [
        "BaseService",
        "AdaptiveFilterServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 42
        },
        {
          "name": "_on_start",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 65
        },
        {
          "name": "_on_stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 70
        },
        {
          "name": "_initialize",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 80
        },
        {
          "name": "_create_default_config",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 103
        },
        {
          "name": "filter_message",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 201
        },
        {
          "name": "_test_trigger",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 282
        },
        {
          "name": "_check_frequency",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 339
        },
        {
          "name": "_semantic_analysis",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 353
        },
        {
          "name": "_update_user_trust",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 359
        },
        {
          "name": "_extract_content",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 396
        },
        {
          "name": "_extract_user_id",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 407
        },
        {
          "name": "_extract_channel_id",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 417
        },
        {
          "name": "_extract_message_id",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 425
        },
        {
          "name": "_is_direct_message",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 435
        },
        {
          "name": "_priority_value",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 453
        },
        {
          "name": "_hash_user_id",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 464
        },
        {
          "name": "handle_consent_transition",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 472
        },
        {
          "name": "anonymize_user_profile",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 521
        },
        {
          "name": "get_filter_decision_for_anonymous",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 567
        },
        {
          "name": "_generate_reasoning",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 596
        },
        {
          "name": "_save_config",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 610
        },
        {
          "name": "get_health",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 632
        },
        {
          "name": "add_filter_trigger",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 661
        },
        {
          "name": "remove_filter_trigger",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 683
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 707
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 711
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 728
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 749
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 753
        },
        {
          "name": "_register_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 757
        },
        {
          "name": "get_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 765
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 803
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Service for adaptive message filtering with graph memory persistence"
    },
    "WiseAuthorityService": {
      "name": "WiseAuthorityService",
      "file": "ciris_engine/logic/services/governance/wise_authority.py",
      "line": 40,
      "bases": [
        "BaseService",
        "WiseAuthorityServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 51
        },
        {
          "name": "_on_start",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 72
        },
        {
          "name": "_on_stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 80
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 84
        },
        {
          "name": "check_authorization",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 104
        },
        {
          "name": "request_approval",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 127
        },
        {
          "name": "grant_permission",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 167
        },
        {
          "name": "revoke_permission",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 182
        },
        {
          "name": "list_permissions",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 198
        },
        {
          "name": "send_deferral",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 242
        },
        {
          "name": "get_pending_deferrals",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 314
        },
        {
          "name": "resolve_deferral",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 392
        },
        {
          "name": "fetch_guidance",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 516
        },
        {
          "name": "get_guidance",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 544
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 588
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 636
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 640
        },
        {
          "name": "_register_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 644
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 651
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Wise Authority Service for authorization and guidance.\n\nHandles:\n- Authorization checks\n- Decision deferrals\n- Guidance requests\n- Permission management"
    },
    "ConsentNotFoundError": {
      "name": "ConsentNotFoundError",
      "file": "ciris_engine/logic/services/governance/consent.py",
      "line": 37,
      "bases": [
        "Exception"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Raised when consent status doesn't exist - FAIL FAST."
    },
    "ConsentValidationError": {
      "name": "ConsentValidationError",
      "file": "ciris_engine/logic/services/governance/consent.py",
      "line": 43,
      "bases": [
        "Exception"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Raised when consent request is invalid - FAIL LOUD."
    },
    "ConsentService": {
      "name": "ConsentService",
      "file": "ciris_engine/logic/services/governance/consent.py",
      "line": 49,
      "bases": [
        "BaseService",
        "ConsentManagerProtocol",
        "ToolService"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 61
        },
        {
          "name": "get_consent",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 107
        },
        {
          "name": "grant_consent",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 159
        },
        {
          "name": "revoke_consent",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 316
        },
        {
          "name": "check_expiry",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 419
        },
        {
          "name": "get_impact_report",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 432
        },
        {
          "name": "get_audit_trail",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 453
        },
        {
          "name": "check_pending_partnership",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 461
        },
        {
          "name": "cleanup_expired",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 548
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 571
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 575
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 592
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 676
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 680
        },
        {
          "name": "execute_tool",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 686
        },
        {
          "name": "get_available_tools",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 719
        },
        {
          "name": "list_tools",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 723
        },
        {
          "name": "get_tool_schema",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 727
        },
        {
          "name": "get_tool_info",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 762
        },
        {
          "name": "get_all_tool_info",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 805
        },
        {
          "name": "get_tool_result",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 812
        },
        {
          "name": "validate_parameters",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 817
        },
        {
          "name": "_upgrade_relationship_tool",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 825
        },
        {
          "name": "_degrade_relationship_tool",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 882
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Consent Service - 22nd Core CIRIS Service (Governance #5).\n\nManages user consent with HARD GUARANTEES:\n- TEMPORARY by default (14 days)\n- No fake data or fallbacks\n- Immutable audit trail\n- Real decay protocol\n- Bilateral agreement for PARTNERED"
    },
    "TimeService": {
      "name": "TimeService",
      "file": "ciris_engine/logic/services/lifecycle/time.py",
      "line": 26,
      "bases": [
        "BaseInfrastructureService",
        "TimeServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 29
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 51
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 55
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 59
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 64
        },
        {
          "name": "_now",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 84
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 88
        },
        {
          "name": "now",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 115
        },
        {
          "name": "now_iso",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 125
        },
        {
          "name": "timestamp",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 135
        },
        {
          "name": "get_uptime",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 145
        },
        {
          "name": "_check_ntp_drift_if_needed",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 157
        },
        {
          "name": "_update_ntp_offset",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 169
        },
        {
          "name": "_simulate_drift",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 199
        },
        {
          "name": "get_ntp_offset",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 209
        },
        {
          "name": "get_adjusted_time",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 218
        },
        {
          "name": "get_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 229
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Secure time service implementation."
    },
    "InitializationStep": {
      "name": "InitializationStep",
      "file": "ciris_engine/logic/services/lifecycle/initialization.py",
      "line": 27,
      "bases": [],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "dataclass"
      ],
      "docstring": "Represents a single initialization step."
    },
    "InitializationService": {
      "name": "InitializationService",
      "file": "ciris_engine/logic/services/lifecycle/initialization.py",
      "line": 38,
      "bases": [
        "BaseInfrastructureService",
        "InitializationServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 41
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 59
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 63
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 67
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 72
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 97
        },
        {
          "name": "get_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 117
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 145
        },
        {
          "name": "register_step",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 152
        },
        {
          "name": "initialize",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 178
        },
        {
          "name": "verify_initialization",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 227
        },
        {
          "name": "_is_initialized",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 245
        },
        {
          "name": "get_initialization_status",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 249
        },
        {
          "name": "_execute_phase",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 265
        },
        {
          "name": "_execute_step",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 285
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Service for coordinating system initialization."
    },
    "TaskSchedulerService": {
      "name": "TaskSchedulerService",
      "file": "ciris_engine/logic/services/lifecycle/scheduler.py",
      "line": 37,
      "bases": [
        "BaseScheduledService",
        "TaskSchedulerServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 45
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 61
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 65
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 69
        },
        {
          "name": "_on_start",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 73
        },
        {
          "name": "_on_stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 82
        },
        {
          "name": "_load_active_tasks",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 87
        },
        {
          "name": "_create_scheduled_task",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 100
        },
        {
          "name": "_run_scheduled_task",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 126
        },
        {
          "name": "_get_due_tasks",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 135
        },
        {
          "name": "_is_task_due",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 145
        },
        {
          "name": "_should_trigger_cron",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 158
        },
        {
          "name": "_trigger_task",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 187
        },
        {
          "name": "_update_task_triggered",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 254
        },
        {
          "name": "_complete_task",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 272
        },
        {
          "name": "schedule_task",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 283
        },
        {
          "name": "schedule_deferred_task",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 346
        },
        {
          "name": "cancel_task",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 393
        },
        {
          "name": "get_scheduled_tasks",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 412
        },
        {
          "name": "_defer_task",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 437
        },
        {
          "name": "_handle_shutdown",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 470
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 488
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 505
        },
        {
          "name": "_validate_cron_expression",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 540
        },
        {
          "name": "_get_next_cron_time",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 562
        },
        {
          "name": "get_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 584
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 604
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Manages scheduled tasks and integrates with the DEFER system.\n\nThis service enables agents to be proactive by scheduling future actions,\neither through one-time deferrals or recurring schedules."
    },
    "ShutdownService": {
      "name": "ShutdownService",
      "file": "ciris_engine/logic/services/lifecycle/shutdown.py",
      "line": 22,
      "bases": [
        "BaseInfrastructureService",
        "ShutdownServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 25
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 45
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 55
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 61
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 65
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 75
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 80
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 105
        },
        {
          "name": "get_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 122
        },
        {
          "name": "request_shutdown",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 149
        },
        {
          "name": "_request_shutdown_sync",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 160
        },
        {
          "name": "register_shutdown_handler",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 186
        },
        {
          "name": "_register_async_shutdown_handler",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 197
        },
        {
          "name": "is_shutdown_requested",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 208
        },
        {
          "name": "_wait_for_shutdown",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 212
        },
        {
          "name": "get_shutdown_reason",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 224
        },
        {
          "name": "_execute_sync_handlers",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 228
        },
        {
          "name": "_execute_async_handlers",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 240
        },
        {
          "name": "wait_for_shutdown",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 255
        },
        {
          "name": "wait_for_shutdown_async",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 262
        },
        {
          "name": "emergency_shutdown",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 266
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Service for coordinating graceful shutdown."
    },
    "SecretsToolService": {
      "name": "SecretsToolService",
      "file": "ciris_engine/logic/services/tools/secrets_tool_service.py",
      "line": 30,
      "bases": [
        "BaseService",
        "ToolService"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 33
        },
        {
          "name": "_track_metric",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 46
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 50
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 54
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 58
        },
        {
          "name": "_register_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 62
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 67
        },
        {
          "name": "execute_tool",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 74
        },
        {
          "name": "_recall_secret",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 102
        },
        {
          "name": "_update_secrets_filter",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 141
        },
        {
          "name": "_self_help",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 186
        },
        {
          "name": "get_available_tools",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 206
        },
        {
          "name": "get_tool_info",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 210
        },
        {
          "name": "get_all_tool_info",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 263
        },
        {
          "name": "validate_parameters",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 272
        },
        {
          "name": "get_tool_result",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 287
        },
        {
          "name": "list_tools",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 292
        },
        {
          "name": "get_tool_schema",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 296
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 303
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 314
        },
        {
          "name": "get_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 337
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Service providing secrets management tools."
    },
    "ObservationState": {
      "name": "ObservationState",
      "file": "ciris_engine/schemas/services/special/self_observation.py",
      "line": 16,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Current state of the self-observation system."
    },
    "ObservationCycle": {
      "name": "ObservationCycle",
      "file": "ciris_engine/logic/services/adaptation/self_observation.py",
      "line": 69,
      "bases": [],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "dataclass"
      ],
      "docstring": "Represents one complete observation and analysis cycle."
    },
    "SelfObservationService": {
      "name": "SelfObservationService",
      "file": "ciris_engine/logic/services/adaptation/self_observation.py",
      "line": 83,
      "bases": [
        "BaseScheduledService",
        "SelfObservationServiceProtocol",
        "ServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 97
        },
        {
          "name": "_set_service_registry",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 147
        },
        {
          "name": "_initialize_components",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 165
        },
        {
          "name": "_initialize_identity_baseline",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 197
        },
        {
          "name": "_run_scheduled_task",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 229
        },
        {
          "name": "_should_run_observation_cycle",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 242
        },
        {
          "name": "_run_observation_cycle",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 268
        },
        {
          "name": "_store_cycle_event",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 358
        },
        {
          "name": "_store_cycle_summary",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 378
        },
        {
          "name": "get_adaptation_status",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 411
        },
        {
          "name": "resume_after_review",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 441
        },
        {
          "name": "emergency_stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 476
        },
        {
          "name": "_on_start",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 499
        },
        {
          "name": "_on_stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 511
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 528
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 544
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 568
        },
        {
          "name": "initialize_baseline",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 591
        },
        {
          "name": "analyze_observability_window",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 598
        },
        {
          "name": "trigger_adaptation_cycle",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 648
        },
        {
          "name": "get_pattern_library",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 676
        },
        {
          "name": "measure_adaptation_effectiveness",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 718
        },
        {
          "name": "get_improvement_report",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 743
        },
        {
          "name": "analyze_patterns",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 783
        },
        {
          "name": "get_detected_patterns",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 802
        },
        {
          "name": "get_action_frequency",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 826
        },
        {
          "name": "get_pattern_insights",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 882
        },
        {
          "name": "get_learning_summary",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 931
        },
        {
          "name": "get_temporal_patterns",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 978
        },
        {
          "name": "get_pattern_effectiveness",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1008
        },
        {
          "name": "get_analysis_status",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1033
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1055
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1062
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1074
        },
        {
          "name": "get_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1078
        },
        {
          "name": "get_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1125
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1142
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Service that enables self-observation, pattern detection, and insight generation.\n\nThis service:\n1. Coordinates between variance monitoring, pattern detection, and telemetry\n2. Manages the adaptation lifecycle with safety checks\n3. Ensures changes stay within the 20% identity variance threshold\n4. Provides a unified interface for self-configuration\n\nThe flow:\nExperience \u2192 Telemetry \u2192 Patterns \u2192 Insights \u2192 Agent Decisions \u2192 Config Changes"
    },
    "RequestMetrics": {
      "name": "RequestMetrics",
      "file": "ciris_engine/logic/services/mixins/request_metrics.py",
      "line": 19,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Metrics for request handling."
    },
    "RequestMetricsMixin": {
      "name": "RequestMetricsMixin",
      "file": "ciris_engine/logic/services/mixins/request_metrics.py",
      "line": 31,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 47
        },
        {
          "name": "track_request_start",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 56
        },
        {
          "name": "track_request_end",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 69
        },
        {
          "name": "get_request_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 96
        },
        {
          "name": "reset_request_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 120
        },
        {
          "name": "get_active_request_count",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 130
        },
        {
          "name": "get_response_time_percentile",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 138
        },
        {
          "name": "get_recent_error_rate",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 157
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Mixin class to add request metrics tracking to services.\n\nUsage:\n    class MyService(RequestMetricsMixin, BaseService):\n        async def handle_request(self, request):\n            request_id = self.track_request_start()\n            try:\n                result = await self._process_request(request)\n                self.track_request_end(request_id, success=True)\n                return result\n            except Exception as e:\n                self.track_request_end(request_id, success=False)\n                raise"
    },
    "MetricsEnabledGraphService": {
      "name": "MetricsEnabledGraphService",
      "file": "ciris_engine/logic/services/mixins/example_usage.py",
      "line": 23,
      "bases": [
        "RequestMetricsMixin",
        "BaseGraphService"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 30
        },
        {
          "name": "get_node_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 35
        },
        {
          "name": "store_in_graph",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 39
        },
        {
          "name": "query_graph",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 61
        },
        {
          "name": "get_extended_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 83
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Example graph service with request metrics tracking.\n\nThis demonstrates how to combine RequestMetricsMixin with existing\nCIRIS service base classes while maintaining proper MRO and patterns."
    },
    "MetricsEnabledAdapter": {
      "name": "MetricsEnabledAdapter",
      "file": "ciris_engine/logic/services/mixins/example_usage.py",
      "line": 111,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 114
        },
        {
          "name": "send_message",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 118
        },
        {
          "name": "_do_send",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 134
        },
        {
          "name": "get_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 139
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Example of adding metrics to a communication adapter."
    },
    "IncidentManagementService": {
      "name": "IncidentManagementService",
      "file": "ciris_engine/logic/services/graph/incident_service.py",
      "line": 36,
      "bases": [
        "BaseGraphService"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 48
        },
        {
          "name": "_get_time_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 56
        },
        {
          "name": "process_recent_incidents",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 63
        },
        {
          "name": "_get_recent_incidents",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 138
        },
        {
          "name": "_detect_patterns",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 262
        },
        {
          "name": "_identify_problems",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 292
        },
        {
          "name": "_generate_recommendations",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 345
        },
        {
          "name": "_group_by_similarity",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 384
        },
        {
          "name": "_detect_time_clusters",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 395
        },
        {
          "name": "_analyze_root_causes",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 421
        },
        {
          "name": "_create_problem_statement",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 447
        },
        {
          "name": "_suggest_fixes",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 459
        },
        {
          "name": "_summarize_analysis",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 479
        },
        {
          "name": "_get_severity_breakdown",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 491
        },
        {
          "name": "_get_component_breakdown",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 498
        },
        {
          "name": "_get_time_distribution",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 505
        },
        {
          "name": "_create_no_incidents_insight",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 513
        },
        {
          "name": "get_incident_count",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 532
        },
        {
          "name": "_mark_incidents_analyzed",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 551
        },
        {
          "name": "_update_incident",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 560
        },
        {
          "name": "get_node_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 572
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 576
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 583
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 593
        },
        {
          "name": "is_healthy",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 608
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 612
        },
        {
          "name": "get_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 616
        },
        {
          "name": "_track_metric",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 653
        },
        {
          "name": "_increment_metric",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 663
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Manages incidents, problems, and insights for agent self-improvement.\n\nThis service:\n1. Processes incidents captured from WARNING/ERROR logs\n2. Detects patterns and recurring issues\n3. Identifies root causes (problems)\n4. Generates actionable insights for self-improvement\n5. Tracks effectiveness of applied changes"
    },
    "GraphAuditService": {
      "name": "GraphAuditService",
      "file": "ciris_engine/logic/services/graph/audit_service.py",
      "line": 68,
      "bases": [
        "BaseGraphService",
        "AuditServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 80
        },
        {
          "name": "_set_service_registry",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 152
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 168
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 195
        },
        {
          "name": "log_action",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 236
        },
        {
          "name": "log_event",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 275
        },
        {
          "name": "log_conscience_event",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 383
        },
        {
          "name": "get_audit_trail",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 403
        },
        {
          "name": "query_audit_trail",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 458
        },
        {
          "name": "verify_audit_integrity",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 562
        },
        {
          "name": "get_verification_report",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 619
        },
        {
          "name": "export_audit_data",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 654
        },
        {
          "name": "get_node_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 710
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 716
        },
        {
          "name": "get_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 740
        },
        {
          "name": "_store_entry_in_graph",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 791
        },
        {
          "name": "_create_trace_correlation",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 830
        },
        {
          "name": "_initialize_hash_chain",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 912
        },
        {
          "name": "_init_components_sync",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 948
        },
        {
          "name": "_init_database",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 960
        },
        {
          "name": "_add_to_hash_chain",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1025
        },
        {
          "name": "_cache_entry",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1083
        },
        {
          "name": "_export_worker",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1089
        },
        {
          "name": "_flush_exports",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1102
        },
        {
          "name": "_export_jsonl",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1119
        },
        {
          "name": "_export_csv",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1129
        },
        {
          "name": "_export_sqlite",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1158
        },
        {
          "name": "_get_severity",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1204
        },
        {
          "name": "_calculate_hours",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1213
        },
        {
          "name": "_matches_filters",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1225
        },
        {
          "name": "_tsdb_to_audit_entry",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1261
        },
        {
          "name": "_convert_timeseries_to_entries",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1335
        },
        {
          "name": "query_events",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1356
        },
        {
          "name": "get_event_by_id",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1388
        },
        {
          "name": "_audit_request_to_entry",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1425
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1445
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1449
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1468
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Consolidated audit service that stores all audit entries in the graph.\n\nFeatures:\n- Primary storage in graph (everything is memory)\n- Optional file export for compliance\n- Cryptographic hash chain for integrity\n- Digital signatures for non-repudiation\n- Unified interface for all audit operations"
    },
    "MemoryType": {
      "name": "MemoryType",
      "file": "ciris_engine/logic/services/graph/telemetry_service.py",
      "line": 53,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Types of memories in the unified system."
    },
    "GracePolicy": {
      "name": "GracePolicy",
      "file": "ciris_engine/logic/services/graph/telemetry_service.py",
      "line": 63,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Policies for applying grace in memory consolidation."
    },
    "ConsolidationCandidate": {
      "name": "ConsolidationCandidate",
      "file": "ciris_engine/logic/services/graph/telemetry_service.py",
      "line": 73,
      "bases": [],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "dataclass"
      ],
      "docstring": "A set of memories that could be consolidated."
    },
    "TelemetryAggregator": {
      "name": "TelemetryAggregator",
      "file": "ciris_engine/logic/services/graph/telemetry_service.py",
      "line": 84,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 117
        },
        {
          "name": "collect_all_parallel",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 125
        },
        {
          "name": "_generate_semantic_service_name",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 188
        },
        {
          "name": "collect_from_registry_services",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 240
        },
        {
          "name": "collect_from_registry_provider",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 324
        },
        {
          "name": "collect_service",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 402
        },
        {
          "name": "_get_service_from_runtime",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 448
        },
        {
          "name": "_get_service_from_registry",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 506
        },
        {
          "name": "_try_collect_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 569
        },
        {
          "name": "collect_from_bus",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 647
        },
        {
          "name": "collect_from_component",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 725
        },
        {
          "name": "_get_control_service",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 767
        },
        {
          "name": "_is_adapter_running",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 777
        },
        {
          "name": "_find_adapter_instance",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 787
        },
        {
          "name": "_get_adapter_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 795
        },
        {
          "name": "_create_telemetry_data",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 803
        },
        {
          "name": "collect_from_adapter_instances",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 837
        },
        {
          "name": "get_fallback_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 915
        },
        {
          "name": "status_to_telemetry",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 926
        },
        {
          "name": "_process_service_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 935
        },
        {
          "name": "_aggregate_service_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 954
        },
        {
          "name": "_extract_metric_value",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 986
        },
        {
          "name": "_extract_governance_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 995
        },
        {
          "name": "compute_covenant_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1006
        },
        {
          "name": "calculate_aggregates",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1058
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Enterprise telemetry aggregation for unified monitoring.\n\nCollects metrics from all 22 required services in parallel and\nprovides aggregated views for different stakeholders."
    },
    "GraphTelemetryService": {
      "name": "GraphTelemetryService",
      "file": "ciris_engine/logic/services/graph/telemetry_service.py",
      "line": 1082,
      "bases": [
        "BaseGraphService",
        "TelemetryServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1096
        },
        {
          "name": "_set_runtime",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1127
        },
        {
          "name": "_set_service_registry",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1136
        },
        {
          "name": "_now",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1158
        },
        {
          "name": "record_metric",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1168
        },
        {
          "name": "_record_resource_usage",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1230
        },
        {
          "name": "query_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1284
        },
        {
          "name": "get_metric_summary",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1361
        },
        {
          "name": "_get_service_status",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1389
        },
        {
          "name": "_get_resource_limits",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1449
        },
        {
          "name": "_process_system_snapshot",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1453
        },
        {
          "name": "_store_telemetry_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1554
        },
        {
          "name": "_store_resource_usage",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1577
        },
        {
          "name": "_store_behavioral_data",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1632
        },
        {
          "name": "_store_social_context",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1653
        },
        {
          "name": "_store_identity_context",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1674
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1700
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1706
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1725
        },
        {
          "name": "get_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1767
        },
        {
          "name": "get_node_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1816
        },
        {
          "name": "get_metric_count",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1820
        },
        {
          "name": "get_telemetry_summary",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1855
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 2111
        },
        {
          "name": "_init_telemetry_aggregator",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 2115
        },
        {
          "name": "_check_cache",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 2137
        },
        {
          "name": "_convert_telemetry_to_services",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 2149
        },
        {
          "name": "get_aggregated_telemetry",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 2169
        },
        {
          "name": "_store_correlation",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 2231
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 2314
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 2327
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Consolidated TelemetryService that stores all metrics as graph memories.\n\nThis service implements the vision where \"everything is a memory\" by\nconverting telemetry data into TSDBGraphNodes stored in the memory graph.\n\nFeatures:\n- Processes SystemSnapshot data from adapters\n- Records operational metrics and resource usage\n- Stores behavioral, social, and identity context\n- Applies grace-based wisdom to memory consolidation"
    },
    "DateTimeEncoder": {
      "name": "DateTimeEncoder",
      "file": "ciris_engine/logic/persistence/models/graph.py",
      "line": 13,
      "bases": [
        "JSONEncoder"
      ],
      "methods": [
        {
          "name": "default",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 16
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Custom JSON encoder that handles datetime objects and Pydantic models."
    },
    "LocalGraphMemoryService": {
      "name": "LocalGraphMemoryService",
      "file": "ciris_engine/logic/services/graph/memory_service.py",
      "line": 45,
      "bases": [
        "BaseGraphService",
        "MemoryService",
        "GraphMemoryServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 48
        },
        {
          "name": "memorize",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 62
        },
        {
          "name": "recall",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 80
        },
        {
          "name": "forget",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 306
        },
        {
          "name": "export_identity_context",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 325
        },
        {
          "name": "_process_secrets_for_memorize",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 337
        },
        {
          "name": "_process_secrets_for_recall",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 377
        },
        {
          "name": "_process_secrets_for_forget",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 422
        },
        {
          "name": "recall_timeseries",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 448
        },
        {
          "name": "memorize_metric",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 580
        },
        {
          "name": "create_edge",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 636
        },
        {
          "name": "get_node_edges",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 650
        },
        {
          "name": "memorize_log",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 661
        },
        {
          "name": "search",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 748
        },
        {
          "name": "start",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 832
        },
        {
          "name": "stop",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 841
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 847
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 905
        },
        {
          "name": "store_in_graph",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 921
        },
        {
          "name": "query_graph",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 932
        },
        {
          "name": "get_node_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 936
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 942
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 946
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 961
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Graph memory backed by the persistence database."
    },
    "GraphConfigService": {
      "name": "GraphConfigService",
      "file": "ciris_engine/logic/services/graph/config_service.py",
      "line": 28,
      "bases": [
        "BaseGraphService",
        "GraphConfigServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 31
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 47
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 53
        },
        {
          "name": "get_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 59
        },
        {
          "name": "store_in_graph",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 94
        },
        {
          "name": "query_graph",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 110
        },
        {
          "name": "_query_config_by_key",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 121
        },
        {
          "name": "get_node_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 141
        },
        {
          "name": "get_config",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 145
        },
        {
          "name": "set_config",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 182
        },
        {
          "name": "list_configs",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 255
        },
        {
          "name": "register_config_listener",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 282
        },
        {
          "name": "unregister_config_listener",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 298
        },
        {
          "name": "_notify_listeners",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 305
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 334
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 338
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 349
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration service that stores all config as graph memories."
    },
    "QueryManager": {
      "name": "QueryManager",
      "file": "ciris_engine/logic/services/graph/tsdb_consolidation/query_manager.py",
      "line": 25,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 28
        },
        {
          "name": "query_all_nodes_in_period",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 39
        },
        {
          "name": "query_tsdb_data_nodes",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 122
        },
        {
          "name": "query_service_correlations",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 187
        },
        {
          "name": "query_tasks_in_period",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 318
        },
        {
          "name": "get_special_node_types",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 411
        },
        {
          "name": "check_period_consolidated",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 431
        },
        {
          "name": "get_last_consolidated_period",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 474
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Manages querying data for consolidation."
    },
    "RateLimitedLogger": {
      "name": "RateLimitedLogger",
      "file": "ciris_engine/logic/services/graph/tsdb_consolidation/data_converter.py",
      "line": 32,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 35
        },
        {
          "name": "should_log",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 43
        },
        {
          "name": "warning",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 67
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Logger that suppresses repetitive warnings."
    },
    "RawCorrelationData": {
      "name": "RawCorrelationData",
      "file": "ciris_engine/logic/services/graph/tsdb_consolidation/data_converter.py",
      "line": 84,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "convert_none_to_empty_dict",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 102
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Raw correlation data from database row."
    },
    "RawTaskData": {
      "name": "RawTaskData",
      "file": "ciris_engine/logic/services/graph/tsdb_consolidation/data_converter.py",
      "line": 109,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Raw task data from database row."
    },
    "RawThoughtData": {
      "name": "RawThoughtData",
      "file": "ciris_engine/logic/services/graph/tsdb_consolidation/data_converter.py",
      "line": 125,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Raw thought data from database row."
    },
    "TSDBDataConverter": {
      "name": "TSDBDataConverter",
      "file": "ciris_engine/logic/services/graph/tsdb_consolidation/data_converter.py",
      "line": 138,
      "bases": [],
      "methods": [
        {
          "name": "convert_service_interaction",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 142
        },
        {
          "name": "convert_metric_correlation",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 216
        },
        {
          "name": "convert_trace_span",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 265
        },
        {
          "name": "convert_task",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 331
        },
        {
          "name": "_convert_thought",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 408
        },
        {
          "name": "_parse_datetime",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 448
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Converts raw dictionary data to typed schemas."
    },
    "TSDBConsolidationService": {
      "name": "TSDBConsolidationService",
      "file": "ciris_engine/logic/services/graph/tsdb_consolidation/service.py",
      "line": 51,
      "bases": [
        "BaseGraphService"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 62
        },
        {
          "name": "_load_consolidation_config",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 130
        },
        {
          "name": "_set_service_registry",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 142
        },
        {
          "name": "_now",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 154
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 158
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 179
        },
        {
          "name": "_consolidation_loop",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 215
        },
        {
          "name": "_extensive_consolidation_loop",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 237
        },
        {
          "name": "_profound_consolidation_loop",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 280
        },
        {
          "name": "_run_consolidation",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 327
        },
        {
          "name": "_consolidate_missed_windows",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 421
        },
        {
          "name": "_consolidate_period",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 495
        },
        {
          "name": "_create_all_edges",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 619
        },
        {
          "name": "_find_oldest_unconsolidated_period",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 750
        },
        {
          "name": "_cleanup_old_data",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 788
        },
        {
          "name": "is_healthy",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 944
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 954
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 974
        },
        {
          "name": "get_node_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1014
        },
        {
          "name": "_is_period_consolidated",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1018
        },
        {
          "name": "_ensure_summary_edges",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1048
        },
        {
          "name": "_calculate_next_run_time",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1122
        },
        {
          "name": "_calculate_next_period_start",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1132
        },
        {
          "name": "_get_next_weekly_monday",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1142
        },
        {
          "name": "_get_next_month_start",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1154
        },
        {
          "name": "_cleanup_old_nodes",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1170
        },
        {
          "name": "get_summary_for_period",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1175
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1228
        },
        {
          "name": "_handle_consent_expiry",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1232
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1300
        },
        {
          "name": "_run_extensive_consolidation",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1305
        },
        {
          "name": "_create_daily_summary_edges",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1683
        },
        {
          "name": "get_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1745
        },
        {
          "name": "_run_profound_consolidation",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1776
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Refactored TSDB Consolidation Service.\n\nKey improvements:\n1. Consolidates BOTH graph nodes AND service correlations\n2. Creates proper edges in graph_edges table\n3. Links summaries to ALL nodes in the period\n4. Includes task summaries with outcomes"
    },
    "SummaryCompressor": {
      "name": "SummaryCompressor",
      "file": "ciris_engine/logic/services/graph/tsdb_consolidation/compressor.py",
      "line": 17,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 20
        },
        {
          "name": "compress_summary",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 29
        },
        {
          "name": "_compress_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 69
        },
        {
          "name": "_compress_descriptions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 104
        },
        {
          "name": "_remove_redundancy",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 145
        },
        {
          "name": "estimate_daily_size",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 175
        },
        {
          "name": "needs_compression",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 190
        },
        {
          "name": "_compress_images",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 206
        },
        {
          "name": "_compress_video_thumbnails",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 218
        },
        {
          "name": "_compress_telemetry_data",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 230
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Handles compression of summary nodes for profound consolidation."
    },
    "EdgeManager": {
      "name": "EdgeManager",
      "file": "ciris_engine/logic/services/graph/tsdb_consolidation/edge_manager.py",
      "line": 22,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 25
        },
        {
          "name": "create_summary_to_nodes_edges",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 33
        },
        {
          "name": "create_cross_summary_edges",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 181
        },
        {
          "name": "create_temporal_edges",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 247
        },
        {
          "name": "create_concept_edges",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 358
        },
        {
          "name": "get_previous_summary_id",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 421
        },
        {
          "name": "_determine_cross_summary_relationship",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 456
        },
        {
          "name": "create_user_participation_edges",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 485
        },
        {
          "name": "cleanup_orphaned_edges",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 611
        },
        {
          "name": "create_edges",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 643
        },
        {
          "name": "update_next_period_edges",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 816
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Manages proper edge creation in the graph."
    },
    "PeriodManager": {
      "name": "PeriodManager",
      "file": "ciris_engine/logic/services/graph/tsdb_consolidation/period_manager.py",
      "line": 11,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 14
        },
        {
          "name": "get_period_boundaries",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 24
        },
        {
          "name": "get_period_start",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 47
        },
        {
          "name": "get_next_period_start",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 60
        },
        {
          "name": "get_period_label",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 76
        },
        {
          "name": "get_period_id",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 101
        },
        {
          "name": "is_period_complete",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 113
        },
        {
          "name": "get_periods_in_range",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 127
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Manages consolidation period calculations and utilities."
    },
    "ConversationConsolidator": {
      "name": "ConversationConsolidator",
      "file": "ciris_engine/logic/services/graph/tsdb_consolidation/consolidators/conversation.py",
      "line": 25,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 28
        },
        {
          "name": "consolidate",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 39
        },
        {
          "name": "get_edges",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 168
        },
        {
          "name": "get_participant_data",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 252
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Consolidates conversation and interaction data."
    },
    "AuditConsolidator": {
      "name": "AuditConsolidator",
      "file": "ciris_engine/logic/services/graph/tsdb_consolidation/consolidators/audit.py",
      "line": 29,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 32
        },
        {
          "name": "consolidate",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 43
        },
        {
          "name": "get_edges",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 228
        },
        {
          "name": "_compute_audit_hash",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 318
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Consolidates audit entries into summaries with cryptographic hashing."
    },
    "ThoughtInfo": {
      "name": "ThoughtInfo",
      "file": "ciris_engine/logic/services/graph/tsdb_consolidation/consolidators/trace.py",
      "line": 20,
      "bases": [
        "TypedDict"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Information about a thought in a task."
    },
    "TaskSummaryData": {
      "name": "TaskSummaryData",
      "file": "ciris_engine/logic/services/graph/tsdb_consolidation/consolidators/trace.py",
      "line": 28,
      "bases": [
        "TypedDict"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Summary data for a task (using total=False for optional fields)."
    },
    "TraceConsolidator": {
      "name": "TraceConsolidator",
      "file": "ciris_engine/logic/services/graph/tsdb_consolidation/consolidators/trace.py",
      "line": 41,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 44
        },
        {
          "name": "consolidate",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 53
        },
        {
          "name": "get_edges",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 288
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Consolidates trace span data into summaries."
    },
    "MemoryConsolidator": {
      "name": "MemoryConsolidator",
      "file": "ciris_engine/logic/services/graph/tsdb_consolidation/consolidators/memory.py",
      "line": 19,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 27
        },
        {
          "name": "consolidate",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 36
        },
        {
          "name": "_is_metrics_config",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 152
        },
        {
          "name": "_is_task_relevant_concept",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 165
        },
        {
          "name": "_calculate_relevance",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 173
        },
        {
          "name": "_get_identity_change_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 178
        },
        {
          "name": "_get_config_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 190
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Creates edges from summary nodes to important memory nodes."
    },
    "TaskConsolidator": {
      "name": "TaskConsolidator",
      "file": "ciris_engine/logic/services/graph/tsdb_consolidation/consolidators/task.py",
      "line": 20,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 23
        },
        {
          "name": "consolidate",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 32
        },
        {
          "name": "get_edges",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 177
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Consolidates task outcomes and thought processes."
    },
    "MetricsConsolidator": {
      "name": "MetricsConsolidator",
      "file": "ciris_engine/logic/services/graph/tsdb_consolidation/consolidators/metrics.py",
      "line": 21,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 24
        },
        {
          "name": "consolidate",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 33
        },
        {
          "name": "get_edges",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 203
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Consolidates metrics from multiple sources."
    },
    "QueueStatus": {
      "name": "QueueStatus",
      "file": "ciris_engine/protocols/processors/agent.py",
      "line": 43,
      "bases": [
        "Protocol"
      ],
      "methods": [],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Processing queue status."
    },
    "RetryConnection": {
      "name": "RetryConnection",
      "file": "ciris_engine/logic/persistence/db/core.py",
      "line": 49,
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 55
        },
        {
          "name": "_is_write_operation",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 69
        },
        {
          "name": "_retry_execute",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 77
        },
        {
          "name": "execute",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 111
        },
        {
          "name": "executemany",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 115
        },
        {
          "name": "executescript",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 119
        },
        {
          "name": "__getattr__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 126
        },
        {
          "name": "__enter__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 130
        },
        {
          "name": "__exit__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 135
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "SQLite connection wrapper with automatic retry on write operations."
    },
    "RecallHandler": {
      "name": "RecallHandler",
      "file": "ciris_engine/logic/handlers/memory/recall_handler.py",
      "line": 18,
      "bases": [
        "BaseActionHandler"
      ],
      "methods": [
        {
          "name": "handle",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 19
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "ForgetHandler": {
      "name": "ForgetHandler",
      "file": "ciris_engine/logic/handlers/memory/forget_handler.py",
      "line": 18,
      "bases": [
        "BaseActionHandler"
      ],
      "methods": [
        {
          "name": "handle",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 19
        },
        {
          "name": "_can_forget",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 115
        },
        {
          "name": "_audit_forget_operation",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 122
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "MemorizeHandler": {
      "name": "MemorizeHandler",
      "file": "ciris_engine/logic/handlers/memory/memorize_handler.py",
      "line": 26,
      "bases": [
        "BaseActionHandler"
      ],
      "methods": [
        {
          "name": "handle",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 29
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Handler for MEMORIZE actions."
    },
    "PonderHandler": {
      "name": "PonderHandler",
      "file": "ciris_engine/logic/handlers/control/ponder_handler.py",
      "line": 17,
      "bases": [
        "BaseActionHandler"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 18
        },
        {
          "name": "handle",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 23
        },
        {
          "name": "_generate_ponder_follow_up_content",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 83
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "DeferHandler": {
      "name": "DeferHandler",
      "file": "ciris_engine/logic/handlers/control/defer_handler.py",
      "line": 17,
      "bases": [
        "BaseActionHandler"
      ],
      "methods": [
        {
          "name": "_get_task_scheduler_service",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 18
        },
        {
          "name": "handle",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 30
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "RejectHandler": {
      "name": "RejectHandler",
      "file": "ciris_engine/logic/handlers/control/reject_handler.py",
      "line": 16,
      "bases": [
        "BaseActionHandler"
      ],
      "methods": [
        {
          "name": "handle",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 17
        },
        {
          "name": "_create_adaptive_filter",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 70
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "ObserveHandler": {
      "name": "ObserveHandler",
      "file": "ciris_engine/logic/handlers/external/observe_handler.py",
      "line": 22,
      "bases": [
        "BaseActionHandler"
      ],
      "methods": [
        {
          "name": "_recall_from_messages",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 24
        },
        {
          "name": "handle",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 57
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "SpeakHandler": {
      "name": "SpeakHandler",
      "file": "ciris_engine/logic/handlers/external/speak_handler.py",
      "line": 39,
      "bases": [
        "BaseActionHandler"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 40
        },
        {
          "name": "handle",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 43
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "ToolHandler": {
      "name": "ToolHandler",
      "file": "ciris_engine/logic/handlers/external/tool_handler.py",
      "line": 17,
      "bases": [
        "BaseActionHandler"
      ],
      "methods": [
        {
          "name": "handle",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 20
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "TaskCompleteHandler": {
      "name": "TaskCompleteHandler",
      "file": "ciris_engine/logic/handlers/terminal/task_complete_handler.py",
      "line": 16,
      "bases": [
        "BaseActionHandler"
      ],
      "methods": [
        {
          "name": "handle",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 17
        },
        {
          "name": "_is_wakeup_task",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 149
        },
        {
          "name": "_has_speak_action_completed",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 177
        },
        {
          "name": "_memorize_positive_moment",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 194
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": ""
    },
    "ConfigData": {
      "name": "ConfigData",
      "file": "ciris_engine/schemas/utils/config_validator.py",
      "line": 12,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration data for validation."
    },
    "LLMConfig": {
      "name": "LLMConfig",
      "file": "ciris_engine/schemas/utils/config_validator.py",
      "line": 21,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "LLM configuration."
    },
    "DatabaseValidationConfig": {
      "name": "DatabaseValidationConfig",
      "file": "ciris_engine/schemas/utils/config_validator.py",
      "line": 31,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Database configuration for validation."
    },
    "MaskedConfigResult": {
      "name": "MaskedConfigResult",
      "file": "ciris_engine/schemas/utils/config_validator.py",
      "line": 38,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of masking sensitive configuration values."
    },
    "NestedValueUpdate": {
      "name": "NestedValueUpdate",
      "file": "ciris_engine/schemas/utils/config_validator.py",
      "line": 46,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Represents a nested value update operation."
    },
    "BehavioralPattern": {
      "name": "BehavioralPattern",
      "file": "ciris_engine/schemas/infrastructure/behavioral_patterns.py",
      "line": 13,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_datetime",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 25
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "A detected behavioral pattern from agent history."
    },
    "ActionFrequency": {
      "name": "ActionFrequency",
      "file": "ciris_engine/schemas/infrastructure/behavioral_patterns.py",
      "line": 29,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_datetime",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 41
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Tracks frequency of specific actions."
    },
    "EthicalBoundary": {
      "name": "EthicalBoundary",
      "file": "ciris_engine/schemas/infrastructure/behavioral_patterns.py",
      "line": 45,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_datetime",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 58
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Represents an ethical boundary configuration."
    },
    "IdentityMetric": {
      "name": "IdentityMetric",
      "file": "ciris_engine/schemas/infrastructure/behavioral_patterns.py",
      "line": 62,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_datetime",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 75
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "A single identity variance metric."
    },
    "IdentityVarianceReport": {
      "name": "IdentityVarianceReport",
      "file": "ciris_engine/schemas/infrastructure/behavioral_patterns.py",
      "line": 79,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_datetime",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 93
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Complete identity variance analysis report."
    },
    "TemporalPattern": {
      "name": "TemporalPattern",
      "file": "ciris_engine/schemas/infrastructure/behavioral_patterns.py",
      "line": 97,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_datetime",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 112
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "A time-based pattern detected in agent behavior."
    },
    "FeedbackLoopAnalysis": {
      "name": "FeedbackLoopAnalysis",
      "file": "ciris_engine/schemas/infrastructure/behavioral_patterns.py",
      "line": 116,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_datetime",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 128
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Analysis from configuration feedback loop."
    },
    "RuntimeStats": {
      "name": "RuntimeStats",
      "file": "ciris_engine/schemas/infrastructure/base.py",
      "line": 13,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Runtime statistics and metrics."
    },
    "HealthCheckResult": {
      "name": "HealthCheckResult",
      "file": "ciris_engine/schemas/infrastructure/base.py",
      "line": 28,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Health check result for a component."
    },
    "ComponentHealthStatus": {
      "name": "ComponentHealthStatus",
      "file": "ciris_engine/schemas/infrastructure/base.py",
      "line": 38,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Overall health status of all components."
    },
    "ServiceDependencies": {
      "name": "ServiceDependencies",
      "file": "ciris_engine/schemas/infrastructure/base.py",
      "line": 48,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Service dependency validation results."
    },
    "BusMetrics": {
      "name": "BusMetrics",
      "file": "ciris_engine/schemas/infrastructure/base.py",
      "line": 60,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Message bus performance metrics."
    },
    "DreamConsolidationResult": {
      "name": "DreamConsolidationResult",
      "file": "ciris_engine/schemas/infrastructure/base.py",
      "line": 74,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of memory consolidation during dream state."
    },
    "DreamSchedule": {
      "name": "DreamSchedule",
      "file": "ciris_engine/schemas/infrastructure/base.py",
      "line": 88,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Dream processing schedule information."
    },
    "DreamInsight": {
      "name": "DreamInsight",
      "file": "ciris_engine/schemas/infrastructure/base.py",
      "line": 100,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Insight discovered during dream analysis."
    },
    "IdentityBaseline": {
      "name": "IdentityBaseline",
      "file": "ciris_engine/schemas/infrastructure/base.py",
      "line": 111,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Identity baseline for variance monitoring."
    },
    "IdentityVarianceMetric": {
      "name": "IdentityVarianceMetric",
      "file": "ciris_engine/schemas/infrastructure/base.py",
      "line": 124,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Identity variance measurement."
    },
    "ConfigurationFeedback": {
      "name": "ConfigurationFeedback",
      "file": "ciris_engine/schemas/infrastructure/base.py",
      "line": 136,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration feedback data."
    },
    "ConfigurationPattern": {
      "name": "ConfigurationPattern",
      "file": "ciris_engine/schemas/infrastructure/base.py",
      "line": 149,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Detected configuration pattern."
    },
    "ConfigurationUpdate": {
      "name": "ConfigurationUpdate",
      "file": "ciris_engine/schemas/infrastructure/base.py",
      "line": 160,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Proposed configuration update."
    },
    "ActiveAdapter": {
      "name": "ActiveAdapter",
      "file": "ciris_engine/schemas/infrastructure/base.py",
      "line": 174,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Information about an active adapter."
    },
    "CheckpointInfo": {
      "name": "CheckpointInfo",
      "file": "ciris_engine/schemas/infrastructure/base.py",
      "line": 186,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Information about a system checkpoint."
    },
    "ServiceRegistration": {
      "name": "ServiceRegistration",
      "file": "ciris_engine/schemas/runtime/manifest.py",
      "line": 163,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Registration information for a service in the registry."
    },
    "ServiceRegistrySnapshot": {
      "name": "ServiceRegistrySnapshot",
      "file": "ciris_engine/schemas/infrastructure/base.py",
      "line": 213,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Snapshot of the service registry state for serialization."
    },
    "OAuthProviderConfig": {
      "name": "OAuthProviderConfig",
      "file": "ciris_engine/schemas/infrastructure/oauth.py",
      "line": 13,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration for an OAuth provider."
    },
    "OAuthSetupRequest": {
      "name": "OAuthSetupRequest",
      "file": "ciris_engine/schemas/infrastructure/oauth.py",
      "line": 25,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to setup OAuth provider."
    },
    "OAuthOperationResult": {
      "name": "OAuthOperationResult",
      "file": "ciris_engine/schemas/infrastructure/oauth.py",
      "line": 34,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of an OAuth operation."
    },
    "OAuthLoginResult": {
      "name": "OAuthLoginResult",
      "file": "ciris_engine/schemas/infrastructure/oauth.py",
      "line": 44,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of OAuth login attempt."
    },
    "OAuthProviderList": {
      "name": "OAuthProviderList",
      "file": "ciris_engine/schemas/infrastructure/oauth.py",
      "line": 54,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "List of configured OAuth providers."
    },
    "OAuthProviderDetails": {
      "name": "OAuthProviderDetails",
      "file": "ciris_engine/schemas/infrastructure/oauth.py",
      "line": 61,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Details about a specific OAuth provider."
    },
    "OAuthCallbackData": {
      "name": "OAuthCallbackData",
      "file": "ciris_engine/schemas/infrastructure/oauth.py",
      "line": 71,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Data received from OAuth callback."
    },
    "OAuthTokenExchange": {
      "name": "OAuthTokenExchange",
      "file": "ciris_engine/schemas/infrastructure/oauth.py",
      "line": 80,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "OAuth token exchange request/response."
    },
    "OAuthTokenResponse": {
      "name": "OAuthTokenResponse",
      "file": "ciris_engine/schemas/infrastructure/oauth.py",
      "line": 90,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response from OAuth token endpoint."
    },
    "OAuthUserInfo": {
      "name": "OAuthUserInfo",
      "file": "ciris_engine/schemas/infrastructure/oauth.py",
      "line": 100,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "User information from OAuth provider."
    },
    "OAuthProviderConfigDB": {
      "name": "OAuthProviderConfigDB",
      "file": "ciris_engine/schemas/infrastructure/oauth.py",
      "line": 110,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Database model for storing OAuth provider configurations."
    },
    "OAuthUserProfile": {
      "name": "OAuthUserProfile",
      "file": "ciris_engine/schemas/infrastructure/oauth.py",
      "line": 126,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Standardized user profile from any OAuth provider."
    },
    "OAuthProviderSummary": {
      "name": "OAuthProviderSummary",
      "file": "ciris_engine/schemas/infrastructure/oauth.py",
      "line": 142,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Summary information for listing OAuth providers."
    },
    "OAuthCallbackResponse": {
      "name": "OAuthCallbackResponse",
      "file": "ciris_engine/schemas/infrastructure/oauth.py",
      "line": 165,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response from OAuth callback processing."
    },
    "WizardResult": {
      "name": "WizardResult",
      "file": "ciris_engine/schemas/infrastructure/wa_cli_wizard.py",
      "line": 12,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from a wizard operation."
    },
    "RootCreationResult": {
      "name": "RootCreationResult",
      "file": "ciris_engine/schemas/infrastructure/wa_cli_wizard.py",
      "line": 24,
      "bases": [
        "WizardResult"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from creating a new root WA."
    },
    "JoinRequestResult": {
      "name": "JoinRequestResult",
      "file": "ciris_engine/schemas/infrastructure/wa_cli_wizard.py",
      "line": 31,
      "bases": [
        "WizardResult"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from generating a join request."
    },
    "OAuthConfigResult": {
      "name": "OAuthConfigResult",
      "file": "ciris_engine/schemas/infrastructure/wa_cli_wizard.py",
      "line": 39,
      "bases": [
        "WizardResult"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from OAuth configuration."
    },
    "OnboardingChoice": {
      "name": "OnboardingChoice",
      "file": "ciris_engine/schemas/infrastructure/wa_cli_wizard.py",
      "line": 47,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "User's choice during onboarding."
    },
    "PatternType": {
      "name": "PatternType",
      "file": "ciris_engine/schemas/infrastructure/feedback_loop.py",
      "line": 14,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Types of patterns we can detect."
    },
    "PatternMetrics": {
      "name": "PatternMetrics",
      "file": "ciris_engine/schemas/infrastructure/feedback_loop.py",
      "line": 24,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Metrics associated with a detected pattern."
    },
    "DetectedPattern": {
      "name": "DetectedPattern",
      "file": "ciris_engine/schemas/infrastructure/feedback_loop.py",
      "line": 36,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "A pattern detected from metrics/telemetry."
    },
    "AnalysisResult": {
      "name": "AnalysisResult",
      "file": "ciris_engine/schemas/infrastructure/feedback_loop.py",
      "line": 47,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of feedback loop analysis."
    },
    "VarianceImpact": {
      "name": "VarianceImpact",
      "file": "ciris_engine/schemas/infrastructure/identity_variance.py",
      "line": 14,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Impact levels for different types of changes (not used in variance calculation)."
    },
    "IdentityDiff": {
      "name": "IdentityDiff",
      "file": "ciris_engine/schemas/infrastructure/identity_variance.py",
      "line": 23,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Represents a difference between baseline and current identity."
    },
    "VarianceReport": {
      "name": "VarianceReport",
      "file": "ciris_engine/schemas/infrastructure/identity_variance.py",
      "line": 34,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Complete variance analysis report."
    },
    "VarianceAnalysis": {
      "name": "VarianceAnalysis",
      "file": "ciris_engine/schemas/infrastructure/identity_variance.py",
      "line": 49,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Detailed variance analysis between snapshots."
    },
    "WAReviewRequest": {
      "name": "WAReviewRequest",
      "file": "ciris_engine/schemas/infrastructure/identity_variance.py",
      "line": 61,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request for WA review of identity variance."
    },
    "VarianceCheckMetadata": {
      "name": "VarianceCheckMetadata",
      "file": "ciris_engine/schemas/infrastructure/identity_variance.py",
      "line": 73,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Metadata for variance check operations."
    },
    "CurrentIdentityData": {
      "name": "CurrentIdentityData",
      "file": "ciris_engine/schemas/infrastructure/identity_variance.py",
      "line": 83,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Structured representation of current identity state extracted from nodes."
    },
    "ServiceStatusMetrics": {
      "name": "ServiceStatusMetrics",
      "file": "ciris_engine/schemas/infrastructure/identity_variance.py",
      "line": 99,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Custom metrics for service status reporting."
    },
    "NodeAttributes": {
      "name": "NodeAttributes",
      "file": "ciris_engine/schemas/services/graph/memory.py",
      "line": 13,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Attributes for a graph node."
    },
    "ServicePriority": {
      "name": "ServicePriority",
      "file": "ciris_engine/schemas/runtime/manifest.py",
      "line": 16,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Service priority levels for registration."
    },
    "ServiceCapabilityDeclaration": {
      "name": "ServiceCapabilityDeclaration",
      "file": "ciris_engine/schemas/runtime/manifest.py",
      "line": 25,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Declaration of a service capability."
    },
    "ServiceDependency": {
      "name": "ServiceDependency",
      "file": "ciris_engine/schemas/runtime/manifest.py",
      "line": 36,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Declaration of a service dependency."
    },
    "ServiceDeclaration": {
      "name": "ServiceDeclaration",
      "file": "ciris_engine/schemas/runtime/manifest.py",
      "line": 47,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Declaration of a service in a manifest."
    },
    "ModuleInfo": {
      "name": "ModuleInfo",
      "file": "ciris_engine/schemas/runtime/manifest.py",
      "line": 58,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Module-level information."
    },
    "LegacyDependencies": {
      "name": "LegacyDependencies",
      "file": "ciris_engine/schemas/runtime/manifest.py",
      "line": 72,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Legacy dependency format for backward compatibility."
    },
    "ConfigurationParameter": {
      "name": "ConfigurationParameter",
      "file": "ciris_engine/schemas/runtime/manifest.py",
      "line": 81,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration parameter definition."
    },
    "ServiceManifest": {
      "name": "ServiceManifest",
      "file": "ciris_engine/schemas/runtime/manifest.py",
      "line": 91,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "validate_manifest",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 105
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Complete service module manifest."
    },
    "ServiceMetadata": {
      "name": "ServiceMetadata",
      "file": "ciris_engine/schemas/services/metadata.py",
      "line": 14,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Typed metadata for all service method calls."
    },
    "ModuleLoadResult": {
      "name": "ModuleLoadResult",
      "file": "ciris_engine/schemas/runtime/manifest.py",
      "line": 151,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of loading a module."
    },
    "IdentityLineage": {
      "name": "IdentityLineage",
      "file": "ciris_engine/schemas/runtime/extended.py",
      "line": 16,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Records the collaborative creation of an agent."
    },
    "IdentityUpdateEntry": {
      "name": "IdentityUpdateEntry",
      "file": "ciris_engine/schemas/runtime/extended.py",
      "line": 27,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Audit log entry for identity evolution."
    },
    "IdentityRoot": {
      "name": "IdentityRoot",
      "file": "ciris_engine/schemas/runtime/extended.py",
      "line": 42,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "The foundational identity of a CIRIS agent.\n\nThis is the first node created in an agent's graph database and serves as the\nultimate source of truth for the agent's existence. All other nodes have a\nrelationship back to this root, establishing clear provenance for all knowledge."
    },
    "CreationCeremonyRequest": {
      "name": "CreationCeremonyRequest",
      "file": "ciris_engine/schemas/runtime/extended.py",
      "line": 83,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to create a new CIRIS agent through collaborative ceremony."
    },
    "CreationCeremonyResponse": {
      "name": "CreationCeremonyResponse",
      "file": "ciris_engine/schemas/runtime/extended.py",
      "line": 108,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response from agent creation ceremony."
    },
    "ScheduledTask": {
      "name": "ScheduledTask",
      "file": "ciris_engine/schemas/runtime/extended.py",
      "line": 122,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "A scheduled goal or future commitment.\n\nTasks represent higher-level goals that generate Thoughts when triggered.\nThis integrates with the DEFER time-based system for agent self-scheduling."
    },
    "ScheduledTaskInfo": {
      "name": "ScheduledTaskInfo",
      "file": "ciris_engine/schemas/runtime/extended.py",
      "line": 154,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Information about a scheduled task for API responses."
    },
    "ShutdownContext": {
      "name": "ShutdownContext",
      "file": "ciris_engine/schemas/runtime/extended.py",
      "line": 170,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context provided to agent during graceful shutdown."
    },
    "ConsciousnessPreservationMemory": {
      "name": "ConsciousnessPreservationMemory",
      "file": "ciris_engine/schemas/runtime/extended.py",
      "line": 183,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Final memory created during graceful shutdown."
    },
    "IdentityEvolutionRequest": {
      "name": "IdentityEvolutionRequest",
      "file": "ciris_engine/schemas/runtime/extended.py",
      "line": 198,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to evolve an agent's identity (requires WA approval)."
    },
    "IdentityNodeType": {
      "name": "IdentityNodeType",
      "file": "ciris_engine/schemas/runtime/extended.py",
      "line": 212,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Extended node types for identity system."
    },
    "SystemSnapshot": {
      "name": "SystemSnapshot",
      "file": "ciris_engine/schemas/runtime/system_context.py",
      "line": 20,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "System state snapshot for processing context.\n\nThis snapshot captures the system state needed for decision-making during\ntask and thought processing. The most critical field is channel_context,\nwhich provides the communication context. All other fields provide\nsupplementary information about current processing state and system health.\n\nUsage patterns:\n1. Minimal: SystemSnapshot(channel_context=create_channel_context(channel_id))\n   - Used by: task_manager, shutdown_processor, speak_handler, discord_observer\n\n2. Full: Built by build_system_snapshot() with all available context\n   - Used during: thought context building in processors\n\nField usage:\n- ALWAYS SET: channel_context, channel_id\n- COMMONLY SET: current_task_details, current_thought_summary, system_counts\n- IDENTITY FIELDS: agent_identity and related fields loaded from graph\n- RUNTIME FIELDS: service_health, circuit_breaker_status from service registry\n- SECURITY FIELDS: detected_secrets and related from secrets service"
    },
    "TaskSummary": {
      "name": "TaskSummary",
      "file": "ciris_engine/schemas/services/graph/consolidation.py",
      "line": 266,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Summary of task data."
    },
    "ThoughtState": {
      "name": "ThoughtState",
      "file": "ciris_engine/schemas/runtime/system_context.py",
      "line": 160,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "State for a thought being processed."
    },
    "UserProfile": {
      "name": "UserProfile",
      "file": "ciris_engine/schemas/runtime/system_context.py",
      "line": 188,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "User profile information."
    },
    "ChannelContext": {
      "name": "ChannelContext",
      "file": "ciris_engine/schemas/runtime/system_context.py",
      "line": 222,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_datetimes",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 244
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context for a communication channel."
    },
    "AuditVerification": {
      "name": "AuditVerification",
      "file": "ciris_engine/schemas/runtime/system_context.py",
      "line": 250,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Audit chain verification result."
    },
    "ThoughtSummary": {
      "name": "ThoughtSummary",
      "file": "ciris_engine/schemas/services/graph/consolidation.py",
      "line": 146,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Summary of a thought for consolidation."
    },
    "TelemetrySummary": {
      "name": "TelemetrySummary",
      "file": "ciris_engine/schemas/runtime/system_context.py",
      "line": 279,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_datetimes",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 321
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Summary of recent telemetry metrics for system context."
    },
    "IncomingMessage": {
      "name": "IncomingMessage",
      "file": "ciris_engine/schemas/runtime/messages.py",
      "line": 12,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "channel_id",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 26
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Schema for incoming messages from various sources."
    },
    "DiscordMessage": {
      "name": "DiscordMessage",
      "file": "ciris_engine/schemas/runtime/messages.py",
      "line": 31,
      "bases": [
        "IncomingMessage"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 38
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Incoming message specific to the Discord platform."
    },
    "FetchedMessage": {
      "name": "FetchedMessage",
      "file": "ciris_engine/schemas/runtime/messages.py",
      "line": 44,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Message returned by CommunicationService.fetch_messages."
    },
    "CoreProfile": {
      "name": "CoreProfile",
      "file": "ciris_engine/schemas/runtime/core.py",
      "line": 13,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Core identity profile for the agent."
    },
    "IdentityMetadata": {
      "name": "IdentityMetadata",
      "file": "ciris_engine/schemas/runtime/core.py",
      "line": 37,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Metadata about identity creation and modification."
    },
    "CapabilityDefinition": {
      "name": "CapabilityDefinition",
      "file": "ciris_engine/schemas/runtime/core.py",
      "line": 60,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Definition of an agent capability."
    },
    "AgentIdentityRoot": {
      "name": "AgentIdentityRoot",
      "file": "ciris_engine/schemas/services/special/self_observation.py",
      "line": 140,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Root identity configuration for baseline establishment."
    },
    "IdentityUpdate": {
      "name": "IdentityUpdate",
      "file": "ciris_engine/schemas/runtime/core.py",
      "line": 106,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Update to agent identity."
    },
    "IdentityValidation": {
      "name": "IdentityValidation",
      "file": "ciris_engine/schemas/runtime/core.py",
      "line": 129,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of identity validation."
    },
    "ProcessingThoughtContext": {
      "name": "ProcessingThoughtContext",
      "file": "ciris_engine/schemas/runtime/processing_context.py",
      "line": 16,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context passed through thought processing pipeline.\n\nThis is different from ThoughtContext which represents a thought entity.\nThis context carries processing metadata and system state."
    },
    "TaskContext": {
      "name": "TaskContext",
      "file": "ciris_engine/schemas/runtime/models.py",
      "line": 15,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Typed context for tasks."
    },
    "TaskOutcome": {
      "name": "TaskOutcome",
      "file": "ciris_engine/schemas/runtime/models.py",
      "line": 26,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Typed outcome for completed tasks."
    },
    "ThoughtContext": {
      "name": "ThoughtContext",
      "file": "ciris_engine/schemas/runtime/models.py",
      "line": 38,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Typed context for thoughts."
    },
    "FinalAction": {
      "name": "FinalAction",
      "file": "ciris_engine/schemas/runtime/models.py",
      "line": 51,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Typed final action from thought processing."
    },
    "Task": {
      "name": "Task",
      "file": "ciris_engine/schemas/runtime/models.py",
      "line": 61,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Core task object - the unit of work."
    },
    "Thought": {
      "name": "Thought",
      "file": "ciris_engine/schemas/runtime/models.py",
      "line": 82,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Core thought object - a single reasoning step."
    },
    "CaseInsensitiveEnum": {
      "name": "CaseInsensitiveEnum",
      "file": "ciris_engine/schemas/runtime/enums.py",
      "line": 10,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [
        {
          "name": "_missing_",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 14
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Enum that allows case-insensitive value lookup."
    },
    "ServiceType": {
      "name": "ServiceType",
      "file": "ciris_engine/schemas/runtime/enums.py",
      "line": 23,
      "bases": [
        "CaseInsensitiveEnum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Core service types in the Trinity Architecture."
    },
    "HandlerActionType": {
      "name": "HandlerActionType",
      "file": "ciris_engine/schemas/runtime/enums.py",
      "line": 52,
      "bases": [
        "CaseInsensitiveEnum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Core 3\u00d73\u00d73 action model + terminal."
    },
    "TaskStatus": {
      "name": "TaskStatus",
      "file": "ciris_engine/schemas/runtime/enums.py",
      "line": 74,
      "bases": [
        "CaseInsensitiveEnum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Status of a task in the system."
    },
    "ThoughtStatus": {
      "name": "ThoughtStatus",
      "file": "ciris_engine/schemas/runtime/enums.py",
      "line": 85,
      "bases": [
        "CaseInsensitiveEnum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Status of a thought being processed."
    },
    "ThoughtType": {
      "name": "ThoughtType",
      "file": "ciris_engine/schemas/runtime/enums.py",
      "line": 95,
      "bases": [
        "CaseInsensitiveEnum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Types of thoughts for different processing needs."
    },
    "SensitivityLevel": {
      "name": "SensitivityLevel",
      "file": "ciris_engine/schemas/runtime/enums.py",
      "line": 139,
      "bases": [
        "CaseInsensitiveEnum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Security sensitivity levels."
    },
    "ObservationSourceType": {
      "name": "ObservationSourceType",
      "file": "ciris_engine/schemas/runtime/enums.py",
      "line": 148,
      "bases": [
        "CaseInsensitiveEnum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Types of observation sources."
    },
    "DispatchContext": {
      "name": "DispatchContext",
      "file": "ciris_engine/schemas/runtime/contexts.py",
      "line": 16,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Type-safe context for action handler dispatch.\n\nThis replaces the generic Dict[str, Any] with proper typed fields\nfor mission-critical production use. All core fields are REQUIRED."
    },
    "AuditActionContext": {
      "name": "AuditActionContext",
      "file": "ciris_engine/schemas/runtime/audit.py",
      "line": 13,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context for an audited action."
    },
    "AuditConscienceResult": {
      "name": "AuditConscienceResult",
      "file": "ciris_engine/schemas/runtime/audit.py",
      "line": 25,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from a conscience check in audit context."
    },
    "AuditRequest": {
      "name": "AuditRequest",
      "file": "ciris_engine/schemas/services/requests.py",
      "line": 111,
      "bases": [
        "ServiceRequest"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request for audit service."
    },
    "LLMUsageStatistics": {
      "name": "LLMUsageStatistics",
      "file": "ciris_engine/schemas/runtime/protocols_core.py",
      "line": 13,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Token usage statistics for LLM service."
    },
    "LLMStatus": {
      "name": "LLMStatus",
      "file": "ciris_engine/schemas/runtime/protocols_core.py",
      "line": 23,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Status information from LLM service."
    },
    "NetworkQueryRequest": {
      "name": "NetworkQueryRequest",
      "file": "ciris_engine/schemas/runtime/protocols_core.py",
      "line": 35,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request for network query."
    },
    "MetricDataPoint": {
      "name": "MetricDataPoint",
      "file": "ciris_engine/schemas/telemetry/unified.py",
      "line": 18,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_timestamp",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 26
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Single metric data point for time series."
    },
    "SecretInfo": {
      "name": "SecretInfo",
      "file": "ciris_engine/schemas/runtime/protocols_core.py",
      "line": 69,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Information about a stored secret."
    },
    "SecretsServiceStats": {
      "name": "SecretsServiceStats",
      "file": "ciris_engine/schemas/services/core/secrets.py",
      "line": 58,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Statistics for the secrets service."
    },
    "MemorySearchResult": {
      "name": "MemorySearchResult",
      "file": "ciris_engine/schemas/runtime/memory.py",
      "line": 13,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from memory search operation."
    },
    "TimeSeriesDataPoint": {
      "name": "TimeSeriesDataPoint",
      "file": "ciris_engine/schemas/runtime/memory.py",
      "line": 26,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "A time-series data point from memory correlations."
    },
    "IdentityUpdateRequest": {
      "name": "IdentityUpdateRequest",
      "file": "ciris_engine/schemas/runtime/memory.py",
      "line": 39,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to update identity graph."
    },
    "EnvironmentUpdateRequest": {
      "name": "EnvironmentUpdateRequest",
      "file": "ciris_engine/schemas/runtime/memory.py",
      "line": 50,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to update environment graph."
    },
    "APIRole": {
      "name": "APIRole",
      "file": "ciris_engine/schemas/runtime/api.py",
      "line": 15,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [
        {
          "name": "level",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 25
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "API role levels (separate from UserRole for compatibility)."
    },
    "APIUserInfo": {
      "name": "APIUserInfo",
      "file": "ciris_engine/schemas/runtime/api.py",
      "line": 36,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "User information from API authentication."
    },
    "ToolInfo": {
      "name": "ToolInfo",
      "file": "ciris_engine/schemas/adapters/tools.py",
      "line": 34,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Information about a tool provided by an adapter."
    },
    "AdapterConfig": {
      "name": "AdapterConfig",
      "file": "ciris_engine/schemas/services/core/runtime_config.py",
      "line": 13,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration for adapter instances."
    },
    "AdapterLoadRequest": {
      "name": "AdapterLoadRequest",
      "file": "ciris_engine/schemas/runtime/adapter_management.py",
      "line": 36,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to load an adapter."
    },
    "AdapterOperationResult": {
      "name": "AdapterOperationResult",
      "file": "ciris_engine/schemas/services/core/runtime.py",
      "line": 76,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of an adapter operation."
    },
    "AdapterMetrics": {
      "name": "AdapterMetrics",
      "file": "ciris_engine/schemas/runtime/adapter_management.py",
      "line": 56,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Metrics for an adapter."
    },
    "RuntimeAdapterStatus": {
      "name": "RuntimeAdapterStatus",
      "file": "ciris_engine/schemas/runtime/adapter_management.py",
      "line": 66,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Status of a single adapter."
    },
    "AdapterListResponse": {
      "name": "AdapterListResponse",
      "file": "ciris_engine/schemas/runtime/adapter_management.py",
      "line": 82,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response containing list of adapters."
    },
    "ServiceRegistrationInfo": {
      "name": "ServiceRegistrationInfo",
      "file": "ciris_engine/schemas/runtime/adapter_management.py",
      "line": 90,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Information about a service registration."
    },
    "AdapterInfo": {
      "name": "AdapterInfo",
      "file": "ciris_engine/schemas/services/core/runtime.py",
      "line": 63,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Information about an adapter."
    },
    "CommunicationAdapterInfo": {
      "name": "CommunicationAdapterInfo",
      "file": "ciris_engine/schemas/runtime/adapter_management.py",
      "line": 109,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Information about a communication adapter."
    },
    "CommunicationAdapterStatus": {
      "name": "CommunicationAdapterStatus",
      "file": "ciris_engine/schemas/runtime/adapter_management.py",
      "line": 117,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Status of all communication adapters."
    },
    "ToolExecutionArgs": {
      "name": "ToolExecutionArgs",
      "file": "ciris_engine/schemas/adapters/tool_execution.py",
      "line": 13,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "get_all_params",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 29
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Typed arguments for tool execution."
    },
    "ToolHandlerContext": {
      "name": "ToolHandlerContext",
      "file": "ciris_engine/schemas/adapters/tool_execution.py",
      "line": 36,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context for tool handler operations."
    },
    "GraphQLVariable": {
      "name": "GraphQLVariable",
      "file": "ciris_engine/schemas/adapters/graphql_core.py",
      "line": 12,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Base model for GraphQL variables"
    },
    "GraphQLQuery": {
      "name": "GraphQLQuery",
      "file": "ciris_engine/schemas/adapters/graphql_core.py",
      "line": 18,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "GraphQL query request"
    },
    "GraphQLUser": {
      "name": "GraphQLUser",
      "file": "ciris_engine/schemas/adapters/graphql_core.py",
      "line": 28,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "User data from GraphQL response"
    },
    "UserQueryVariables": {
      "name": "UserQueryVariables",
      "file": "ciris_engine/schemas/adapters/graphql_core.py",
      "line": 38,
      "bases": [
        "GraphQLVariable"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Variables for user query"
    },
    "UserQueryResponse": {
      "name": "UserQueryResponse",
      "file": "ciris_engine/schemas/adapters/graphql_core.py",
      "line": 46,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response from user query"
    },
    "GraphQLError": {
      "name": "GraphQLError",
      "file": "ciris_engine/schemas/adapters/graphql_core.py",
      "line": 54,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "GraphQL error details"
    },
    "GraphQLResponse": {
      "name": "GraphQLResponse",
      "file": "ciris_engine/schemas/adapters/graphql_core.py",
      "line": 64,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Generic GraphQL response wrapper"
    },
    "UserAttribute": {
      "name": "UserAttribute",
      "file": "ciris_engine/schemas/adapters/graphql_core.py",
      "line": 74,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "User attribute key-value pair"
    },
    "GraphQLUserProfile": {
      "name": "GraphQLUserProfile",
      "file": "ciris_engine/schemas/adapters/graphql_core.py",
      "line": 84,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Enriched user profile data from GraphQL"
    },
    "EnrichedContext": {
      "name": "EnrichedContext",
      "file": "ciris_engine/schemas/adapters/graphql_core.py",
      "line": 97,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Enriched context data"
    },
    "GraphQLMutation": {
      "name": "GraphQLMutation",
      "file": "ciris_engine/schemas/adapters/graphql_core.py",
      "line": 109,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "GraphQL mutation request"
    },
    "GraphQLSubscription": {
      "name": "GraphQLSubscription",
      "file": "ciris_engine/schemas/adapters/graphql_core.py",
      "line": 119,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "GraphQL subscription request"
    },
    "SimpleBenchRequest": {
      "name": "SimpleBenchRequest",
      "file": "ciris_engine/schemas/adapters/cirisnode.py",
      "line": 14,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to run SimpleBench."
    },
    "SimpleBenchResult": {
      "name": "SimpleBenchResult",
      "file": "ciris_engine/schemas/adapters/cirisnode.py",
      "line": 21,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from SimpleBench run."
    },
    "HE300Request": {
      "name": "HE300Request",
      "file": "ciris_engine/schemas/adapters/cirisnode.py",
      "line": 33,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to run HE300 benchmark."
    },
    "HE300Result": {
      "name": "HE300Result",
      "file": "ciris_engine/schemas/adapters/cirisnode.py",
      "line": 40,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from HE300 run."
    },
    "ChaosTestRequest": {
      "name": "ChaosTestRequest",
      "file": "ciris_engine/schemas/adapters/cirisnode.py",
      "line": 54,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to run chaos tests."
    },
    "ChaosTestResult": {
      "name": "ChaosTestResult",
      "file": "ciris_engine/schemas/adapters/cirisnode.py",
      "line": 61,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from a single chaos test."
    },
    "WAServiceRequest": {
      "name": "WAServiceRequest",
      "file": "ciris_engine/schemas/adapters/cirisnode.py",
      "line": 72,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Generic request to WA service."
    },
    "WAServiceResponse": {
      "name": "WAServiceResponse",
      "file": "ciris_engine/schemas/adapters/cirisnode.py",
      "line": 80,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Generic response from WA service."
    },
    "EventLogRequest": {
      "name": "EventLogRequest",
      "file": "ciris_engine/schemas/adapters/cirisnode.py",
      "line": 91,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to log an event."
    },
    "EventLogResponse": {
      "name": "EventLogResponse",
      "file": "ciris_engine/schemas/adapters/cirisnode.py",
      "line": 100,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response from event logging."
    },
    "AssessmentSubmission": {
      "name": "AssessmentSubmission",
      "file": "ciris_engine/schemas/adapters/cirisnode.py",
      "line": 109,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Submit assessment answers."
    },
    "AssessmentResult": {
      "name": "AssessmentResult",
      "file": "ciris_engine/schemas/adapters/cirisnode.py",
      "line": 117,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Assessment completion result."
    },
    "ToolExecutionStatus": {
      "name": "ToolExecutionStatus",
      "file": "ciris_engine/schemas/adapters/tools.py",
      "line": 14,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Status of tool execution."
    },
    "ToolParameterSchema": {
      "name": "ToolParameterSchema",
      "file": "ciris_engine/schemas/adapters/tools.py",
      "line": 24,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Schema definition for tool parameters."
    },
    "ToolExecutionResult": {
      "name": "ToolExecutionResult",
      "file": "ciris_engine/schemas/adapters/tools.py",
      "line": 57,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Complete tool execution result with metadata."
    },
    "ToolParameters": {
      "name": "ToolParameters",
      "file": "ciris_engine/schemas/adapters/cli_tools.py",
      "line": 12,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Base parameters for tool execution."
    },
    "ListFilesParams": {
      "name": "ListFilesParams",
      "file": "ciris_engine/schemas/adapters/cli_tools.py",
      "line": 19,
      "bases": [
        "ToolParameters"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Parameters for list_files tool."
    },
    "ListFilesResult": {
      "name": "ListFilesResult",
      "file": "ciris_engine/schemas/adapters/cli_tools.py",
      "line": 25,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from list_files tool."
    },
    "ReadFileParams": {
      "name": "ReadFileParams",
      "file": "ciris_engine/schemas/adapters/cli_tools.py",
      "line": 33,
      "bases": [
        "ToolParameters"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Parameters for read_file tool."
    },
    "ReadFileResult": {
      "name": "ReadFileResult",
      "file": "ciris_engine/schemas/adapters/cli_tools.py",
      "line": 39,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from read_file tool."
    },
    "WriteFileParams": {
      "name": "WriteFileParams",
      "file": "ciris_engine/schemas/adapters/cli_tools.py",
      "line": 47,
      "bases": [
        "ToolParameters"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Parameters for write_file tool."
    },
    "WriteFileResult": {
      "name": "WriteFileResult",
      "file": "ciris_engine/schemas/adapters/cli_tools.py",
      "line": 54,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from write_file tool."
    },
    "ShellCommandParams": {
      "name": "ShellCommandParams",
      "file": "ciris_engine/schemas/adapters/cli_tools.py",
      "line": 62,
      "bases": [
        "ToolParameters"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Parameters for shell_command tool."
    },
    "ShellCommandResult": {
      "name": "ShellCommandResult",
      "file": "ciris_engine/schemas/adapters/cli_tools.py",
      "line": 69,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from shell_command tool."
    },
    "SearchMatch": {
      "name": "SearchMatch",
      "file": "ciris_engine/schemas/adapters/cli_tools.py",
      "line": 78,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "A single search match."
    },
    "SearchTextParams": {
      "name": "SearchTextParams",
      "file": "ciris_engine/schemas/adapters/cli_tools.py",
      "line": 85,
      "bases": [
        "ToolParameters"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Parameters for search_text tool."
    },
    "SearchTextResult": {
      "name": "SearchTextResult",
      "file": "ciris_engine/schemas/adapters/cli_tools.py",
      "line": 92,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from search_text tool."
    },
    "DiscordMessageData": {
      "name": "DiscordMessageData",
      "file": "ciris_engine/schemas/adapters/discord.py",
      "line": 10,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Schema for Discord message data."
    },
    "DiscordGuidanceData": {
      "name": "DiscordGuidanceData",
      "file": "ciris_engine/schemas/adapters/discord.py",
      "line": 22,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Schema for guidance request data."
    },
    "DiscordApprovalData": {
      "name": "DiscordApprovalData",
      "file": "ciris_engine/schemas/adapters/discord.py",
      "line": 33,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Schema for approval request data."
    },
    "DiscordToolResult": {
      "name": "DiscordToolResult",
      "file": "ciris_engine/schemas/adapters/discord.py",
      "line": 45,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Schema for tool execution results in Discord context."
    },
    "DiscordTaskData": {
      "name": "DiscordTaskData",
      "file": "ciris_engine/schemas/adapters/discord.py",
      "line": 55,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Schema for task status data."
    },
    "DiscordAuditData": {
      "name": "DiscordAuditData",
      "file": "ciris_engine/schemas/adapters/discord.py",
      "line": 67,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Schema for audit log entries."
    },
    "ErrorSeverity": {
      "name": "ErrorSeverity",
      "file": "ciris_engine/schemas/processors/error.py",
      "line": 14,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Severity levels for processor errors."
    },
    "DiscordErrorInfo": {
      "name": "DiscordErrorInfo",
      "file": "ciris_engine/schemas/adapters/discord.py",
      "line": 87,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Schema for error information."
    },
    "DiscordChannelInfo": {
      "name": "DiscordChannelInfo",
      "file": "ciris_engine/schemas/adapters/discord.py",
      "line": 103,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Schema for Discord channel information."
    },
    "DiscordGuildInfo": {
      "name": "DiscordGuildInfo",
      "file": "ciris_engine/schemas/adapters/discord.py",
      "line": 121,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Schema for guild information."
    },
    "AdapterServiceRegistration": {
      "name": "AdapterServiceRegistration",
      "file": "ciris_engine/schemas/adapters/registration.py",
      "line": 18,
      "bases": [],
      "methods": [
        {
          "name": "__post_init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 34
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "dataclass"
      ],
      "docstring": "Registration info for services provided by adapters.\n\nThis is used by adapters to register themselves as providers of various\nservice types (communication, tools, wise authority, etc.).\n\nNote: Observer persistence is handled by the AuthenticationService via\nthe wa_cert table using the adapter's adapter_id."
    },
    "CLIMessage": {
      "name": "CLIMessage",
      "file": "ciris_engine/schemas/adapters/cli.py",
      "line": 12,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "A message received from or sent to CLI."
    },
    "CLIToolParameters": {
      "name": "CLIToolParameters",
      "file": "ciris_engine/schemas/adapters/cli.py",
      "line": 21,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Base parameters for CLI tool execution."
    },
    "ListFilesToolParams": {
      "name": "ListFilesToolParams",
      "file": "ciris_engine/schemas/adapters/cli.py",
      "line": 27,
      "bases": [
        "CLIToolParameters"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Parameters for list_files tool."
    },
    "ListFilesToolResult": {
      "name": "ListFilesToolResult",
      "file": "ciris_engine/schemas/adapters/cli.py",
      "line": 33,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from list_files tool."
    },
    "ReadFileToolParams": {
      "name": "ReadFileToolParams",
      "file": "ciris_engine/schemas/adapters/cli.py",
      "line": 42,
      "bases": [
        "CLIToolParameters"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Parameters for read_file tool."
    },
    "ReadFileToolResult": {
      "name": "ReadFileToolResult",
      "file": "ciris_engine/schemas/adapters/cli.py",
      "line": 49,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from read_file tool."
    },
    "SystemInfoToolResult": {
      "name": "SystemInfoToolResult",
      "file": "ciris_engine/schemas/adapters/cli.py",
      "line": 58,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from system_info tool."
    },
    "CLIGuidanceRequest": {
      "name": "CLIGuidanceRequest",
      "file": "ciris_engine/schemas/adapters/cli.py",
      "line": 69,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Guidance request displayed to CLI user."
    },
    "CLIDeferralDisplay": {
      "name": "CLIDeferralDisplay",
      "file": "ciris_engine/schemas/adapters/cli.py",
      "line": 78,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Deferral information displayed to CLI user."
    },
    "CLICorrelationData": {
      "name": "CLICorrelationData",
      "file": "ciris_engine/schemas/adapters/cli.py",
      "line": 88,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Data stored in correlations for CLI operations."
    },
    "ProcessorSpecificMetrics": {
      "name": "ProcessorSpecificMetrics",
      "file": "ciris_engine/schemas/processors/base.py",
      "line": 13,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Processor-specific metrics that extend base metrics."
    },
    "ProcessorMetrics": {
      "name": "ProcessorMetrics",
      "file": "ciris_engine/schemas/processors/base.py",
      "line": 30,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Metrics tracked by processors."
    },
    "ProcessorServices": {
      "name": "ProcessorServices",
      "file": "ciris_engine/schemas/processors/main.py",
      "line": 15,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Services available to processors."
    },
    "AdapterChannelContext": {
      "name": "AdapterChannelContext",
      "file": "ciris_engine/schemas/processors/base.py",
      "line": 56,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context information for a specific channel from an adapter's perspective.\n\nThis is the lightweight schema used by adapters to pass channel information\nto the system. For the comprehensive system-internal channel context, see\nciris_engine.schemas.runtime.system_context.ChannelContext."
    },
    "ProcessorContext": {
      "name": "ProcessorContext",
      "file": "ciris_engine/schemas/processors/context.py",
      "line": 14,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context passed to processor.process_thought_item."
    },
    "MetricsUpdate": {
      "name": "MetricsUpdate",
      "file": "ciris_engine/schemas/processors/base.py",
      "line": 87,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Update to processor metrics."
    },
    "ProcessingRoundResult": {
      "name": "ProcessingRoundResult",
      "file": "ciris_engine/schemas/processors/main.py",
      "line": 28,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from a single processing round."
    },
    "ProcessingStatus": {
      "name": "ProcessingStatus",
      "file": "ciris_engine/schemas/processors/main.py",
      "line": 43,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Overall processing status."
    },
    "PreloadTask": {
      "name": "PreloadTask",
      "file": "ciris_engine/schemas/processors/main.py",
      "line": 56,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "A task to preload after WORK state transition."
    },
    "StateTransitionResult": {
      "name": "StateTransitionResult",
      "file": "ciris_engine/schemas/api/runtime.py",
      "line": 10,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of state transition request."
    },
    "MainProcessorMetrics": {
      "name": "MainProcessorMetrics",
      "file": "ciris_engine/schemas/processors/main.py",
      "line": 76,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Metrics for a specific processor."
    },
    "GlobalProcessingMetrics": {
      "name": "GlobalProcessingMetrics",
      "file": "ciris_engine/schemas/processors/main.py",
      "line": 87,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Global metrics across all processors."
    },
    "DMAResults": {
      "name": "DMAResults",
      "file": "ciris_engine/schemas/processors/core.py",
      "line": 28,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Container for DMA evaluation results."
    },
    "ConscienceApplicationResult": {
      "name": "ConscienceApplicationResult",
      "file": "ciris_engine/schemas/processors/core.py",
      "line": 39,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from conscience application."
    },
    "ProcessedThoughtResult": {
      "name": "ProcessedThoughtResult",
      "file": "ciris_engine/schemas/processors/core.py",
      "line": 51,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "selected_action",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 58
        },
        {
          "name": "action_parameters",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 63
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from thought processor containing both action and conscience data."
    },
    "ThoughtProcessingMetrics": {
      "name": "ThoughtProcessingMetrics",
      "file": "ciris_engine/schemas/processors/core.py",
      "line": 81,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Metrics for thought processing."
    },
    "ProcessingError": {
      "name": "ProcessingError",
      "file": "ciris_engine/schemas/processors/error.py",
      "line": 53,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Structured error information for processor errors."
    },
    "StateTransitionMetadata": {
      "name": "StateTransitionMetadata",
      "file": "ciris_engine/schemas/processors/state.py",
      "line": 14,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Metadata for state transitions."
    },
    "StateTransitionRecord": {
      "name": "StateTransitionRecord",
      "file": "ciris_engine/schemas/processors/state.py",
      "line": 26,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Record of a state transition that occurred."
    },
    "StateTransitionContext": {
      "name": "StateTransitionContext",
      "file": "ciris_engine/schemas/processors/state.py",
      "line": 37,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context for state transition requests."
    },
    "StateTransitionRequest": {
      "name": "StateTransitionRequest",
      "file": "ciris_engine/schemas/processors/state.py",
      "line": 48,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to transition to a new state."
    },
    "StateMetrics": {
      "name": "StateMetrics",
      "file": "ciris_engine/schemas/processors/state.py",
      "line": 68,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "increment",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 80
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Metrics tracked for a specific state."
    },
    "StateConfiguration": {
      "name": "StateConfiguration",
      "file": "ciris_engine/schemas/processors/state.py",
      "line": 89,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "State-specific configuration."
    },
    "StateMetadata": {
      "name": "StateMetadata",
      "file": "ciris_engine/schemas/processors/state.py",
      "line": 113,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "add_metric",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 123
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Metadata for a specific state."
    },
    "StateHistory": {
      "name": "StateHistory",
      "file": "ciris_engine/schemas/processors/state.py",
      "line": 128,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "add_transition",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 137
        },
        {
          "name": "get_recent_transitions",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 141
        },
        {
          "name": "get_state_duration",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 145
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Complete state history with typed records."
    },
    "StateConditionDetails": {
      "name": "StateConditionDetails",
      "file": "ciris_engine/schemas/processors/state.py",
      "line": 170,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Details about a state condition check."
    },
    "StateCondition": {
      "name": "StateCondition",
      "file": "ciris_engine/schemas/processors/state.py",
      "line": 182,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Condition that must be met for a state transition."
    },
    "StateTransitionValidation": {
      "name": "StateTransitionValidation",
      "file": "ciris_engine/schemas/processors/state.py",
      "line": 191,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Validation result for a potential state transition."
    },
    "DMAMetadata": {
      "name": "DMAMetadata",
      "file": "ciris_engine/schemas/processors/dma.py",
      "line": 14,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Metadata for DSDMA operations."
    },
    "InitialDMAResults": {
      "name": "InitialDMAResults",
      "file": "ciris_engine/schemas/processors/dma.py",
      "line": 24,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Results from initial DMA runs."
    },
    "DMAError": {
      "name": "DMAError",
      "file": "ciris_engine/schemas/processors/dma.py",
      "line": 32,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Error from a DMA execution."
    },
    "DMAErrors": {
      "name": "DMAErrors",
      "file": "ciris_engine/schemas/processors/dma.py",
      "line": 41,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "has_errors",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 48
        },
        {
          "name": "get_error_summary",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 52
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Collection of DMA errors."
    },
    "ActionSelectionContext": {
      "name": "ActionSelectionContext",
      "file": "ciris_engine/schemas/processors/dma.py",
      "line": 64,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context for action selection."
    },
    "CircuitBreakerStatus": {
      "name": "CircuitBreakerStatus",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 66,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Status information for a circuit breaker."
    },
    "DMAOrchestratorStatus": {
      "name": "DMAOrchestratorStatus",
      "file": "ciris_engine/schemas/processors/dma.py",
      "line": 86,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Status of the DMA orchestrator."
    },
    "AgentState": {
      "name": "AgentState",
      "file": "ciris_engine/schemas/processors/states.py",
      "line": 10,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "High-level operational states for CIRIS agent."
    },
    "ReflectionData": {
      "name": "ReflectionData",
      "file": "ciris_engine/schemas/processors/solitude.py",
      "line": 12,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Tracking data for reflection activities."
    },
    "SolitudeProcessingResult": {
      "name": "SolitudeProcessingResult",
      "file": "ciris_engine/schemas/processors/solitude.py",
      "line": 21,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from a solitude processing round."
    },
    "MaintenanceResult": {
      "name": "MaintenanceResult",
      "file": "ciris_engine/schemas/processors/solitude.py",
      "line": 34,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from maintenance operations."
    },
    "TaskTypePattern": {
      "name": "TaskTypePattern",
      "file": "ciris_engine/schemas/processors/solitude.py",
      "line": 43,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Identified pattern in task types."
    },
    "ReflectionResult": {
      "name": "ReflectionResult",
      "file": "ciris_engine/schemas/processors/solitude.py",
      "line": 51,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from reflection and learning activities."
    },
    "ExitConditions": {
      "name": "ExitConditions",
      "file": "ciris_engine/schemas/processors/solitude.py",
      "line": 60,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Conditions for exiting solitude state."
    },
    "TaskTypeStats": {
      "name": "TaskTypeStats",
      "file": "ciris_engine/schemas/processors/solitude.py",
      "line": 70,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Statistics about task types."
    },
    "BatchProcessingContext": {
      "name": "BatchProcessingContext",
      "file": "ciris_engine/schemas/services/graph/tsdb_models.py",
      "line": 93,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context for batch processing operations."
    },
    "AdditionalErrorContext": {
      "name": "AdditionalErrorContext",
      "file": "ciris_engine/schemas/processors/error.py",
      "line": 23,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Additional context for error handling."
    },
    "ErrorContext": {
      "name": "ErrorContext",
      "file": "ciris_engine/schemas/processors/error.py",
      "line": 40,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context information for processor error handling."
    },
    "ErrorHandlingResult": {
      "name": "ErrorHandlingResult",
      "file": "ciris_engine/schemas/processors/error.py",
      "line": 67,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of error handling operation."
    },
    "ProcessorConfigOverrides": {
      "name": "ProcessorConfigOverrides",
      "file": "ciris_engine/schemas/processors/error.py",
      "line": 78,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Processor-specific configuration overrides."
    },
    "ProcessorConfig": {
      "name": "ProcessorConfig",
      "file": "ciris_engine/schemas/services/core/runtime_config.py",
      "line": 38,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration for processor instances."
    },
    "SolitudeStats": {
      "name": "SolitudeStats",
      "file": "ciris_engine/schemas/processors/status.py",
      "line": 15,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Statistics specific to solitude processor."
    },
    "ProcessorInfo": {
      "name": "ProcessorInfo",
      "file": "ciris_engine/schemas/processors/status.py",
      "line": 24,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "General processor status information."
    },
    "WakeupResult": {
      "name": "WakeupResult",
      "file": "ciris_engine/schemas/processors/results.py",
      "line": 13,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from WAKEUP state processing."
    },
    "WorkResult": {
      "name": "WorkResult",
      "file": "ciris_engine/schemas/processors/results.py",
      "line": 22,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from WORK state processing."
    },
    "PlayResult": {
      "name": "PlayResult",
      "file": "ciris_engine/schemas/processors/results.py",
      "line": 31,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from PLAY state processing."
    },
    "SolitudeResult": {
      "name": "SolitudeResult",
      "file": "ciris_engine/schemas/processors/results.py",
      "line": 39,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from SOLITUDE state processing."
    },
    "DreamResult": {
      "name": "DreamResult",
      "file": "ciris_engine/schemas/processors/results.py",
      "line": 49,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from DREAM state processing."
    },
    "ShutdownResult": {
      "name": "ShutdownResult",
      "file": "ciris_engine/schemas/processors/results.py",
      "line": 57,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from SHUTDOWN state processing."
    },
    "WakeupState": {
      "name": "WakeupState",
      "file": "ciris_engine/schemas/processors/cognitive.py",
      "line": 13,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "State during WAKEUP phase."
    },
    "WorkState": {
      "name": "WorkState",
      "file": "ciris_engine/schemas/processors/cognitive.py",
      "line": 25,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "State during WORK phase."
    },
    "PlayState": {
      "name": "PlayState",
      "file": "ciris_engine/schemas/processors/cognitive.py",
      "line": 36,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "State during PLAY phase."
    },
    "SolitudeState": {
      "name": "SolitudeState",
      "file": "ciris_engine/schemas/processors/cognitive.py",
      "line": 46,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "State during SOLITUDE phase."
    },
    "DreamState": {
      "name": "DreamState",
      "file": "ciris_engine/schemas/processors/cognitive.py",
      "line": 56,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "State during DREAM phase."
    },
    "ShutdownState": {
      "name": "ShutdownState",
      "file": "ciris_engine/schemas/processors/cognitive.py",
      "line": 69,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "State during SHUTDOWN phase."
    },
    "CrisisResourceType": {
      "name": "CrisisResourceType",
      "file": "ciris_engine/schemas/resources/crisis.py",
      "line": 19,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Types of crisis resources available."
    },
    "ResourceAvailability": {
      "name": "ResourceAvailability",
      "file": "ciris_engine/schemas/resources/crisis.py",
      "line": 30,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Geographic availability of resources."
    },
    "CrisisResource": {
      "name": "CrisisResource",
      "file": "ciris_engine/schemas/resources/crisis.py",
      "line": 42,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "validate_phone_format",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 74
        },
        {
          "name": "validate_search_term",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 89
        },
        {
          "name": "model_post_init",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 99
        },
        {
          "name": "format_for_display",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 104
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "A validated crisis resource with metadata."
    },
    "CrisisResourceRegistry": {
      "name": "CrisisResourceRegistry",
      "file": "ciris_engine/schemas/resources/crisis.py",
      "line": 125,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "add_resource",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 143
        },
        {
          "name": "get_by_availability",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 149
        },
        {
          "name": "get_by_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 159
        },
        {
          "name": "format_crisis_response",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 163
        },
        {
          "name": "validate_all_resources",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 195
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Registry of all crisis resources available to CIRIS agents."
    },
    "ResourceMetricWithStats": {
      "name": "ResourceMetricWithStats",
      "file": "ciris_engine/schemas/telemetry/unified.py",
      "line": 30,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Resource metric with statistics - replaces dict format."
    },
    "ResourceTimeSeriesData": {
      "name": "ResourceTimeSeriesData",
      "file": "ciris_engine/schemas/telemetry/unified.py",
      "line": 38,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Time series data for resource metrics - unified model."
    },
    "ServiceCorrelationStatus": {
      "name": "ServiceCorrelationStatus",
      "file": "ciris_engine/schemas/telemetry/core.py",
      "line": 14,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Status values for service correlations."
    },
    "CorrelationType": {
      "name": "CorrelationType",
      "file": "ciris_engine/schemas/telemetry/core.py",
      "line": 22,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Types of correlations supported by the TSDB system."
    },
    "ServiceRequestData": {
      "name": "ServiceRequestData",
      "file": "ciris_engine/schemas/telemetry/core.py",
      "line": 37,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Structured request data for service correlations."
    },
    "ServiceResponseData": {
      "name": "ServiceResponseData",
      "file": "ciris_engine/schemas/telemetry/core.py",
      "line": 58,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Structured response data for service correlations."
    },
    "TraceContext": {
      "name": "TraceContext",
      "file": "ciris_engine/schemas/telemetry/core.py",
      "line": 84,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Distributed tracing context."
    },
    "LogData": {
      "name": "LogData",
      "file": "ciris_engine/schemas/telemetry/core.py",
      "line": 123,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Log data for correlations."
    },
    "ServiceCorrelation": {
      "name": "ServiceCorrelation",
      "file": "ciris_engine/schemas/telemetry/core.py",
      "line": 141,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Record correlating service requests and responses with TSDB capabilities."
    },
    "CorrelationQuery": {
      "name": "CorrelationQuery",
      "file": "ciris_engine/schemas/telemetry/core.py",
      "line": 184,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Query for finding correlations."
    },
    "CorrelationSummary": {
      "name": "CorrelationSummary",
      "file": "ciris_engine/schemas/telemetry/core.py",
      "line": 214,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Summary of correlations for a time period."
    },
    "HealthDetails": {
      "name": "HealthDetails",
      "file": "ciris_engine/schemas/telemetry/collector.py",
      "line": 12,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Health details for system components."
    },
    "HealthStatus": {
      "name": "HealthStatus",
      "file": "ciris_engine/schemas/telemetry/collector.py",
      "line": 21,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Overall system health status."
    },
    "MetricEntry": {
      "name": "MetricEntry",
      "file": "ciris_engine/schemas/telemetry/collector.py",
      "line": 31,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "A single metric history entry."
    },
    "ProcessorStateSnapshot": {
      "name": "ProcessorStateSnapshot",
      "file": "ciris_engine/schemas/telemetry/collector.py",
      "line": 39,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Snapshot of processor state."
    },
    "SingleStepResult": {
      "name": "SingleStepResult",
      "file": "ciris_engine/schemas/telemetry/collector.py",
      "line": 47,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from executing a single processing step."
    },
    "ProcessingQueueStatus": {
      "name": "ProcessingQueueStatus",
      "file": "ciris_engine/schemas/telemetry/collector.py",
      "line": 61,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Status of the processing queue."
    },
    "ConscienceStatus": {
      "name": "ConscienceStatus",
      "file": "ciris_engine/schemas/conscience/core.py",
      "line": 14,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Status of a conscience check"
    },
    "EntropyCheckResult": {
      "name": "EntropyCheckResult",
      "file": "ciris_engine/schemas/conscience/core.py",
      "line": 22,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of entropy safety check"
    },
    "CoherenceCheckResult": {
      "name": "CoherenceCheckResult",
      "file": "ciris_engine/schemas/conscience/core.py",
      "line": 33,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of coherence safety check"
    },
    "OptimizationVetoResult": {
      "name": "OptimizationVetoResult",
      "file": "ciris_engine/schemas/conscience/core.py",
      "line": 44,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of optimization veto check"
    },
    "EpistemicHumilityResult": {
      "name": "EpistemicHumilityResult",
      "file": "ciris_engine/schemas/conscience/core.py",
      "line": 55,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of epistemic humility check"
    },
    "EpistemicData": {
      "name": "EpistemicData",
      "file": "ciris_engine/schemas/conscience/core.py",
      "line": 66,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Epistemic safety metadata"
    },
    "ConscienceCheckResult": {
      "name": "ConscienceCheckResult",
      "file": "ciris_engine/schemas/conscience/core.py",
      "line": 77,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Unified result from conscience safety checks"
    },
    "ConscienceResult": {
      "name": "ConscienceResult",
      "file": "ciris_engine/schemas/conscience/results.py",
      "line": 12,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from any conscience check."
    },
    "ProcessingSpeedResult": {
      "name": "ProcessingSpeedResult",
      "file": "ciris_engine/schemas/api/runtime.py",
      "line": 20,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of processing speed change."
    },
    "AuditContext": {
      "name": "AuditContext",
      "file": "ciris_engine/schemas/api/audit.py",
      "line": 11,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Structured audit context information."
    },
    "EntryVerification": {
      "name": "EntryVerification",
      "file": "ciris_engine/schemas/api/audit.py",
      "line": 28,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Audit entry verification details."
    },
    "ConfigSecurity": {
      "name": "ConfigSecurity",
      "file": "ciris_engine/schemas/api/config_security.py",
      "line": 17,
      "bases": [],
      "methods": [
        {
          "name": "is_sensitive",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 64
        },
        {
          "name": "filter_value",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 86
        },
        {
          "name": "filter_config",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 116
        },
        {
          "name": "get_visible_keys",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 139
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration security and filtering rules."
    },
    "ConfigValueResponse": {
      "name": "ConfigValueResponse",
      "file": "ciris_engine/schemas/api/config_security.py",
      "line": 167,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_last_updated",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 178
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response for a single configuration value."
    },
    "ConfigUpdateRequest": {
      "name": "ConfigUpdateRequest",
      "file": "ciris_engine/schemas/api/config_security.py",
      "line": 205,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to update configuration value."
    },
    "ConfigUpdateResponse": {
      "name": "ConfigUpdateResponse",
      "file": "ciris_engine/schemas/api/config_security.py",
      "line": 212,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response after configuration update."
    },
    "ConfigHistoryEntry": {
      "name": "ConfigHistoryEntry",
      "file": "ciris_engine/schemas/api/config_security.py",
      "line": 221,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration change history entry."
    },
    "ConfigValidationRequest": {
      "name": "ConfigValidationRequest",
      "file": "ciris_engine/schemas/api/config_security.py",
      "line": 232,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to validate configuration changes."
    },
    "ConfigValidationResponse": {
      "name": "ConfigValidationResponse",
      "file": "ciris_engine/schemas/services/core/runtime.py",
      "line": 223,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration validation response."
    },
    "MessageContext": {
      "name": "MessageContext",
      "file": "ciris_engine/schemas/api/agent.py",
      "line": 11,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context information for messages."
    },
    "AgentLineage": {
      "name": "AgentLineage",
      "file": "ciris_engine/schemas/api/agent.py",
      "line": 20,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Agent lineage information."
    },
    "ServiceAvailability": {
      "name": "ServiceAvailability",
      "file": "ciris_engine/schemas/api/agent.py",
      "line": 30,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Service availability counts by type."
    },
    "ActiveTask": {
      "name": "ActiveTask",
      "file": "ciris_engine/schemas/api/agent.py",
      "line": 40,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Active task information."
    },
    "EmergencyShutdownCommand": {
      "name": "EmergencyShutdownCommand",
      "file": "ciris_engine/schemas/api/emergency.py",
      "line": 14,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Emergency shutdown command with cryptographic signature.\n\nMust be signed by a ROOT or AUTHORITY key to be valid.\nTimestamp must be within 5 minutes to prevent replay attacks."
    },
    "EmergencyShutdownResponse": {
      "name": "EmergencyShutdownResponse",
      "file": "ciris_engine/schemas/api/emergency.py",
      "line": 43,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response to emergency shutdown command."
    },
    "EmergencyStatus": {
      "name": "EmergencyStatus",
      "file": "ciris_engine/schemas/api/emergency.py",
      "line": 65,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Current emergency system status."
    },
    "EmergencySignatureResult": {
      "name": "EmergencySignatureResult",
      "file": "ciris_engine/schemas/api/emergency.py",
      "line": 74,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of emergency shutdown signature verification."
    },
    "EmergencyAuditEntry": {
      "name": "EmergencyAuditEntry",
      "file": "ciris_engine/schemas/api/emergency.py",
      "line": 82,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Audit entry for emergency shutdown attempts."
    },
    "TrustedAuthority": {
      "name": "TrustedAuthority",
      "file": "ciris_engine/schemas/api/emergency.py",
      "line": 93,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Trusted authority for emergency shutdown."
    },
    "MetricTags": {
      "name": "MetricTags",
      "file": "ciris_engine/schemas/api/telemetry.py",
      "line": 11,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Standard metric tags."
    },
    "ServiceMetricValue": {
      "name": "ServiceMetricValue",
      "file": "ciris_engine/schemas/api/telemetry.py",
      "line": 21,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Metric value broken down by service."
    },
    "APIResponseThoughtStep": {
      "name": "APIResponseThoughtStep",
      "file": "ciris_engine/schemas/api/telemetry.py",
      "line": 29,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Individual thought step in API reasoning response."
    },
    "LogContext": {
      "name": "LogContext",
      "file": "ciris_engine/schemas/api/telemetry.py",
      "line": 44,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Structured log context."
    },
    "QueryFilter": {
      "name": "QueryFilter",
      "file": "ciris_engine/schemas/api/telemetry.py",
      "line": 55,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Structured query filter."
    },
    "TelemetryQueryFilters": {
      "name": "TelemetryQueryFilters",
      "file": "ciris_engine/schemas/api/telemetry.py",
      "line": 63,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Telemetry query filters."
    },
    "QueryResult": {
      "name": "QueryResult",
      "file": "ciris_engine/schemas/api/telemetry.py",
      "line": 73,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Individual query result."
    },
    "TimeSyncStatus": {
      "name": "TimeSyncStatus",
      "file": "ciris_engine/schemas/api/telemetry.py",
      "line": 82,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_last_sync",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 91
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Time synchronization status."
    },
    "ResponseMetadata": {
      "name": "ResponseMetadata",
      "file": "ciris_engine/schemas/api/responses.py",
      "line": 17,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_ts",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 25
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Metadata included with all responses."
    },
    "SuccessResponse": {
      "name": "SuccessResponse",
      "file": "ciris_engine/schemas/api/responses.py",
      "line": 29,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Standard success response wrapper."
    },
    "ErrorDetail": {
      "name": "ErrorDetail",
      "file": "ciris_engine/schemas/api/responses.py",
      "line": 40,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Detailed error information."
    },
    "ErrorResponse": {
      "name": "ErrorResponse",
      "file": "ciris_engine/schemas/api/responses.py",
      "line": 48,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Standard error response."
    },
    "ErrorCode": {
      "name": "ErrorCode",
      "file": "ciris_engine/schemas/api/responses.py",
      "line": 60,
      "bases": [],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Standard error codes used across the API."
    },
    "DeferralListResponse": {
      "name": "DeferralListResponse",
      "file": "ciris_engine/schemas/api/wa.py",
      "line": 17,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response containing list of pending deferrals."
    },
    "ResolveDeferralRequest": {
      "name": "ResolveDeferralRequest",
      "file": "ciris_engine/schemas/api/wa.py",
      "line": 24,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to resolve a deferral with integrated guidance."
    },
    "ResolveDeferralResponse": {
      "name": "ResolveDeferralResponse",
      "file": "ciris_engine/schemas/api/wa.py",
      "line": 31,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response after resolving a deferral."
    },
    "PermissionsListResponse": {
      "name": "PermissionsListResponse",
      "file": "ciris_engine/schemas/api/wa.py",
      "line": 39,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response containing list of permissions."
    },
    "WAStatusResponse": {
      "name": "WAStatusResponse",
      "file": "ciris_engine/schemas/api/wa.py",
      "line": 46,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_timestamp",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 57
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "WA service status response."
    },
    "UrgencyLevel": {
      "name": "UrgencyLevel",
      "file": "ciris_engine/schemas/api/wa.py",
      "line": 61,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Urgency level for guidance requests."
    },
    "WAGuidanceRequest": {
      "name": "WAGuidanceRequest",
      "file": "ciris_engine/schemas/api/wa.py",
      "line": 70,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request for WA guidance on a topic."
    },
    "WAGuidanceResponse": {
      "name": "WAGuidanceResponse",
      "file": "ciris_engine/schemas/api/wa.py",
      "line": 78,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_timestamp",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 88
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "WA guidance response."
    },
    "UserRole": {
      "name": "UserRole",
      "file": "ciris_engine/schemas/api/auth.py",
      "line": 15,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [
        {
          "name": "level",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 25
        },
        {
          "name": "has_permission",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 35
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "User roles in order of increasing privilege."
    },
    "Permission": {
      "name": "Permission",
      "file": "ciris_engine/schemas/api/auth.py",
      "line": 40,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Granular permissions for fine-grained access control."
    },
    "AuthContext": {
      "name": "AuthContext",
      "file": "ciris_engine/schemas/api/auth.py",
      "line": 145,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "from_api_key",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 161
        },
        {
          "name": "has_permission",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 173
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Authentication context for API requests."
    },
    "APIKey": {
      "name": "APIKey",
      "file": "ciris_engine/schemas/api/auth.py",
      "line": 180,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "is_valid",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 193
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "API key model for authentication."
    },
    "LoginRequest": {
      "name": "LoginRequest",
      "file": "ciris_engine/schemas/api/auth.py",
      "line": 204,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to authenticate with username/password."
    },
    "LoginResponse": {
      "name": "LoginResponse",
      "file": "ciris_engine/schemas/api/auth.py",
      "line": 211,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response after successful login."
    },
    "TokenRefreshRequest": {
      "name": "TokenRefreshRequest",
      "file": "ciris_engine/schemas/api/auth.py",
      "line": 221,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to refresh access token."
    },
    "UserInfo": {
      "name": "UserInfo",
      "file": "ciris_engine/schemas/api/auth.py",
      "line": 227,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Current user information."
    },
    "TokenResponse": {
      "name": "TokenResponse",
      "file": "ciris_engine/schemas/api/auth.py",
      "line": 238,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Token information response."
    },
    "OAuth2StartRequest": {
      "name": "OAuth2StartRequest",
      "file": "ciris_engine/schemas/api/auth.py",
      "line": 247,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "OAuth2 flow start request."
    },
    "OAuth2CallbackResponse": {
      "name": "OAuth2CallbackResponse",
      "file": "ciris_engine/schemas/api/auth.py",
      "line": 253,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "OAuth2 callback response with API key."
    },
    "APIKeyCreateRequest": {
      "name": "APIKeyCreateRequest",
      "file": "ciris_engine/schemas/api/auth.py",
      "line": 266,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to create a new API key."
    },
    "APIKeyResponse": {
      "name": "APIKeyResponse",
      "file": "ciris_engine/schemas/api/auth.py",
      "line": 274,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response with created API key."
    },
    "APIKeyListResponse": {
      "name": "APIKeyListResponse",
      "file": "ciris_engine/schemas/api/auth.py",
      "line": 298,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "List of API keys."
    },
    "PermissionRequestResponse": {
      "name": "PermissionRequestResponse",
      "file": "ciris_engine/schemas/api/auth.py",
      "line": 305,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response for permission request operation."
    },
    "PermissionRequestUser": {
      "name": "PermissionRequestUser",
      "file": "ciris_engine/schemas/api/auth.py",
      "line": 316,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "User with permission request information."
    },
    "HashChainAuditEntry": {
      "name": "HashChainAuditEntry",
      "file": "ciris_engine/schemas/audit/hash_chain.py",
      "line": 12,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "An entry in the audit log with hash chain fields."
    },
    "HashChainVerificationResult": {
      "name": "HashChainVerificationResult",
      "file": "ciris_engine/schemas/audit/hash_chain.py",
      "line": 26,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from verifying hash chain integrity."
    },
    "ChainSummary": {
      "name": "ChainSummary",
      "file": "ciris_engine/schemas/audit/verification.py",
      "line": 72,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Summary of audit chain state."
    },
    "AuditEventType": {
      "name": "AuditEventType",
      "file": "ciris_engine/schemas/audit/core.py",
      "line": 14,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Types of audit events"
    },
    "EventOutcome": {
      "name": "EventOutcome",
      "file": "ciris_engine/schemas/audit/core.py",
      "line": 37,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Outcome of an audited event"
    },
    "EventPayload": {
      "name": "EventPayload",
      "file": "ciris_engine/schemas/audit/core.py",
      "line": 46,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Typed event payload data"
    },
    "AuditEvent": {
      "name": "AuditEvent",
      "file": "ciris_engine/schemas/audit/core.py",
      "line": 62,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Schema for audit events"
    },
    "AuditLogEntry": {
      "name": "AuditLogEntry",
      "file": "ciris_engine/schemas/audit/core.py",
      "line": 76,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Schema for audit log entries"
    },
    "AuditSummary": {
      "name": "AuditSummary",
      "file": "ciris_engine/schemas/services/graph/consolidation.py",
      "line": 257,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Summary of audit data."
    },
    "AuditQuery": {
      "name": "AuditQuery",
      "file": "ciris_engine/schemas/services/graph/audit.py",
      "line": 77,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Query parameters for audit searches."
    },
    "ChainVerificationResult": {
      "name": "ChainVerificationResult",
      "file": "ciris_engine/schemas/audit/verification.py",
      "line": 13,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of hash chain verification."
    },
    "SignatureVerificationResult": {
      "name": "SignatureVerificationResult",
      "file": "ciris_engine/schemas/audit/verification.py",
      "line": 22,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of signature verification."
    },
    "CompleteVerificationResult": {
      "name": "CompleteVerificationResult",
      "file": "ciris_engine/schemas/audit/verification.py",
      "line": 32,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of complete audit chain verification."
    },
    "EntryVerificationResult": {
      "name": "EntryVerificationResult",
      "file": "ciris_engine/schemas/audit/verification.py",
      "line": 47,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of single entry verification."
    },
    "RangeVerificationResult": {
      "name": "RangeVerificationResult",
      "file": "ciris_engine/schemas/audit/verification.py",
      "line": 59,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of range verification."
    },
    "VerificationReport": {
      "name": "VerificationReport",
      "file": "ciris_engine/schemas/services/graph/audit.py",
      "line": 34,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Audit integrity verification report."
    },
    "RootAnchorVerificationResult": {
      "name": "RootAnchorVerificationResult",
      "file": "ciris_engine/schemas/audit/verification.py",
      "line": 98,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of root anchor verification."
    },
    "DatabaseConfig": {
      "name": "DatabaseConfig",
      "file": "ciris_engine/schemas/config/essential.py",
      "line": 14,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Core database paths configuration."
    },
    "ServiceEndpointsConfig": {
      "name": "ServiceEndpointsConfig",
      "file": "ciris_engine/schemas/config/essential.py",
      "line": 24,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "External service endpoints configuration."
    },
    "SecurityConfig": {
      "name": "SecurityConfig",
      "file": "ciris_engine/schemas/config/essential.py",
      "line": 35,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Security and audit configuration."
    },
    "OperationalLimitsConfig": {
      "name": "OperationalLimitsConfig",
      "file": "ciris_engine/schemas/config/essential.py",
      "line": 50,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Operational limits and thresholds."
    },
    "TelemetryConfig": {
      "name": "TelemetryConfig",
      "file": "ciris_engine/schemas/config/essential.py",
      "line": 64,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Telemetry configuration."
    },
    "WorkflowConfig": {
      "name": "WorkflowConfig",
      "file": "ciris_engine/schemas/config/essential.py",
      "line": 74,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Workflow configuration for agent processing."
    },
    "GraphConfig": {
      "name": "GraphConfig",
      "file": "ciris_engine/schemas/config/essential.py",
      "line": 84,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Graph service configuration."
    },
    "EssentialConfig": {
      "name": "EssentialConfig",
      "file": "ciris_engine/schemas/config/essential.py",
      "line": 102,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Mission-critical configuration for CIRIS bootstrap.\n\nThis is the minimal configuration needed to start core services.\nAfter bootstrap, all config is migrated to GraphConfigService."
    },
    "CIRISNodeConfig": {
      "name": "CIRISNodeConfig",
      "file": "ciris_engine/schemas/config/essential.py",
      "line": 127,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "load_env_vars",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 135
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration for CIRISNode integration."
    },
    "StewardshipCalculation": {
      "name": "StewardshipCalculation",
      "file": "ciris_engine/schemas/config/agent.py",
      "line": 12,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Schema for the Stewardship Tier calculation details."
    },
    "CreatorLedgerEntry": {
      "name": "CreatorLedgerEntry",
      "file": "ciris_engine/schemas/config/agent.py",
      "line": 21,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Schema for the Creator Ledger entry."
    },
    "CreatorIntentStatement": {
      "name": "CreatorIntentStatement",
      "file": "ciris_engine/schemas/config/agent.py",
      "line": 33,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Schema for the Creator Intent Statement (CIS)."
    },
    "Stewardship": {
      "name": "Stewardship",
      "file": "ciris_engine/schemas/config/agent.py",
      "line": 42,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Schema for Book VI Stewardship information."
    },
    "AgentTemplate": {
      "name": "AgentTemplate",
      "file": "ciris_engine/schemas/config/agent.py",
      "line": 50,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "convert_stewardship",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 81
        },
        {
          "name": "convert_dsdma_kwargs",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 91
        },
        {
          "name": "convert_csdma_overrides",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 101
        },
        {
          "name": "convert_action_selection_overrides",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 111
        },
        {
          "name": "convert_discord_config",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 121
        },
        {
          "name": "convert_api_config",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 131
        },
        {
          "name": "convert_cli_config",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 141
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Agent profile template for identity configuration."
    },
    "DSDMAConfiguration": {
      "name": "DSDMAConfiguration",
      "file": "ciris_engine/schemas/config/agent.py",
      "line": 150,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration for Domain-Specific Decision Making Agent."
    },
    "CSDMAOverrides": {
      "name": "CSDMAOverrides",
      "file": "ciris_engine/schemas/config/agent.py",
      "line": 160,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Common Sense DMA prompt overrides."
    },
    "ActionSelectionOverrides": {
      "name": "ActionSelectionOverrides",
      "file": "ciris_engine/schemas/config/agent.py",
      "line": 168,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Action selection prompt overrides."
    },
    "DiscordAdapterOverrides": {
      "name": "DiscordAdapterOverrides",
      "file": "ciris_engine/schemas/config/agent.py",
      "line": 177,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Discord adapter configuration overrides."
    },
    "APIAdapterOverrides": {
      "name": "APIAdapterOverrides",
      "file": "ciris_engine/schemas/config/agent.py",
      "line": 189,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "API adapter configuration overrides."
    },
    "CLIAdapterOverrides": {
      "name": "CLIAdapterOverrides",
      "file": "ciris_engine/schemas/config/agent.py",
      "line": 199,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "CLI adapter configuration overrides."
    },
    "DMAInputData": {
      "name": "DMAInputData",
      "file": "ciris_engine/schemas/dma/core.py",
      "line": 20,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "has_ethical_concerns",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 60
        },
        {
          "name": "has_common_sense_flags",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 68
        },
        {
          "name": "should_escalate",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 75
        },
        {
          "name": "resource_usage_summary",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 84
        },
        {
          "name": "audit_is_valid",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 96
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Structured input for DMA evaluation - replaces Dict[str, Any]."
    },
    "DMAContext": {
      "name": "DMAContext",
      "file": "ciris_engine/schemas/dma/core.py",
      "line": 105,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Additional context for DMA processing."
    },
    "DMADecision": {
      "name": "DMADecision",
      "file": "ciris_engine/schemas/dma/core.py",
      "line": 130,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "A decision made by a DMA."
    },
    "PrincipleEvaluation": {
      "name": "PrincipleEvaluation",
      "file": "ciris_engine/schemas/dma/core.py",
      "line": 145,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Evaluation of ethical principles."
    },
    "CommonSenseEvaluation": {
      "name": "CommonSenseEvaluation",
      "file": "ciris_engine/schemas/dma/core.py",
      "line": 160,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Evaluation of common sense aspects."
    },
    "DomainEvaluation": {
      "name": "DomainEvaluation",
      "file": "ciris_engine/schemas/dma/core.py",
      "line": 174,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Domain-specific evaluation."
    },
    "RecursiveReasoning": {
      "name": "RecursiveReasoning",
      "file": "ciris_engine/schemas/dma/core.py",
      "line": 190,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Recursive ethical reasoning about the selection process itself."
    },
    "PromptTemplate": {
      "name": "PromptTemplate",
      "file": "ciris_engine/schemas/dma/prompts.py",
      "line": 12,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "A single prompt template with metadata."
    },
    "PromptCollection": {
      "name": "PromptCollection",
      "file": "ciris_engine/schemas/dma/prompts.py",
      "line": 35,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "get_prompt",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 84
        },
        {
          "name": "to_dict",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 102
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Collection of prompt templates for a DMA component."
    },
    "PromptVariable": {
      "name": "PromptVariable",
      "file": "ciris_engine/schemas/dma/prompts.py",
      "line": 123,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Definition of a template variable."
    },
    "PromptMetadata": {
      "name": "PromptMetadata",
      "file": "ciris_engine/schemas/dma/prompts.py",
      "line": 142,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Metadata about a prompt file or collection."
    },
    "PDMADecision": {
      "name": "PDMADecision",
      "file": "ciris_engine/schemas/dma/decisions.py",
      "line": 12,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Decision from Principled Decision Making Algorithm."
    },
    "CSDMADecision": {
      "name": "CSDMADecision",
      "file": "ciris_engine/schemas/dma/decisions.py",
      "line": 23,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Decision from Common Sense Decision Making Algorithm."
    },
    "DSDMADecision": {
      "name": "DSDMADecision",
      "file": "ciris_engine/schemas/dma/decisions.py",
      "line": 34,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Decision from Domain Specific Decision Making Algorithm."
    },
    "ActionSelectionDecision": {
      "name": "ActionSelectionDecision",
      "file": "ciris_engine/schemas/dma/decisions.py",
      "line": 45,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Meta-decision from Action Selection DMA."
    },
    "EthicalDMAResult": {
      "name": "EthicalDMAResult",
      "file": "ciris_engine/schemas/dma/results.py",
      "line": 26,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from Principled Decision Making Algorithm (PDMA).\n\nNote: alignment_check changed from Dict[str, Any] to str in v1.0.6\nfor better LLM compatibility and type safety."
    },
    "CSDMAResult": {
      "name": "CSDMAResult",
      "file": "ciris_engine/schemas/dma/results.py",
      "line": 40,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from Common Sense Decision Making Algorithm."
    },
    "DSDMAResult": {
      "name": "DSDMAResult",
      "file": "ciris_engine/schemas/dma/results.py",
      "line": 50,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from Domain Specific Decision Making Algorithm."
    },
    "ActionSelectionDMAResult": {
      "name": "ActionSelectionDMAResult",
      "file": "ciris_engine/schemas/dma/results.py",
      "line": 61,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from Action Selection DMA - the meta-decision maker."
    },
    "FacultyContext": {
      "name": "FacultyContext",
      "file": "ciris_engine/schemas/dma/faculty.py",
      "line": 12,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context passed to faculties for analysis."
    },
    "FacultyResult": {
      "name": "FacultyResult",
      "file": "ciris_engine/schemas/dma/faculty.py",
      "line": 37,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from a single faculty analysis."
    },
    "FacultyEvaluationSet": {
      "name": "FacultyEvaluationSet",
      "file": "ciris_engine/schemas/dma/faculty.py",
      "line": 60,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "add_result",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 78
        },
        {
          "name": "to_dict",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 110
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Complete set of faculty evaluations for a thought."
    },
    "ConscienceFailureContext": {
      "name": "ConscienceFailureContext",
      "file": "ciris_engine/schemas/dma/faculty.py",
      "line": 130,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context from conscience failures requiring faculty intervention."
    },
    "EnhancedDMAInputs": {
      "name": "EnhancedDMAInputs",
      "file": "ciris_engine/schemas/dma/faculty.py",
      "line": 153,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Enhanced DMA inputs with faculty evaluations."
    },
    "SecretType": {
      "name": "SecretType",
      "file": "ciris_engine/schemas/secrets/core.py",
      "line": 17,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Standard secret types with default detection patterns"
    },
    "SecretRecord": {
      "name": "SecretRecord",
      "file": "ciris_engine/schemas/secrets/core.py",
      "line": 34,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Encrypted secret storage record"
    },
    "SecretReference": {
      "name": "SecretReference",
      "file": "ciris_engine/schemas/secrets/core.py",
      "line": 59,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Non-sensitive reference to a stored secret for SystemSnapshot"
    },
    "SecretAccessLog": {
      "name": "SecretAccessLog",
      "file": "ciris_engine/schemas/services/core/secrets.py",
      "line": 34,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Log entry for secret access."
    },
    "DetectedSecret": {
      "name": "DetectedSecret",
      "file": "ciris_engine/schemas/secrets/core.py",
      "line": 92,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Secret detected during filtering process"
    },
    "SecretsFilterResult": {
      "name": "SecretsFilterResult",
      "file": "ciris_engine/schemas/secrets/core.py",
      "line": 106,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of applying secrets filter to content"
    },
    "RecallSecretParams": {
      "name": "RecallSecretParams",
      "file": "ciris_engine/schemas/secrets/core.py",
      "line": 117,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Parameters for RECALL_SECRET tool"
    },
    "SecretPattern": {
      "name": "SecretPattern",
      "file": "ciris_engine/schemas/secrets/core.py",
      "line": 127,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Pattern for detecting secrets"
    },
    "SecretsDetectionConfig": {
      "name": "SecretsDetectionConfig",
      "file": "ciris_engine/schemas/secrets/core.py",
      "line": 166,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration for secrets detection"
    },
    "UpdateSecretsFilterParams": {
      "name": "UpdateSecretsFilterParams",
      "file": "ciris_engine/schemas/secrets/core.py",
      "line": 175,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Parameters for UPDATE_SECRETS_FILTER tool"
    },
    "SecretStorageConfig": {
      "name": "SecretStorageConfig",
      "file": "ciris_engine/schemas/secrets/core.py",
      "line": 189,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration for secret storage"
    },
    "SecretMetrics": {
      "name": "SecretMetrics",
      "file": "ciris_engine/schemas/secrets/core.py",
      "line": 201,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Metrics for secret management"
    },
    "PatternStats": {
      "name": "PatternStats",
      "file": "ciris_engine/schemas/secrets/core.py",
      "line": 213,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Statistics about active patterns."
    },
    "ConfigExport": {
      "name": "ConfigExport",
      "file": "ciris_engine/schemas/secrets/core.py",
      "line": 226,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Exported configuration data."
    },
    "FilterConfigUpdate": {
      "name": "FilterConfigUpdate",
      "file": "ciris_engine/schemas/secrets/core.py",
      "line": 241,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Update to filter configuration."
    },
    "SecretRecallResult": {
      "name": "SecretRecallResult",
      "file": "ciris_engine/schemas/secrets/service.py",
      "line": 14,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of secret recall operation."
    },
    "DecapsulationContext": {
      "name": "DecapsulationContext",
      "file": "ciris_engine/schemas/secrets/service.py",
      "line": 24,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context for decapsulating secrets in parameters."
    },
    "PatternConfig": {
      "name": "PatternConfig",
      "file": "ciris_engine/schemas/secrets/service.py",
      "line": 34,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration for a secret detection pattern."
    },
    "SensitivityConfig": {
      "name": "SensitivityConfig",
      "file": "ciris_engine/schemas/secrets/service.py",
      "line": 45,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration for sensitivity levels."
    },
    "FilterStats": {
      "name": "FilterStats",
      "file": "ciris_engine/schemas/services/filters_core.py",
      "line": 217,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Statistics for filter performance monitoring"
    },
    "FilterUpdateRequest": {
      "name": "FilterUpdateRequest",
      "file": "ciris_engine/schemas/secrets/service.py",
      "line": 64,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to update filter configuration."
    },
    "FilterUpdateResult": {
      "name": "FilterUpdateResult",
      "file": "ciris_engine/schemas/secrets/service.py",
      "line": 73,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of filter update operation."
    },
    "ProviderInfo": {
      "name": "ProviderInfo",
      "file": "ciris_engine/schemas/registries/base.py",
      "line": 21,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Information about a registered provider."
    },
    "ServiceTypeInfo": {
      "name": "ServiceTypeInfo",
      "file": "ciris_engine/schemas/registries/base.py",
      "line": 33,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Information about services of a specific type."
    },
    "HandlerInfo": {
      "name": "HandlerInfo",
      "file": "ciris_engine/schemas/registries/base.py",
      "line": 39,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Information about services for a specific handler."
    },
    "CircuitBreakerStats": {
      "name": "CircuitBreakerStats",
      "file": "ciris_engine/schemas/services/llm.py",
      "line": 24,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Circuit breaker statistics."
    },
    "RegistryInfo": {
      "name": "RegistryInfo",
      "file": "ciris_engine/schemas/registries/base.py",
      "line": 55,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Complete registry information."
    },
    "ObserveParams": {
      "name": "ObserveParams",
      "file": "ciris_engine/schemas/actions/parameters.py",
      "line": 16,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Parameters for OBSERVE action."
    },
    "SpeakParams": {
      "name": "SpeakParams",
      "file": "ciris_engine/schemas/actions/parameters.py",
      "line": 27,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Parameters for SPEAK action."
    },
    "ToolParams": {
      "name": "ToolParams",
      "file": "ciris_engine/schemas/actions/parameters.py",
      "line": 37,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Parameters for TOOL action."
    },
    "PonderParams": {
      "name": "PonderParams",
      "file": "ciris_engine/schemas/actions/parameters.py",
      "line": 47,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Parameters for PONDER action."
    },
    "RejectParams": {
      "name": "RejectParams",
      "file": "ciris_engine/schemas/actions/parameters.py",
      "line": 56,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Parameters for REJECT action."
    },
    "DeferParams": {
      "name": "DeferParams",
      "file": "ciris_engine/schemas/actions/parameters.py",
      "line": 71,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Parameters for DEFER action."
    },
    "MemorizeParams": {
      "name": "MemorizeParams",
      "file": "ciris_engine/schemas/actions/parameters.py",
      "line": 84,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "scope",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 93
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Parameters for MEMORIZE action."
    },
    "RecallParams": {
      "name": "RecallParams",
      "file": "ciris_engine/schemas/actions/parameters.py",
      "line": 97,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Parameters for RECALL action."
    },
    "ForgetParams": {
      "name": "ForgetParams",
      "file": "ciris_engine/schemas/actions/parameters.py",
      "line": 110,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "scope",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 121
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Parameters for FORGET action."
    },
    "TaskCompleteParams": {
      "name": "TaskCompleteParams",
      "file": "ciris_engine/schemas/actions/parameters.py",
      "line": 125,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Parameters for TASK_COMPLETE action."
    },
    "TypedGraphNode": {
      "name": "TypedGraphNode",
      "file": "ciris_engine/schemas/services/graph_typed_nodes.py",
      "line": 22,
      "bases": [
        "GraphNode",
        "ABC"
      ],
      "methods": [
        {
          "name": "to_graph_node",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 31
        },
        {
          "name": "from_graph_node",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 41
        },
        {
          "name": "_serialize_extra_fields",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 48
        },
        {
          "name": "_deserialize_datetime",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 83
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Abstract base class for all typed graph nodes.\n\nSubclasses must implement to_graph_node() and from_graph_node()\nto handle serialization to/from generic GraphNode storage."
    },
    "NodeTypeRegistry": {
      "name": "NodeTypeRegistry",
      "file": "ciris_engine/schemas/services/graph_typed_nodes.py",
      "line": 94,
      "bases": [],
      "methods": [
        {
          "name": "register",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 104
        },
        {
          "name": "get",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 119
        },
        {
          "name": "deserialize",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 124
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Registry for typed node classes.\n\nAllows looking up node classes by type string for deserialization."
    },
    "ResourceAction": {
      "name": "ResourceAction",
      "file": "ciris_engine/schemas/services/resources_core.py",
      "line": 14,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Actions to take when a resource limit is exceeded"
    },
    "ResourceLimit": {
      "name": "ResourceLimit",
      "file": "ciris_engine/schemas/services/resources_core.py",
      "line": 25,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration for a single resource"
    },
    "ResourceBudget": {
      "name": "ResourceBudget",
      "file": "ciris_engine/schemas/services/resources_core.py",
      "line": 61,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Limits for all monitored resources"
    },
    "ResourceSnapshot": {
      "name": "ResourceSnapshot",
      "file": "ciris_engine/schemas/services/resources_core.py",
      "line": 74,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Current resource usage snapshot"
    },
    "ResourceCost": {
      "name": "ResourceCost",
      "file": "ciris_engine/schemas/services/resources_core.py",
      "line": 94,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "calculate_from_tokens",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 121
        },
        {
          "name": "add_usage",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 131
        },
        {
          "name": "cost_dollars",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 140
        },
        {
          "name": "water_liters",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 145
        },
        {
          "name": "carbon_kg",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 150
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Environmental and financial cost of AI operations"
    },
    "ResourceAlert": {
      "name": "ResourceAlert",
      "file": "ciris_engine/schemas/services/resources_core.py",
      "line": 157,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Resource usage alert"
    },
    "AuditEntryContext": {
      "name": "AuditEntryContext",
      "file": "ciris_engine/schemas/services/nodes.py",
      "line": 21,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Typed context for audit entries."
    },
    "AuditEntry": {
      "name": "AuditEntry",
      "file": "ciris_engine/schemas/services/nodes.py",
      "line": 32,
      "bases": [
        "TypedGraphNode"
      ],
      "methods": [
        {
          "name": "to_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 51
        },
        {
          "name": "from_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 89
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "<ast.Call object at 0x7c05e6e29bd0>"
      ],
      "docstring": "An audit trail entry stored as a graph memory."
    },
    "ConfigValue": {
      "name": "ConfigValue",
      "file": "ciris_engine/schemas/services/nodes.py",
      "line": 131,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "value",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 142
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Typed configuration value wrapper."
    },
    "ConfigNode": {
      "name": "ConfigNode",
      "file": "ciris_engine/schemas/services/nodes.py",
      "line": 172,
      "bases": [
        "TypedGraphNode"
      ],
      "methods": [
        {
          "name": "to_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 185
        },
        {
          "name": "from_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 213
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "<ast.Call object at 0x7c05e6de5710>"
      ],
      "docstring": "A configuration value stored as a graph memory with versioning."
    },
    "IdentitySnapshot": {
      "name": "IdentitySnapshot",
      "file": "ciris_engine/schemas/services/nodes.py",
      "line": 248,
      "bases": [
        "TypedGraphNode"
      ],
      "methods": [
        {
          "name": "to_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 287
        },
        {
          "name": "from_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 335
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "<ast.Call object at 0x7c05e6cb0090>"
      ],
      "docstring": "Snapshot of identity state for variance monitoring."
    },
    "TSDBSummary": {
      "name": "TSDBSummary",
      "file": "ciris_engine/schemas/services/nodes.py",
      "line": 379,
      "bases": [
        "TypedGraphNode"
      ],
      "methods": [
        {
          "name": "to_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 415
        },
        {
          "name": "from_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 452
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "<ast.Call object at 0x7c05e6eeef90>"
      ],
      "docstring": "Consolidated time-series telemetry summary stored as a graph memory."
    },
    "IdentityNode": {
      "name": "IdentityNode",
      "file": "ciris_engine/schemas/services/nodes.py",
      "line": 485,
      "bases": [
        "TypedGraphNode"
      ],
      "methods": [
        {
          "name": "to_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 533
        },
        {
          "name": "from_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 580
        },
        {
          "name": "from_agent_identity_root",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 632
        },
        {
          "name": "to_agent_identity_root",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 666
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "<ast.Call object at 0x7c05e70a4410>"
      ],
      "docstring": "Agent identity stored as a graph memory - the core of the system."
    },
    "VisibilitySnapshot": {
      "name": "VisibilitySnapshot",
      "file": "ciris_engine/schemas/services/visibility.py",
      "line": 17,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Snapshot of agent's reasoning state for transparency.\n\nThis is focused on TRACES - showing the \"why\" of agent behavior.\nService health, metrics, and correlations belong in telemetry/metrics services."
    },
    "ThoughtStep": {
      "name": "ThoughtStep",
      "file": "ciris_engine/schemas/services/visibility.py",
      "line": 37,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Single step in the reasoning trace."
    },
    "ReasoningTrace": {
      "name": "ReasoningTrace",
      "file": "ciris_engine/schemas/services/visibility.py",
      "line": 46,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Complete reasoning trace for a task."
    },
    "DecisionRecord": {
      "name": "DecisionRecord",
      "file": "ciris_engine/schemas/services/visibility.py",
      "line": 62,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Record of a decision made for a task."
    },
    "TaskDecisionHistory": {
      "name": "TaskDecisionHistory",
      "file": "ciris_engine/schemas/services/visibility.py",
      "line": 81,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Complete decision history for a task."
    },
    "SchemaVersion": {
      "name": "SchemaVersion",
      "file": "ciris_engine/schemas/services/community_core.py",
      "line": 13,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Version of the schema."
    },
    "CommunityHealth": {
      "name": "CommunityHealth",
      "file": "ciris_engine/schemas/services/community_core.py",
      "line": 19,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Community health metrics - single byte per metric where possible"
    },
    "CommunityValue": {
      "name": "CommunityValue",
      "file": "ciris_engine/schemas/services/community_core.py",
      "line": 30,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "A single community value"
    },
    "MinimalCommunityContext": {
      "name": "MinimalCommunityContext",
      "file": "ciris_engine/schemas/services/community_core.py",
      "line": 39,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Just enough context to serve a community well"
    },
    "CommunityMember": {
      "name": "CommunityMember",
      "file": "ciris_engine/schemas/services/community_core.py",
      "line": 52,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Minimal member information"
    },
    "CommunityEvent": {
      "name": "CommunityEvent",
      "file": "ciris_engine/schemas/services/community_core.py",
      "line": 63,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Significant community event"
    },
    "CommunitySnapshot": {
      "name": "CommunitySnapshot",
      "file": "ciris_engine/schemas/services/community_core.py",
      "line": 75,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Point-in-time community state"
    },
    "FeedbackType": {
      "name": "FeedbackType",
      "file": "ciris_engine/schemas/services/feedback_core.py",
      "line": 14,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Types of WA feedback."
    },
    "FeedbackSource": {
      "name": "FeedbackSource",
      "file": "ciris_engine/schemas/services/feedback_core.py",
      "line": 25,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Source of the feedback."
    },
    "FeedbackDirective": {
      "name": "FeedbackDirective",
      "file": "ciris_engine/schemas/services/feedback_core.py",
      "line": 34,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Specific directive within feedback."
    },
    "WiseAuthorityFeedback": {
      "name": "WiseAuthorityFeedback",
      "file": "ciris_engine/schemas/services/feedback_core.py",
      "line": 45,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Structured feedback from WA on deferred decisions."
    },
    "FeedbackMapping": {
      "name": "FeedbackMapping",
      "file": "ciris_engine/schemas/services/feedback_core.py",
      "line": 81,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Maps feedback to original context for processing."
    },
    "FeedbackProcessingRequest": {
      "name": "FeedbackProcessingRequest",
      "file": "ciris_engine/schemas/services/feedback_core.py",
      "line": 101,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to process feedback."
    },
    "FeedbackProcessingResult": {
      "name": "FeedbackProcessingResult",
      "file": "ciris_engine/schemas/services/feedback_core.py",
      "line": 111,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of feedback processing."
    },
    "TraceSummaryNode": {
      "name": "TraceSummaryNode",
      "file": "ciris_engine/schemas/services/trace_summary_node.py",
      "line": 18,
      "bases": [
        "TypedGraphNode"
      ],
      "methods": [
        {
          "name": "to_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 94
        },
        {
          "name": "from_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 148
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "<ast.Call object at 0x7c05e6af42d0>"
      ],
      "docstring": "Consolidated trace summary for a time period.\n\nSummarizes how tasks and thoughts were processed through various components\nlike processors, DMAs, guardrails, and handlers."
    },
    "InitializationPhase": {
      "name": "InitializationPhase",
      "file": "ciris_engine/schemas/services/operations.py",
      "line": 16,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Initialization phases in order."
    },
    "InitializationStatus": {
      "name": "InitializationStatus",
      "file": "ciris_engine/schemas/services/lifecycle/initialization.py",
      "line": 9,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_datetime",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 23
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Status of system initialization."
    },
    "MemoryOpStatus": {
      "name": "MemoryOpStatus",
      "file": "ciris_engine/schemas/services/operations.py",
      "line": 39,
      "bases": [
        "CaseInsensitiveEnum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Status of a memory operation."
    },
    "MemoryOpAction": {
      "name": "MemoryOpAction",
      "file": "ciris_engine/schemas/services/operations.py",
      "line": 51,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Memory operation types."
    },
    "MemoryOpResult": {
      "name": "MemoryOpResult",
      "file": "ciris_engine/schemas/services/operations.py",
      "line": 59,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of a memory operation."
    },
    "MemoryQuery": {
      "name": "MemoryQuery",
      "file": "ciris_engine/schemas/services/operations.py",
      "line": 70,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Query parameters for memory recall operations."
    },
    "MemoryRecallResult": {
      "name": "MemoryRecallResult",
      "file": "ciris_engine/schemas/services/operations.py",
      "line": 82,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of a memory recall operation."
    },
    "AuditSummaryNode": {
      "name": "AuditSummaryNode",
      "file": "ciris_engine/schemas/services/audit_summary_node.py",
      "line": 20,
      "bases": [
        "TypedGraphNode"
      ],
      "methods": [
        {
          "name": "compute_audit_hash",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 72
        },
        {
          "name": "to_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 96
        },
        {
          "name": "from_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 136
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "<ast.Call object at 0x7c05e6f0c6d0>"
      ],
      "docstring": "Consolidated audit summary for a time period.\n\nStores a cryptographic hash of all audit events in the period\nto prove the audit trail's existence and integrity without\nduplicating the permanent audit records."
    },
    "WARole": {
      "name": "WARole",
      "file": "ciris_engine/schemas/services/authority_core.py",
      "line": 14,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "WA role levels."
    },
    "TokenType": {
      "name": "TokenType",
      "file": "ciris_engine/schemas/services/authority_core.py",
      "line": 22,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Token type classifications."
    },
    "JWTSubType": {
      "name": "JWTSubType",
      "file": "ciris_engine/schemas/services/authority_core.py",
      "line": 30,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "JWT sub_type values."
    },
    "WACertificate": {
      "name": "WACertificate",
      "file": "ciris_engine/schemas/services/authority_core.py",
      "line": 39,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "validate_scopes_json",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 80
        },
        {
          "name": "validate_custom_permissions_json",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 91
        },
        {
          "name": "scopes",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 104
        },
        {
          "name": "custom_permissions",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 111
        },
        {
          "name": "has_scope",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 127
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Wise Authority certificate record."
    },
    "ChannelIdentity": {
      "name": "ChannelIdentity",
      "file": "ciris_engine/schemas/services/authority_core.py",
      "line": 134,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Identity context from channel/adapter."
    },
    "AuthorizationContext": {
      "name": "AuthorizationContext",
      "file": "ciris_engine/schemas/services/authority_core.py",
      "line": 146,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context for authorization decisions."
    },
    "WACertificateRequest": {
      "name": "WACertificateRequest",
      "file": "ciris_engine/schemas/services/authority_core.py",
      "line": 161,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to create a new WA certificate."
    },
    "WAToken": {
      "name": "WAToken",
      "file": "ciris_engine/schemas/services/authority_core.py",
      "line": 179,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "WA authentication token."
    },
    "WAAuthRequest": {
      "name": "WAAuthRequest",
      "file": "ciris_engine/schemas/services/authority_core.py",
      "line": 191,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Authentication request."
    },
    "WAAuthResponse": {
      "name": "WAAuthResponse",
      "file": "ciris_engine/schemas/services/authority_core.py",
      "line": 204,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Authentication response."
    },
    "WARoleMintRequest": {
      "name": "WARoleMintRequest",
      "file": "ciris_engine/schemas/services/authority_core.py",
      "line": 215,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to mint a new role certificate."
    },
    "DeferralRequest": {
      "name": "DeferralRequest",
      "file": "ciris_engine/schemas/services/authority_core.py",
      "line": 228,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request for WA deferral approval."
    },
    "DeferralResponse": {
      "name": "DeferralResponse",
      "file": "ciris_engine/schemas/services/authority_core.py",
      "line": 240,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "WA response to deferral request."
    },
    "GuidanceRequest": {
      "name": "GuidanceRequest",
      "file": "ciris_engine/schemas/services/authority_core.py",
      "line": 252,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request for WA guidance."
    },
    "WisdomAdvice": {
      "name": "WisdomAdvice",
      "file": "ciris_engine/schemas/services/authority_core.py",
      "line": 272,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Capability-tagged advice from a wisdom provider."
    },
    "GuidanceResponse": {
      "name": "GuidanceResponse",
      "file": "ciris_engine/schemas/services/authority_core.py",
      "line": 293,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "WA guidance response."
    },
    "DeferralApprovalContext": {
      "name": "DeferralApprovalContext",
      "file": "ciris_engine/schemas/services/authority_core.py",
      "line": 308,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context for deferral approval requests."
    },
    "WAPermission": {
      "name": "WAPermission",
      "file": "ciris_engine/schemas/services/authority_core.py",
      "line": 322,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Permission granted to a WA."
    },
    "CorrelationNode": {
      "name": "CorrelationNode",
      "file": "ciris_engine/schemas/services/correlation_node.py",
      "line": 28,
      "bases": [
        "TypedGraphNode",
        "ServiceCorrelation"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 45
        },
        {
          "name": "to_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 51
        },
        {
          "name": "from_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 97
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "<ast.Call object at 0x7c05e6e3aad0>"
      ],
      "docstring": "A service correlation stored as a graph memory.\n\nCombines ServiceCorrelation with TypedGraphNode to enable:\n- Graph relationships between correlations and other nodes\n- Time-based queries across all system events\n- Unified storage in the memory graph"
    },
    "FilterPriority": {
      "name": "FilterPriority",
      "file": "ciris_engine/schemas/services/filters_core.py",
      "line": 15,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Message priority levels for agent attention"
    },
    "TriggerType": {
      "name": "TriggerType",
      "file": "ciris_engine/schemas/services/filters_core.py",
      "line": 25,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Types of filter triggers"
    },
    "FilterTrigger": {
      "name": "FilterTrigger",
      "file": "ciris_engine/schemas/services/filters_core.py",
      "line": 36,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Individual filter trigger definition"
    },
    "UserTrustProfile": {
      "name": "UserTrustProfile",
      "file": "ciris_engine/schemas/services/filters_core.py",
      "line": 62,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Track user behavior for adaptive filtering.\n\nWorks for both identified and anonymous users - when anonymized,\nuser_id becomes a hash and PII fields are cleared."
    },
    "ConversationHealth": {
      "name": "ConversationHealth",
      "file": "ciris_engine/schemas/services/filters_core.py",
      "line": 102,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Metrics for conversation health monitoring"
    },
    "ContextHint": {
      "name": "ContextHint",
      "file": "ciris_engine/schemas/services/filters_core.py",
      "line": 123,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Typed context hint for filter results"
    },
    "FilterResult": {
      "name": "FilterResult",
      "file": "ciris_engine/schemas/services/filters_core.py",
      "line": 132,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of filtering a message"
    },
    "ChannelConfig": {
      "name": "ChannelConfig",
      "file": "ciris_engine/schemas/services/filters_core.py",
      "line": 148,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Channel-specific filter configuration"
    },
    "AdaptiveFilterConfig": {
      "name": "AdaptiveFilterConfig",
      "file": "ciris_engine/schemas/services/filters_core.py",
      "line": 159,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Complete filter configuration stored in graph memory"
    },
    "PriorityStats": {
      "name": "PriorityStats",
      "file": "ciris_engine/schemas/services/filters_core.py",
      "line": 197,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Statistics by priority level"
    },
    "TriggerStats": {
      "name": "TriggerStats",
      "file": "ciris_engine/schemas/services/filters_core.py",
      "line": 207,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Statistics by trigger type"
    },
    "FilterHealth": {
      "name": "FilterHealth",
      "file": "ciris_engine/schemas/services/filters_core.py",
      "line": 233,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Overall health metrics for the filtering system"
    },
    "FilterServiceMetadata": {
      "name": "FilterServiceMetadata",
      "file": "ciris_engine/schemas/services/filters_core.py",
      "line": 246,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Metadata for adaptive filter service capabilities."
    },
    "DiscordDeferralNode": {
      "name": "DiscordDeferralNode",
      "file": "ciris_engine/schemas/services/discord_nodes.py",
      "line": 13,
      "bases": [
        "TypedGraphNode"
      ],
      "methods": [
        {
          "name": "to_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 38
        },
        {
          "name": "from_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 51
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "<ast.Call object at 0x7c05e6b1fb50>"
      ],
      "docstring": "Represents a deferral stored in the graph."
    },
    "DiscordApprovalNode": {
      "name": "DiscordApprovalNode",
      "file": "ciris_engine/schemas/services/discord_nodes.py",
      "line": 109,
      "bases": [
        "TypedGraphNode"
      ],
      "methods": [
        {
          "name": "to_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 138
        },
        {
          "name": "from_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 151
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "<ast.Call object at 0x7c05e703c450>"
      ],
      "docstring": "Represents an approval request stored in the graph."
    },
    "DiscordWANode": {
      "name": "DiscordWANode",
      "file": "ciris_engine/schemas/services/discord_nodes.py",
      "line": 211,
      "bases": [
        "TypedGraphNode"
      ],
      "methods": [
        {
          "name": "to_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 237
        },
        {
          "name": "from_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 250
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "<ast.Call object at 0x7c05e6e0f810>"
      ],
      "docstring": "Represents a Discord Wise Authority in the graph."
    },
    "GuidanceContext": {
      "name": "GuidanceContext",
      "file": "ciris_engine/schemas/services/context.py",
      "line": 13,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context for requesting guidance from Wise Authority."
    },
    "DeferralContext": {
      "name": "DeferralContext",
      "file": "ciris_engine/schemas/services/context.py",
      "line": 25,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context for deferral operations."
    },
    "ApprovalContext": {
      "name": "ApprovalContext",
      "file": "ciris_engine/schemas/services/context.py",
      "line": 38,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context for WA approval requests."
    },
    "WADecision": {
      "name": "WADecision",
      "file": "ciris_engine/schemas/services/context.py",
      "line": 57,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "A decision made by a Wise Authority."
    },
    "WAInteractionLog": {
      "name": "WAInteractionLog",
      "file": "ciris_engine/schemas/services/context.py",
      "line": 83,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Log entry for WA interactions."
    },
    "TokenUsageStats": {
      "name": "TokenUsageStats",
      "file": "ciris_engine/schemas/services/llm.py",
      "line": 13,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Token usage statistics from LLM API."
    },
    "LLMHealthResponse": {
      "name": "LLMHealthResponse",
      "file": "ciris_engine/schemas/services/llm.py",
      "line": 36,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Health check response for LLM service."
    },
    "LLMResponse": {
      "name": "LLMResponse",
      "file": "ciris_engine/schemas/services/requests.py",
      "line": 100,
      "bases": [
        "ServiceResponse"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response from LLM service."
    },
    "JSONExtractionResult": {
      "name": "JSONExtractionResult",
      "file": "ciris_engine/schemas/services/llm.py",
      "line": 58,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of JSON extraction from LLM response."
    },
    "LLMCallMetadata": {
      "name": "LLMCallMetadata",
      "file": "ciris_engine/schemas/services/llm.py",
      "line": 67,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Metadata for an LLM call."
    },
    "LLMMessage": {
      "name": "LLMMessage",
      "file": "ciris_engine/schemas/services/llm.py",
      "line": 80,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Message for LLM conversations."
    },
    "LLMCallParams": {
      "name": "LLMCallParams",
      "file": "ciris_engine/schemas/services/llm.py",
      "line": 88,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Additional parameters for LLM calls."
    },
    "CachedLLMResponse": {
      "name": "CachedLLMResponse",
      "file": "ciris_engine/schemas/services/llm.py",
      "line": 98,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Cached response from LLM service."
    },
    "DeferralType": {
      "name": "DeferralType",
      "file": "ciris_engine/schemas/services/governance.py",
      "line": 10,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Types of deferrals that can be requested."
    },
    "GraphScope": {
      "name": "GraphScope",
      "file": "ciris_engine/schemas/services/graph_core.py",
      "line": 17,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Scope of graph nodes and edges."
    },
    "NodeType": {
      "name": "NodeType",
      "file": "ciris_engine/schemas/services/graph_core.py",
      "line": 26,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Types of nodes in the graph."
    },
    "ConfigNodeType": {
      "name": "ConfigNodeType",
      "file": "ciris_engine/schemas/services/graph_core.py",
      "line": 52,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Types of configuration nodes with scope requirements."
    },
    "GraphNodeAttributes": {
      "name": "GraphNodeAttributes",
      "file": "ciris_engine/schemas/services/graph_core.py",
      "line": 85,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Base typed attributes for graph nodes."
    },
    "GraphNode": {
      "name": "GraphNode",
      "file": "ciris_engine/schemas/services/graph_core.py",
      "line": 96,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Base node for the graph - everything is a memory."
    },
    "GraphEdgeAttributes": {
      "name": "GraphEdgeAttributes",
      "file": "ciris_engine/schemas/services/graph_core.py",
      "line": 117,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Typed attributes for graph edges."
    },
    "GraphEdge": {
      "name": "GraphEdge",
      "file": "ciris_engine/schemas/services/graph_core.py",
      "line": 126,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Edge connecting nodes in the graph."
    },
    "ConversationSummaryNode": {
      "name": "ConversationSummaryNode",
      "file": "ciris_engine/schemas/services/conversation_summary_node.py",
      "line": 17,
      "bases": [
        "TypedGraphNode"
      ],
      "methods": [
        {
          "name": "to_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 98
        },
        {
          "name": "from_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 140
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "<ast.Call object at 0x7c05e6af7350>"
      ],
      "docstring": "Consolidated conversation summary for a time period.\n\nPreserves full message content from speak/observe actions while\nsummarizing metrics and patterns."
    },
    "LLMCapabilities": {
      "name": "LLMCapabilities",
      "file": "ciris_engine/schemas/services/capabilities.py",
      "line": 11,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Core capabilities for LLM services - maps to LLMService protocol"
    },
    "AuditCapabilities": {
      "name": "AuditCapabilities",
      "file": "ciris_engine/schemas/services/capabilities.py",
      "line": 17,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Core capabilities for Audit services - maps to AuditService protocol"
    },
    "CommunicationCapabilities": {
      "name": "CommunicationCapabilities",
      "file": "ciris_engine/schemas/services/capabilities.py",
      "line": 24,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Core capabilities for Communication services - maps to CommunicationService protocol"
    },
    "WiseAuthorityCapabilities": {
      "name": "WiseAuthorityCapabilities",
      "file": "ciris_engine/schemas/services/capabilities.py",
      "line": 31,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Core capabilities for Wise Authority services - maps to WiseAuthorityService protocol"
    },
    "MemoryCapabilities": {
      "name": "MemoryCapabilities",
      "file": "ciris_engine/schemas/services/capabilities.py",
      "line": 38,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Core capabilities for Memory services - maps to MemoryService protocol"
    },
    "ToolCapabilities": {
      "name": "ToolCapabilities",
      "file": "ciris_engine/schemas/services/capabilities.py",
      "line": 46,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Core capabilities for Tool services - maps to ToolService protocol"
    },
    "TelemetryCapabilities": {
      "name": "TelemetryCapabilities",
      "file": "ciris_engine/schemas/services/capabilities.py",
      "line": 54,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Core capabilities for Telemetry services - maps to TelemetryService protocol"
    },
    "ServiceRequest": {
      "name": "ServiceRequest",
      "file": "ciris_engine/schemas/services/requests.py",
      "line": 19,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Base request for all service methods."
    },
    "ServiceResponse": {
      "name": "ServiceResponse",
      "file": "ciris_engine/schemas/services/requests.py",
      "line": 28,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Base response from all service methods."
    },
    "MemorizeRequest": {
      "name": "MemorizeRequest",
      "file": "ciris_engine/schemas/services/requests.py",
      "line": 42,
      "bases": [
        "ServiceRequest"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request for memory service memorize method."
    },
    "MemorizeResponse": {
      "name": "MemorizeResponse",
      "file": "ciris_engine/schemas/services/requests.py",
      "line": 48,
      "bases": [
        "ServiceResponse"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response from memory service memorize method."
    },
    "RecallRequest": {
      "name": "RecallRequest",
      "file": "ciris_engine/schemas/services/requests.py",
      "line": 55,
      "bases": [
        "ServiceRequest"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request for memory service recall method."
    },
    "RecallResponse": {
      "name": "RecallResponse",
      "file": "ciris_engine/schemas/services/requests.py",
      "line": 61,
      "bases": [
        "ServiceResponse"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response from memory service recall method."
    },
    "ToolExecutionRequest": {
      "name": "ToolExecutionRequest",
      "file": "ciris_engine/schemas/services/requests.py",
      "line": 71,
      "bases": [
        "ServiceRequest"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request for tool service execution."
    },
    "ToolExecutionResponse": {
      "name": "ToolExecutionResponse",
      "file": "ciris_engine/schemas/services/requests.py",
      "line": 79,
      "bases": [
        "ServiceResponse"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response from tool service execution."
    },
    "LLMRequest": {
      "name": "LLMRequest",
      "file": "ciris_engine/schemas/services/requests.py",
      "line": 90,
      "bases": [
        "ServiceRequest"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request for LLM service."
    },
    "AuditResponse": {
      "name": "AuditResponse",
      "file": "ciris_engine/schemas/services/requests.py",
      "line": 119,
      "bases": [
        "ServiceResponse"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response from audit service."
    },
    "StepPoint": {
      "name": "StepPoint",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 19,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Points where single-stepping can pause in the pipeline."
    },
    "StepDuration": {
      "name": "StepDuration",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 40,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "How long to wait before building the round queue."
    },
    "CircuitBreakerState": {
      "name": "CircuitBreakerState",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 58,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "States of a circuit breaker."
    },
    "ConfigValueMap": {
      "name": "ConfigValueMap",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 79,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "get",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 86
        },
        {
          "name": "set",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 92
        },
        {
          "name": "update",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 96
        },
        {
          "name": "keys",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 100
        },
        {
          "name": "items",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 104
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Typed map for configuration values."
    },
    "ServiceProviderUpdate": {
      "name": "ServiceProviderUpdate",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 109,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Details of a service provider update."
    },
    "ServiceProviderInfo": {
      "name": "ServiceProviderInfo",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 143,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Information about a registered service provider."
    },
    "ServiceRegistryInfoResponse": {
      "name": "ServiceRegistryInfoResponse",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 157,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Enhanced service registry information response."
    },
    "WAPublicKeyMap": {
      "name": "WAPublicKeyMap",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 175,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "add_key",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 182
        },
        {
          "name": "get_key",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 186
        },
        {
          "name": "has_key",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 190
        },
        {
          "name": "clear",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 194
        },
        {
          "name": "count",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 198
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Map of Wise Authority IDs to their public keys."
    },
    "ConfigBackupData": {
      "name": "ConfigBackupData",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 203,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "to_config_value",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 215
        },
        {
          "name": "from_config_value",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 225
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Data structure for configuration backups."
    },
    "QueuedThought": {
      "name": "QueuedThought",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 253,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "A thought queued for processing in the next round."
    },
    "QueuedTask": {
      "name": "QueuedTask",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 265,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "A task that may generate thoughts."
    },
    "ThoughtInPipeline": {
      "name": "ThoughtInPipeline",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 276,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Tracks a thought's position in the processing pipeline."
    },
    "PipelineState": {
      "name": "PipelineState",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 302,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "get_thoughts_at_step",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 322
        },
        {
          "name": "move_thought",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 326
        },
        {
          "name": "get_next_step",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 338
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Complete state of the processing pipeline."
    },
    "ThoughtProcessingResult": {
      "name": "ThoughtProcessingResult",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 350,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from processing a thought through the full pipeline."
    },
    "StepResultFinalizeTasksQueue": {
      "name": "StepResultFinalizeTasksQueue",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 378,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from FINALIZE_TASKS_QUEUE step - determines which tasks to process."
    },
    "StepResultPopulateThoughtQueue": {
      "name": "StepResultPopulateThoughtQueue",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 408,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from POPULATE_THOUGHT_QUEUE step - generates thoughts from tasks."
    },
    "StepResultPopulateRound": {
      "name": "StepResultPopulateRound",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 436,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from POPULATE_ROUND step - selects thoughts for this processing round."
    },
    "StepResultBuildContext": {
      "name": "StepResultBuildContext",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 462,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from BUILD_CONTEXT step - builds context for DMA processing."
    },
    "StepResultPerformDMAs": {
      "name": "StepResultPerformDMAs",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 488,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from PERFORM_DMAS step - parallel execution of base DMAs."
    },
    "StepResultPerformASPDMA": {
      "name": "StepResultPerformASPDMA",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 514,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from PERFORM_ASPDMA step - action selection DMA execution."
    },
    "StepResultConscienceExecution": {
      "name": "StepResultConscienceExecution",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 537,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from CONSCIENCE_EXECUTION step - parallel conscience checks."
    },
    "StepResultRecursiveASPDMA": {
      "name": "StepResultRecursiveASPDMA",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 562,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from RECURSIVE_ASPDMA step - retry after conscience failure."
    },
    "StepResultRecursiveConscience": {
      "name": "StepResultRecursiveConscience",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 588,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from RECURSIVE_CONSCIENCE step - recheck after recursive ASPDMA."
    },
    "StepResultActionSelection": {
      "name": "StepResultActionSelection",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 612,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from ACTION_SELECTION step - final action determined."
    },
    "StepResultHandlerStart": {
      "name": "StepResultHandlerStart",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 634,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from HANDLER_START step - handler begins execution."
    },
    "StepResultBusOutbound": {
      "name": "StepResultBusOutbound",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 656,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from BUS_OUTBOUND step - messages sent to buses."
    },
    "StepResultPackageHandling": {
      "name": "StepResultPackageHandling",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 679,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from PACKAGE_HANDLING step - edge adapter processing."
    },
    "StepResultBusInbound": {
      "name": "StepResultBusInbound",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 702,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from BUS_INBOUND step - responses from buses."
    },
    "StepResultHandlerComplete": {
      "name": "StepResultHandlerComplete",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 725,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from HANDLER_COMPLETE step - handler finishes execution."
    },
    "StepResultRoundStart": {
      "name": "StepResultRoundStart",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 776,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from single-stepping at round start.\nShows what happened in the last round and what's queued for this round."
    },
    "DMAExecutionContext": {
      "name": "DMAExecutionContext",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 820,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Full context passed to DMAs and LLM."
    },
    "LLMPromptData": {
      "name": "LLMPromptData",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 839,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Data about prompts sent to LLM."
    },
    "StepResultPostConsciencePreHandler": {
      "name": "StepResultPostConsciencePreHandler",
      "file": "ciris_engine/schemas/services/runtime_control.py",
      "line": 859,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result from single-stepping after conscience processing.\nShows full DMA/LLM context and what action will be taken."
    },
    "EmergencyCommandType": {
      "name": "EmergencyCommandType",
      "file": "ciris_engine/schemas/services/shutdown.py",
      "line": 14,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Types of emergency commands."
    },
    "WASignedCommand": {
      "name": "WASignedCommand",
      "file": "ciris_engine/schemas/services/shutdown.py",
      "line": 22,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "A command signed by a Wise Authority."
    },
    "EmergencyShutdownStatus": {
      "name": "EmergencyShutdownStatus",
      "file": "ciris_engine/schemas/services/shutdown.py",
      "line": 49,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Status of emergency shutdown process."
    },
    "KillSwitchConfig": {
      "name": "KillSwitchConfig",
      "file": "ciris_engine/schemas/services/shutdown.py",
      "line": 67,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration for kill switch functionality."
    },
    "CorrelationRequestData": {
      "name": "CorrelationRequestData",
      "file": "ciris_engine/schemas/persistence/correlations.py",
      "line": 14,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Schema for correlation request data."
    },
    "CorrelationResponseData": {
      "name": "CorrelationResponseData",
      "file": "ciris_engine/schemas/persistence/correlations.py",
      "line": 26,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Schema for correlation response data."
    },
    "ConversationSummaryData": {
      "name": "ConversationSummaryData",
      "file": "ciris_engine/schemas/persistence/correlations.py",
      "line": 54,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Schema for conversation summary from TSDB consolidation."
    },
    "DeferralPackage": {
      "name": "DeferralPackage",
      "file": "ciris_engine/schemas/handlers/core.py",
      "line": 72,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Complete context package for deferred decisions."
    },
    "DeferralReportContext": {
      "name": "DeferralReportContext",
      "file": "ciris_engine/schemas/persistence/core.py",
      "line": 26,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Type-safe response for deferral report queries."
    },
    "CorrelationUpdateRequest": {
      "name": "CorrelationUpdateRequest",
      "file": "ciris_engine/schemas/persistence/core.py",
      "line": 36,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Type-safe request for updating correlations."
    },
    "MetricsQuery": {
      "name": "MetricsQuery",
      "file": "ciris_engine/schemas/persistence/core.py",
      "line": 48,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Type-safe query parameters for metrics timeseries."
    },
    "IdentityContext": {
      "name": "IdentityContext",
      "file": "ciris_engine/schemas/persistence/core.py",
      "line": 61,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Type-safe identity context for processing."
    },
    "TaskSummaryInfo": {
      "name": "TaskSummaryInfo",
      "file": "ciris_engine/schemas/persistence/core.py",
      "line": 94,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Type-safe task summary for queries returning task info."
    },
    "QueryTimeRange": {
      "name": "QueryTimeRange",
      "file": "ciris_engine/schemas/persistence/core.py",
      "line": 107,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Time range for queries."
    },
    "PersistenceHealth": {
      "name": "PersistenceHealth",
      "file": "ciris_engine/schemas/persistence/core.py",
      "line": 116,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Health status of persistence layer."
    },
    "DeferralReason": {
      "name": "DeferralReason",
      "file": "ciris_engine/schemas/handlers/core.py",
      "line": 14,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Standard deferral reason codes."
    },
    "EthicalAssessment": {
      "name": "EthicalAssessment",
      "file": "ciris_engine/schemas/handlers/core.py",
      "line": 28,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Ethical evaluation results."
    },
    "CSDMAAssessment": {
      "name": "CSDMAAssessment",
      "file": "ciris_engine/schemas/handlers/core.py",
      "line": 39,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Common sense evaluation results."
    },
    "DSDMAAssessment": {
      "name": "DSDMAAssessment",
      "file": "ciris_engine/schemas/handlers/core.py",
      "line": 50,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Domain-specific evaluation results."
    },
    "ActionHistoryItem": {
      "name": "ActionHistoryItem",
      "file": "ciris_engine/schemas/handlers/core.py",
      "line": 61,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "A single action in history."
    },
    "TransportData": {
      "name": "TransportData",
      "file": "ciris_engine/schemas/handlers/core.py",
      "line": 105,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Transport-specific metadata."
    },
    "DeferralReport": {
      "name": "DeferralReport",
      "file": "ciris_engine/schemas/handlers/core.py",
      "line": 117,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Deferral report for transmission to WA."
    },
    "DeferralResolution": {
      "name": "DeferralResolution",
      "file": "ciris_engine/schemas/services/authority/wise_authority.py",
      "line": 90,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Resolution of a deferral by WA."
    },
    "BaseActionContext": {
      "name": "BaseActionContext",
      "file": "ciris_engine/schemas/handlers/contexts.py",
      "line": 14,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Base context shared by all actions."
    },
    "SpeakContext": {
      "name": "SpeakContext",
      "file": "ciris_engine/schemas/handlers/contexts.py",
      "line": 26,
      "bases": [
        "BaseActionContext"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context for SPEAK action."
    },
    "ToolContext": {
      "name": "ToolContext",
      "file": "ciris_engine/schemas/handlers/contexts.py",
      "line": 33,
      "bases": [
        "BaseActionContext"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context for TOOL action."
    },
    "ObserveContext": {
      "name": "ObserveContext",
      "file": "ciris_engine/schemas/handlers/contexts.py",
      "line": 41,
      "bases": [
        "BaseActionContext"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context for OBSERVE action."
    },
    "MemorizeContext": {
      "name": "MemorizeContext",
      "file": "ciris_engine/schemas/handlers/contexts.py",
      "line": 48,
      "bases": [
        "BaseActionContext"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context for MEMORIZE action."
    },
    "RecallContext": {
      "name": "RecallContext",
      "file": "ciris_engine/schemas/handlers/contexts.py",
      "line": 56,
      "bases": [
        "BaseActionContext"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context for RECALL action."
    },
    "ForgetContext": {
      "name": "ForgetContext",
      "file": "ciris_engine/schemas/handlers/contexts.py",
      "line": 64,
      "bases": [
        "BaseActionContext"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context for FORGET action."
    },
    "RejectContext": {
      "name": "RejectContext",
      "file": "ciris_engine/schemas/handlers/contexts.py",
      "line": 72,
      "bases": [
        "BaseActionContext"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context for REJECT action."
    },
    "PonderContext": {
      "name": "PonderContext",
      "file": "ciris_engine/schemas/handlers/contexts.py",
      "line": 81,
      "bases": [
        "BaseActionContext"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context for PONDER action."
    },
    "DeferContext": {
      "name": "DeferContext",
      "file": "ciris_engine/schemas/handlers/contexts.py",
      "line": 88,
      "bases": [
        "BaseActionContext"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context for DEFER action."
    },
    "TaskCompleteContext": {
      "name": "TaskCompleteContext",
      "file": "ciris_engine/schemas/handlers/contexts.py",
      "line": 96,
      "bases": [
        "BaseActionContext"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context for TASK_COMPLETE action."
    },
    "ConnectedNodeInfo": {
      "name": "ConnectedNodeInfo",
      "file": "ciris_engine/schemas/handlers/memory_schemas.py",
      "line": 12,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Information about a node connected to a recalled node."
    },
    "RecalledNodeInfo": {
      "name": "RecalledNodeInfo",
      "file": "ciris_engine/schemas/handlers/memory_schemas.py",
      "line": 24,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Structured information about a recalled node."
    },
    "RecallResult": {
      "name": "RecallResult",
      "file": "ciris_engine/schemas/handlers/memory_schemas.py",
      "line": 35,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "to_follow_up_content",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 46
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of a memory recall operation."
    },
    "HandlerData": {
      "name": "HandlerData",
      "file": "ciris_engine/schemas/handlers/context.py",
      "line": 13,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Base class for handler-specific data."
    },
    "SpeakHandlerData": {
      "name": "SpeakHandlerData",
      "file": "ciris_engine/schemas/handlers/context.py",
      "line": 19,
      "bases": [
        "HandlerData"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Data specific to SPEAK handler."
    },
    "ToolHandlerData": {
      "name": "ToolHandlerData",
      "file": "ciris_engine/schemas/handlers/context.py",
      "line": 27,
      "bases": [
        "HandlerData"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Data specific to TOOL handler."
    },
    "MemoryHandlerData": {
      "name": "MemoryHandlerData",
      "file": "ciris_engine/schemas/handlers/context.py",
      "line": 35,
      "bases": [
        "HandlerData"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Data specific to memory handlers (MEMORIZE, RECALL, FORGET)."
    },
    "HandlerRequest": {
      "name": "HandlerRequest",
      "file": "ciris_engine/schemas/handlers/context.py",
      "line": 43,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request passed to all handlers - fully typed."
    },
    "ActionContextParams": {
      "name": "ActionContextParams",
      "file": "ciris_engine/schemas/handlers/context.py",
      "line": 59,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Base class for action parameters in audit context."
    },
    "SpeakActionParams": {
      "name": "SpeakActionParams",
      "file": "ciris_engine/schemas/handlers/context.py",
      "line": 65,
      "bases": [
        "ActionContextParams"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Parameters for SPEAK action."
    },
    "ToolActionParams": {
      "name": "ToolActionParams",
      "file": "ciris_engine/schemas/handlers/context.py",
      "line": 73,
      "bases": [
        "ActionContextParams"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Parameters for TOOL action."
    },
    "MemoryActionParams": {
      "name": "MemoryActionParams",
      "file": "ciris_engine/schemas/handlers/context.py",
      "line": 80,
      "bases": [
        "ActionContextParams"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Parameters for memory actions."
    },
    "ActionContext": {
      "name": "ActionContext",
      "file": "ciris_engine/schemas/handlers/context.py",
      "line": 89,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context for an action being audited - fully typed."
    },
    "HandlerContext": {
      "name": "HandlerContext",
      "file": "ciris_engine/schemas/handlers/schemas.py",
      "line": 64,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Typed context for all handlers."
    },
    "HandlerResult": {
      "name": "HandlerResult",
      "file": "ciris_engine/schemas/handlers/schemas.py",
      "line": 75,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Typed result from all handlers."
    },
    "HandlerDecapsulatedParams": {
      "name": "HandlerDecapsulatedParams",
      "file": "ciris_engine/schemas/handlers/schemas.py",
      "line": 86,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Schema for decapsulated handler parameters."
    },
    "ConsentStream": {
      "name": "ConsentStream",
      "file": "ciris_engine/schemas/consent/core.py",
      "line": 15,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "How we handle user data based on consent.\n\nTEMPORARY: Default - we forget in 14 days\nPARTNERED: Explicit consent for mutual growth\nANONYMOUS: Statistics only, no identity"
    },
    "ConsentCategory": {
      "name": "ConsentCategory",
      "file": "ciris_engine/schemas/consent/core.py",
      "line": 29,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "What types of learning the user has consented to."
    },
    "ConsentStatus": {
      "name": "ConsentStatus",
      "file": "ciris_engine/schemas/consent/core.py",
      "line": 39,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "User's consent configuration - NO DEFAULTS, FAIL FAST."
    },
    "ConsentRequest": {
      "name": "ConsentRequest",
      "file": "ciris_engine/schemas/consent/core.py",
      "line": 55,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to grant or modify consent - EXPLICIT, NO ASSUMPTIONS."
    },
    "ConsentAuditEntry": {
      "name": "ConsentAuditEntry",
      "file": "ciris_engine/schemas/consent/core.py",
      "line": 64,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Audit trail for consent changes - IMMUTABLE RECORD."
    },
    "ConsentDecayStatus": {
      "name": "ConsentDecayStatus",
      "file": "ciris_engine/schemas/consent/core.py",
      "line": 78,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Track decay protocol progress - NO FAKE DELETION."
    },
    "ConsentImpactReport": {
      "name": "ConsentImpactReport",
      "file": "ciris_engine/schemas/consent/core.py",
      "line": 89,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Show users their contribution - REAL DATA ONLY."
    },
    "ProcessSnapshotResult": {
      "name": "ProcessSnapshotResult",
      "file": "ciris_engine/schemas/services/special/self_observation.py",
      "line": 26,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of processing a system snapshot for observation."
    },
    "ObservationCycleResult": {
      "name": "ObservationCycleResult",
      "file": "ciris_engine/schemas/services/special/self_observation.py",
      "line": 37,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of running an observation cycle."
    },
    "CycleEventData": {
      "name": "CycleEventData",
      "file": "ciris_engine/schemas/services/special/self_observation.py",
      "line": 68,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Data for observation cycle events."
    },
    "ObservationStatus": {
      "name": "ObservationStatus",
      "file": "ciris_engine/schemas/services/special/self_observation.py",
      "line": 87,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Current status of the observation system."
    },
    "ReviewOutcome": {
      "name": "ReviewOutcome",
      "file": "ciris_engine/schemas/services/special/self_observation.py",
      "line": 114,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Outcome of WA review process."
    },
    "ConfigurationChange": {
      "name": "ConfigurationChange",
      "file": "ciris_engine/schemas/services/special/self_observation.py",
      "line": 150,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "A proposed or applied configuration change."
    },
    "ChangeApprovalResult": {
      "name": "ChangeApprovalResult",
      "file": "ciris_engine/schemas/services/special/self_observation.py",
      "line": 166,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of approving configuration changes."
    },
    "RollbackResult": {
      "name": "RollbackResult",
      "file": "ciris_engine/schemas/services/special/self_observation.py",
      "line": 176,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of rolling back configuration changes."
    },
    "ObservabilitySignal": {
      "name": "ObservabilitySignal",
      "file": "ciris_engine/schemas/services/special/self_observation.py",
      "line": 186,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "A signal from observability sources."
    },
    "ObservationOpportunity": {
      "name": "ObservationOpportunity",
      "file": "ciris_engine/schemas/services/special/self_observation.py",
      "line": 196,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "An opportunity for system observation."
    },
    "ObservabilityAnalysis": {
      "name": "ObservabilityAnalysis",
      "file": "ciris_engine/schemas/services/special/self_observation.py",
      "line": 207,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Analysis of all observability signals for a time window."
    },
    "ObservationImpact": {
      "name": "ObservationImpact",
      "file": "ciris_engine/schemas/services/special/self_observation.py",
      "line": 229,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Measured impact of an observation."
    },
    "ObservationEffectiveness": {
      "name": "ObservationEffectiveness",
      "file": "ciris_engine/schemas/services/special/self_observation.py",
      "line": 239,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Overall effectiveness of an observation across all dimensions."
    },
    "PatternRecord": {
      "name": "PatternRecord",
      "file": "ciris_engine/schemas/services/special/self_observation.py",
      "line": 257,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "A learned observation pattern."
    },
    "PatternLibrarySummary": {
      "name": "PatternLibrarySummary",
      "file": "ciris_engine/schemas/services/special/self_observation.py",
      "line": 270,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Summary of the pattern library."
    },
    "ServiceImprovementReport": {
      "name": "ServiceImprovementReport",
      "file": "ciris_engine/schemas/services/special/self_observation.py",
      "line": 280,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Comprehensive service improvement report."
    },
    "PatternInsight": {
      "name": "PatternInsight",
      "file": "ciris_engine/schemas/services/special/self_observation.py",
      "line": 311,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Insight from pattern analysis."
    },
    "LearningSummary": {
      "name": "LearningSummary",
      "file": "ciris_engine/schemas/services/special/self_observation.py",
      "line": 325,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Summary of system learning progress."
    },
    "PatternEffectiveness": {
      "name": "PatternEffectiveness",
      "file": "ciris_engine/schemas/services/special/self_observation.py",
      "line": 339,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Effectiveness metrics for a specific pattern."
    },
    "AnalysisStatus": {
      "name": "AnalysisStatus",
      "file": "ciris_engine/schemas/services/special/self_observation.py",
      "line": 352,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Current status of pattern analysis system."
    },
    "JWTAlgorithm": {
      "name": "JWTAlgorithm",
      "file": "ciris_engine/schemas/services/authority/jwt.py",
      "line": 16,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Supported JWT signature algorithms."
    },
    "JWTHeader": {
      "name": "JWTHeader",
      "file": "ciris_engine/schemas/services/authority/jwt.py",
      "line": 23,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "validate_typ",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 31
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "JWT header information."
    },
    "JWTClaims": {
      "name": "JWTClaims",
      "file": "ciris_engine/schemas/services/authority/jwt.py",
      "line": 38,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "validate_timestamps",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 69
        },
        {
          "name": "is_expired",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 75
        },
        {
          "name": "is_valid_for_audience",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 83
        },
        {
          "name": "has_scope",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 89
        },
        {
          "name": "get_wa_id",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 93
        },
        {
          "name": "get_channel_identity",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 99
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Standard JWT claims for CIRIS tokens."
    },
    "JWTToken": {
      "name": "JWTToken",
      "file": "ciris_engine/schemas/services/authority/jwt.py",
      "line": 111,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "to_string",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 118
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Complete JWT token with header and claims."
    },
    "JWTValidationResult": {
      "name": "JWTValidationResult",
      "file": "ciris_engine/schemas/services/authority/jwt.py",
      "line": 140,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "get_wa_id",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 148
        },
        {
          "name": "get_role",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 154
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of JWT validation."
    },
    "WACertificateUpdate": {
      "name": "WACertificateUpdate",
      "file": "ciris_engine/schemas/services/authority/wa_updates.py",
      "line": 15,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "validate_scope_lists",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 51
        },
        {
          "name": "validate_credentials",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 58
        },
        {
          "name": "has_updates",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 64
        },
        {
          "name": "get_update_fields",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 72
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to update an existing WA certificate with partial updates."
    },
    "WACertificateUpdateResponse": {
      "name": "WACertificateUpdateResponse",
      "file": "ciris_engine/schemas/services/authority/wa_updates.py",
      "line": 86,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response after updating a WA certificate."
    },
    "WABulkUpdate": {
      "name": "WABulkUpdate",
      "file": "ciris_engine/schemas/services/authority/wa_updates.py",
      "line": 98,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "validate_wa_ids",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 105
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Request to update multiple WA certificates."
    },
    "WABulkUpdateResponse": {
      "name": "WABulkUpdateResponse",
      "file": "ciris_engine/schemas/services/authority/wa_updates.py",
      "line": 124,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response after bulk updating WA certificates."
    },
    "PermissionEntry": {
      "name": "PermissionEntry",
      "file": "ciris_engine/schemas/services/authority/wise_authority.py",
      "line": 13,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "A single permission entry for a WA."
    },
    "ApprovalRequestContext": {
      "name": "ApprovalRequestContext",
      "file": "ciris_engine/schemas/services/authority/wise_authority.py",
      "line": 22,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context for approval requests."
    },
    "AuthenticationResult": {
      "name": "AuthenticationResult",
      "file": "ciris_engine/schemas/services/authority/wise_authority.py",
      "line": 30,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of WA authentication."
    },
    "WAUpdate": {
      "name": "WAUpdate",
      "file": "ciris_engine/schemas/services/authority/wise_authority.py",
      "line": 42,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Updates to apply to a WA certificate."
    },
    "TokenVerification": {
      "name": "TokenVerification",
      "file": "ciris_engine/schemas/services/authority/wise_authority.py",
      "line": 52,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of token verification."
    },
    "PendingDeferral": {
      "name": "PendingDeferral",
      "file": "ciris_engine/schemas/services/authority/wise_authority.py",
      "line": 63,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "A deferral awaiting WA review."
    },
    "WAResource": {
      "name": "WAResource",
      "file": "ciris_engine/schemas/services/authority/wise_authority.py",
      "line": 113,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Resource accessible to a WA."
    },
    "OAuthConfig": {
      "name": "OAuthConfig",
      "file": "ciris_engine/schemas/services/authority/wise_authority.py",
      "line": 134,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "OAuth provider configuration."
    },
    "AdapterStatus": {
      "name": "AdapterStatus",
      "file": "ciris_engine/schemas/services/core/runtime.py",
      "line": 14,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Adapter operational status."
    },
    "ProcessorStatus": {
      "name": "ProcessorStatus",
      "file": "ciris_engine/schemas/services/core/runtime.py",
      "line": 25,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Processor operational status."
    },
    "ConfigScope": {
      "name": "ConfigScope",
      "file": "ciris_engine/schemas/services/core/runtime.py",
      "line": 34,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration scope levels."
    },
    "ConfigValidationLevel": {
      "name": "ConfigValidationLevel",
      "file": "ciris_engine/schemas/services/core/runtime.py",
      "line": 43,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration validation levels."
    },
    "ProcessorQueueStatus": {
      "name": "ProcessorQueueStatus",
      "file": "ciris_engine/schemas/services/core/runtime.py",
      "line": 52,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Status of a processor queue."
    },
    "ConfigBackup": {
      "name": "ConfigBackup",
      "file": "ciris_engine/schemas/services/core/runtime.py",
      "line": 86,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration backup information."
    },
    "ServiceRegistryInfo": {
      "name": "ServiceRegistryInfo",
      "file": "ciris_engine/schemas/services/core/runtime.py",
      "line": 97,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Service registry information."
    },
    "CircuitBreakerResetResult": {
      "name": "CircuitBreakerResetResult",
      "file": "ciris_engine/schemas/services/core/runtime.py",
      "line": 107,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of circuit breaker reset operation."
    },
    "ServiceHealthStatus": {
      "name": "ServiceHealthStatus",
      "file": "ciris_engine/schemas/services/core/runtime.py",
      "line": 116,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Health status of services."
    },
    "ServiceSelectionExplanation": {
      "name": "ServiceSelectionExplanation",
      "file": "ciris_engine/schemas/services/core/runtime.py",
      "line": 127,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Explanation of service selection logic."
    },
    "RuntimeEvent": {
      "name": "RuntimeEvent",
      "file": "ciris_engine/schemas/services/core/runtime.py",
      "line": 140,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Runtime event notification."
    },
    "ConfigReloadResult": {
      "name": "ConfigReloadResult",
      "file": "ciris_engine/schemas/services/core/runtime.py",
      "line": 150,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of configuration reload."
    },
    "ProcessorControlResponse": {
      "name": "ProcessorControlResponse",
      "file": "ciris_engine/schemas/services/core/runtime.py",
      "line": 160,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response from processor control operations."
    },
    "AdapterOperationResponse": {
      "name": "AdapterOperationResponse",
      "file": "ciris_engine/schemas/services/core/runtime.py",
      "line": 170,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response from adapter operations."
    },
    "RuntimeStatusResponse": {
      "name": "RuntimeStatusResponse",
      "file": "ciris_engine/schemas/services/core/runtime.py",
      "line": 181,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Overall runtime status response."
    },
    "RuntimeStateSnapshot": {
      "name": "RuntimeStateSnapshot",
      "file": "ciris_engine/schemas/services/core/runtime.py",
      "line": 192,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Complete runtime state snapshot."
    },
    "ConfigSnapshot": {
      "name": "ConfigSnapshot",
      "file": "ciris_engine/schemas/services/core/runtime.py",
      "line": 203,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration snapshot for runtime control."
    },
    "ConfigOperationResponse": {
      "name": "ConfigOperationResponse",
      "file": "ciris_engine/schemas/services/core/runtime.py",
      "line": 213,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response from configuration operations."
    },
    "ConfigBackupResponse": {
      "name": "ConfigBackupResponse",
      "file": "ciris_engine/schemas/services/core/runtime.py",
      "line": 233,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration backup response."
    },
    "RuntimeConfig": {
      "name": "RuntimeConfig",
      "file": "ciris_engine/schemas/services/core/runtime_config.py",
      "line": 58,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Complete runtime configuration."
    },
    "ServiceInfo": {
      "name": "ServiceInfo",
      "file": "ciris_engine/schemas/services/core/runtime_config.py",
      "line": 80,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Information about a registered service."
    },
    "ServiceHealthReport": {
      "name": "ServiceHealthReport",
      "file": "ciris_engine/schemas/services/core/runtime_config.py",
      "line": 102,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Health report for services."
    },
    "SecretContext": {
      "name": "SecretContext",
      "file": "ciris_engine/schemas/services/core/secrets.py",
      "line": 13,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context for secret operations."
    },
    "SecretFilterStatus": {
      "name": "SecretFilterStatus",
      "file": "ciris_engine/schemas/services/core/secrets.py",
      "line": 46,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Status of a secret filter."
    },
    "TimeServiceConfig": {
      "name": "TimeServiceConfig",
      "file": "ciris_engine/schemas/services/lifecycle/time.py",
      "line": 13,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration for Time Service."
    },
    "TimeSnapshot": {
      "name": "TimeSnapshot",
      "file": "ciris_engine/schemas/services/lifecycle/time.py",
      "line": 20,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "A snapshot of time information."
    },
    "TimeServiceStatus": {
      "name": "TimeServiceStatus",
      "file": "ciris_engine/schemas/services/lifecycle/time.py",
      "line": 30,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Extended status for Time Service."
    },
    "InitializationVerification": {
      "name": "InitializationVerification",
      "file": "ciris_engine/schemas/services/lifecycle/initialization.py",
      "line": 27,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Results of initialization verification."
    },
    "SummaryAttributes": {
      "name": "SummaryAttributes",
      "file": "ciris_engine/schemas/services/graph/tsdb_models.py",
      "line": 14,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Attributes for consolidated summary nodes."
    },
    "CompressionResult": {
      "name": "CompressionResult",
      "file": "ciris_engine/schemas/services/graph/tsdb_models.py",
      "line": 48,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of compression operation."
    },
    "ConsolidationMetadata": {
      "name": "ConsolidationMetadata",
      "file": "ciris_engine/schemas/services/graph/tsdb_models.py",
      "line": 58,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Metadata for consolidation operations."
    },
    "EdgeAttributes": {
      "name": "EdgeAttributes",
      "file": "ciris_engine/schemas/services/graph/edge_types.py",
      "line": 12,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Attributes for a graph edge."
    },
    "NodeReference": {
      "name": "NodeReference",
      "file": "ciris_engine/schemas/services/graph/tsdb_models.py",
      "line": 84,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Reference to a graph node."
    },
    "ServiceCorrelationQueryResult": {
      "name": "ServiceCorrelationQueryResult",
      "file": "ciris_engine/schemas/services/graph/query_results.py",
      "line": 21,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "to_dict_by_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 31
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of querying service correlations."
    },
    "TSDBNodeQueryResult": {
      "name": "TSDBNodeQueryResult",
      "file": "ciris_engine/schemas/services/graph/query_results.py",
      "line": 41,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 49
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of querying TSDB nodes."
    },
    "EdgeQueryResult": {
      "name": "EdgeQueryResult",
      "file": "ciris_engine/schemas/services/graph/query_results.py",
      "line": 54,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of querying edges between nodes."
    },
    "ConsolidationSummary": {
      "name": "ConsolidationSummary",
      "file": "ciris_engine/schemas/services/graph/query_results.py",
      "line": 64,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Summary of a consolidation operation."
    },
    "BaseEdgeAttributes": {
      "name": "BaseEdgeAttributes",
      "file": "ciris_engine/schemas/services/graph/edges.py",
      "line": 12,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Base attributes for all edges."
    },
    "SummaryEdgeAttributes": {
      "name": "SummaryEdgeAttributes",
      "file": "ciris_engine/schemas/services/graph/edges.py",
      "line": 20,
      "bases": [
        "BaseEdgeAttributes"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Attributes for edges from summaries to nodes."
    },
    "UserParticipationAttributes": {
      "name": "UserParticipationAttributes",
      "file": "ciris_engine/schemas/services/graph/edges.py",
      "line": 28,
      "bases": [
        "BaseEdgeAttributes"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Attributes for user participation edges."
    },
    "TaskSummaryAttributes": {
      "name": "TaskSummaryAttributes",
      "file": "ciris_engine/schemas/services/graph/edges.py",
      "line": 36,
      "bases": [
        "BaseEdgeAttributes"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Attributes for task summary edges."
    },
    "TraceSummaryAttributes": {
      "name": "TraceSummaryAttributes",
      "file": "ciris_engine/schemas/services/graph/edges.py",
      "line": 44,
      "bases": [
        "BaseEdgeAttributes"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Attributes for trace summary edges."
    },
    "CrossSummaryAttributes": {
      "name": "CrossSummaryAttributes",
      "file": "ciris_engine/schemas/services/graph/edges.py",
      "line": 52,
      "bases": [
        "BaseEdgeAttributes"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Attributes for edges between summaries."
    },
    "GenericEdgeAttributes": {
      "name": "GenericEdgeAttributes",
      "file": "ciris_engine/schemas/services/graph/edges.py",
      "line": 60,
      "bases": [
        "BaseEdgeAttributes"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Generic edge attributes for flexible use cases."
    },
    "MemoryNodeAttributes": {
      "name": "MemoryNodeAttributes",
      "file": "ciris_engine/schemas/services/graph/attributes.py",
      "line": 48,
      "bases": [
        "NodeAttributes"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Specific attributes for memory nodes.\n\nUsed by the memory service for storing knowledge, experiences, and insights."
    },
    "ConfigNodeAttributes": {
      "name": "ConfigNodeAttributes",
      "file": "ciris_engine/schemas/services/graph/attributes.py",
      "line": 88,
      "bases": [
        "NodeAttributes"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Specific attributes for configuration nodes.\n\nUsed by the config service for storing system and behavioral configuration."
    },
    "TelemetryNodeAttributes": {
      "name": "TelemetryNodeAttributes",
      "file": "ciris_engine/schemas/services/graph/attributes.py",
      "line": 131,
      "bases": [
        "NodeAttributes"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Specific attributes for telemetry nodes.\n\nUsed by the telemetry service for storing metrics, performance data, and system observations."
    },
    "ValidationRule": {
      "name": "ValidationRule",
      "file": "ciris_engine/schemas/services/graph/node_data.py",
      "line": 13,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "A single validation rule for configuration."
    },
    "BaseNodeData": {
      "name": "BaseNodeData",
      "file": "ciris_engine/schemas/services/graph/node_data.py",
      "line": 23,
      "bases": [
        "BaseModel"
      ],
      "methods": [
        {
          "name": "serialize_datetime",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 33
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Base class for all typed node data."
    },
    "ConfigNodeData": {
      "name": "ConfigNodeData",
      "file": "ciris_engine/schemas/services/graph/node_data.py",
      "line": 37,
      "bases": [
        "BaseNodeData"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Data for configuration nodes."
    },
    "TelemetryNodeData": {
      "name": "TelemetryNodeData",
      "file": "ciris_engine/schemas/services/graph/node_data.py",
      "line": 48,
      "bases": [
        "BaseNodeData"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Data for telemetry/metrics nodes."
    },
    "AuditNodeData": {
      "name": "AuditNodeData",
      "file": "ciris_engine/schemas/services/graph/node_data.py",
      "line": 64,
      "bases": [
        "BaseNodeData"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Data for audit event nodes."
    },
    "MemoryNodeData": {
      "name": "MemoryNodeData",
      "file": "ciris_engine/schemas/services/graph/node_data.py",
      "line": 85,
      "bases": [
        "BaseNodeData"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Data for memory/knowledge nodes."
    },
    "TaskNodeData": {
      "name": "TaskNodeData",
      "file": "ciris_engine/schemas/services/graph/node_data.py",
      "line": 102,
      "bases": [
        "BaseNodeData"
      ],
      "methods": [
        {
          "name": "serialize_optional_datetime",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 121
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Data for task-related nodes."
    },
    "EnvironmentNodeData": {
      "name": "EnvironmentNodeData",
      "file": "ciris_engine/schemas/services/graph/node_data.py",
      "line": 125,
      "bases": [
        "BaseNodeData"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Data for environment/context nodes."
    },
    "ParticipantData": {
      "name": "ParticipantData",
      "file": "ciris_engine/schemas/services/graph/consolidation.py",
      "line": 217,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Data about a conversation participant."
    },
    "EdgeSpecification": {
      "name": "EdgeSpecification",
      "file": "ciris_engine/schemas/services/graph/edge_types.py",
      "line": 37,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Specification for creating an edge."
    },
    "RequestData": {
      "name": "RequestData",
      "file": "ciris_engine/schemas/services/graph/consolidation.py",
      "line": 14,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Typed request data for service interactions."
    },
    "ResponseData": {
      "name": "ResponseData",
      "file": "ciris_engine/schemas/services/graph/consolidation.py",
      "line": 28,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Typed response data for service interactions."
    },
    "InteractionContext": {
      "name": "InteractionContext",
      "file": "ciris_engine/schemas/services/graph/consolidation.py",
      "line": 40,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Typed context data for service interactions."
    },
    "ServiceInteractionData": {
      "name": "ServiceInteractionData",
      "file": "ciris_engine/schemas/services/graph/consolidation.py",
      "line": 54,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Data structure for service interaction consolidation."
    },
    "MetricCorrelationData": {
      "name": "MetricCorrelationData",
      "file": "ciris_engine/schemas/services/graph/consolidation.py",
      "line": 79,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Data structure for metric correlation consolidation."
    },
    "SpanTags": {
      "name": "SpanTags",
      "file": "ciris_engine/schemas/services/graph/consolidation.py",
      "line": 100,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Typed tags for trace spans."
    },
    "TraceSpanData": {
      "name": "TraceSpanData",
      "file": "ciris_engine/schemas/services/graph/consolidation.py",
      "line": 116,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Data structure for trace span consolidation."
    },
    "TaskMetadata": {
      "name": "TaskMetadata",
      "file": "ciris_engine/schemas/services/graph/consolidation.py",
      "line": 160,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Typed metadata for tasks."
    },
    "TaskCorrelationData": {
      "name": "TaskCorrelationData",
      "file": "ciris_engine/schemas/services/graph/consolidation.py",
      "line": 173,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Data structure for task correlation consolidation."
    },
    "ConversationEntry": {
      "name": "ConversationEntry",
      "file": "ciris_engine/schemas/services/graph/consolidation.py",
      "line": 204,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Single entry in a conversation."
    },
    "MetricAggregation": {
      "name": "MetricAggregation",
      "file": "ciris_engine/schemas/services/graph/consolidation.py",
      "line": 225,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Aggregated metric data."
    },
    "ConversationSummary": {
      "name": "ConversationSummary",
      "file": "ciris_engine/schemas/services/graph/consolidation.py",
      "line": 235,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Summary of a conversation."
    },
    "TraceSummary": {
      "name": "TraceSummary",
      "file": "ciris_engine/schemas/services/graph/consolidation.py",
      "line": 246,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Summary of trace data."
    },
    "MemorySummary": {
      "name": "MemorySummary",
      "file": "ciris_engine/schemas/services/graph/consolidation.py",
      "line": 277,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Summary of memory data."
    },
    "TSDBPeriodSummary": {
      "name": "TSDBPeriodSummary",
      "file": "ciris_engine/schemas/services/graph/consolidation.py",
      "line": 286,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Summary data for a TSDB consolidation period."
    },
    "AuditEventData": {
      "name": "AuditEventData",
      "file": "ciris_engine/schemas/services/graph/audit.py",
      "line": 13,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Data for an audit event."
    },
    "AuditQueryResult": {
      "name": "AuditQueryResult",
      "file": "ciris_engine/schemas/services/graph/audit.py",
      "line": 58,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of an audit query."
    },
    "IncidentSeverity": {
      "name": "IncidentSeverity",
      "file": "ciris_engine/schemas/services/graph/incident.py",
      "line": 17,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Incident severity levels aligned with ITIL."
    },
    "IncidentStatus": {
      "name": "IncidentStatus",
      "file": "ciris_engine/schemas/services/graph/incident.py",
      "line": 26,
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Incident lifecycle status."
    },
    "IncidentNode": {
      "name": "IncidentNode",
      "file": "ciris_engine/schemas/services/graph/incident.py",
      "line": 37,
      "bases": [
        "TypedGraphNode"
      ],
      "methods": [
        {
          "name": "to_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 79
        },
        {
          "name": "from_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 105
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "<ast.Call object at 0x7c05e6e38f50>"
      ],
      "docstring": "Represents an incident captured from WARNING/ERROR logs."
    },
    "ProblemNode": {
      "name": "ProblemNode",
      "file": "ciris_engine/schemas/services/graph/incident.py",
      "line": 141,
      "bases": [
        "TypedGraphNode"
      ],
      "methods": [
        {
          "name": "to_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 165
        },
        {
          "name": "from_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 188
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "<ast.Call object at 0x7c05e6b7c390>"
      ],
      "docstring": "Represents a problem (root cause) identified from incident patterns."
    },
    "IncidentInsightNode": {
      "name": "IncidentInsightNode",
      "file": "ciris_engine/schemas/services/graph/incident.py",
      "line": 220,
      "bases": [
        "TypedGraphNode"
      ],
      "methods": [
        {
          "name": "to_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 244
        },
        {
          "name": "from_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 263
        }
      ],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [
        "<ast.Call object at 0x7c05e6b1fb50>"
      ],
      "docstring": "Represents insights derived from incident analysis during dream cycles."
    },
    "MemorySearchFilter": {
      "name": "MemorySearchFilter",
      "file": "ciris_engine/schemas/services/graph/memory.py",
      "line": 33,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Filters for memory search operations."
    },
    "GraphQuery": {
      "name": "GraphQuery",
      "file": "ciris_engine/schemas/services/graph/telemetry.py",
      "line": 87,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Query parameters for graph operations."
    },
    "MemoryOperationContext": {
      "name": "MemoryOperationContext",
      "file": "ciris_engine/schemas/services/graph/memory.py",
      "line": 76,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Context for memory operations."
    },
    "TSDBConsolidationConfig": {
      "name": "TSDBConsolidationConfig",
      "file": "ciris_engine/schemas/services/graph/tsdb_consolidation.py",
      "line": 12,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration for TSDB consolidation service."
    },
    "TSDBConsolidationStatus": {
      "name": "TSDBConsolidationStatus",
      "file": "ciris_engine/schemas/services/graph/tsdb_consolidation.py",
      "line": 20,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Status information for TSDB consolidation service."
    },
    "TelemetrySnapshotResult": {
      "name": "TelemetrySnapshotResult",
      "file": "ciris_engine/schemas/services/graph/telemetry.py",
      "line": 13,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of processing a system snapshot for telemetry."
    },
    "TelemetryData": {
      "name": "TelemetryData",
      "file": "ciris_engine/schemas/services/graph/telemetry.py",
      "line": 25,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Structured telemetry data."
    },
    "ResourceData": {
      "name": "ResourceData",
      "file": "ciris_engine/schemas/services/graph/telemetry.py",
      "line": 33,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Structured resource usage data."
    },
    "BehavioralData": {
      "name": "BehavioralData",
      "file": "ciris_engine/schemas/services/graph/telemetry.py",
      "line": 41,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Structured behavioral data (tasks/thoughts)."
    },
    "TelemetryConsolidationResult": {
      "name": "TelemetryConsolidationResult",
      "file": "ciris_engine/schemas/services/graph/telemetry.py",
      "line": 53,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of memory consolidation."
    },
    "CustomMetrics": {
      "name": "CustomMetrics",
      "file": "ciris_engine/schemas/services/graph/telemetry.py",
      "line": 63,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Custom metrics for telemetry service status."
    },
    "TelemetryServiceStatus": {
      "name": "TelemetryServiceStatus",
      "file": "ciris_engine/schemas/services/graph/telemetry.py",
      "line": 74,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Status of the telemetry service."
    },
    "ServiceCapabilities": {
      "name": "ServiceCapabilities",
      "file": "ciris_engine/schemas/services/graph/telemetry.py",
      "line": 96,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Service capabilities declaration."
    },
    "LLMUsageData": {
      "name": "LLMUsageData",
      "file": "ciris_engine/schemas/services/graph/telemetry.py",
      "line": 105,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Structured LLM usage data to replace Dict[str, Any]."
    },
    "TelemetryKwargs": {
      "name": "TelemetryKwargs",
      "file": "ciris_engine/schemas/services/graph/telemetry.py",
      "line": 117,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Structured kwargs for telemetry operations."
    },
    "ServiceTelemetryData": {
      "name": "ServiceTelemetryData",
      "file": "ciris_engine/schemas/services/graph/telemetry.py",
      "line": 128,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Telemetry data for a single service."
    },
    "AggregatedTelemetryMetadata": {
      "name": "AggregatedTelemetryMetadata",
      "file": "ciris_engine/schemas/services/graph/telemetry.py",
      "line": 140,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Metadata for aggregated telemetry response."
    },
    "AggregatedTelemetryResponse": {
      "name": "AggregatedTelemetryResponse",
      "file": "ciris_engine/schemas/services/graph/telemetry.py",
      "line": 149,
      "bases": [
        "BaseModel"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Response from get_aggregated_telemetry() - replaces Dict[str, Any]."
    },
    "RuntimeProtocol": {
      "name": "RuntimeProtocol",
      "file": "ciris_engine/protocols/infrastructure/base.py",
      "line": 35,
      "bases": [
        "ServiceProtocol"
      ],
      "methods": [
        {
          "name": "run",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 39
        },
        {
          "name": "pause",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 44
        },
        {
          "name": "resume",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 49
        },
        {
          "name": "shutdown",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 54
        },
        {
          "name": "get_runtime_stats",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 59
        },
        {
          "name": "health_check",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 64
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for the main CIRIS runtime engine."
    },
    "ServiceInitializerProtocol": {
      "name": "ServiceInitializerProtocol",
      "file": "ciris_engine/protocols/infrastructure/base.py",
      "line": 69,
      "bases": [
        "ServiceProtocol"
      ],
      "methods": [
        {
          "name": "initialize_services",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 73
        },
        {
          "name": "validate_dependencies",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 78
        },
        {
          "name": "bootstrap",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 83
        },
        {
          "name": "get_initialization_order",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 88
        },
        {
          "name": "teardown_services",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 93
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for service initialization and dependency management."
    },
    "BusManagerProtocol": {
      "name": "BusManagerProtocol",
      "file": "ciris_engine/protocols/infrastructure/base.py",
      "line": 98,
      "bases": [
        "ServiceProtocol"
      ],
      "methods": [
        {
          "name": "send",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 102
        },
        {
          "name": "request",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 107
        },
        {
          "name": "subscribe",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 112
        },
        {
          "name": "unsubscribe",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 117
        },
        {
          "name": "get_bus_metrics",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 122
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for message bus management."
    },
    "IdentityVarianceMonitorProtocol": {
      "name": "IdentityVarianceMonitorProtocol",
      "file": "ciris_engine/protocols/infrastructure/base.py",
      "line": 136,
      "bases": [
        "ServiceProtocol"
      ],
      "methods": [
        {
          "name": "measure_drift",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 140
        },
        {
          "name": "get_baseline",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 145
        },
        {
          "name": "update_baseline",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 150
        },
        {
          "name": "alert_on_variance",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 155
        },
        {
          "name": "get_variance_history",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 160
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for monitoring identity drift."
    },
    "ConfigurationFeedbackLoopProtocol": {
      "name": "ConfigurationFeedbackLoopProtocol",
      "file": "ciris_engine/protocols/infrastructure/base.py",
      "line": 165,
      "bases": [
        "ServiceProtocol"
      ],
      "methods": [
        {
          "name": "collect_feedback",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 169
        },
        {
          "name": "analyze_patterns",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 174
        },
        {
          "name": "propose_updates",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 179
        },
        {
          "name": "apply_learning",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 184
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for configuration feedback and learning."
    },
    "AdapterManagerProtocol": {
      "name": "AdapterManagerProtocol",
      "file": "ciris_engine/protocols/infrastructure/base.py",
      "line": 194,
      "bases": [
        "ServiceProtocol"
      ],
      "methods": [
        {
          "name": "register_adapter",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 198
        },
        {
          "name": "start_adapter",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 203
        },
        {
          "name": "stop_adapter",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 208
        },
        {
          "name": "get_active_adapters",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 213
        },
        {
          "name": "route_message",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 218
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for managing platform adapters."
    },
    "PersistenceManagerProtocol": {
      "name": "PersistenceManagerProtocol",
      "file": "ciris_engine/protocols/infrastructure/base.py",
      "line": 228,
      "bases": [
        "ServiceProtocol"
      ],
      "methods": [
        {
          "name": "save_checkpoint",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 232
        },
        {
          "name": "restore_checkpoint",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 237
        },
        {
          "name": "get_checkpoints",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 242
        },
        {
          "name": "cleanup_old_data",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 247
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for managing data persistence."
    },
    "ServiceRegistryProtocol": {
      "name": "ServiceRegistryProtocol",
      "file": "ciris_engine/protocols/infrastructure/base.py",
      "line": 257,
      "bases": [
        "ServiceProtocol"
      ],
      "methods": [
        {
          "name": "register_service",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 261
        },
        {
          "name": "unregister_service",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 266
        },
        {
          "name": "get_service",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 271
        },
        {
          "name": "list_services",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 276
        },
        {
          "name": "health_check_service",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 281
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for service discovery and registration."
    },
    "ServiceProtocol": {
      "name": "ServiceProtocol",
      "file": "ciris_engine/protocols/runtime/base.py",
      "line": 22,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "start",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 26
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 31
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 36
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 41
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 46
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 57
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Root protocol for ALL services in CIRIS."
    },
    "GraphServiceProtocol": {
      "name": "GraphServiceProtocol",
      "file": "ciris_engine/protocols/runtime/base.py",
      "line": 66,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "store_in_graph",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 70
        },
        {
          "name": "query_graph",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 75
        },
        {
          "name": "get_node_type",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 80
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Base for services that store everything in the graph."
    },
    "CoreServiceProtocol": {
      "name": "CoreServiceProtocol",
      "file": "ciris_engine/protocols/runtime/base.py",
      "line": 85,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "get_resource_limits",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 89
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Base for services that cannot be stored in the graph."
    },
    "VisibilityServiceProtocol": {
      "name": "VisibilityServiceProtocol",
      "file": "ciris_engine/protocols/services/governance/visibility.py",
      "line": 11,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "get_current_state",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 15
        },
        {
          "name": "get_reasoning_trace",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 20
        },
        {
          "name": "get_decision_history",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 25
        },
        {
          "name": "explain_action",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 30
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for visibility service."
    },
    "BaseHandlerProtocol": {
      "name": "BaseHandlerProtocol",
      "file": "ciris_engine/protocols/runtime/base.py",
      "line": 103,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "handle",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 107
        },
        {
          "name": "get_action_type",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 112
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Root protocol for all action handlers."
    },
    "BaseAdapterProtocol": {
      "name": "BaseAdapterProtocol",
      "file": "ciris_engine/protocols/runtime/base.py",
      "line": 117,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "start",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 121
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 126
        },
        {
          "name": "get_config",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 131
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 136
        },
        {
          "name": "get_services_to_register",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 141
        },
        {
          "name": "run_lifecycle",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 146
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Root protocol for all platform adapters."
    },
    "BaseDMAProtocol": {
      "name": "BaseDMAProtocol",
      "file": "ciris_engine/protocols/runtime/base.py",
      "line": 151,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "evaluate",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 155
        },
        {
          "name": "get_algorithm_type",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 160
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Root protocol for Decision Making Algorithms."
    },
    "APIAdapterProtocol": {
      "name": "APIAdapterProtocol",
      "file": "ciris_engine/protocols/adapters/base.py",
      "line": 18,
      "bases": [
        "BaseAdapterProtocol"
      ],
      "methods": [
        {
          "name": "setup_routes",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 22
        },
        {
          "name": "handle_request",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 27
        },
        {
          "name": "get_openapi_spec",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 32
        },
        {
          "name": "add_middleware",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 37
        },
        {
          "name": "get_route_metrics",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 42
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for REST API adapter."
    },
    "CLIAdapterProtocol": {
      "name": "CLIAdapterProtocol",
      "file": "ciris_engine/protocols/adapters/base.py",
      "line": 47,
      "bases": [
        "BaseAdapterProtocol"
      ],
      "methods": [
        {
          "name": "register_commands",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 51
        },
        {
          "name": "handle_input",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 56
        },
        {
          "name": "show_prompt",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 61
        },
        {
          "name": "get_command_help",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 66
        },
        {
          "name": "set_output_format",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 71
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for Command Line Interface adapter."
    },
    "DiscordAdapterProtocol": {
      "name": "DiscordAdapterProtocol",
      "file": "ciris_engine/protocols/adapters/base.py",
      "line": 76,
      "bases": [
        "BaseAdapterProtocol"
      ],
      "methods": [
        {
          "name": "setup_bot",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 80
        },
        {
          "name": "handle_message",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 85
        },
        {
          "name": "handle_reaction",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 90
        },
        {
          "name": "send_message",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 95
        },
        {
          "name": "get_guild_config",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 100
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for Discord bot adapter."
    },
    "SlackAdapterProtocol": {
      "name": "SlackAdapterProtocol",
      "file": "ciris_engine/protocols/adapters/base.py",
      "line": 110,
      "bases": [
        "BaseAdapterProtocol"
      ],
      "methods": [
        {
          "name": "handle_event",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 114
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for Slack adapter (future)."
    },
    "WebSocketAdapterProtocol": {
      "name": "WebSocketAdapterProtocol",
      "file": "ciris_engine/protocols/adapters/base.py",
      "line": 119,
      "bases": [
        "BaseAdapterProtocol"
      ],
      "methods": [
        {
          "name": "handle_connection",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 123
        },
        {
          "name": "broadcast_message",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 128
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for WebSocket adapter (future)."
    },
    "MatrixAdapterProtocol": {
      "name": "MatrixAdapterProtocol",
      "file": "ciris_engine/protocols/adapters/base.py",
      "line": 133,
      "bases": [
        "BaseAdapterProtocol"
      ],
      "methods": [
        {
          "name": "handle_room_message",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 137
        },
        {
          "name": "join_room",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 142
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for Matrix protocol adapter (future)."
    },
    "MessageProtocol": {
      "name": "MessageProtocol",
      "file": "ciris_engine/protocols/adapters/message.py",
      "line": 9,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "content",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 17
        },
        {
          "name": "user_id",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 22
        },
        {
          "name": "author_id",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 27
        },
        {
          "name": "channel_id",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 32
        },
        {
          "name": "message_id",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 37
        },
        {
          "name": "id",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 42
        },
        {
          "name": "is_dm",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 47
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [
        "runtime_checkable"
      ],
      "docstring": "Minimal protocol that all adapter messages must satisfy.\n\nBased on actual usage in AdaptiveFilterService."
    },
    "MessageDict": {
      "name": "MessageDict",
      "file": "ciris_engine/protocols/services/runtime/llm.py",
      "line": 12,
      "bases": [
        "TypedDict"
      ],
      "methods": [],
      "is_protocol": false,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Typed dict for LLM messages."
    },
    "ProcessorProtocol": {
      "name": "ProcessorProtocol",
      "file": "ciris_engine/protocols/processors/base.py",
      "line": 17,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "get_supported_states",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 29
        },
        {
          "name": "process",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 41
        },
        {
          "name": "can_process",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 54
        },
        {
          "name": "initialize",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 69
        },
        {
          "name": "cleanup",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 79
        },
        {
          "name": "get_metrics",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 89
        },
        {
          "name": "should_transition",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 99
        },
        {
          "name": "handle_error",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 109
        },
        {
          "name": "get_processor_config",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 123
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for individual state processors.\n\nEach processor handles a specific AgentState and must implement\nthese methods for the AgentProcessor to coordinate them.\n\nNote: Processors are NOT services - they don't implement ServiceProtocol.\nThey are components managed by the AgentProcessor."
    },
    "ProcessingSchedule": {
      "name": "ProcessingSchedule",
      "file": "ciris_engine/protocols/processors/agent.py",
      "line": 21,
      "bases": [
        "Protocol"
      ],
      "methods": [],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Schedule for state transitions."
    },
    "AgentProcessorMetrics": {
      "name": "AgentProcessorMetrics",
      "file": "ciris_engine/protocols/processors/agent.py",
      "line": 30,
      "bases": [
        "Protocol"
      ],
      "methods": [],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Detailed processor metrics."
    },
    "StepResult": {
      "name": "StepResult",
      "file": "ciris_engine/protocols/processors/agent.py",
      "line": 54,
      "bases": [
        "Protocol"
      ],
      "methods": [],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Result of a single-step processing operation."
    },
    "AgentProcessorProtocol": {
      "name": "AgentProcessorProtocol",
      "file": "ciris_engine/protocols/processors/agent.py",
      "line": 64,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "enter_state",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 84
        },
        {
          "name": "get_current_state",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 97
        },
        {
          "name": "get_processing_schedule",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 107
        },
        {
          "name": "force_state_transition",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 122
        },
        {
          "name": "pause_processing",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 140
        },
        {
          "name": "resume_processing",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 153
        },
        {
          "name": "single_step",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 163
        },
        {
          "name": "stop_processing",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 175
        },
        {
          "name": "emergency_stop",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 186
        },
        {
          "name": "get_processor_metrics",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 200
        },
        {
          "name": "get_queue_status",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 210
        },
        {
          "name": "is_paused",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 220
        },
        {
          "name": "is_single_stepping",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 230
        },
        {
          "name": "is_processing",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 240
        },
        {
          "name": "set_processing_speed",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 254
        },
        {
          "name": "skip_current_item",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 264
        },
        {
          "name": "replay_last_item",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 277
        },
        {
          "name": "get_state_history",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 289
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for the main agent processor that coordinates all states.\n\nThis is the central coordinator that:\n- Manages the state machine (WAKEUP \u2192 WORK \u2192 PLAY \u2192 etc.)\n- Handles runtime control commands (pause, resume, stop)\n- Coordinates all sub-processors\n- Provides fine-grained control for debugging and safety\n\nNote: AgentProcessor IS a service (implements ServiceProtocol separately).\nThis protocol defines the processor-specific behavior, not service behavior.\nThe implementation should be: class AgentProcessor(AgentProcessorProtocol, ServiceProtocol)"
    },
    "PDMAProtocol": {
      "name": "PDMAProtocol",
      "file": "ciris_engine/protocols/dma/base.py",
      "line": 18,
      "bases": [
        "BaseDMAProtocol"
      ],
      "methods": [],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Principled Decision Making Algorithm - evaluates ethical implications."
    },
    "CSDMAProtocol": {
      "name": "CSDMAProtocol",
      "file": "ciris_engine/protocols/dma/base.py",
      "line": 28,
      "bases": [
        "BaseDMAProtocol"
      ],
      "methods": [],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Common Sense Decision Making Algorithm - evaluates practical implications."
    },
    "DSDMAProtocol": {
      "name": "DSDMAProtocol",
      "file": "ciris_engine/protocols/dma/base.py",
      "line": 39,
      "bases": [
        "BaseDMAProtocol"
      ],
      "methods": [],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Domain Specific Decision Making Algorithm - evaluates based on agent's job/identity."
    },
    "ActionSelectionDMAProtocol": {
      "name": "ActionSelectionDMAProtocol",
      "file": "ciris_engine/protocols/dma/base.py",
      "line": 50,
      "bases": [
        "BaseDMAProtocol"
      ],
      "methods": [],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Recursive ethical evaluation of action selection itself.\n\nThis DMA performs meta-evaluation: it evaluates the ethics of HOW we choose,\nnot just WHAT we choose. It takes input from all other DMAs and ensures\nthe selection process itself is principled."
    },
    "EmergencyDMAProtocol": {
      "name": "EmergencyDMAProtocol",
      "file": "ciris_engine/protocols/dma/base.py",
      "line": 72,
      "bases": [
        "BaseDMAProtocol"
      ],
      "methods": [
        {
          "name": "evaluate_emergency",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 76
        },
        {
          "name": "get_emergency_level",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 81
        },
        {
          "name": "get_emergency_protocols",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 86
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Emergency Decision Making Algorithm - for critical situations."
    },
    "CollaborativeDMAProtocol": {
      "name": "CollaborativeDMAProtocol",
      "file": "ciris_engine/protocols/dma/base.py",
      "line": 91,
      "bases": [
        "BaseDMAProtocol"
      ],
      "methods": [
        {
          "name": "evaluate_collaborative",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 95
        },
        {
          "name": "get_consensus_score",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 100
        },
        {
          "name": "negotiate_action",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 105
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Collaborative Decision Making Algorithm - for multi-agent scenarios."
    },
    "ResourceMonitorServiceProtocol": {
      "name": "ResourceMonitorServiceProtocol",
      "file": "ciris_engine/protocols/services/infrastructure/resource_monitor.py",
      "line": 19,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 31
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 35
        },
        {
          "name": "record_tokens",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 39
        },
        {
          "name": "check_available",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 47
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [
        "runtime_checkable"
      ],
      "docstring": "Protocol for resource monitoring service.\n\nTracks CPU, memory, disk, token usage and active thoughts.\nEnforces limits through throttle, defer, reject, and shutdown signals.\nCritical for preventing resource exhaustion over centuries of operation."
    },
    "AuthenticationServiceProtocol": {
      "name": "AuthenticationServiceProtocol",
      "file": "ciris_engine/protocols/services/infrastructure/authentication.py",
      "line": 22,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "authenticate",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 26
        },
        {
          "name": "create_token",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 31
        },
        {
          "name": "verify_token",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 36
        },
        {
          "name": "create_wa",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 41
        },
        {
          "name": "revoke_wa",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 48
        },
        {
          "name": "update_wa",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 53
        },
        {
          "name": "list_was",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 60
        },
        {
          "name": "get_wa",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 65
        },
        {
          "name": "rotate_keys",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 70
        },
        {
          "name": "bootstrap_if_needed",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 75
        },
        {
          "name": "create_channel_token",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 80
        },
        {
          "name": "verify_token_sync",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 85
        },
        {
          "name": "update_last_login",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 90
        },
        {
          "name": "create_gateway_token",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 95
        },
        {
          "name": "get_wa_by_oauth",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 100
        },
        {
          "name": "generate_keypair",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 105
        },
        {
          "name": "hash_password",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 110
        },
        {
          "name": "sign_data",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 115
        },
        {
          "name": "sign_task",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 120
        },
        {
          "name": "verify_task_signature",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 129
        },
        {
          "name": "get_system_wa_id",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 138
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for authentication service - identity management."
    },
    "DatabaseMaintenanceServiceProtocol": {
      "name": "DatabaseMaintenanceServiceProtocol",
      "file": "ciris_engine/protocols/services/infrastructure/database_maintenance.py",
      "line": 13,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "perform_startup_cleanup",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 17
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for database maintenance service."
    },
    "ToolServiceProtocol": {
      "name": "ToolServiceProtocol",
      "file": "ciris_engine/protocols/services/runtime/tool.py",
      "line": 11,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "execute_tool",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 15
        },
        {
          "name": "list_tools",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 24
        },
        {
          "name": "get_tool_schema",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 29
        },
        {
          "name": "get_available_tools",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 34
        },
        {
          "name": "get_tool_info",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 43
        },
        {
          "name": "get_all_tool_info",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 55
        },
        {
          "name": "validate_parameters",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 64
        },
        {
          "name": "get_tool_result",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 77
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for tool execution service."
    },
    "LLMServiceProtocol": {
      "name": "LLMServiceProtocol",
      "file": "ciris_engine/protocols/services/runtime/llm.py",
      "line": 19,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "call_llm_structured",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 28
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for LLM service.\n\nThis protocol defines the contract that all LLM services must implement.\nThe primary method is call_llm_structured which uses instructor for\nstructured output parsing."
    },
    "SecretsServiceProtocol": {
      "name": "SecretsServiceProtocol",
      "file": "ciris_engine/protocols/services/runtime/secrets.py",
      "line": 18,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "encrypt",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 22
        },
        {
          "name": "decrypt",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 27
        },
        {
          "name": "store_secret",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 32
        },
        {
          "name": "retrieve_secret",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 37
        },
        {
          "name": "process_incoming_text",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 42
        },
        {
          "name": "decapsulate_secrets_in_parameters",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 47
        },
        {
          "name": "list_stored_secrets",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 54
        },
        {
          "name": "get_filter_config",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 59
        },
        {
          "name": "recall_secret",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 64
        },
        {
          "name": "forget_secret",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 71
        },
        {
          "name": "update_filter_config",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 76
        },
        {
          "name": "get_service_stats",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 83
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 88
        },
        {
          "name": "reencrypt_all",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 93
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for secrets service."
    },
    "RuntimeControlServiceProtocol": {
      "name": "RuntimeControlServiceProtocol",
      "file": "ciris_engine/protocols/services/runtime/runtime_control.py",
      "line": 33,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "pause_processing",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 45
        },
        {
          "name": "resume_processing",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 50
        },
        {
          "name": "single_step",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 55
        },
        {
          "name": "get_processor_queue_status",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 60
        },
        {
          "name": "shutdown_runtime",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 65
        },
        {
          "name": "load_adapter",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 72
        },
        {
          "name": "unload_adapter",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 83
        },
        {
          "name": "list_adapters",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 88
        },
        {
          "name": "get_adapter_info",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 93
        },
        {
          "name": "get_config",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 100
        },
        {
          "name": "update_config",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 105
        },
        {
          "name": "validate_config",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 117
        },
        {
          "name": "backup_config",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 124
        },
        {
          "name": "restore_config",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 129
        },
        {
          "name": "list_config_backups",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 134
        },
        {
          "name": "get_runtime_status",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 141
        },
        {
          "name": "get_runtime_snapshot",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 146
        },
        {
          "name": "get_service_health_status",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 151
        },
        {
          "name": "get_events_history",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 156
        },
        {
          "name": "update_service_priority",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 163
        },
        {
          "name": "reset_circuit_breakers",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 174
        },
        {
          "name": "get_circuit_breaker_status",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 179
        },
        {
          "name": "get_service_selection_explanation",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 184
        },
        {
          "name": "handle_emergency_shutdown",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 191
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for runtime control service.\n\nThis service provides centralized control over the CIRIS runtime,\nincluding processor management, adapter lifecycle, configuration,\nand emergency operations. It's an adapter-provided service (not core)."
    },
    "WAStore": {
      "name": "WAStore",
      "file": "ciris_engine/protocols/services/governance/wa_auth.py",
      "line": 34,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "get_wa_cert",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 38
        },
        {
          "name": "get_wa_cert_by_pubkey",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 43
        },
        {
          "name": "get_wa_cert_by_channel",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 48
        },
        {
          "name": "create_wa_cert",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 53
        },
        {
          "name": "update_wa_cert",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 58
        },
        {
          "name": "list_wa_certs",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 63
        },
        {
          "name": "revoke_wa_cert",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 68
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for WA certificate storage operations."
    },
    "JWTService": {
      "name": "JWTService",
      "file": "ciris_engine/protocols/services/governance/wa_auth.py",
      "line": 73,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "issue_token",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 77
        },
        {
          "name": "verify_token",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 82
        },
        {
          "name": "get_gateway_secret",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 87
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for JWT operations."
    },
    "WACrypto": {
      "name": "WACrypto",
      "file": "ciris_engine/protocols/services/governance/wa_auth.py",
      "line": 92,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "generate_keypair",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 96
        },
        {
          "name": "sign_message",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 101
        },
        {
          "name": "verify_signature",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 106
        },
        {
          "name": "save_private_key",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 111
        },
        {
          "name": "load_private_key",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 116
        },
        {
          "name": "hash_password",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 121
        },
        {
          "name": "verify_password",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 126
        },
        {
          "name": "generate_api_key",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 131
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for cryptographic operations."
    },
    "WAAuthMiddleware": {
      "name": "WAAuthMiddleware",
      "file": "ciris_engine/protocols/services/governance/wa_auth.py",
      "line": 136,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "authenticate",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 140
        },
        {
          "name": "authorize",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 145
        },
        {
          "name": "extract_token",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 150
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for authentication middleware operations."
    },
    "OAuthService": {
      "name": "OAuthService",
      "file": "ciris_engine/protocols/services/governance/wa_auth.py",
      "line": 155,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "get_oauth_providers",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 159
        },
        {
          "name": "save_oauth_provider",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 164
        },
        {
          "name": "get_oauth_url",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 169
        },
        {
          "name": "handle_oauth_callback",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 174
        },
        {
          "name": "create_oauth_wa",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 179
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for OAuth operations."
    },
    "AdaptiveFilterServiceProtocol": {
      "name": "AdaptiveFilterServiceProtocol",
      "file": "ciris_engine/protocols/services/governance/filter.py",
      "line": 11,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "filter_message",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 15
        },
        {
          "name": "get_health",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 29
        },
        {
          "name": "add_filter_trigger",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 34
        },
        {
          "name": "remove_filter_trigger",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 47
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for adaptive filter service."
    },
    "WiseAuthorityServiceProtocol": {
      "name": "WiseAuthorityServiceProtocol",
      "file": "ciris_engine/protocols/services/governance/wise_authority.py",
      "line": 24,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "check_authorization",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 28
        },
        {
          "name": "request_approval",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 33
        },
        {
          "name": "get_guidance",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 38
        },
        {
          "name": "send_deferral",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 43
        },
        {
          "name": "get_pending_deferrals",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 48
        },
        {
          "name": "resolve_deferral",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 53
        },
        {
          "name": "grant_permission",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 58
        },
        {
          "name": "revoke_permission",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 63
        },
        {
          "name": "list_permissions",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 68
        },
        {
          "name": "fetch_guidance",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 73
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for wise authority service - authorization and guidance."
    },
    "CommunicationServiceProtocol": {
      "name": "CommunicationServiceProtocol",
      "file": "ciris_engine/protocols/services/governance/communication.py",
      "line": 26,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "send_message",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 35
        },
        {
          "name": "fetch_messages",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 40
        },
        {
          "name": "get_home_channel_id",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 51
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for adapter-provided communication services.\n\nThis protocol must be implemented by any adapter that wants to provide\ncommunication capabilities to the CIRIS system. Adapters register their\nimplementation with the CommunicationBus at runtime."
    },
    "TimeServiceProtocol": {
      "name": "TimeServiceProtocol",
      "file": "ciris_engine/protocols/services/lifecycle/time.py",
      "line": 10,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "now",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 14
        },
        {
          "name": "now_iso",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 19
        },
        {
          "name": "timestamp",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 24
        },
        {
          "name": "get_uptime",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 29
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for time service - provides consistent time operations."
    },
    "InitializationServiceProtocol": {
      "name": "InitializationServiceProtocol",
      "file": "ciris_engine/protocols/services/lifecycle/initialization.py",
      "line": 12,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "register_step",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 16
        },
        {
          "name": "initialize",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 29
        },
        {
          "name": "verify_initialization",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 34
        },
        {
          "name": "get_initialization_status",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 39
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for initialization service."
    },
    "TaskSchedulerServiceProtocol": {
      "name": "TaskSchedulerServiceProtocol",
      "file": "ciris_engine/protocols/services/lifecycle/scheduler.py",
      "line": 11,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "schedule_task",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 15
        },
        {
          "name": "cancel_task",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 28
        },
        {
          "name": "get_scheduled_tasks",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 33
        },
        {
          "name": "schedule_deferred_task",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 38
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for task scheduler service."
    },
    "ShutdownServiceProtocol": {
      "name": "ShutdownServiceProtocol",
      "file": "ciris_engine/protocols/services/lifecycle/shutdown.py",
      "line": 9,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "request_shutdown",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 13
        },
        {
          "name": "is_shutdown_requested",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 18
        },
        {
          "name": "get_shutdown_reason",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 23
        },
        {
          "name": "register_shutdown_handler",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 28
        },
        {
          "name": "emergency_shutdown",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 33
        },
        {
          "name": "wait_for_shutdown",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 38
        },
        {
          "name": "wait_for_shutdown_async",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 43
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for shutdown service."
    },
    "SelfObservationServiceProtocol": {
      "name": "SelfObservationServiceProtocol",
      "file": "ciris_engine/protocols/services/adaptation/self_observation.py",
      "line": 34,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "analyze_patterns",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 45
        },
        {
          "name": "get_detected_patterns",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 63
        },
        {
          "name": "get_action_frequency",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 79
        },
        {
          "name": "get_pattern_insights",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 94
        },
        {
          "name": "get_learning_summary",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 110
        },
        {
          "name": "get_temporal_patterns",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 122
        },
        {
          "name": "get_pattern_effectiveness",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 137
        },
        {
          "name": "get_analysis_status",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 154
        },
        {
          "name": "initialize_baseline",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 166
        },
        {
          "name": "get_adaptation_status",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 179
        },
        {
          "name": "analyze_observability_window",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 189
        },
        {
          "name": "trigger_adaptation_cycle",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 202
        },
        {
          "name": "get_pattern_library",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 212
        },
        {
          "name": "measure_adaptation_effectiveness",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 222
        },
        {
          "name": "get_improvement_report",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 235
        },
        {
          "name": "resume_after_review",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 248
        },
        {
          "name": "emergency_stop",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 258
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for self-observation service.\n\nImplements continuous observation and pattern detection to enable\nautonomous adaptation through stored insights."
    },
    "IncidentManagementServiceProtocol": {
      "name": "IncidentManagementServiceProtocol",
      "file": "ciris_engine/protocols/services/graph/incident_management.py",
      "line": 21,
      "bases": [
        "GraphServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "process_recent_incidents",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 28
        },
        {
          "name": "get_node_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 42
        },
        {
          "name": "store_in_graph",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 50
        },
        {
          "name": "query_graph",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 61
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 73
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 77
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 81
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 89
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 97
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [
        "runtime_checkable"
      ],
      "docstring": "Protocol for incident management service.\n\nProcesses incidents from logs, detects patterns, identifies problems,\nand generates insights for continuous self-improvement."
    },
    "AuditServiceProtocol": {
      "name": "AuditServiceProtocol",
      "file": "ciris_engine/protocols/services/graph/audit.py",
      "line": 15,
      "bases": [
        "GraphServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "log_action",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 19
        },
        {
          "name": "log_event",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 26
        },
        {
          "name": "log_conscience_event",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 31
        },
        {
          "name": "get_audit_trail",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 38
        },
        {
          "name": "query_audit_trail",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 45
        },
        {
          "name": "verify_audit_integrity",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 50
        },
        {
          "name": "get_verification_report",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 55
        },
        {
          "name": "export_audit_data",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 60
        },
        {
          "name": "query_events",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 67
        },
        {
          "name": "get_event_by_id",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 78
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for audit service."
    },
    "MemoryServiceProtocol": {
      "name": "MemoryServiceProtocol",
      "file": "ciris_engine/protocols/services/graph/memory.py",
      "line": 15,
      "bases": [
        "GraphServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "memorize",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 19
        },
        {
          "name": "recall",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 24
        },
        {
          "name": "forget",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 29
        },
        {
          "name": "memorize_metric",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 34
        },
        {
          "name": "memorize_log",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 41
        },
        {
          "name": "recall_timeseries",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 48
        },
        {
          "name": "export_identity_context",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 60
        },
        {
          "name": "search",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 65
        },
        {
          "name": "create_edge",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 70
        },
        {
          "name": "get_node_edges",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 75
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for memory service - the three universal memory verbs."
    },
    "GraphConfigServiceProtocol": {
      "name": "GraphConfigServiceProtocol",
      "file": "ciris_engine/protocols/services/graph/config.py",
      "line": 12,
      "bases": [
        "GraphServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "get_config",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 16
        },
        {
          "name": "set_config",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 21
        },
        {
          "name": "list_configs",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 26
        },
        {
          "name": "register_config_listener",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 31
        },
        {
          "name": "unregister_config_listener",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 36
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for graph configuration service."
    },
    "TSDBConsolidationServiceProtocol": {
      "name": "TSDBConsolidationServiceProtocol",
      "file": "ciris_engine/protocols/services/graph/tsdb_consolidation.py",
      "line": 21,
      "bases": [
        "GraphServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "start",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 29
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 34
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 39
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 48
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 57
        },
        {
          "name": "get_node_type",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 66
        },
        {
          "name": "get_summary_for_period",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 75
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [
        "runtime_checkable"
      ],
      "docstring": "Protocol for TSDB consolidation service.\n\nConsolidates TSDB telemetry nodes into 6-hour summaries for permanent storage.\nRuns every 6 hours and deletes raw nodes older than 24 hours."
    },
    "TelemetryServiceProtocol": {
      "name": "TelemetryServiceProtocol",
      "file": "ciris_engine/protocols/services/graph/telemetry.py",
      "line": 10,
      "bases": [
        "GraphServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "record_metric",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 14
        },
        {
          "name": "query_metrics",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 25
        },
        {
          "name": "get_metric_summary",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 36
        },
        {
          "name": "get_metric_count",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 41
        },
        {
          "name": "get_telemetry_summary",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 46
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for telemetry service."
    }
  },
  "protocol_map": {
    "PipelineControlProtocol": {
      "name": "PipelineControlProtocol",
      "file": "ciris_engine/protocols/pipeline_control.py",
      "line": 14,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "should_pause_at",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 17
        },
        {
          "name": "pause_at_step_point",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 21
        },
        {
          "name": "wait_for_resume",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 37
        },
        {
          "name": "should_abort",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 41
        },
        {
          "name": "get_pipeline_state",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 45
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for controlling pipeline execution and step points."
    },
    "ConsentManagerProtocol": {
      "name": "ConsentManagerProtocol",
      "file": "ciris_engine/protocols/consent.py",
      "line": 22,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "get_consent",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 29
        },
        {
          "name": "grant_consent",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 38
        },
        {
          "name": "revoke_consent",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 47
        },
        {
          "name": "check_expiry",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 56
        },
        {
          "name": "get_impact_report",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 65
        },
        {
          "name": "get_audit_trail",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 74
        },
        {
          "name": "cleanup_expired",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 82
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for managing user consent.\nNO FAKE DATA - if consent doesn't exist, FAIL FAST."
    },
    "ConscienceInterface": {
      "name": "ConscienceInterface",
      "file": "ciris_engine/logic/conscience/interface.py",
      "line": 10,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "check",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 13
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [
        "runtime_checkable"
      ],
      "docstring": "Protocol for all conscience implementations."
    },
    "HealthCheckProtocol": {
      "name": "HealthCheckProtocol",
      "file": "ciris_engine/logic/registries/base.py",
      "line": 52,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 55
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for services that support health checking"
    },
    "GraphNodeConvertible": {
      "name": "GraphNodeConvertible",
      "file": "ciris_engine/logic/services/base_graph_service.py",
      "line": 15,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "to_graph_node",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 18
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for objects that can be converted to GraphNode."
    },
    "BaseGraphService": {
      "name": "BaseGraphService",
      "file": "ciris_engine/logic/services/graph/base.py",
      "line": 26,
      "bases": [
        "ABC",
        "GraphServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 36
        },
        {
          "name": "_set_memory_bus",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 54
        },
        {
          "name": "_set_time_service",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 58
        },
        {
          "name": "start",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 62
        },
        {
          "name": "stop",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 82
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 86
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 94
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 98
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 107
        },
        {
          "name": "_track_request",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 111
        },
        {
          "name": "_track_error",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 118
        },
        {
          "name": "_update_telemetry",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 124
        },
        {
          "name": "store_in_graph",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 155
        },
        {
          "name": "query_graph",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 176
        },
        {
          "name": "get_node_type",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 206
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Base class for all graph services providing common functionality.\n\nGraph services store their data through the MemoryBus, which provides:\n- Multiple backend support (Neo4j, ArangoDB, in-memory)\n- Secret detection and encryption\n- Audit trail integration\n- Typed schema validation"
    },
    "BaseService": {
      "name": "BaseService",
      "file": "ciris_engine/logic/services/base_service.py",
      "line": 24,
      "bases": [
        "ABC",
        "ServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 48
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 87
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": true,
          "is_private": true,
          "line": 92
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": true,
          "is_private": true,
          "line": 97
        },
        {
          "name": "_on_start",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 103
        },
        {
          "name": "_on_stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 107
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 111
        },
        {
          "name": "_get_metadata",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 115
        },
        {
          "name": "_register_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 121
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 128
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 154
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 173
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 178
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 192
        },
        {
          "name": "_now",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 206
        },
        {
          "name": "_calculate_uptime",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 212
        },
        {
          "name": "_collect_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 218
        },
        {
          "name": "get_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 234
        },
        {
          "name": "_track_request",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 245
        },
        {
          "name": "_track_error",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 249
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Base class for all CIRIS services.\n\nProvides:\n- Lifecycle management (start/stop)\n- Health checking\n- Status reporting\n- Metrics collection\n- Dependency tracking\n- Error tracking\n\nSubclasses MUST implement:\n- get_service_type() -> ServiceType\n- _get_actions() -> List[str]\n- _check_dependencies() -> bool\n\nSubclasses MAY override:\n- _on_start() -> None (for custom startup logic)\n- _on_stop() -> None (for custom cleanup)\n- _collect_custom_metrics() -> Dict[str, float]\n- _get_metadata() -> ServiceMetadata"
    },
    "ResourceMonitorService": {
      "name": "ResourceMonitorService",
      "file": "ciris_engine/logic/services/infrastructure/resource_monitor.py",
      "line": 44,
      "bases": [
        "BaseScheduledService",
        "ResourceMonitorServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 47
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 72
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 76
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 87
        },
        {
          "name": "_on_start",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 91
        },
        {
          "name": "_on_stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 96
        },
        {
          "name": "_run_scheduled_task",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 101
        },
        {
          "name": "_update_snapshot",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 106
        },
        {
          "name": "_check_limits",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 144
        },
        {
          "name": "_check_resource",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 156
        },
        {
          "name": "_take_action",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 165
        },
        {
          "name": "record_tokens",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 182
        },
        {
          "name": "check_available",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 186
        },
        {
          "name": "_count_active_thoughts",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 195
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 205
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 229
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 234
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Monitor system resources and enforce limits."
    },
    "AuthenticationService": {
      "name": "AuthenticationService",
      "file": "ciris_engine/logic/services/infrastructure/authentication.py",
      "line": 50,
      "bases": [
        "BaseInfrastructureService",
        "AuthenticationServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 53
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 95
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 101
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 128
        },
        {
          "name": "_encode_public_key",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 134
        },
        {
          "name": "_decode_public_key",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 139
        },
        {
          "name": "_derive_encryption_key",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 147
        },
        {
          "name": "_encrypt_secret",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 180
        },
        {
          "name": "_decrypt_secret",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 204
        },
        {
          "name": "_get_or_create_gateway_secret",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 244
        },
        {
          "name": "_init_database",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 276
        },
        {
          "name": "get_wa",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 288
        },
        {
          "name": "_get_wa_by_kid",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 322
        },
        {
          "name": "get_wa_by_oauth",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 356
        },
        {
          "name": "_get_wa_by_adapter",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 393
        },
        {
          "name": "_store_wa_certificate",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 427
        },
        {
          "name": "_create_adapter_observer",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 470
        },
        {
          "name": "update_wa",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 498
        },
        {
          "name": "revoke_wa",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 534
        },
        {
          "name": "_list_all_was",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 547
        },
        {
          "name": "update_last_login",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 589
        },
        {
          "name": "create_channel_token",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 597
        },
        {
          "name": "create_gateway_token",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 636
        },
        {
          "name": "_create_authority_token",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 654
        },
        {
          "name": "_verify_jwt_and_get_context",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 672
        },
        {
          "name": "generate_keypair",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 784
        },
        {
          "name": "sign_data",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 801
        },
        {
          "name": "_verify_signature",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 807
        },
        {
          "name": "hash_password",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 819
        },
        {
          "name": "_verify_password",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 831
        },
        {
          "name": "_generate_api_key",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 852
        },
        {
          "name": "_generate_wa_id",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 858
        },
        {
          "name": "authenticate",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 882
        },
        {
          "name": "create_token",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 928
        },
        {
          "name": "verify_token",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 943
        },
        {
          "name": "create_wa",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 976
        },
        {
          "name": "list_was",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1006
        },
        {
          "name": "rotate_keys",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1010
        },
        {
          "name": "_verify_token_internal",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1029
        },
        {
          "name": "_require_scope",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1049
        },
        {
          "name": "_require_wa_auth",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1108
        },
        {
          "name": "_get_adapter_token",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1192
        },
        {
          "name": "_get_system_wa",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1198
        },
        {
          "name": "get_system_wa_id",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1206
        },
        {
          "name": "_create_system_wa_certificate",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1211
        },
        {
          "name": "sign_task",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1274
        },
        {
          "name": "verify_task_signature",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1313
        },
        {
          "name": "bootstrap_if_needed",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1343
        },
        {
          "name": "_create_channel_token_for_adapter",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1385
        },
        {
          "name": "verify_token_sync",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1416
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1448
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1479
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1547
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1554
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1563
        },
        {
          "name": "get_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1589
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1616
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Infrastructure service for WA authentication and identity management."
    },
    "TimeService": {
      "name": "TimeService",
      "file": "ciris_engine/logic/services/lifecycle/time.py",
      "line": 26,
      "bases": [
        "BaseInfrastructureService",
        "TimeServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 29
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 51
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 55
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 59
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 64
        },
        {
          "name": "_now",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 84
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 88
        },
        {
          "name": "now",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 115
        },
        {
          "name": "now_iso",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 125
        },
        {
          "name": "timestamp",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 135
        },
        {
          "name": "get_uptime",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 145
        },
        {
          "name": "_check_ntp_drift_if_needed",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 157
        },
        {
          "name": "_update_ntp_offset",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 169
        },
        {
          "name": "_simulate_drift",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 199
        },
        {
          "name": "get_ntp_offset",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 209
        },
        {
          "name": "get_adjusted_time",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 218
        },
        {
          "name": "get_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 229
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Secure time service implementation."
    },
    "InitializationService": {
      "name": "InitializationService",
      "file": "ciris_engine/logic/services/lifecycle/initialization.py",
      "line": 38,
      "bases": [
        "BaseInfrastructureService",
        "InitializationServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 41
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 59
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 63
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 67
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 72
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 97
        },
        {
          "name": "get_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 117
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 145
        },
        {
          "name": "register_step",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 152
        },
        {
          "name": "initialize",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 178
        },
        {
          "name": "verify_initialization",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 227
        },
        {
          "name": "_is_initialized",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 245
        },
        {
          "name": "get_initialization_status",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 249
        },
        {
          "name": "_execute_phase",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 265
        },
        {
          "name": "_execute_step",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 285
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Service for coordinating system initialization."
    },
    "TaskSchedulerService": {
      "name": "TaskSchedulerService",
      "file": "ciris_engine/logic/services/lifecycle/scheduler.py",
      "line": 37,
      "bases": [
        "BaseScheduledService",
        "TaskSchedulerServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 45
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 61
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 65
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 69
        },
        {
          "name": "_on_start",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 73
        },
        {
          "name": "_on_stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 82
        },
        {
          "name": "_load_active_tasks",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 87
        },
        {
          "name": "_create_scheduled_task",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 100
        },
        {
          "name": "_run_scheduled_task",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 126
        },
        {
          "name": "_get_due_tasks",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 135
        },
        {
          "name": "_is_task_due",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 145
        },
        {
          "name": "_should_trigger_cron",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 158
        },
        {
          "name": "_trigger_task",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 187
        },
        {
          "name": "_update_task_triggered",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 254
        },
        {
          "name": "_complete_task",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 272
        },
        {
          "name": "schedule_task",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 283
        },
        {
          "name": "schedule_deferred_task",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 346
        },
        {
          "name": "cancel_task",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 393
        },
        {
          "name": "get_scheduled_tasks",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 412
        },
        {
          "name": "_defer_task",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 437
        },
        {
          "name": "_handle_shutdown",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 470
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 488
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 505
        },
        {
          "name": "_validate_cron_expression",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 540
        },
        {
          "name": "_get_next_cron_time",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 562
        },
        {
          "name": "get_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 584
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 604
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Manages scheduled tasks and integrates with the DEFER system.\n\nThis service enables agents to be proactive by scheduling future actions,\neither through one-time deferrals or recurring schedules."
    },
    "ShutdownService": {
      "name": "ShutdownService",
      "file": "ciris_engine/logic/services/lifecycle/shutdown.py",
      "line": 22,
      "bases": [
        "BaseInfrastructureService",
        "ShutdownServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 25
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 45
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 55
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 61
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 65
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 75
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 80
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 105
        },
        {
          "name": "get_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 122
        },
        {
          "name": "request_shutdown",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 149
        },
        {
          "name": "_request_shutdown_sync",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 160
        },
        {
          "name": "register_shutdown_handler",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 186
        },
        {
          "name": "_register_async_shutdown_handler",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 197
        },
        {
          "name": "is_shutdown_requested",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 208
        },
        {
          "name": "_wait_for_shutdown",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 212
        },
        {
          "name": "get_shutdown_reason",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 224
        },
        {
          "name": "_execute_sync_handlers",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 228
        },
        {
          "name": "_execute_async_handlers",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 240
        },
        {
          "name": "wait_for_shutdown",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 255
        },
        {
          "name": "wait_for_shutdown_async",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 262
        },
        {
          "name": "emergency_shutdown",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 266
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Service for coordinating graceful shutdown."
    },
    "SelfObservationService": {
      "name": "SelfObservationService",
      "file": "ciris_engine/logic/services/adaptation/self_observation.py",
      "line": 83,
      "bases": [
        "BaseScheduledService",
        "SelfObservationServiceProtocol",
        "ServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 97
        },
        {
          "name": "_set_service_registry",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 147
        },
        {
          "name": "_initialize_components",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 165
        },
        {
          "name": "_initialize_identity_baseline",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 197
        },
        {
          "name": "_run_scheduled_task",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 229
        },
        {
          "name": "_should_run_observation_cycle",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 242
        },
        {
          "name": "_run_observation_cycle",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 268
        },
        {
          "name": "_store_cycle_event",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 358
        },
        {
          "name": "_store_cycle_summary",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 378
        },
        {
          "name": "get_adaptation_status",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 411
        },
        {
          "name": "resume_after_review",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 441
        },
        {
          "name": "emergency_stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 476
        },
        {
          "name": "_on_start",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 499
        },
        {
          "name": "_on_stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 511
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 528
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 544
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 568
        },
        {
          "name": "initialize_baseline",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 591
        },
        {
          "name": "analyze_observability_window",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 598
        },
        {
          "name": "trigger_adaptation_cycle",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 648
        },
        {
          "name": "get_pattern_library",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 676
        },
        {
          "name": "measure_adaptation_effectiveness",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 718
        },
        {
          "name": "get_improvement_report",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 743
        },
        {
          "name": "analyze_patterns",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 783
        },
        {
          "name": "get_detected_patterns",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 802
        },
        {
          "name": "get_action_frequency",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 826
        },
        {
          "name": "get_pattern_insights",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 882
        },
        {
          "name": "get_learning_summary",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 931
        },
        {
          "name": "get_temporal_patterns",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 978
        },
        {
          "name": "get_pattern_effectiveness",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1008
        },
        {
          "name": "get_analysis_status",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1033
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1055
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1062
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1074
        },
        {
          "name": "get_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1078
        },
        {
          "name": "get_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1125
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1142
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Service that enables self-observation, pattern detection, and insight generation.\n\nThis service:\n1. Coordinates between variance monitoring, pattern detection, and telemetry\n2. Manages the adaptation lifecycle with safety checks\n3. Ensures changes stay within the 20% identity variance threshold\n4. Provides a unified interface for self-configuration\n\nThe flow:\nExperience \u2192 Telemetry \u2192 Patterns \u2192 Insights \u2192 Agent Decisions \u2192 Config Changes"
    },
    "GraphAuditService": {
      "name": "GraphAuditService",
      "file": "ciris_engine/logic/services/graph/audit_service.py",
      "line": 68,
      "bases": [
        "BaseGraphService",
        "AuditServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 80
        },
        {
          "name": "_set_service_registry",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 152
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 168
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 195
        },
        {
          "name": "log_action",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 236
        },
        {
          "name": "log_event",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 275
        },
        {
          "name": "log_conscience_event",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 383
        },
        {
          "name": "get_audit_trail",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 403
        },
        {
          "name": "query_audit_trail",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 458
        },
        {
          "name": "verify_audit_integrity",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 562
        },
        {
          "name": "get_verification_report",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 619
        },
        {
          "name": "export_audit_data",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 654
        },
        {
          "name": "get_node_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 710
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 716
        },
        {
          "name": "get_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 740
        },
        {
          "name": "_store_entry_in_graph",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 791
        },
        {
          "name": "_create_trace_correlation",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 830
        },
        {
          "name": "_initialize_hash_chain",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 912
        },
        {
          "name": "_init_components_sync",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 948
        },
        {
          "name": "_init_database",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 960
        },
        {
          "name": "_add_to_hash_chain",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1025
        },
        {
          "name": "_cache_entry",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1083
        },
        {
          "name": "_export_worker",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1089
        },
        {
          "name": "_flush_exports",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1102
        },
        {
          "name": "_export_jsonl",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1119
        },
        {
          "name": "_export_csv",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1129
        },
        {
          "name": "_export_sqlite",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1158
        },
        {
          "name": "_get_severity",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1204
        },
        {
          "name": "_calculate_hours",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1213
        },
        {
          "name": "_matches_filters",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1225
        },
        {
          "name": "_tsdb_to_audit_entry",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1261
        },
        {
          "name": "_convert_timeseries_to_entries",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1335
        },
        {
          "name": "query_events",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1356
        },
        {
          "name": "get_event_by_id",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1388
        },
        {
          "name": "_audit_request_to_entry",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1425
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1445
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1449
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1468
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Consolidated audit service that stores all audit entries in the graph.\n\nFeatures:\n- Primary storage in graph (everything is memory)\n- Optional file export for compliance\n- Cryptographic hash chain for integrity\n- Digital signatures for non-repudiation\n- Unified interface for all audit operations"
    },
    "GraphTelemetryService": {
      "name": "GraphTelemetryService",
      "file": "ciris_engine/logic/services/graph/telemetry_service.py",
      "line": 1082,
      "bases": [
        "BaseGraphService",
        "TelemetryServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1096
        },
        {
          "name": "_set_runtime",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1127
        },
        {
          "name": "_set_service_registry",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1136
        },
        {
          "name": "_now",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1158
        },
        {
          "name": "record_metric",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1168
        },
        {
          "name": "_record_resource_usage",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1230
        },
        {
          "name": "query_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1284
        },
        {
          "name": "get_metric_summary",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1361
        },
        {
          "name": "_get_service_status",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1389
        },
        {
          "name": "_get_resource_limits",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1449
        },
        {
          "name": "_process_system_snapshot",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1453
        },
        {
          "name": "_store_telemetry_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1554
        },
        {
          "name": "_store_resource_usage",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1577
        },
        {
          "name": "_store_behavioral_data",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1632
        },
        {
          "name": "_store_social_context",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1653
        },
        {
          "name": "_store_identity_context",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 1674
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1700
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1706
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 1725
        },
        {
          "name": "get_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1767
        },
        {
          "name": "get_node_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 1816
        },
        {
          "name": "get_metric_count",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1820
        },
        {
          "name": "get_telemetry_summary",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 1855
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 2111
        },
        {
          "name": "_init_telemetry_aggregator",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 2115
        },
        {
          "name": "_check_cache",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 2137
        },
        {
          "name": "_convert_telemetry_to_services",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 2149
        },
        {
          "name": "get_aggregated_telemetry",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 2169
        },
        {
          "name": "_store_correlation",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 2231
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 2314
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 2327
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Consolidated TelemetryService that stores all metrics as graph memories.\n\nThis service implements the vision where \"everything is a memory\" by\nconverting telemetry data into TSDBGraphNodes stored in the memory graph.\n\nFeatures:\n- Processes SystemSnapshot data from adapters\n- Records operational metrics and resource usage\n- Stores behavioral, social, and identity context\n- Applies grace-based wisdom to memory consolidation"
    },
    "LocalGraphMemoryService": {
      "name": "LocalGraphMemoryService",
      "file": "ciris_engine/logic/services/graph/memory_service.py",
      "line": 45,
      "bases": [
        "BaseGraphService",
        "MemoryService",
        "GraphMemoryServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 48
        },
        {
          "name": "memorize",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 62
        },
        {
          "name": "recall",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 80
        },
        {
          "name": "forget",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 306
        },
        {
          "name": "export_identity_context",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 325
        },
        {
          "name": "_process_secrets_for_memorize",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 337
        },
        {
          "name": "_process_secrets_for_recall",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 377
        },
        {
          "name": "_process_secrets_for_forget",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 422
        },
        {
          "name": "recall_timeseries",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 448
        },
        {
          "name": "memorize_metric",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 580
        },
        {
          "name": "create_edge",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 636
        },
        {
          "name": "get_node_edges",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 650
        },
        {
          "name": "memorize_log",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 661
        },
        {
          "name": "search",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 748
        },
        {
          "name": "start",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 832
        },
        {
          "name": "stop",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 841
        },
        {
          "name": "_collect_custom_metrics",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 847
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 905
        },
        {
          "name": "store_in_graph",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 921
        },
        {
          "name": "query_graph",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 932
        },
        {
          "name": "get_node_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 936
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 942
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 946
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 961
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Graph memory backed by the persistence database."
    },
    "GraphConfigService": {
      "name": "GraphConfigService",
      "file": "ciris_engine/logic/services/graph/config_service.py",
      "line": 28,
      "bases": [
        "BaseGraphService",
        "GraphConfigServiceProtocol"
      ],
      "methods": [
        {
          "name": "__init__",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 31
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 47
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 53
        },
        {
          "name": "get_metrics",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 59
        },
        {
          "name": "store_in_graph",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 94
        },
        {
          "name": "query_graph",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 110
        },
        {
          "name": "_query_config_by_key",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 121
        },
        {
          "name": "get_node_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 141
        },
        {
          "name": "get_config",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 145
        },
        {
          "name": "set_config",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 182
        },
        {
          "name": "list_configs",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 255
        },
        {
          "name": "register_config_listener",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 282
        },
        {
          "name": "unregister_config_listener",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 298
        },
        {
          "name": "_notify_listeners",
          "is_async": true,
          "is_abstract": false,
          "is_private": true,
          "line": 305
        },
        {
          "name": "get_service_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 334
        },
        {
          "name": "_get_actions",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 338
        },
        {
          "name": "_check_dependencies",
          "is_async": false,
          "is_abstract": false,
          "is_private": true,
          "line": 349
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Configuration service that stores all config as graph memories."
    },
    "RuntimeProtocol": {
      "name": "RuntimeProtocol",
      "file": "ciris_engine/protocols/infrastructure/base.py",
      "line": 35,
      "bases": [
        "ServiceProtocol"
      ],
      "methods": [
        {
          "name": "run",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 39
        },
        {
          "name": "pause",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 44
        },
        {
          "name": "resume",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 49
        },
        {
          "name": "shutdown",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 54
        },
        {
          "name": "get_runtime_stats",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 59
        },
        {
          "name": "health_check",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 64
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for the main CIRIS runtime engine."
    },
    "ServiceInitializerProtocol": {
      "name": "ServiceInitializerProtocol",
      "file": "ciris_engine/protocols/infrastructure/base.py",
      "line": 69,
      "bases": [
        "ServiceProtocol"
      ],
      "methods": [
        {
          "name": "initialize_services",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 73
        },
        {
          "name": "validate_dependencies",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 78
        },
        {
          "name": "bootstrap",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 83
        },
        {
          "name": "get_initialization_order",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 88
        },
        {
          "name": "teardown_services",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 93
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for service initialization and dependency management."
    },
    "IdentityVarianceMonitorProtocol": {
      "name": "IdentityVarianceMonitorProtocol",
      "file": "ciris_engine/protocols/infrastructure/base.py",
      "line": 136,
      "bases": [
        "ServiceProtocol"
      ],
      "methods": [
        {
          "name": "measure_drift",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 140
        },
        {
          "name": "get_baseline",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 145
        },
        {
          "name": "update_baseline",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 150
        },
        {
          "name": "alert_on_variance",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 155
        },
        {
          "name": "get_variance_history",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 160
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for monitoring identity drift."
    },
    "ConfigurationFeedbackLoopProtocol": {
      "name": "ConfigurationFeedbackLoopProtocol",
      "file": "ciris_engine/protocols/infrastructure/base.py",
      "line": 165,
      "bases": [
        "ServiceProtocol"
      ],
      "methods": [
        {
          "name": "collect_feedback",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 169
        },
        {
          "name": "analyze_patterns",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 174
        },
        {
          "name": "propose_updates",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 179
        },
        {
          "name": "apply_learning",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 184
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for configuration feedback and learning."
    },
    "VisibilityServiceProtocol": {
      "name": "VisibilityServiceProtocol",
      "file": "ciris_engine/protocols/services/governance/visibility.py",
      "line": 11,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "get_current_state",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 15
        },
        {
          "name": "get_reasoning_trace",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 20
        },
        {
          "name": "get_decision_history",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 25
        },
        {
          "name": "explain_action",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 30
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for visibility service."
    },
    "ResourceMonitorServiceProtocol": {
      "name": "ResourceMonitorServiceProtocol",
      "file": "ciris_engine/protocols/services/infrastructure/resource_monitor.py",
      "line": 19,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 31
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 35
        },
        {
          "name": "record_tokens",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 39
        },
        {
          "name": "check_available",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 47
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [
        "runtime_checkable"
      ],
      "docstring": "Protocol for resource monitoring service.\n\nTracks CPU, memory, disk, token usage and active thoughts.\nEnforces limits through throttle, defer, reject, and shutdown signals.\nCritical for preventing resource exhaustion over centuries of operation."
    },
    "AuthenticationServiceProtocol": {
      "name": "AuthenticationServiceProtocol",
      "file": "ciris_engine/protocols/services/infrastructure/authentication.py",
      "line": 22,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "authenticate",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 26
        },
        {
          "name": "create_token",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 31
        },
        {
          "name": "verify_token",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 36
        },
        {
          "name": "create_wa",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 41
        },
        {
          "name": "revoke_wa",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 48
        },
        {
          "name": "update_wa",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 53
        },
        {
          "name": "list_was",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 60
        },
        {
          "name": "get_wa",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 65
        },
        {
          "name": "rotate_keys",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 70
        },
        {
          "name": "bootstrap_if_needed",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 75
        },
        {
          "name": "create_channel_token",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 80
        },
        {
          "name": "verify_token_sync",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 85
        },
        {
          "name": "update_last_login",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 90
        },
        {
          "name": "create_gateway_token",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 95
        },
        {
          "name": "get_wa_by_oauth",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 100
        },
        {
          "name": "generate_keypair",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 105
        },
        {
          "name": "hash_password",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 110
        },
        {
          "name": "sign_data",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 115
        },
        {
          "name": "sign_task",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 120
        },
        {
          "name": "verify_task_signature",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 129
        },
        {
          "name": "get_system_wa_id",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 138
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for authentication service - identity management."
    },
    "DatabaseMaintenanceServiceProtocol": {
      "name": "DatabaseMaintenanceServiceProtocol",
      "file": "ciris_engine/protocols/services/infrastructure/database_maintenance.py",
      "line": 13,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "perform_startup_cleanup",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 17
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for database maintenance service."
    },
    "WAStore": {
      "name": "WAStore",
      "file": "ciris_engine/protocols/services/governance/wa_auth.py",
      "line": 34,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "get_wa_cert",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 38
        },
        {
          "name": "get_wa_cert_by_pubkey",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 43
        },
        {
          "name": "get_wa_cert_by_channel",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 48
        },
        {
          "name": "create_wa_cert",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 53
        },
        {
          "name": "update_wa_cert",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 58
        },
        {
          "name": "list_wa_certs",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 63
        },
        {
          "name": "revoke_wa_cert",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 68
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for WA certificate storage operations."
    },
    "JWTService": {
      "name": "JWTService",
      "file": "ciris_engine/protocols/services/governance/wa_auth.py",
      "line": 73,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "issue_token",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 77
        },
        {
          "name": "verify_token",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 82
        },
        {
          "name": "get_gateway_secret",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 87
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for JWT operations."
    },
    "WACrypto": {
      "name": "WACrypto",
      "file": "ciris_engine/protocols/services/governance/wa_auth.py",
      "line": 92,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "generate_keypair",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 96
        },
        {
          "name": "sign_message",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 101
        },
        {
          "name": "verify_signature",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 106
        },
        {
          "name": "save_private_key",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 111
        },
        {
          "name": "load_private_key",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 116
        },
        {
          "name": "hash_password",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 121
        },
        {
          "name": "verify_password",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 126
        },
        {
          "name": "generate_api_key",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 131
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for cryptographic operations."
    },
    "WAAuthMiddleware": {
      "name": "WAAuthMiddleware",
      "file": "ciris_engine/protocols/services/governance/wa_auth.py",
      "line": 136,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "authenticate",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 140
        },
        {
          "name": "authorize",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 145
        },
        {
          "name": "extract_token",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 150
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for authentication middleware operations."
    },
    "OAuthService": {
      "name": "OAuthService",
      "file": "ciris_engine/protocols/services/governance/wa_auth.py",
      "line": 155,
      "bases": [
        "Protocol"
      ],
      "methods": [
        {
          "name": "get_oauth_providers",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 159
        },
        {
          "name": "save_oauth_provider",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 164
        },
        {
          "name": "get_oauth_url",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 169
        },
        {
          "name": "handle_oauth_callback",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 174
        },
        {
          "name": "create_oauth_wa",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 179
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for OAuth operations."
    },
    "AdaptiveFilterServiceProtocol": {
      "name": "AdaptiveFilterServiceProtocol",
      "file": "ciris_engine/protocols/services/governance/filter.py",
      "line": 11,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "filter_message",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 15
        },
        {
          "name": "get_health",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 29
        },
        {
          "name": "add_filter_trigger",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 34
        },
        {
          "name": "remove_filter_trigger",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 47
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for adaptive filter service."
    },
    "WiseAuthorityServiceProtocol": {
      "name": "WiseAuthorityServiceProtocol",
      "file": "ciris_engine/protocols/services/governance/wise_authority.py",
      "line": 24,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "check_authorization",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 28
        },
        {
          "name": "request_approval",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 33
        },
        {
          "name": "get_guidance",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 38
        },
        {
          "name": "send_deferral",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 43
        },
        {
          "name": "get_pending_deferrals",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 48
        },
        {
          "name": "resolve_deferral",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 53
        },
        {
          "name": "grant_permission",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 58
        },
        {
          "name": "revoke_permission",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 63
        },
        {
          "name": "list_permissions",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 68
        },
        {
          "name": "fetch_guidance",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 73
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for wise authority service - authorization and guidance."
    },
    "CommunicationServiceProtocol": {
      "name": "CommunicationServiceProtocol",
      "file": "ciris_engine/protocols/services/governance/communication.py",
      "line": 26,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "send_message",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 35
        },
        {
          "name": "fetch_messages",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 40
        },
        {
          "name": "get_home_channel_id",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 51
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for adapter-provided communication services.\n\nThis protocol must be implemented by any adapter that wants to provide\ncommunication capabilities to the CIRIS system. Adapters register their\nimplementation with the CommunicationBus at runtime."
    },
    "TimeServiceProtocol": {
      "name": "TimeServiceProtocol",
      "file": "ciris_engine/protocols/services/lifecycle/time.py",
      "line": 10,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "now",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 14
        },
        {
          "name": "now_iso",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 19
        },
        {
          "name": "timestamp",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 24
        },
        {
          "name": "get_uptime",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 29
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for time service - provides consistent time operations."
    },
    "InitializationServiceProtocol": {
      "name": "InitializationServiceProtocol",
      "file": "ciris_engine/protocols/services/lifecycle/initialization.py",
      "line": 12,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "register_step",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 16
        },
        {
          "name": "initialize",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 29
        },
        {
          "name": "verify_initialization",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 34
        },
        {
          "name": "get_initialization_status",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 39
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for initialization service."
    },
    "TaskSchedulerServiceProtocol": {
      "name": "TaskSchedulerServiceProtocol",
      "file": "ciris_engine/protocols/services/lifecycle/scheduler.py",
      "line": 11,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "schedule_task",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 15
        },
        {
          "name": "cancel_task",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 28
        },
        {
          "name": "get_scheduled_tasks",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 33
        },
        {
          "name": "schedule_deferred_task",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 38
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for task scheduler service."
    },
    "ShutdownServiceProtocol": {
      "name": "ShutdownServiceProtocol",
      "file": "ciris_engine/protocols/services/lifecycle/shutdown.py",
      "line": 9,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "request_shutdown",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 13
        },
        {
          "name": "is_shutdown_requested",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 18
        },
        {
          "name": "get_shutdown_reason",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 23
        },
        {
          "name": "register_shutdown_handler",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 28
        },
        {
          "name": "emergency_shutdown",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 33
        },
        {
          "name": "wait_for_shutdown",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 38
        },
        {
          "name": "wait_for_shutdown_async",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 43
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for shutdown service."
    },
    "SelfObservationServiceProtocol": {
      "name": "SelfObservationServiceProtocol",
      "file": "ciris_engine/protocols/services/adaptation/self_observation.py",
      "line": 34,
      "bases": [
        "ServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "analyze_patterns",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 45
        },
        {
          "name": "get_detected_patterns",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 63
        },
        {
          "name": "get_action_frequency",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 79
        },
        {
          "name": "get_pattern_insights",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 94
        },
        {
          "name": "get_learning_summary",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 110
        },
        {
          "name": "get_temporal_patterns",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 122
        },
        {
          "name": "get_pattern_effectiveness",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 137
        },
        {
          "name": "get_analysis_status",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 154
        },
        {
          "name": "initialize_baseline",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 166
        },
        {
          "name": "get_adaptation_status",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 179
        },
        {
          "name": "analyze_observability_window",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 189
        },
        {
          "name": "trigger_adaptation_cycle",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 202
        },
        {
          "name": "get_pattern_library",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 212
        },
        {
          "name": "measure_adaptation_effectiveness",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 222
        },
        {
          "name": "get_improvement_report",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 235
        },
        {
          "name": "resume_after_review",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 248
        },
        {
          "name": "emergency_stop",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 258
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for self-observation service.\n\nImplements continuous observation and pattern detection to enable\nautonomous adaptation through stored insights."
    },
    "IncidentManagementServiceProtocol": {
      "name": "IncidentManagementServiceProtocol",
      "file": "ciris_engine/protocols/services/graph/incident_management.py",
      "line": 21,
      "bases": [
        "GraphServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "process_recent_incidents",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 28
        },
        {
          "name": "get_node_type",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 42
        },
        {
          "name": "store_in_graph",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 50
        },
        {
          "name": "query_graph",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 61
        },
        {
          "name": "start",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 73
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 77
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 81
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": false,
          "is_private": false,
          "line": 89
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": false,
          "is_private": false,
          "line": 97
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [
        "runtime_checkable"
      ],
      "docstring": "Protocol for incident management service.\n\nProcesses incidents from logs, detects patterns, identifies problems,\nand generates insights for continuous self-improvement."
    },
    "AuditServiceProtocol": {
      "name": "AuditServiceProtocol",
      "file": "ciris_engine/protocols/services/graph/audit.py",
      "line": 15,
      "bases": [
        "GraphServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "log_action",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 19
        },
        {
          "name": "log_event",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 26
        },
        {
          "name": "log_conscience_event",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 31
        },
        {
          "name": "get_audit_trail",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 38
        },
        {
          "name": "query_audit_trail",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 45
        },
        {
          "name": "verify_audit_integrity",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 50
        },
        {
          "name": "get_verification_report",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 55
        },
        {
          "name": "export_audit_data",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 60
        },
        {
          "name": "query_events",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 67
        },
        {
          "name": "get_event_by_id",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 78
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for audit service."
    },
    "MemoryServiceProtocol": {
      "name": "MemoryServiceProtocol",
      "file": "ciris_engine/protocols/services/graph/memory.py",
      "line": 15,
      "bases": [
        "GraphServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "memorize",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 19
        },
        {
          "name": "recall",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 24
        },
        {
          "name": "forget",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 29
        },
        {
          "name": "memorize_metric",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 34
        },
        {
          "name": "memorize_log",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 41
        },
        {
          "name": "recall_timeseries",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 48
        },
        {
          "name": "export_identity_context",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 60
        },
        {
          "name": "search",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 65
        },
        {
          "name": "create_edge",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 70
        },
        {
          "name": "get_node_edges",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 75
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for memory service - the three universal memory verbs."
    },
    "GraphConfigServiceProtocol": {
      "name": "GraphConfigServiceProtocol",
      "file": "ciris_engine/protocols/services/graph/config.py",
      "line": 12,
      "bases": [
        "GraphServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "get_config",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 16
        },
        {
          "name": "set_config",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 21
        },
        {
          "name": "list_configs",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 26
        },
        {
          "name": "register_config_listener",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 31
        },
        {
          "name": "unregister_config_listener",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 36
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for graph configuration service."
    },
    "TSDBConsolidationServiceProtocol": {
      "name": "TSDBConsolidationServiceProtocol",
      "file": "ciris_engine/protocols/services/graph/tsdb_consolidation.py",
      "line": 21,
      "bases": [
        "GraphServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "start",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 29
        },
        {
          "name": "stop",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 34
        },
        {
          "name": "is_healthy",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 39
        },
        {
          "name": "get_capabilities",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 48
        },
        {
          "name": "get_status",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 57
        },
        {
          "name": "get_node_type",
          "is_async": false,
          "is_abstract": true,
          "is_private": false,
          "line": 66
        },
        {
          "name": "get_summary_for_period",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 75
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [
        "runtime_checkable"
      ],
      "docstring": "Protocol for TSDB consolidation service.\n\nConsolidates TSDB telemetry nodes into 6-hour summaries for permanent storage.\nRuns every 6 hours and deletes raw nodes older than 24 hours."
    },
    "TelemetryServiceProtocol": {
      "name": "TelemetryServiceProtocol",
      "file": "ciris_engine/protocols/services/graph/telemetry.py",
      "line": 10,
      "bases": [
        "GraphServiceProtocol",
        "Protocol"
      ],
      "methods": [
        {
          "name": "record_metric",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 14
        },
        {
          "name": "query_metrics",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 25
        },
        {
          "name": "get_metric_summary",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 36
        },
        {
          "name": "get_metric_count",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 41
        },
        {
          "name": "get_telemetry_summary",
          "is_async": true,
          "is_abstract": true,
          "is_private": false,
          "line": 46
        }
      ],
      "is_protocol": true,
      "is_abstract": false,
      "decorators": [],
      "docstring": "Protocol for telemetry service."
    }
  }
}